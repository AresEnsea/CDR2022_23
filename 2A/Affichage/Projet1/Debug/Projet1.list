
Projet1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000674c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b3c  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008458  08008458  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008460  08008460  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008460  08008460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08008468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200000a4  0800850c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800850c  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f14  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003290  00000000  00000000  00033fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00037278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  000383f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027768  00000000  00000000  000393d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001508f  00000000  00000000  00060b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0844  00000000  00000000  00075bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  00166464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006904 	.word	0x08006904

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	08006904 	.word	0x08006904

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SCB_EnableICache+0x48>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005cc:	f3bf 8f4f 	dsb	sy
}
 80005d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d2:	f3bf 8f6f 	isb	sy
}
 80005d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SCB_EnableICache+0x48>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <SCB_EnableICache+0x48>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SCB_EnableDCache+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SCB_EnableDCache+0x84>)
 8000616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	0b5b      	lsrs	r3, r3, #13
 8000620:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000624:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800062e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	015a      	lsls	r2, r3, #5
 8000634:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000638:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <SCB_EnableDCache+0x84>)
 8000640:	4313      	orrs	r3, r2
 8000642:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	60ba      	str	r2, [r7, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1ef      	bne.n	8000630 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	60fa      	str	r2, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e5      	bne.n	8000626 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
}
 800065e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableDCache+0x84>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableDCache+0x84>)
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/* USER CODE BEGIN 1 */
	/* Enable the CPU Cache */
	/* Enable I-Cache */
	SCB_EnableICache();
 800068e:	f7ff ff91 	bl	80005b4 <SCB_EnableICache>
	/* Enable D-Cache */
	SCB_EnableDCache();
 8000692:	f7ff ffb5 	bl	8000600 <SCB_EnableDCache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 faa2 	bl	8000bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f891 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 f951 	bl	8000944 <MX_GPIO_Init>
  MX_CRC_Init();
 80006a2:	f000 f8fb 	bl	800089c <MX_CRC_Init>
  MX_DMA2D_Init();
 80006a6:	f000 f91b 	bl	80008e0 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */

  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 80006aa:	f005 f859 	bl	8005760 <BSP_SDRAM_Init>
  __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 80006ae:	4b3b      	ldr	r3, [pc, #236]	; (800079c <main+0x114>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a3a      	ldr	r2, [pc, #232]	; (800079c <main+0x114>)
 80006b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b38      	ldr	r3, [pc, #224]	; (800079c <main+0x114>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  BSP_TS_Init(480, 272); // Déclaration des pixels
 80006c6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80006ca:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80006ce:	f005 f9fd 	bl	8005acc <BSP_TS_Init>

  BSP_LCD_Init();
 80006d2:	f004 fae3 	bl	8004c9c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80006d6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80006da:	2000      	movs	r0, #0
 80006dc:	f004 fb76 	bl	8004dcc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 80006e0:	f004 fe26 	bl	8005330 <BSP_LCD_DisplayOn>

  BSP_LCD_SelectLayer(0);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f004 fbd1 	bl	8004e8c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80006ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80006ee:	f004 fc29 	bl	8004f44 <BSP_LCD_Clear>

  BSP_LCD_SetTextColor(0xffffffff);
 80006f2:	f04f 30ff 	mov.w	r0, #4294967295
 80006f6:	f004 fbd9 	bl	8004eac <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(0x00000000);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f004 fbee 	bl	8004edc <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8000700:	4827      	ldr	r0, [pc, #156]	; (80007a0 <main+0x118>)
 8000702:	f004 fc05 	bl	8004f10 <BSP_LCD_SetFont>

  BSP_LCD_DisplayStringAt(0, 20, (uint8_t *)"Bonjour", CENTER_MODE);
 8000706:	2301      	movs	r3, #1
 8000708:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <main+0x11c>)
 800070a:	2114      	movs	r1, #20
 800070c:	2000      	movs	r0, #0
 800070e:	f004 fc85 	bl	800501c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 200, (uint8_t *)"Appuyer sur l'ecran",CENTER_MODE);
 8000712:	2301      	movs	r3, #1
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <main+0x120>)
 8000716:	21c8      	movs	r1, #200	; 0xc8
 8000718:	2000      	movs	r0, #0
 800071a:	f004 fc7f 	bl	800501c <BSP_LCD_DisplayStringAt>

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  BSP_TS_GetState(&ts);
 800071e:	4823      	ldr	r0, [pc, #140]	; (80007ac <main+0x124>)
 8000720:	f005 fa14 	bl	8005b4c <BSP_TS_GetState>
	  if(ts.touchDetected >= 1)
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <main+0x124>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0f8      	beq.n	800071e <main+0x96>
	  {
		  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800072c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000730:	f004 fc08 	bl	8004f44 <BSP_LCD_Clear>
		  int BSP = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
		  while(BSP == 0)
 8000738:	e02c      	b.n	8000794 <main+0x10c>
		  {
			  BSP_LCD_FillRect(400, 0, 80, 30);
 800073a:	231e      	movs	r3, #30
 800073c:	2250      	movs	r2, #80	; 0x50
 800073e:	2100      	movs	r1, #0
 8000740:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000744:	f004 fd7a 	bl	800523c <BSP_LCD_FillRect>
			  BSP_LCD_DisplayStringAt(0, 200, (uint8_t *)"Bienvenue",CENTER_MODE);
 8000748:	2301      	movs	r3, #1
 800074a:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <main+0x128>)
 800074c:	21c8      	movs	r1, #200	; 0xc8
 800074e:	2000      	movs	r0, #0
 8000750:	f004 fc64 	bl	800501c <BSP_LCD_DisplayStringAt>

			  BSP_TS_GetState(&ts);
 8000754:	4815      	ldr	r0, [pc, #84]	; (80007ac <main+0x124>)
 8000756:	f005 f9f9 	bl	8005b4c <BSP_TS_GetState>
			  sprintf(xTouchStr, "X: %3d", ts.touchX[0]);
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <main+0x124>)
 800075c:	885b      	ldrh	r3, [r3, #2]
 800075e:	461a      	mov	r2, r3
 8000760:	4914      	ldr	r1, [pc, #80]	; (80007b4 <main+0x12c>)
 8000762:	4815      	ldr	r0, [pc, #84]	; (80007b8 <main+0x130>)
 8000764:	f005 fc60 	bl	8006028 <siprintf>
			  BSP_LCD_DisplayStringAt(20, 20, (uint8_t *)xTouchStr, LEFT_MODE);
 8000768:	2303      	movs	r3, #3
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <main+0x130>)
 800076c:	2114      	movs	r1, #20
 800076e:	2014      	movs	r0, #20
 8000770:	f004 fc54 	bl	800501c <BSP_LCD_DisplayStringAt>

			  sprintf(xTouchStr, "Y: %3d", ts.touchY[0]);
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <main+0x124>)
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	461a      	mov	r2, r3
 800077a:	4910      	ldr	r1, [pc, #64]	; (80007bc <main+0x134>)
 800077c:	480e      	ldr	r0, [pc, #56]	; (80007b8 <main+0x130>)
 800077e:	f005 fc53 	bl	8006028 <siprintf>
			  BSP_LCD_DisplayStringAt(20, 60, (uint8_t *)xTouchStr, LEFT_MODE);
 8000782:	2303      	movs	r3, #3
 8000784:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <main+0x130>)
 8000786:	213c      	movs	r1, #60	; 0x3c
 8000788:	2014      	movs	r0, #20
 800078a:	f004 fc47 	bl	800501c <BSP_LCD_DisplayStringAt>
			  HAL_Delay(5);
 800078e:	2005      	movs	r0, #5
 8000790:	f000 fa82 	bl	8000c98 <HAL_Delay>
		  while(BSP == 0)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0cf      	beq.n	800073a <main+0xb2>
	  BSP_TS_GetState(&ts);
 800079a:	e7c0      	b.n	800071e <main+0x96>
 800079c:	40023800 	.word	0x40023800
 80007a0:	2000000c 	.word	0x2000000c
 80007a4:	0800691c 	.word	0x0800691c
 80007a8:	08006924 	.word	0x08006924
 80007ac:	20000124 	.word	0x20000124
 80007b0:	08006938 	.word	0x08006938
 80007b4:	08006944 	.word	0x08006944
 80007b8:	20000150 	.word	0x20000150
 80007bc:	0800694c 	.word	0x0800694c

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	; 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f005 fc22 	bl	8006018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <SystemClock_Config+0xd4>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	4a2a      	ldr	r2, [pc, #168]	; (8000894 <SystemClock_Config+0xd4>)
 80007ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ee:	6413      	str	r3, [r2, #64]	; 0x40
 80007f0:	4b28      	ldr	r3, [pc, #160]	; (8000894 <SystemClock_Config+0xd4>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	4b26      	ldr	r3, [pc, #152]	; (8000898 <SystemClock_Config+0xd8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a25      	ldr	r2, [pc, #148]	; (8000898 <SystemClock_Config+0xd8>)
 8000802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <SystemClock_Config+0xd8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000814:	2301      	movs	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000828:	2319      	movs	r3, #25
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800082c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000836:	2309      	movs	r3, #9
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fbf0 	bl	8003024 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800084a:	f000 f8b9 	bl	80009c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084e:	f002 fb99 	bl	8002f84 <HAL_PWREx_EnableOverDrive>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000858:	f000 f8b2 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000868:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2106      	movs	r1, #6
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fe76 	bl	800356c <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000886:	f000 f89b 	bl	80009c0 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	; 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_CRC_Init+0x3c>)
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <MX_CRC_Init+0x40>)
 80008a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_CRC_Init+0x3c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_CRC_Init+0x3c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_CRC_Init+0x3c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_CRC_Init+0x3c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_CRC_Init+0x3c>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_CRC_Init+0x3c>)
 80008c6:	f000 fb1d 	bl	8000f04 <HAL_CRC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008d0:	f000 f876 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000c0 	.word	0x200000c0
 80008dc:	40023000 	.word	0x40023000

080008e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_DMA2D_Init+0x5c>)
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <MX_DMA2D_Init+0x60>)
 80008e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_DMA2D_Init+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_DMA2D_Init+0x5c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_DMA2D_Init+0x5c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_DMA2D_Init+0x5c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_DMA2D_Init+0x5c>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_DMA2D_Init+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_DMA2D_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <MX_DMA2D_Init+0x5c>)
 8000916:	f000 fd9d 	bl	8001454 <HAL_DMA2D_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000920:	f000 f84e 	bl	80009c0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000924:	2101      	movs	r1, #1
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_DMA2D_Init+0x5c>)
 8000928:	f000 fef2 	bl	8001710 <HAL_DMA2D_ConfigLayer>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000932:	f000 f845 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000e4 	.word	0x200000e4
 8000940:	4002b000 	.word	0x4002b000

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_GPIO_Init+0x74>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <MX_GPIO_Init+0x74>)
 8000960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_GPIO_Init+0x74>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_GPIO_Init+0x74>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <MX_GPIO_Init+0x74>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_GPIO_Init+0x74>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2101      	movs	r1, #1
 800098e:	480b      	ldr	r0, [pc, #44]	; (80009bc <MX_GPIO_Init+0x78>)
 8000990:	f001 f998 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000994:	2301      	movs	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0x78>)
 80009ac:	f000 ffde 	bl	800196c <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40022000 	.word	0x40022000

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x44>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_MspInit+0x44>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_MspInit+0x44>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x44>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x44>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x44>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_CRC_MspInit+0x38>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d10b      	bne.n	8000a3e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_CRC_MspInit+0x3c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <HAL_CRC_MspInit+0x3c>)
 8000a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <HAL_CRC_MspInit+0x3c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023000 	.word	0x40023000
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_DMA2D_MspInit+0x38>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10b      	bne.n	8000a7e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_DMA2D_MspInit+0x3c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <HAL_DMA2D_MspInit+0x3c>)
 8000a6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <HAL_DMA2D_MspInit+0x3c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	4002b000 	.word	0x4002b000
 8000a90:	40023800 	.word	0x40023800

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f8ba 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <LTDC_IRQHandler>:
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <LTDC_IRQHandler+0x10>)
 8000aee:	f001 ff93 	bl	8002a18 <HAL_LTDC_IRQHandler>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001c0 	.word	0x200001c0

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f005 fa4a 	bl	8005fc4 <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20050000 	.word	0x20050000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	2000015c 	.word	0x2000015c
 8000b64:	20000450 	.word	0x20000450

08000b68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb6:	f7ff ffd7 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f005 fa09 	bl	8005fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fd63 	bl	8000688 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000bd0:	08008468 	.word	0x08008468
  ldr r2, =_sbss
 8000bd4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000bd8:	2000044c 	.word	0x2000044c

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>

08000bde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be2:	2003      	movs	r0, #3
 8000be4:	f000 f94c 	bl	8000e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be8:	200f      	movs	r0, #15
 8000bea:	f000 f805 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bee:	f7ff feed 	bl	80009cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f967 	bl	8000eea <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f92f 	bl	8000e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000160 	.word	0x20000160

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000160 	.word	0x20000160

08000c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca0:	f7ff ffee 	bl	8000c80 <HAL_GetTick>
 8000ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb0:	d005      	beq.n	8000cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_Delay+0x44>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cbe:	bf00      	nop
 8000cc0:	f7ff ffde 	bl	8000c80 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d8f7      	bhi.n	8000cc0 <HAL_Delay+0x28>
  {
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <__NVIC_SetPriorityGrouping>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x40>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	05fa0000 	.word	0x05fa0000

08000d28 <__NVIC_GetPriorityGrouping>:
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_EnableIRQ>:
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0b      	blt.n	8000d6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <__NVIC_EnableIRQ+0x38>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e4c:	d301      	bcc.n	8000e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00f      	b.n	8000e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <SysTick_Config+0x40>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f7ff ff8e 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SysTick_Config+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SysTick_Config+0x40>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	e000e010 	.word	0xe000e010

08000e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff29 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea8:	f7ff ff3e 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f7ff ff8e 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff5d 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff31 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffa2 	bl	8000e3c <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e054      	b.n	8000fc0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7f5b      	ldrb	r3, [r3, #29]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d105      	bne.n	8000f2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fd74 	bl	8000a14 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	791b      	ldrb	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10c      	bne.n	8000f54 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <HAL_CRC_Init+0xc4>)
 8000f40:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0218 	bic.w	r2, r2, #24
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	e00c      	b.n	8000f6e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6899      	ldr	r1, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f834 	bl	8000fcc <HAL_CRCEx_Polynomial_Set>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e028      	b.n	8000fc0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	795b      	ldrb	r3, [r3, #5]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d105      	bne.n	8000f82 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	e004      	b.n	8000f8c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6912      	ldr	r2, [r2, #16]
 8000f8a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699a      	ldr	r2, [r3, #24]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	04c11db7 	.word	0x04c11db7

08000fcc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000fdc:	231f      	movs	r3, #31
 8000fde:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000fe0:	bf00      	nop
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	613a      	str	r2, [r7, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d009      	beq.n	8001000 <HAL_CRCEx_Polynomial_Set+0x34>
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b18      	cmp	r3, #24
 8001004:	d846      	bhi.n	8001094 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	0800109b 	.word	0x0800109b
 8001010:	08001095 	.word	0x08001095
 8001014:	08001095 	.word	0x08001095
 8001018:	08001095 	.word	0x08001095
 800101c:	08001095 	.word	0x08001095
 8001020:	08001095 	.word	0x08001095
 8001024:	08001095 	.word	0x08001095
 8001028:	08001095 	.word	0x08001095
 800102c:	08001089 	.word	0x08001089
 8001030:	08001095 	.word	0x08001095
 8001034:	08001095 	.word	0x08001095
 8001038:	08001095 	.word	0x08001095
 800103c:	08001095 	.word	0x08001095
 8001040:	08001095 	.word	0x08001095
 8001044:	08001095 	.word	0x08001095
 8001048:	08001095 	.word	0x08001095
 800104c:	0800107d 	.word	0x0800107d
 8001050:	08001095 	.word	0x08001095
 8001054:	08001095 	.word	0x08001095
 8001058:	08001095 	.word	0x08001095
 800105c:	08001095 	.word	0x08001095
 8001060:	08001095 	.word	0x08001095
 8001064:	08001095 	.word	0x08001095
 8001068:	08001095 	.word	0x08001095
 800106c:	08001071 	.word	0x08001071
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	2b06      	cmp	r3, #6
 8001074:	d913      	bls.n	800109e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800107a:	e010      	b.n	800109e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	2b07      	cmp	r3, #7
 8001080:	d90f      	bls.n	80010a2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001086:	e00c      	b.n	80010a2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	d90b      	bls.n	80010a6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001092:	e008      	b.n	80010a6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	75fb      	strb	r3, [r7, #23]
      break;
 8001098:	e006      	b.n	80010a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800109a:	bf00      	nop
 800109c:	e004      	b.n	80010a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800109e:	bf00      	nop
 80010a0:	e002      	b.n	80010a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80010a2:	bf00      	nop
 80010a4:	e000      	b.n	80010a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80010a6:	bf00      	nop
  }
  if (status == HAL_OK)
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10d      	bne.n	80010ca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f023 0118 	bic.w	r1, r3, #24
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff fdcc 	bl	8000c80 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e099      	b.n	8001228 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2202      	movs	r2, #2
 80010f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0201 	bic.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001114:	e00f      	b.n	8001136 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001116:	f7ff fdb3 	bl	8000c80 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b05      	cmp	r3, #5
 8001122:	d908      	bls.n	8001136 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2220      	movs	r2, #32
 8001128:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e078      	b.n	8001228 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e8      	bne.n	8001116 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_DMA_Init+0x158>)
 8001150:	4013      	ands	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001162:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4313      	orrs	r3, r2
 8001186:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	2b04      	cmp	r3, #4
 800118e:	d107      	bne.n	80011a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4313      	orrs	r3, r2
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4313      	orrs	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f023 0307 	bic.w	r3, r3, #7
 80011b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	4313      	orrs	r3, r2
 80011c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d117      	bne.n	80011fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00e      	beq.n	80011fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f8bd 	bl	800135c <DMA_CheckFifoParam>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2240      	movs	r2, #64	; 0x40
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011f6:	2301      	movs	r3, #1
 80011f8:	e016      	b.n	8001228 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f874 	bl	80012f0 <DMA_CalcBaseAndBitshift>
 8001208:	4603      	mov	r3, r0
 800120a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001210:	223f      	movs	r2, #63	; 0x3f
 8001212:	409a      	lsls	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	f010803f 	.word	0xf010803f

08001234 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e050      	b.n	80012e8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d101      	bne.n	8001256 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001252:	2302      	movs	r3, #2
 8001254:	e048      	b.n	80012e8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0201 	bic.w	r2, r2, #1
 8001264:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2221      	movs	r2, #33	; 0x21
 8001294:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f82a 	bl	80012f0 <DMA_CalcBaseAndBitshift>
 800129c:	4603      	mov	r3, r0
 800129e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a4:	223f      	movs	r2, #63	; 0x3f
 80012a6:	409a      	lsls	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3b10      	subs	r3, #16
 8001300:	4a13      	ldr	r2, [pc, #76]	; (8001350 <DMA_CalcBaseAndBitshift+0x60>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <DMA_CalcBaseAndBitshift+0x64>)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d908      	bls.n	8001330 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <DMA_CalcBaseAndBitshift+0x68>)
 8001326:	4013      	ands	r3, r2
 8001328:	1d1a      	adds	r2, r3, #4
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	659a      	str	r2, [r3, #88]	; 0x58
 800132e:	e006      	b.n	800133e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <DMA_CalcBaseAndBitshift+0x68>)
 8001338:	4013      	ands	r3, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	aaaaaaab 	.word	0xaaaaaaab
 8001354:	08006964 	.word	0x08006964
 8001358:	fffffc00 	.word	0xfffffc00

0800135c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d11f      	bne.n	80013b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d856      	bhi.n	800142a <DMA_CheckFifoParam+0xce>
 800137c:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <DMA_CheckFifoParam+0x28>)
 800137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001382:	bf00      	nop
 8001384:	08001395 	.word	0x08001395
 8001388:	080013a7 	.word	0x080013a7
 800138c:	08001395 	.word	0x08001395
 8001390:	0800142b 	.word	0x0800142b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d046      	beq.n	800142e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013a4:	e043      	b.n	800142e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013ae:	d140      	bne.n	8001432 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013b4:	e03d      	b.n	8001432 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013be:	d121      	bne.n	8001404 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d837      	bhi.n	8001436 <DMA_CheckFifoParam+0xda>
 80013c6:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <DMA_CheckFifoParam+0x70>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	080013dd 	.word	0x080013dd
 80013d0:	080013e3 	.word	0x080013e3
 80013d4:	080013dd 	.word	0x080013dd
 80013d8:	080013f5 	.word	0x080013f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
      break;
 80013e0:	e030      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d025      	beq.n	800143a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013f2:	e022      	b.n	800143a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013fc:	d11f      	bne.n	800143e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001402:	e01c      	b.n	800143e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d903      	bls.n	8001412 <DMA_CheckFifoParam+0xb6>
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d003      	beq.n	8001418 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001410:	e018      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
      break;
 8001416:	e015      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00e      	beq.n	8001442 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
      break;
 8001428:	e00b      	b.n	8001442 <DMA_CheckFifoParam+0xe6>
      break;
 800142a:	bf00      	nop
 800142c:	e00a      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;
 800142e:	bf00      	nop
 8001430:	e008      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;
 8001432:	bf00      	nop
 8001434:	e006      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;
 8001436:	bf00      	nop
 8001438:	e004      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;
 800143a:	bf00      	nop
 800143c:	e002      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;   
 800143e:	bf00      	nop
 8001440:	e000      	b.n	8001444 <DMA_CheckFifoParam+0xe8>
      break;
 8001442:	bf00      	nop
    }
  } 
  
  return status; 
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e039      	b.n	80014da <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff faea 	bl	8000a54 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	f023 0107 	bic.w	r1, r3, #7
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_DMA2D_Init+0x90>)
 80014bc:	4013      	ands	r3, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68d1      	ldr	r1, [r2, #12]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	430b      	orrs	r3, r1
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	ffffc000 	.word	0xffffc000

080014e8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_DMA2D_Start+0x1c>
 8001500:	2302      	movs	r3, #2
 8001502:	e018      	b.n	8001536 <HAL_DMA2D_Start+0x4e>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2202      	movs	r2, #2
 8001510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 f988 	bl	8001834 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d056      	beq.n	8001608 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800155a:	f7ff fb91 	bl	8000c80 <HAL_GetTick>
 800155e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001560:	e04b      	b.n	80015fa <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001570:	2b00      	cmp	r3, #0
 8001572:	d023      	beq.n	80015bc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0320 	and.w	r3, r3, #32
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001582:	f043 0202 	orr.w	r2, r3, #2
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2221      	movs	r2, #33	; 0x21
 80015a6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2204      	movs	r2, #4
 80015ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0a5      	b.n	8001708 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c2:	d01a      	beq.n	80015fa <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015c4:	f7ff fb5c 	bl	8000c80 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d302      	bcc.n	80015da <HAL_DMA2D_PollForTransfer+0x9c>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10f      	bne.n	80015fa <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015de:	f043 0220 	orr.w	r2, r3, #32
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2203      	movs	r2, #3
 80015ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e086      	b.n	8001708 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ac      	beq.n	8001562 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	f003 0320 	and.w	r3, r3, #32
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d061      	beq.n	80016ee <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800162a:	f7ff fb29 	bl	8000c80 <HAL_GetTick>
 800162e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001630:	e056      	b.n	80016e0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001640:	2b00      	cmp	r3, #0
 8001642:	d02e      	beq.n	80016a2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	f043 0204 	orr.w	r2, r3, #4
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001668:	f043 0202 	orr.w	r2, r3, #2
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d005      	beq.n	8001686 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167e:	f043 0201 	orr.w	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2229      	movs	r2, #41	; 0x29
 800168c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2204      	movs	r2, #4
 8001692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e032      	b.n	8001708 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a8:	d01a      	beq.n	80016e0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016aa:	f7ff fae9 	bl	8000c80 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d302      	bcc.n	80016c0 <HAL_DMA2D_PollForTransfer+0x182>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10f      	bne.n	80016e0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c4:	f043 0220 	orr.w	r2, r3, #32
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2203      	movs	r2, #3
 80016d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e013      	b.n	8001708 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0a1      	beq.n	8001632 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2212      	movs	r2, #18
 80016f4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_DMA2D_ConfigLayer+0x20>
 800172c:	2302      	movs	r3, #2
 800172e:	e079      	b.n	8001824 <HAL_DMA2D_ConfigLayer+0x114>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	3318      	adds	r3, #24
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800175a:	4b35      	ldr	r3, [pc, #212]	; (8001830 <HAL_DMA2D_ConfigLayer+0x120>)
 800175c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b0a      	cmp	r3, #10
 8001764:	d003      	beq.n	800176e <HAL_DMA2D_ConfigLayer+0x5e>
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b09      	cmp	r3, #9
 800176c:	d107      	bne.n	800177e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e005      	b.n	800178a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	061b      	lsls	r3, r3, #24
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	4313      	orrs	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d120      	bne.n	80017d2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43db      	mvns	r3, r3
 800179a:	ea02 0103 	and.w	r1, r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d003      	beq.n	80017c2 <HAL_DMA2D_ConfigLayer+0xb2>
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b09      	cmp	r3, #9
 80017c0:	d127      	bne.n	8001812 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
 80017d0:	e01f      	b.n	8001812 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69da      	ldr	r2, [r3, #28]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43db      	mvns	r3, r3
 80017dc:	ea02 0103 	and.w	r1, r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b0a      	cmp	r3, #10
 80017fa:	d003      	beq.n	8001804 <HAL_DMA2D_ConfigLayer+0xf4>
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b09      	cmp	r3, #9
 8001802:	d106      	bne.n	8001812 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001810:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	ff03000f 	.word	0xff03000f

08001834 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001834:	b480      	push	{r7}
 8001836:	b08b      	sub	sp, #44	; 0x2c
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	041a      	lsls	r2, r3, #16
 8001850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001852:	431a      	orrs	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800186c:	d174      	bne.n	8001958 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001874:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800187c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001884:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d108      	bne.n	80018a6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	431a      	orrs	r2, r3
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	4313      	orrs	r3, r2
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
 80018a4:	e053      	b.n	800194e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ba:	e048      	b.n	800194e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d111      	bne.n	80018e8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	0cdb      	lsrs	r3, r3, #19
 80018c8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	0a9b      	lsrs	r3, r3, #10
 80018ce:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	08db      	lsrs	r3, r3, #3
 80018d4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	02db      	lsls	r3, r3, #11
 80018de:	4313      	orrs	r3, r2
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
 80018e6:	e032      	b.n	800194e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d117      	bne.n	8001920 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	0fdb      	lsrs	r3, r3, #31
 80018f4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	0cdb      	lsrs	r3, r3, #19
 80018fa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	0adb      	lsrs	r3, r3, #11
 8001900:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	029b      	lsls	r3, r3, #10
 8001910:	431a      	orrs	r2, r3
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	03db      	lsls	r3, r3, #15
 8001916:	4313      	orrs	r3, r2
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	4313      	orrs	r3, r2
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	e016      	b.n	800194e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	0f1b      	lsrs	r3, r3, #28
 8001924:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	0d1b      	lsrs	r3, r3, #20
 800192a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	0b1b      	lsrs	r3, r3, #12
 8001930:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	011a      	lsls	r2, r3, #4
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	431a      	orrs	r2, r3
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	031b      	lsls	r3, r3, #12
 8001946:	4313      	orrs	r3, r2
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	4313      	orrs	r3, r2
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001956:	e003      	b.n	8001960 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	60da      	str	r2, [r3, #12]
}
 8001960:	bf00      	nop
 8001962:	372c      	adds	r7, #44	; 0x2c
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	e175      	b.n	8001c78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f040 8164 	bne.w	8001c72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d005      	beq.n	80019c2 <HAL_GPIO_Init+0x56>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d130      	bne.n	8001a24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 0201 	and.w	r2, r3, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d017      	beq.n	8001a60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d123      	bne.n	8001ab4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	08da      	lsrs	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3208      	adds	r2, #8
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80be 	beq.w	8001c72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_GPIO_Init+0x324>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a65      	ldr	r2, [pc, #404]	; (8001c90 <HAL_GPIO_Init+0x324>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_GPIO_Init+0x324>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b0e:	4a61      	ldr	r2, [pc, #388]	; (8001c94 <HAL_GPIO_Init+0x328>)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a58      	ldr	r2, [pc, #352]	; (8001c98 <HAL_GPIO_Init+0x32c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d037      	beq.n	8001baa <HAL_GPIO_Init+0x23e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a57      	ldr	r2, [pc, #348]	; (8001c9c <HAL_GPIO_Init+0x330>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d031      	beq.n	8001ba6 <HAL_GPIO_Init+0x23a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a56      	ldr	r2, [pc, #344]	; (8001ca0 <HAL_GPIO_Init+0x334>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02b      	beq.n	8001ba2 <HAL_GPIO_Init+0x236>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a55      	ldr	r2, [pc, #340]	; (8001ca4 <HAL_GPIO_Init+0x338>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d025      	beq.n	8001b9e <HAL_GPIO_Init+0x232>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_GPIO_Init+0x33c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01f      	beq.n	8001b9a <HAL_GPIO_Init+0x22e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_GPIO_Init+0x340>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_GPIO_Init+0x22a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <HAL_GPIO_Init+0x344>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0x226>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <HAL_GPIO_Init+0x348>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <HAL_GPIO_Init+0x222>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a50      	ldr	r2, [pc, #320]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <HAL_GPIO_Init+0x21e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x350>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_Init+0x21a>
 8001b82:	2309      	movs	r3, #9
 8001b84:	e012      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b86:	230a      	movs	r3, #10
 8001b88:	e010      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	e00e      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b8e:	2307      	movs	r3, #7
 8001b90:	e00c      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b92:	2306      	movs	r3, #6
 8001b94:	e00a      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b96:	2305      	movs	r3, #5
 8001b98:	e008      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001baa:	2300      	movs	r3, #0
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f002 0203 	and.w	r2, r2, #3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4093      	lsls	r3, r2
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bbc:	4935      	ldr	r1, [pc, #212]	; (8001c94 <HAL_GPIO_Init+0x328>)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bee:	4a34      	ldr	r2, [pc, #208]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c18:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c42:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	f67f ae86 	bls.w	800198c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40021400 	.word	0x40021400
 8001cb0:	40021800 	.word	0x40021800
 8001cb4:	40021c00 	.word	0x40021c00
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	40022400 	.word	0x40022400
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e07f      	b.n	8001e0a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8a9 	bl	8001e76 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2224      	movs	r2, #36	; 0x24
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	e006      	b.n	8001d80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d104      	bne.n	8001d92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <HAL_I2C_Init+0x11c>)
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69d9      	ldr	r1, [r3, #28]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1a      	ldr	r2, [r3, #32]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	02008000 	.word	0x02008000

08001e18 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e021      	b.n	8001e6e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2224      	movs	r2, #36	; 0x24
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f821 	bl	8001e8a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	4611      	mov	r1, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	817b      	strh	r3, [r7, #10]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	813b      	strh	r3, [r7, #8]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	f040 80f9 	bne.w	80020ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_I2C_Mem_Write+0x34>
 8001ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0ed      	b.n	80020bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_I2C_Mem_Write+0x4e>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e0e6      	b.n	80020bc <HAL_I2C_Mem_Write+0x21c>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ef6:	f7fe fec3 	bl	8000c80 <HAL_GetTick>
 8001efa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2319      	movs	r3, #25
 8001f02:	2201      	movs	r2, #1
 8001f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fad1 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0d1      	b.n	80020bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2221      	movs	r2, #33	; 0x21
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2240      	movs	r2, #64	; 0x40
 8001f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a3a      	ldr	r2, [r7, #32]
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f40:	88f8      	ldrh	r0, [r7, #6]
 8001f42:	893a      	ldrh	r2, [r7, #8]
 8001f44:	8979      	ldrh	r1, [r7, #10]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f9e1 	bl	8002318 <I2C_RequestMemoryWrite>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0a9      	b.n	80020bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2bff      	cmp	r3, #255	; 0xff
 8001f70:	d90e      	bls.n	8001f90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	22ff      	movs	r2, #255	; 0xff
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	8979      	ldrh	r1, [r7, #10]
 8001f80:	2300      	movs	r3, #0
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fc2d 	bl	80027e8 <I2C_TransferConfig>
 8001f8e:	e00f      	b.n	8001fb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	8979      	ldrh	r1, [r7, #10]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fc1c 	bl	80027e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fabb 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e07b      	b.n	80020bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d034      	beq.n	8002068 <HAL_I2C_Mem_Write+0x1c8>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	2b00      	cmp	r3, #0
 8002004:	d130      	bne.n	8002068 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	2200      	movs	r2, #0
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fa4d 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e04d      	b.n	80020bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2bff      	cmp	r3, #255	; 0xff
 8002028:	d90e      	bls.n	8002048 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	22ff      	movs	r2, #255	; 0xff
 800202e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002034:	b2da      	uxtb	r2, r3
 8002036:	8979      	ldrh	r1, [r7, #10]
 8002038:	2300      	movs	r3, #0
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fbd1 	bl	80027e8 <I2C_TransferConfig>
 8002046:	e00f      	b.n	8002068 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	b2da      	uxtb	r2, r3
 8002058:	8979      	ldrh	r1, [r7, #10]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fbc0 	bl	80027e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d19e      	bne.n	8001fb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fa9a 	bl	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e01a      	b.n	80020bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2220      	movs	r2, #32
 800208c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_I2C_Mem_Write+0x224>)
 800209a:	400b      	ands	r3, r1
 800209c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020ba:	2302      	movs	r3, #2
  }
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	fe00e800 	.word	0xfe00e800

080020c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	4608      	mov	r0, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	817b      	strh	r3, [r7, #10]
 80020da:	460b      	mov	r3, r1
 80020dc:	813b      	strh	r3, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	f040 80fd 	bne.w	80022ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_I2C_Mem_Read+0x34>
 80020f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002102:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0f1      	b.n	80022ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_I2C_Mem_Read+0x4e>
 8002112:	2302      	movs	r3, #2
 8002114:	e0ea      	b.n	80022ec <HAL_I2C_Mem_Read+0x224>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800211e:	f7fe fdaf 	bl	8000c80 <HAL_GetTick>
 8002122:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2319      	movs	r3, #25
 800212a:	2201      	movs	r2, #1
 800212c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f9bd 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0d5      	b.n	80022ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2222      	movs	r2, #34	; 0x22
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2240      	movs	r2, #64	; 0x40
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a3a      	ldr	r2, [r7, #32]
 800215a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002168:	88f8      	ldrh	r0, [r7, #6]
 800216a:	893a      	ldrh	r2, [r7, #8]
 800216c:	8979      	ldrh	r1, [r7, #10]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	4603      	mov	r3, r0
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f921 	bl	80023c0 <I2C_RequestMemoryRead>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0ad      	b.n	80022ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	2bff      	cmp	r3, #255	; 0xff
 8002198:	d90e      	bls.n	80021b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	22ff      	movs	r2, #255	; 0xff
 800219e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	8979      	ldrh	r1, [r7, #10]
 80021a8:	4b52      	ldr	r3, [pc, #328]	; (80022f4 <HAL_I2C_Mem_Read+0x22c>)
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fb19 	bl	80027e8 <I2C_TransferConfig>
 80021b6:	e00f      	b.n	80021d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	8979      	ldrh	r1, [r7, #10]
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_I2C_Mem_Read+0x22c>)
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fb08 	bl	80027e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	2200      	movs	r2, #0
 80021e0:	2104      	movs	r1, #4
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f964 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07c      	b.n	80022ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d034      	beq.n	8002298 <HAL_I2C_Mem_Read+0x1d0>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	2b00      	cmp	r3, #0
 8002234:	d130      	bne.n	8002298 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	2200      	movs	r2, #0
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f935 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e04d      	b.n	80022ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	2bff      	cmp	r3, #255	; 0xff
 8002258:	d90e      	bls.n	8002278 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	22ff      	movs	r2, #255	; 0xff
 800225e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002264:	b2da      	uxtb	r2, r3
 8002266:	8979      	ldrh	r1, [r7, #10]
 8002268:	2300      	movs	r3, #0
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fab9 	bl	80027e8 <I2C_TransferConfig>
 8002276:	e00f      	b.n	8002298 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002286:	b2da      	uxtb	r2, r3
 8002288:	8979      	ldrh	r1, [r7, #10]
 800228a:	2300      	movs	r3, #0
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 faa8 	bl	80027e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d19a      	bne.n	80021d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f982 	bl	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e01a      	b.n	80022ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2220      	movs	r2, #32
 80022bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_I2C_Mem_Read+0x230>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	80002400 	.word	0x80002400
 80022f8:	fe00e800 	.word	0xfe00e800

080022fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230a:	b2db      	uxtb	r3, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4603      	mov	r3, r0
 8002328:	817b      	strh	r3, [r7, #10]
 800232a:	460b      	mov	r3, r1
 800232c:	813b      	strh	r3, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	8979      	ldrh	r1, [r7, #10]
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <I2C_RequestMemoryWrite+0xa4>)
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fa51 	bl	80027e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	69b9      	ldr	r1, [r7, #24]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f8f0 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e02c      	b.n	80023b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d105      	bne.n	800236c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002360:	893b      	ldrh	r3, [r7, #8]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
 800236a:	e015      	b.n	8002398 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800236c:	893b      	ldrh	r3, [r7, #8]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	b29b      	uxth	r3, r3
 8002372:	b2da      	uxtb	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	69b9      	ldr	r1, [r7, #24]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8d6 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e012      	b.n	80023b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800238e:	893b      	ldrh	r3, [r7, #8]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2200      	movs	r2, #0
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f884 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	80002000 	.word	0x80002000

080023c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	817b      	strh	r3, [r7, #10]
 80023d2:	460b      	mov	r3, r1
 80023d4:	813b      	strh	r3, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	8979      	ldrh	r1, [r7, #10]
 80023e0:	4b20      	ldr	r3, [pc, #128]	; (8002464 <I2C_RequestMemoryRead+0xa4>)
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2300      	movs	r3, #0
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f9fe 	bl	80027e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f89d 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e02c      	b.n	800245a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d105      	bne.n	8002412 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002406:	893b      	ldrh	r3, [r7, #8]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
 8002410:	e015      	b.n	800243e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002412:	893b      	ldrh	r3, [r7, #8]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	b29b      	uxth	r3, r3
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f883 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e012      	b.n	800245a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002434:	893b      	ldrh	r3, [r7, #8]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2200      	movs	r2, #0
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f831 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	80002000 	.word	0x80002000

08002468 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d103      	bne.n	8002486 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d007      	beq.n	80024a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	619a      	str	r2, [r3, #24]
  }
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c0:	e022      	b.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d01e      	beq.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ca:	f7fe fbd9 	bl	8000c80 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d302      	bcc.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d113      	bne.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e00f      	b.n	8002528 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4013      	ands	r3, r2
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	bf0c      	ite	eq
 8002518:	2301      	moveq	r3, #1
 800251a:	2300      	movne	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	429a      	cmp	r2, r3
 8002524:	d0cd      	beq.n	80024c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800253c:	e02c      	b.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f870 	bl	8002628 <I2C_IsErrorOccurred>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e02a      	b.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d01e      	beq.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255a:	f7fe fb91 	bl	8000c80 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d113      	bne.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d1cb      	bne.n	800253e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025bc:	e028      	b.n	8002610 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f830 	bl	8002628 <I2C_IsErrorOccurred>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e026      	b.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7fe fb55 	bl	8000c80 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d113      	bne.n	8002610 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e007      	b.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b20      	cmp	r3, #32
 800261c:	d1cf      	bne.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d068      	beq.n	8002726 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800265c:	e049      	b.n	80026f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d045      	beq.n	80026f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002666:	f7fe fb0b 	bl	8000c80 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d302      	bcc.n	800267c <I2C_IsErrorOccurred+0x54>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d13a      	bne.n	80026f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800268e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800269a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269e:	d121      	bne.n	80026e4 <I2C_IsErrorOccurred+0xbc>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a6:	d01d      	beq.n	80026e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d01a      	beq.n	80026e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026be:	f7fe fadf 	bl	8000c80 <HAL_GetTick>
 80026c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c4:	e00e      	b.n	80026e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026c6:	f7fe fadb 	bl	8000c80 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b19      	cmp	r3, #25
 80026d2:	d907      	bls.n	80026e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	f043 0320 	orr.w	r3, r3, #32
 80026da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80026e2:	e006      	b.n	80026f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d1e9      	bne.n	80026c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d003      	beq.n	8002708 <I2C_IsErrorOccurred+0xe0>
 8002700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0aa      	beq.n	800265e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2220      	movs	r2, #32
 8002716:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800276a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800278c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01c      	beq.n	80027d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff fe63 	bl	8002468 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <I2C_IsErrorOccurred+0x1bc>)
 80027ae:	400b      	ands	r3, r1
 80027b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3728      	adds	r7, #40	; 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	fe00e800 	.word	0xfe00e800

080027e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	817b      	strh	r3, [r7, #10]
 80027f6:	4613      	mov	r3, r2
 80027f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002800:	7a7b      	ldrb	r3, [r7, #9]
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002808:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	4313      	orrs	r3, r2
 8002812:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002816:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	0d5b      	lsrs	r3, r3, #21
 8002822:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <I2C_TransferConfig+0x60>)
 8002828:	430b      	orrs	r3, r1
 800282a:	43db      	mvns	r3, r3
 800282c:	ea02 0103 	and.w	r1, r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	03ff63ff 	.word	0x03ff63ff

0800284c <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e0c7      	b.n	80029f6 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8c2 	bl	8002a04 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002896:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6999      	ldr	r1, [r3, #24]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80028ac:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <HAL_LTDC_Init+0x1b4>)
 80028c8:	400b      	ands	r3, r1
 80028ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	041b      	lsls	r3, r3, #16
 80028d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68d9      	ldr	r1, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b42      	ldr	r3, [pc, #264]	; (8002a00 <HAL_LTDC_Init+0x1b4>)
 80028f6:	400b      	ands	r3, r1
 80028f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	041b      	lsls	r3, r3, #16
 8002900:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68d9      	ldr	r1, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1a      	ldr	r2, [r3, #32]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6919      	ldr	r1, [r3, #16]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_LTDC_Init+0x1b4>)
 8002924:	400b      	ands	r3, r1
 8002926:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	041b      	lsls	r3, r3, #16
 800292e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6959      	ldr	r1, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_LTDC_Init+0x1b4>)
 8002952:	400b      	ands	r3, r1
 8002954:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6959      	ldr	r1, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0204 	orr.w	r2, r2, #4
 80029c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0202 	orr.w	r2, r2, #2
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	f000f800 	.word	0xf000f800

08002a04 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d025      	beq.n	8002a7a <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01e      	beq.n	8002a7a <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0204 	bic.w	r2, r2, #4
 8002a4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2204      	movs	r2, #4
 8002a52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2204      	movs	r2, #4
 8002a68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f87b 	bl	8002b70 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d025      	beq.n	8002ad4 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01e      	beq.n	8002ad4 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0202 	bic.w	r2, r2, #2
 8002aa4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ab4:	f043 0202 	orr.w	r2, r3, #2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f84e 	bl	8002b70 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01d      	beq.n	8002b1e <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d016      	beq.n	8002b1e <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2201      	movs	r2, #1
 8002b06:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f833 	bl	8002b84 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01d      	beq.n	8002b68 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0208 	bic.w	r2, r2, #8
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2208      	movs	r2, #8
 8002b50:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f818 	bl	8002b98 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002bac:	b5b0      	push	{r4, r5, r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_LTDC_ConfigLayer+0x1a>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e02c      	b.n	8002c20 <HAL_LTDC_ConfigLayer+0x74>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2134      	movs	r1, #52	; 0x34
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4614      	mov	r4, r2
 8002bea:	461d      	mov	r5, r3
 8002bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f81f 	bl	8002c44 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bdb0      	pop	{r4, r5, r7, pc}

08002c28 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002c36:	b2db      	uxtb	r3, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6c:	4413      	add	r3, r2
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	01db      	lsls	r3, r3, #7
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3384      	adds	r3, #132	; 0x84
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	4611      	mov	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	01d2      	lsls	r2, r2, #7
 8002c8c:	440a      	add	r2, r1
 8002c8e:	3284      	adds	r2, #132	; 0x84
 8002c90:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002c94:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca6:	4413      	add	r3, r2
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	01db      	lsls	r3, r3, #7
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3384      	adds	r3, #132	; 0x84
 8002cb8:	4619      	mov	r1, r3
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cce:	4413      	add	r3, r2
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	01db      	lsls	r3, r3, #7
 8002cde:	4413      	add	r3, r2
 8002ce0:	3384      	adds	r3, #132	; 0x84
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	4611      	mov	r1, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	01d2      	lsls	r2, r2, #7
 8002cee:	440a      	add	r2, r1
 8002cf0:	3284      	adds	r2, #132	; 0x84
 8002cf2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002cf6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d06:	4413      	add	r3, r2
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	01db      	lsls	r3, r3, #7
 8002d14:	440b      	add	r3, r1
 8002d16:	3384      	adds	r3, #132	; 0x84
 8002d18:	4619      	mov	r1, r3
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	01db      	lsls	r3, r3, #7
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3384      	adds	r3, #132	; 0x84
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	4611      	mov	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	01d2      	lsls	r2, r2, #7
 8002d3a:	440a      	add	r2, r1
 8002d3c:	3284      	adds	r2, #132	; 0x84
 8002d3e:	f023 0307 	bic.w	r3, r3, #7
 8002d42:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	01db      	lsls	r3, r3, #7
 8002d4e:	4413      	add	r3, r2
 8002d50:	3384      	adds	r3, #132	; 0x84
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	01db      	lsls	r3, r3, #7
 8002d80:	4413      	add	r3, r2
 8002d82:	3384      	adds	r3, #132	; 0x84
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	01db      	lsls	r3, r3, #7
 8002d90:	4413      	add	r3, r2
 8002d92:	3384      	adds	r3, #132	; 0x84
 8002d94:	461a      	mov	r2, r3
 8002d96:	2300      	movs	r3, #0
 8002d98:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002da0:	461a      	mov	r2, r3
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4619      	mov	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	01db      	lsls	r3, r3, #7
 8002db4:	440b      	add	r3, r1
 8002db6:	3384      	adds	r3, #132	; 0x84
 8002db8:	4619      	mov	r1, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	01db      	lsls	r3, r3, #7
 8002dca:	4413      	add	r3, r2
 8002dcc:	3384      	adds	r3, #132	; 0x84
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	01d2      	lsls	r2, r2, #7
 8002dda:	440a      	add	r2, r1
 8002ddc:	3284      	adds	r2, #132	; 0x84
 8002dde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002de2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	01db      	lsls	r3, r3, #7
 8002dee:	4413      	add	r3, r2
 8002df0:	3384      	adds	r3, #132	; 0x84
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	01db      	lsls	r3, r3, #7
 8002e04:	4413      	add	r3, r2
 8002e06:	3384      	adds	r3, #132	; 0x84
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	440b      	add	r3, r1
 8002e16:	3384      	adds	r3, #132	; 0x84
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4b58      	ldr	r3, [pc, #352]	; (8002f7c <LTDC_SetConfig+0x338>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	68f9      	ldr	r1, [r7, #12]
 8002e2a:	6809      	ldr	r1, [r1, #0]
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	01c9      	lsls	r1, r1, #7
 8002e32:	4401      	add	r1, r0
 8002e34:	3184      	adds	r1, #132	; 0x84
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	01db      	lsls	r3, r3, #7
 8002e44:	4413      	add	r3, r2
 8002e46:	3384      	adds	r3, #132	; 0x84
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	01db      	lsls	r3, r3, #7
 8002e54:	4413      	add	r3, r2
 8002e56:	3384      	adds	r3, #132	; 0x84
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	01db      	lsls	r3, r3, #7
 8002e68:	4413      	add	r3, r2
 8002e6a:	3384      	adds	r3, #132	; 0x84
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	e01b      	b.n	8002eba <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d102      	bne.n	8002e90 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e014      	b.n	8002eba <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d00b      	beq.n	8002eb0 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d007      	beq.n	8002eb0 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d003      	beq.n	8002eb0 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002eac:	2b07      	cmp	r3, #7
 8002eae:	d102      	bne.n	8002eb6 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	e001      	b.n	8002eba <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	01db      	lsls	r3, r3, #7
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3384      	adds	r3, #132	; 0x84
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	01d2      	lsls	r2, r2, #7
 8002ed4:	440a      	add	r2, r1
 8002ed6:	3284      	adds	r2, #132	; 0x84
 8002ed8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002edc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	041a      	lsls	r2, r3, #16
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	1acb      	subs	r3, r1, r3
 8002ef4:	69f9      	ldr	r1, [r7, #28]
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	3303      	adds	r3, #3
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	6809      	ldr	r1, [r1, #0]
 8002f00:	4608      	mov	r0, r1
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	01c9      	lsls	r1, r1, #7
 8002f06:	4401      	add	r1, r0
 8002f08:	3184      	adds	r1, #132	; 0x84
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	01db      	lsls	r3, r3, #7
 8002f18:	4413      	add	r3, r2
 8002f1a:	3384      	adds	r3, #132	; 0x84
 8002f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	01db      	lsls	r3, r3, #7
 8002f28:	440b      	add	r3, r1
 8002f2a:	3384      	adds	r3, #132	; 0x84
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <LTDC_SetConfig+0x33c>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	01db      	lsls	r3, r3, #7
 8002f3e:	4413      	add	r3, r2
 8002f40:	3384      	adds	r3, #132	; 0x84
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	01db      	lsls	r3, r3, #7
 8002f54:	4413      	add	r3, r2
 8002f56:	3384      	adds	r3, #132	; 0x84
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	01d2      	lsls	r2, r2, #7
 8002f64:	440a      	add	r2, r1
 8002f66:	3284      	adds	r2, #132	; 0x84
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6013      	str	r3, [r2, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	fffff8f8 	.word	0xfffff8f8
 8002f80:	fffff800 	.word	0xfffff800

08002f84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <HAL_PWREx_EnableOverDrive+0x98>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a22      	ldr	r2, [pc, #136]	; (800301c <HAL_PWREx_EnableOverDrive+0x98>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_PWREx_EnableOverDrive+0x98>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1d      	ldr	r2, [pc, #116]	; (8003020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fb2:	f7fd fe65 	bl	8000c80 <HAL_GetTick>
 8002fb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fb8:	e009      	b.n	8002fce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fba:	f7fd fe61 	bl	8000c80 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc8:	d901      	bls.n	8002fce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e022      	b.n	8003014 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fda:	d1ee      	bne.n	8002fba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0f      	ldr	r2, [pc, #60]	; (8003020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fe8:	f7fd fe4a 	bl	8000c80 <HAL_GetTick>
 8002fec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fee:	e009      	b.n	8003004 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ff0:	f7fd fe46 	bl	8000c80 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ffe:	d901      	bls.n	8003004 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e007      	b.n	8003014 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003010:	d1ee      	bne.n	8002ff0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40023800 	.word	0x40023800
 8003020:	40007000 	.word	0x40007000

08003024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800302c:	2300      	movs	r3, #0
 800302e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e291      	b.n	800355e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8087 	beq.w	8003156 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003048:	4b96      	ldr	r3, [pc, #600]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b04      	cmp	r3, #4
 8003052:	d00c      	beq.n	800306e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003054:	4b93      	ldr	r3, [pc, #588]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b08      	cmp	r3, #8
 800305e:	d112      	bne.n	8003086 <HAL_RCC_OscConfig+0x62>
 8003060:	4b90      	ldr	r3, [pc, #576]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306c:	d10b      	bne.n	8003086 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306e:	4b8d      	ldr	r3, [pc, #564]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d06c      	beq.n	8003154 <HAL_RCC_OscConfig+0x130>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d168      	bne.n	8003154 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e26b      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308e:	d106      	bne.n	800309e <HAL_RCC_OscConfig+0x7a>
 8003090:	4b84      	ldr	r3, [pc, #528]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a83      	ldr	r2, [pc, #524]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	e02e      	b.n	80030fc <HAL_RCC_OscConfig+0xd8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x9c>
 80030a6:	4b7f      	ldr	r3, [pc, #508]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a7e      	ldr	r2, [pc, #504]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b7c      	ldr	r3, [pc, #496]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7b      	ldr	r2, [pc, #492]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e01d      	b.n	80030fc <HAL_RCC_OscConfig+0xd8>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0xc0>
 80030ca:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a75      	ldr	r2, [pc, #468]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	4b73      	ldr	r3, [pc, #460]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a72      	ldr	r2, [pc, #456]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e00b      	b.n	80030fc <HAL_RCC_OscConfig+0xd8>
 80030e4:	4b6f      	ldr	r3, [pc, #444]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a6e      	ldr	r2, [pc, #440]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a6b      	ldr	r2, [pc, #428]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80030f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d013      	beq.n	800312c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fd fdbc 	bl	8000c80 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7fd fdb8 	bl	8000c80 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e21f      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0xe8>
 800312a:	e014      	b.n	8003156 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fd fda8 	bl	8000c80 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003134:	f7fd fda4 	bl	8000c80 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b64      	cmp	r3, #100	; 0x64
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e20b      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	4b57      	ldr	r3, [pc, #348]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x110>
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d069      	beq.n	8003236 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003162:	4b50      	ldr	r3, [pc, #320]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b4d      	ldr	r3, [pc, #308]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b08      	cmp	r3, #8
 8003178:	d11c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x190>
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d116      	bne.n	80031b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_RCC_OscConfig+0x17a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d001      	beq.n	800319e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e1df      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	493d      	ldr	r1, [pc, #244]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	e040      	b.n	8003236 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d023      	beq.n	8003204 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031bc:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a38      	ldr	r2, [pc, #224]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fd fd5a 	bl	8000c80 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d0:	f7fd fd56 	bl	8000c80 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e1bd      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4929      	ldr	r1, [pc, #164]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
 8003202:	e018      	b.n	8003236 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003204:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fd fd36 	bl	8000c80 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003218:	f7fd fd32 	bl	8000c80 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e199      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d038      	beq.n	80032b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d019      	beq.n	800327e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 800324c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324e:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7fd fd13 	bl	8000c80 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325e:	f7fd fd0f 	bl	8000c80 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e176      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x23a>
 800327c:	e01a      	b.n	80032b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003282:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <HAL_RCC_OscConfig+0x280>)
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328a:	f7fd fcf9 	bl	8000c80 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003292:	f7fd fcf5 	bl	8000c80 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d903      	bls.n	80032a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e15c      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
 80032a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	4b91      	ldr	r3, [pc, #580]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80032aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ee      	bne.n	8003292 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a4 	beq.w	800340a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c2:	4b8b      	ldr	r3, [pc, #556]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	4b88      	ldr	r3, [pc, #544]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a87      	ldr	r2, [pc, #540]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
 80032da:	4b85      	ldr	r3, [pc, #532]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ea:	4b82      	ldr	r3, [pc, #520]	; (80034f4 <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d118      	bne.n	8003328 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032f6:	4b7f      	ldr	r3, [pc, #508]	; (80034f4 <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7e      	ldr	r2, [pc, #504]	; (80034f4 <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003302:	f7fd fcbd 	bl	8000c80 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330a:	f7fd fcb9 	bl	8000c80 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b64      	cmp	r3, #100	; 0x64
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e120      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331c:	4b75      	ldr	r3, [pc, #468]	; (80034f4 <HAL_RCC_OscConfig+0x4d0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x31a>
 8003330:	4b6f      	ldr	r3, [pc, #444]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	4a6e      	ldr	r2, [pc, #440]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6713      	str	r3, [r2, #112]	; 0x70
 800333c:	e02d      	b.n	800339a <HAL_RCC_OscConfig+0x376>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x33c>
 8003346:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	4a69      	ldr	r2, [pc, #420]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6713      	str	r3, [r2, #112]	; 0x70
 8003352:	4b67      	ldr	r3, [pc, #412]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	4a66      	ldr	r2, [pc, #408]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	6713      	str	r3, [r2, #112]	; 0x70
 800335e:	e01c      	b.n	800339a <HAL_RCC_OscConfig+0x376>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b05      	cmp	r3, #5
 8003366:	d10c      	bne.n	8003382 <HAL_RCC_OscConfig+0x35e>
 8003368:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	4a60      	ldr	r2, [pc, #384]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 800336e:	f043 0304 	orr.w	r3, r3, #4
 8003372:	6713      	str	r3, [r2, #112]	; 0x70
 8003374:	4b5e      	ldr	r3, [pc, #376]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a5d      	ldr	r2, [pc, #372]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
 8003380:	e00b      	b.n	800339a <HAL_RCC_OscConfig+0x376>
 8003382:	4b5b      	ldr	r3, [pc, #364]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a5a      	ldr	r2, [pc, #360]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	4b58      	ldr	r3, [pc, #352]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a57      	ldr	r2, [pc, #348]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	f023 0304 	bic.w	r3, r3, #4
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d015      	beq.n	80033ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a2:	f7fd fc6d 	bl	8000c80 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fd fc69 	bl	8000c80 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e0ce      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0ee      	beq.n	80033aa <HAL_RCC_OscConfig+0x386>
 80033cc:	e014      	b.n	80033f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fd fc57 	bl	8000c80 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fd fc53 	bl	8000c80 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0b8      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ec:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ee      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fe:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a3b      	ldr	r2, [pc, #236]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80a4 	beq.w	800355c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003414:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	d06b      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d149      	bne.n	80034bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a30      	ldr	r2, [pc, #192]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 800342e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fd fc24 	bl	8000c80 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fd fc20 	bl	8000c80 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e087      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	019b      	lsls	r3, r3, #6
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	3b01      	subs	r3, #1
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	4313      	orrs	r3, r2
 8003480:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003482:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003486:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 800348e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fd fbf4 	bl	8000c80 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fd fbf0 	bl	8000c80 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e057      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x478>
 80034ba:	e04f      	b.n	800355c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a0b      	ldr	r2, [pc, #44]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80034c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fd fbda 	bl	8000c80 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fd fbd6 	bl	8000c80 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e03d      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4ac>
 80034ee:	e035      	b.n	800355c <HAL_RCC_OscConfig+0x538>
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x544>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d028      	beq.n	8003558 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d121      	bne.n	8003558 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d11a      	bne.n	8003558 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003528:	4013      	ands	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800352e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	3b01      	subs	r3, #1
 8003542:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800

0800356c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0d0      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d910      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b67      	ldr	r3, [pc, #412]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 020f 	bic.w	r2, r3, #15
 800359a:	4965      	ldr	r1, [pc, #404]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b63      	ldr	r3, [pc, #396]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b8      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035cc:	4b59      	ldr	r3, [pc, #356]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a58      	ldr	r2, [pc, #352]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 80035d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e4:	4b53      	ldr	r3, [pc, #332]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a52      	ldr	r2, [pc, #328]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 80035ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	494d      	ldr	r1, [pc, #308]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d040      	beq.n	8003690 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d115      	bne.n	800364e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e073      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06b      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b39      	ldr	r3, [pc, #228]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4936      	ldr	r1, [pc, #216]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003660:	f7fd fb0e 	bl	8000c80 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fd fb0a 	bl	8000c80 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e053      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b2d      	ldr	r3, [pc, #180]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d210      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 020f 	bic.w	r2, r3, #15
 80036a6:	4922      	ldr	r1, [pc, #136]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b20      	ldr	r3, [pc, #128]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e032      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4916      	ldr	r1, [pc, #88]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	490e      	ldr	r1, [pc, #56]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036fe:	f000 f821 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8003702:	4602      	mov	r2, r0
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	490a      	ldr	r1, [pc, #40]	; (8003738 <HAL_RCC_ClockConfig+0x1cc>)
 8003710:	5ccb      	ldrb	r3, [r1, r3]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_RCC_ClockConfig+0x1d0>)
 8003718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x1d4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd fa6a 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00
 8003734:	40023800 	.word	0x40023800
 8003738:	08006954 	.word	0x08006954
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003748:	b090      	sub	sp, #64	; 0x40
 800374a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
 8003750:	2300      	movs	r3, #0
 8003752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003754:	2300      	movs	r3, #0
 8003756:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800375c:	4b59      	ldr	r3, [pc, #356]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d00d      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x40>
 8003768:	2b08      	cmp	r3, #8
 800376a:	f200 80a1 	bhi.w	80038b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x34>
 8003772:	2b04      	cmp	r3, #4
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x3a>
 8003776:	e09b      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800377c:	e09b      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800377e:	4b53      	ldr	r3, [pc, #332]	; (80038cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003782:	e098      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003784:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800378e:	4b4d      	ldr	r3, [pc, #308]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d028      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379a:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	2200      	movs	r2, #0
 80037a2:	623b      	str	r3, [r7, #32]
 80037a4:	627a      	str	r2, [r7, #36]	; 0x24
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037ac:	2100      	movs	r1, #0
 80037ae:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_RCC_GetSysClockFreq+0x188>)
 80037b0:	fb03 f201 	mul.w	r2, r3, r1
 80037b4:	2300      	movs	r3, #0
 80037b6:	fb00 f303 	mul.w	r3, r0, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	4a43      	ldr	r2, [pc, #268]	; (80038cc <HAL_RCC_GetSysClockFreq+0x188>)
 80037be:	fba0 1202 	umull	r1, r2, r0, r2
 80037c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c4:	460a      	mov	r2, r1
 80037c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80037c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ca:	4413      	add	r3, r2
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d0:	2200      	movs	r2, #0
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	61fa      	str	r2, [r7, #28]
 80037d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037de:	f7fc fd67 	bl	80002b0 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4613      	mov	r3, r2
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ea:	e053      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ec:	4b35      	ldr	r3, [pc, #212]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	2200      	movs	r2, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	617a      	str	r2, [r7, #20]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037fe:	f04f 0b00 	mov.w	fp, #0
 8003802:	4652      	mov	r2, sl
 8003804:	465b      	mov	r3, fp
 8003806:	f04f 0000 	mov.w	r0, #0
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	0159      	lsls	r1, r3, #5
 8003810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003814:	0150      	lsls	r0, r2, #5
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	ebb2 080a 	subs.w	r8, r2, sl
 800381e:	eb63 090b 	sbc.w	r9, r3, fp
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800382e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003832:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003836:	ebb2 0408 	subs.w	r4, r2, r8
 800383a:	eb63 0509 	sbc.w	r5, r3, r9
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	00eb      	lsls	r3, r5, #3
 8003848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800384c:	00e2      	lsls	r2, r4, #3
 800384e:	4614      	mov	r4, r2
 8003850:	461d      	mov	r5, r3
 8003852:	eb14 030a 	adds.w	r3, r4, sl
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	eb45 030b 	adc.w	r3, r5, fp
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800386a:	4629      	mov	r1, r5
 800386c:	028b      	lsls	r3, r1, #10
 800386e:	4621      	mov	r1, r4
 8003870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003874:	4621      	mov	r1, r4
 8003876:	028a      	lsls	r2, r1, #10
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	2200      	movs	r2, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	60fa      	str	r2, [r7, #12]
 8003884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003888:	f7fc fd12 	bl	80002b0 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4613      	mov	r3, r2
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	3301      	adds	r3, #1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80038a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80038b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3740      	adds	r7, #64	; 0x40
 80038bc:	46bd      	mov	sp, r7
 80038be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	017d7840 	.word	0x017d7840

080038d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038f8:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a68      	ldr	r2, [pc, #416]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003902:	6093      	str	r3, [r2, #8]
 8003904:	4b66      	ldr	r3, [pc, #408]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	4964      	ldr	r1, [pc, #400]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800391a:	2301      	movs	r3, #1
 800391c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d017      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800392a:	4b5d      	ldr	r3, [pc, #372]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003938:	4959      	ldr	r1, [pc, #356]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003948:	d101      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003956:	2301      	movs	r3, #1
 8003958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d017      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003966:	4b4e      	ldr	r3, [pc, #312]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	494a      	ldr	r1, [pc, #296]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003984:	d101      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003986:	2301      	movs	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003992:	2301      	movs	r3, #1
 8003994:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039a2:	2301      	movs	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 808b 	beq.w	8003aca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039b4:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	4a39      	ldr	r2, [pc, #228]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039be:	6413      	str	r3, [r2, #64]	; 0x40
 80039c0:	4b37      	ldr	r3, [pc, #220]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039cc:	4b35      	ldr	r3, [pc, #212]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d8:	f7fd f952 	bl	8000c80 <HAL_GetTick>
 80039dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e0:	f7fd f94e 	bl	8000c80 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e357      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039fe:	4b28      	ldr	r3, [pc, #160]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d035      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d02e      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a1c:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a26:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a32:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a1a      	ldr	r2, [pc, #104]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d114      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fd f916 	bl	8000c80 <HAL_GetTick>
 8003a54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a56:	e00a      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a58:	f7fd f912 	bl	8000c80 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e319      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0ee      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a86:	d111      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a96:	400b      	ands	r3, r1
 8003a98:	4901      	ldr	r1, [pc, #4]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	0ffffcff 	.word	0x0ffffcff
 8003aac:	4baa      	ldr	r3, [pc, #680]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4aa9      	ldr	r2, [pc, #676]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ab6:	6093      	str	r3, [r2, #8]
 8003ab8:	4ba7      	ldr	r3, [pc, #668]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac4:	49a4      	ldr	r1, [pc, #656]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d010      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ad6:	4ba0      	ldr	r3, [pc, #640]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003adc:	4a9e      	ldr	r2, [pc, #632]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ae6:	4b9c      	ldr	r3, [pc, #624]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	4999      	ldr	r1, [pc, #612]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b04:	4b94      	ldr	r3, [pc, #592]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b12:	4991      	ldr	r1, [pc, #580]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b26:	4b8c      	ldr	r3, [pc, #560]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b34:	4988      	ldr	r1, [pc, #544]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b48:	4b83      	ldr	r3, [pc, #524]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b56:	4980      	ldr	r1, [pc, #512]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b6a:	4b7b      	ldr	r3, [pc, #492]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	4977      	ldr	r1, [pc, #476]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8c:	4b72      	ldr	r3, [pc, #456]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	496f      	ldr	r1, [pc, #444]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bae:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f023 020c 	bic.w	r2, r3, #12
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbc:	4966      	ldr	r1, [pc, #408]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bd0:	4b61      	ldr	r3, [pc, #388]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	495e      	ldr	r1, [pc, #376]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf2:	4b59      	ldr	r3, [pc, #356]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c00:	4955      	ldr	r1, [pc, #340]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c14:	4b50      	ldr	r3, [pc, #320]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	494d      	ldr	r1, [pc, #308]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c36:	4b48      	ldr	r3, [pc, #288]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	4944      	ldr	r1, [pc, #272]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c58:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	493c      	ldr	r1, [pc, #240]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c7a:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c88:	4933      	ldr	r1, [pc, #204]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c9c:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003caa:	492b      	ldr	r1, [pc, #172]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d011      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cbe:	4b26      	ldr	r3, [pc, #152]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ccc:	4922      	ldr	r1, [pc, #136]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cfe:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0c:	4912      	ldr	r1, [pc, #72]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d30:	4909      	ldr	r1, [pc, #36]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d006      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80d9 	beq.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d4c:	4b02      	ldr	r3, [pc, #8]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a01      	ldr	r2, [pc, #4]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d56:	e001      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5e:	f7fc ff8f 	bl	8000c80 <HAL_GetTick>
 8003d62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d66:	f7fc ff8b 	bl	8000c80 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b64      	cmp	r3, #100	; 0x64
 8003d72:	d901      	bls.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e194      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d78:	4b6c      	ldr	r3, [pc, #432]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f0      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d021      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d11d      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d98:	4b64      	ldr	r3, [pc, #400]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9e:	0c1b      	lsrs	r3, r3, #16
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003da6:	4b61      	ldr	r3, [pc, #388]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dac:	0e1b      	lsrs	r3, r3, #24
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	019a      	lsls	r2, r3, #6
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	061b      	lsls	r3, r3, #24
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	071b      	lsls	r3, r3, #28
 8003dcc:	4957      	ldr	r1, [pc, #348]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02e      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfe:	d129      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e00:	4b4a      	ldr	r3, [pc, #296]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e06:	0c1b      	lsrs	r3, r3, #16
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e0e:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e14:	0f1b      	lsrs	r3, r3, #28
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	019a      	lsls	r2, r3, #6
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	071b      	lsls	r3, r3, #28
 8003e34:	493d      	ldr	r1, [pc, #244]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e3c:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e42:	f023 021f 	bic.w	r2, r3, #31
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	4937      	ldr	r1, [pc, #220]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01d      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e60:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e66:	0e1b      	lsrs	r3, r3, #24
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e74:	0f1b      	lsrs	r3, r3, #28
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	019a      	lsls	r2, r3, #6
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	041b      	lsls	r3, r3, #16
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	071b      	lsls	r3, r3, #28
 8003e94:	4925      	ldr	r1, [pc, #148]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d011      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	019a      	lsls	r2, r3, #6
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	061b      	lsls	r3, r3, #24
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	071b      	lsls	r3, r3, #28
 8003ec4:	4919      	ldr	r1, [pc, #100]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ecc:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed8:	f7fc fed2 	bl	8000c80 <HAL_GetTick>
 8003edc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ee0:	f7fc fece 	bl	8000c80 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e0d7      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	f040 80cd 	bne.w	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f12:	f7fc feb5 	bl	8000c80 <HAL_GetTick>
 8003f16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f1a:	f7fc feb1 	bl	8000c80 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b64      	cmp	r3, #100	; 0x64
 8003f26:	d903      	bls.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0ba      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f30:	4b5e      	ldr	r3, [pc, #376]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3c:	d0ed      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d02e      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d12a      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f66:	4b51      	ldr	r3, [pc, #324]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f74:	4b4d      	ldr	r3, [pc, #308]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	0f1b      	lsrs	r3, r3, #28
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	019a      	lsls	r2, r3, #6
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	431a      	orrs	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	071b      	lsls	r3, r3, #28
 8003f9a:	4944      	ldr	r1, [pc, #272]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fa2:	4b42      	ldr	r3, [pc, #264]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	493d      	ldr	r1, [pc, #244]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d022      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd0:	d11d      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	0e1b      	lsrs	r3, r3, #24
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fe0:	4b32      	ldr	r3, [pc, #200]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	0f1b      	lsrs	r3, r3, #28
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	019a      	lsls	r2, r3, #6
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	041b      	lsls	r3, r3, #16
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	061b      	lsls	r3, r3, #24
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	071b      	lsls	r3, r3, #28
 8004006:	4929      	ldr	r1, [pc, #164]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d028      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	0e1b      	lsrs	r3, r3, #24
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004028:	4b20      	ldr	r3, [pc, #128]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	0c1b      	lsrs	r3, r3, #16
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	019a      	lsls	r2, r3, #6
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	431a      	orrs	r2, r3
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	061b      	lsls	r3, r3, #24
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	071b      	lsls	r3, r3, #28
 800404e:	4917      	ldr	r1, [pc, #92]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800405c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4911      	ldr	r1, [pc, #68]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004078:	f7fc fe02 	bl	8000c80 <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004080:	f7fc fdfe 	bl	8000c80 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e007      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800409a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800409e:	d1ef      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800

080040b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e025      	b.n	8004110 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f81d 	bl	8004118 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	4619      	mov	r1, r3
 80040f0:	4610      	mov	r0, r2
 80040f2:	f000 f867 	bl	80041c4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	461a      	mov	r2, r3
 8004100:	6839      	ldr	r1, [r7, #0]
 8004102:	f000 f8d1 	bl	80042a8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d101      	bne.n	8004148 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004144:	2302      	movs	r3, #2
 8004146:	e018      	b.n	800417a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f925 	bl	80043a8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d104      	bne.n	8004170 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2205      	movs	r2, #5
 800416a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800416e:	e003      	b.n	8004178 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d101      	bne.n	800419c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
 800419a:	e00e      	b.n	80041ba <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f91d 	bl	80043ea <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d027      	beq.n	800422e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4b2f      	ldr	r3, [pc, #188]	; (80042a4 <FMC_SDRAM_Init+0xe0>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041f4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80041fa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8004200:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8004206:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800420c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8004212:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8004218:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800421e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e032      	b.n	8004294 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800423a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004244:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800424a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <FMC_SDRAM_Init+0xe0>)
 800425c:	4013      	ands	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004268:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800426e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8004274:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800427a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8004280:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	4313      	orrs	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	ffff8000 	.word	0xffff8000

080042a8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d02e      	beq.n	8004320 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80042ce:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042de:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80042e8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80042f2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80042fc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	3b01      	subs	r3, #1
 8004304:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004306:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	3b01      	subs	r3, #1
 800430e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004310:	4313      	orrs	r3, r2
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	e039      	b.n	8004394 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <FMC_SDRAM_Timing_Init+0xfc>)
 800432a:	4013      	ands	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	3b01      	subs	r3, #1
 8004334:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	3b01      	subs	r3, #1
 800433c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800433e:	4313      	orrs	r3, r2
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004352:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	3b01      	subs	r3, #1
 8004360:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004362:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	3b01      	subs	r3, #1
 800436a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800436c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	3b01      	subs	r3, #1
 8004374:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004376:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	3b01      	subs	r3, #1
 800437e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004380:	4313      	orrs	r3, r2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	ff0f0fff 	.word	0xff0f0fff

080043a8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80043c0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80043ca:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800441a:	20c8      	movs	r0, #200	; 0xc8
 800441c:	f000 fc32 	bl	8004c84 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8004420:	f000 fa7a 	bl	8004918 <ft5336_I2C_InitializeIfRequired>
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	4603      	mov	r3, r0
 800444a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8004454:	2300      	movs	r3, #0
 8004456:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8004458:	f000 fa5e 	bl	8004918 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800445c:	2300      	movs	r3, #0
 800445e:	73fb      	strb	r3, [r7, #15]
 8004460:	e010      	b.n	8004484 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	21a8      	movs	r1, #168	; 0xa8
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fbed 	bl	8004c48 <TS_IO_Read>
 800446e:	4603      	mov	r3, r0
 8004470:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8004472:	7b7b      	ldrb	r3, [r7, #13]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b51      	cmp	r3, #81	; 0x51
 8004478:	d101      	bne.n	800447e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800447a:	2301      	movs	r3, #1
 800447c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	3301      	adds	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d802      	bhi.n	8004490 <ft5336_ReadID+0x4e>
 800448a:	7bbb      	ldrb	r3, [r7, #14]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0e8      	beq.n	8004462 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8004490:	7b7b      	ldrb	r3, [r7, #13]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	b29b      	uxth	r3, r3
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	4603      	mov	r3, r0
 80044a6:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fa44 	bl	8004938 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f932 	bl	800471c <ft5336_TS_DisableIT>
}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2102      	movs	r1, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fbb7 	bl	8004c48 <TS_IO_Read>
 80044da:	4603      	mov	r3, r0
 80044dc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d901      	bls.n	80044f6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <ft5336_TS_DetectTouch+0x50>)
 80044fc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80044fe:	4b04      	ldr	r3, [pc, #16]	; (8004510 <ft5336_TS_DetectTouch+0x50>)
 8004500:	2200      	movs	r2, #0
 8004502:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	b2db      	uxtb	r3, r3
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000164 	.word	0x20000164

08004514 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800452a:	2300      	movs	r3, #0
 800452c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004536:	4b6d      	ldr	r3, [pc, #436]	; (80046ec <ft5336_TS_GetXY+0x1d8>)
 8004538:	789a      	ldrb	r2, [r3, #2]
 800453a:	4b6c      	ldr	r3, [pc, #432]	; (80046ec <ft5336_TS_GetXY+0x1d8>)
 800453c:	785b      	ldrb	r3, [r3, #1]
 800453e:	429a      	cmp	r2, r3
 8004540:	f080 80cf 	bcs.w	80046e2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8004544:	4b69      	ldr	r3, [pc, #420]	; (80046ec <ft5336_TS_GetXY+0x1d8>)
 8004546:	789b      	ldrb	r3, [r3, #2]
 8004548:	2b09      	cmp	r3, #9
 800454a:	d871      	bhi.n	8004630 <ft5336_TS_GetXY+0x11c>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <ft5336_TS_GetXY+0x40>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	0800457d 	.word	0x0800457d
 8004558:	0800458f 	.word	0x0800458f
 800455c:	080045a1 	.word	0x080045a1
 8004560:	080045b3 	.word	0x080045b3
 8004564:	080045c5 	.word	0x080045c5
 8004568:	080045d7 	.word	0x080045d7
 800456c:	080045e9 	.word	0x080045e9
 8004570:	080045fb 	.word	0x080045fb
 8004574:	0800460d 	.word	0x0800460d
 8004578:	0800461f 	.word	0x0800461f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800457c:	2304      	movs	r3, #4
 800457e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8004580:	2303      	movs	r3, #3
 8004582:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8004584:	2306      	movs	r3, #6
 8004586:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8004588:	2305      	movs	r3, #5
 800458a:	753b      	strb	r3, [r7, #20]
      break;
 800458c:	e051      	b.n	8004632 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800458e:	230a      	movs	r3, #10
 8004590:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8004592:	2309      	movs	r3, #9
 8004594:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8004596:	230c      	movs	r3, #12
 8004598:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800459a:	230b      	movs	r3, #11
 800459c:	753b      	strb	r3, [r7, #20]
      break;
 800459e:	e048      	b.n	8004632 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80045a0:	2310      	movs	r3, #16
 80045a2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80045a4:	230f      	movs	r3, #15
 80045a6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80045a8:	2312      	movs	r3, #18
 80045aa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80045ac:	2311      	movs	r3, #17
 80045ae:	753b      	strb	r3, [r7, #20]
      break;
 80045b0:	e03f      	b.n	8004632 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80045b2:	2316      	movs	r3, #22
 80045b4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80045b6:	2315      	movs	r3, #21
 80045b8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80045ba:	2318      	movs	r3, #24
 80045bc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80045be:	2317      	movs	r3, #23
 80045c0:	753b      	strb	r3, [r7, #20]
      break;
 80045c2:	e036      	b.n	8004632 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80045c4:	231c      	movs	r3, #28
 80045c6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80045c8:	231b      	movs	r3, #27
 80045ca:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80045cc:	231e      	movs	r3, #30
 80045ce:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80045d0:	231d      	movs	r3, #29
 80045d2:	753b      	strb	r3, [r7, #20]
      break;
 80045d4:	e02d      	b.n	8004632 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80045d6:	2322      	movs	r3, #34	; 0x22
 80045d8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80045da:	2321      	movs	r3, #33	; 0x21
 80045dc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80045de:	2324      	movs	r3, #36	; 0x24
 80045e0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80045e2:	2323      	movs	r3, #35	; 0x23
 80045e4:	753b      	strb	r3, [r7, #20]
      break;
 80045e6:	e024      	b.n	8004632 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80045e8:	2328      	movs	r3, #40	; 0x28
 80045ea:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80045ec:	2327      	movs	r3, #39	; 0x27
 80045ee:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80045f0:	232a      	movs	r3, #42	; 0x2a
 80045f2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80045f4:	2329      	movs	r3, #41	; 0x29
 80045f6:	753b      	strb	r3, [r7, #20]
      break;
 80045f8:	e01b      	b.n	8004632 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80045fa:	232e      	movs	r3, #46	; 0x2e
 80045fc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80045fe:	232d      	movs	r3, #45	; 0x2d
 8004600:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8004602:	2330      	movs	r3, #48	; 0x30
 8004604:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8004606:	232f      	movs	r3, #47	; 0x2f
 8004608:	753b      	strb	r3, [r7, #20]
      break;
 800460a:	e012      	b.n	8004632 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800460c:	2334      	movs	r3, #52	; 0x34
 800460e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8004610:	2333      	movs	r3, #51	; 0x33
 8004612:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8004614:	2336      	movs	r3, #54	; 0x36
 8004616:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8004618:	2335      	movs	r3, #53	; 0x35
 800461a:	753b      	strb	r3, [r7, #20]
      break;
 800461c:	e009      	b.n	8004632 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800461e:	233a      	movs	r3, #58	; 0x3a
 8004620:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8004622:	2339      	movs	r3, #57	; 0x39
 8004624:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8004626:	233c      	movs	r3, #60	; 0x3c
 8004628:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800462a:	233b      	movs	r3, #59	; 0x3b
 800462c:	753b      	strb	r3, [r7, #20]
      break;
 800462e:	e000      	b.n	8004632 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8004630:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004632:	89fb      	ldrh	r3, [r7, #14]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	7dfa      	ldrb	r2, [r7, #23]
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fb04 	bl	8004c48 <TS_IO_Read>
 8004640:	4603      	mov	r3, r0
 8004642:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	b29a      	uxth	r2, r3
 800464a:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <ft5336_TS_GetXY+0x1dc>)
 800464c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800464e:	89fb      	ldrh	r3, [r7, #14]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	7dba      	ldrb	r2, [r7, #22]
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f000 faf6 	bl	8004c48 <TS_IO_Read>
 800465c:	4603      	mov	r3, r0
 800465e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800466a:	b21a      	sxth	r2, r3
 800466c:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <ft5336_TS_GetXY+0x1dc>)
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b21b      	sxth	r3, r3
 8004672:	4313      	orrs	r3, r2
 8004674:	b21b      	sxth	r3, r3
 8004676:	b29a      	uxth	r2, r3
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <ft5336_TS_GetXY+0x1dc>)
 800467a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800467c:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <ft5336_TS_GetXY+0x1dc>)
 800467e:	881a      	ldrh	r2, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004684:	89fb      	ldrh	r3, [r7, #14]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	7d7a      	ldrb	r2, [r7, #21]
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fadb 	bl	8004c48 <TS_IO_Read>
 8004692:	4603      	mov	r3, r0
 8004694:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	b29a      	uxth	r2, r3
 800469c:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <ft5336_TS_GetXY+0x1dc>)
 800469e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80046a0:	89fb      	ldrh	r3, [r7, #14]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	7d3a      	ldrb	r2, [r7, #20]
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 facd 	bl	8004c48 <TS_IO_Read>
 80046ae:	4603      	mov	r3, r0
 80046b0:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80046b2:	7cfb      	ldrb	r3, [r7, #19]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046bc:	b21a      	sxth	r2, r3
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <ft5336_TS_GetXY+0x1dc>)
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b21b      	sxth	r3, r3
 80046c4:	4313      	orrs	r3, r2
 80046c6:	b21b      	sxth	r3, r3
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <ft5336_TS_GetXY+0x1dc>)
 80046cc:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <ft5336_TS_GetXY+0x1dc>)
 80046d0:	881a      	ldrh	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <ft5336_TS_GetXY+0x1d8>)
 80046d8:	789b      	ldrb	r3, [r3, #2]
 80046da:	3301      	adds	r3, #1
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4b03      	ldr	r3, [pc, #12]	; (80046ec <ft5336_TS_GetXY+0x1d8>)
 80046e0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80046e2:	bf00      	nop
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000164 	.word	0x20000164
 80046f0:	20000168 	.word	0x20000168

080046f4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	21a4      	movs	r1, #164	; 0xa4
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fa80 	bl	8004c14 <TS_IO_Write>
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	21a4      	movs	r1, #164	; 0xa4
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fa6c 	bl	8004c14 <TS_IO_Write>
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	4603      	mov	r3, r0
 800477a:	6039      	str	r1, [r7, #0]
 800477c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2101      	movs	r1, #1
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fa5d 	bl	8004c48 <TS_IO_Read>
 800478e:	4603      	mov	r3, r0
 8004790:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	601a      	str	r2, [r3, #0]
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	4603      	mov	r3, r0
 80047b2:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80047c4:	4b4d      	ldr	r3, [pc, #308]	; (80048fc <ft5336_TS_GetTouchInfo+0x158>)
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	461a      	mov	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4293      	cmp	r3, r2
 80047ce:	f080 8090 	bcs.w	80048f2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b09      	cmp	r3, #9
 80047d6:	d85d      	bhi.n	8004894 <ft5336_TS_GetTouchInfo+0xf0>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <ft5336_TS_GetTouchInfo+0x3c>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004809 	.word	0x08004809
 80047e4:	08004817 	.word	0x08004817
 80047e8:	08004825 	.word	0x08004825
 80047ec:	08004833 	.word	0x08004833
 80047f0:	08004841 	.word	0x08004841
 80047f4:	0800484f 	.word	0x0800484f
 80047f8:	0800485d 	.word	0x0800485d
 80047fc:	0800486b 	.word	0x0800486b
 8004800:	08004879 	.word	0x08004879
 8004804:	08004887 	.word	0x08004887
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8004808:	2303      	movs	r3, #3
 800480a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 800480c:	2307      	movs	r3, #7
 800480e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8004810:	2308      	movs	r3, #8
 8004812:	757b      	strb	r3, [r7, #21]
      break;
 8004814:	e03f      	b.n	8004896 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8004816:	2309      	movs	r3, #9
 8004818:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800481a:	230d      	movs	r3, #13
 800481c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800481e:	230e      	movs	r3, #14
 8004820:	757b      	strb	r3, [r7, #21]
      break;
 8004822:	e038      	b.n	8004896 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8004824:	230f      	movs	r3, #15
 8004826:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8004828:	2313      	movs	r3, #19
 800482a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800482c:	2314      	movs	r3, #20
 800482e:	757b      	strb	r3, [r7, #21]
      break;
 8004830:	e031      	b.n	8004896 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8004832:	2315      	movs	r3, #21
 8004834:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8004836:	2319      	movs	r3, #25
 8004838:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800483a:	231a      	movs	r3, #26
 800483c:	757b      	strb	r3, [r7, #21]
      break;
 800483e:	e02a      	b.n	8004896 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8004840:	231b      	movs	r3, #27
 8004842:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8004844:	231f      	movs	r3, #31
 8004846:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8004848:	2320      	movs	r3, #32
 800484a:	757b      	strb	r3, [r7, #21]
      break;
 800484c:	e023      	b.n	8004896 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800484e:	2321      	movs	r3, #33	; 0x21
 8004850:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8004852:	2325      	movs	r3, #37	; 0x25
 8004854:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8004856:	2326      	movs	r3, #38	; 0x26
 8004858:	757b      	strb	r3, [r7, #21]
      break;
 800485a:	e01c      	b.n	8004896 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800485c:	2327      	movs	r3, #39	; 0x27
 800485e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8004860:	232b      	movs	r3, #43	; 0x2b
 8004862:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8004864:	232c      	movs	r3, #44	; 0x2c
 8004866:	757b      	strb	r3, [r7, #21]
      break;
 8004868:	e015      	b.n	8004896 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800486a:	232d      	movs	r3, #45	; 0x2d
 800486c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800486e:	2331      	movs	r3, #49	; 0x31
 8004870:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8004872:	2332      	movs	r3, #50	; 0x32
 8004874:	757b      	strb	r3, [r7, #21]
      break;
 8004876:	e00e      	b.n	8004896 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8004878:	2333      	movs	r3, #51	; 0x33
 800487a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800487c:	2337      	movs	r3, #55	; 0x37
 800487e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8004880:	2338      	movs	r3, #56	; 0x38
 8004882:	757b      	strb	r3, [r7, #21]
      break;
 8004884:	e007      	b.n	8004896 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8004886:	2339      	movs	r3, #57	; 0x39
 8004888:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800488a:	233d      	movs	r3, #61	; 0x3d
 800488c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800488e:	233e      	movs	r3, #62	; 0x3e
 8004890:	757b      	strb	r3, [r7, #21]
      break;
 8004892:	e000      	b.n	8004896 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8004894:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	7dfa      	ldrb	r2, [r7, #23]
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f9d2 	bl	8004c48 <TS_IO_Read>
 80048a4:	4603      	mov	r3, r0
 80048a6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80048a8:	7d3b      	ldrb	r3, [r7, #20]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	119b      	asrs	r3, r3, #6
 80048ae:	f003 0203 	and.w	r2, r3, #3
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80048b6:	89fb      	ldrh	r3, [r7, #14]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	7dba      	ldrb	r2, [r7, #22]
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f9c2 	bl	8004c48 <TS_IO_Read>
 80048c4:	4603      	mov	r3, r0
 80048c6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80048c8:	7d3b      	ldrb	r3, [r7, #20]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80048d2:	89fb      	ldrh	r3, [r7, #14]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	7d7a      	ldrb	r2, [r7, #21]
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f9b4 	bl	8004c48 <TS_IO_Read>
 80048e0:	4603      	mov	r3, r0
 80048e2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80048e4:	7d3b      	ldrb	r3, [r7, #20]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	111b      	asrs	r3, r3, #4
 80048ea:	f003 0204 	and.w	r2, r3, #4
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000164 	.word	0x20000164

08004900 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8004904:	4b03      	ldr	r3, [pc, #12]	; (8004914 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8004906:	781b      	ldrb	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000164 	.word	0x20000164

08004918 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800491c:	f7ff fff0 	bl	8004900 <ft5336_Get_I2C_InitializedStatus>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d104      	bne.n	8004930 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8004926:	f000 f96b 	bl	8004c00 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800492a:	4b02      	ldr	r3, [pc, #8]	; (8004934 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
  }
}
 8004930:	bf00      	nop
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000164 	.word	0x20000164

08004938 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8004946:	68fb      	ldr	r3, [r7, #12]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08c      	sub	sp, #48	; 0x30
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a51      	ldr	r2, [pc, #324]	; (8004aa4 <I2Cx_MspInit+0x150>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d14d      	bne.n	8004a00 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004964:	4b50      	ldr	r3, [pc, #320]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	4a4f      	ldr	r2, [pc, #316]	; (8004aa8 <I2Cx_MspInit+0x154>)
 800496a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496e:	6313      	str	r3, [r2, #48]	; 0x30
 8004970:	4b4d      	ldr	r3, [pc, #308]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004980:	2312      	movs	r3, #18
 8004982:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004984:	2300      	movs	r3, #0
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004988:	2302      	movs	r3, #2
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800498c:	2304      	movs	r3, #4
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004990:	f107 031c 	add.w	r3, r7, #28
 8004994:	4619      	mov	r1, r3
 8004996:	4845      	ldr	r0, [pc, #276]	; (8004aac <I2Cx_MspInit+0x158>)
 8004998:	f7fc ffe8 	bl	800196c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800499c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80049a2:	f107 031c 	add.w	r3, r7, #28
 80049a6:	4619      	mov	r1, r3
 80049a8:	4840      	ldr	r0, [pc, #256]	; (8004aac <I2Cx_MspInit+0x158>)
 80049aa:	f7fc ffdf 	bl	800196c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80049ae:	4b3e      	ldr	r3, [pc, #248]	; (8004aa8 <I2Cx_MspInit+0x154>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	4a3d      	ldr	r2, [pc, #244]	; (8004aa8 <I2Cx_MspInit+0x154>)
 80049b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049b8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ba:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <I2Cx_MspInit+0x154>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80049c6:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <I2Cx_MspInit+0x154>)
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <I2Cx_MspInit+0x154>)
 80049cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049d0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80049d2:	4b35      	ldr	r3, [pc, #212]	; (8004aa8 <I2Cx_MspInit+0x154>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4a34      	ldr	r2, [pc, #208]	; (8004aa8 <I2Cx_MspInit+0x154>)
 80049d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049dc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80049de:	2200      	movs	r2, #0
 80049e0:	210f      	movs	r1, #15
 80049e2:	2048      	movs	r0, #72	; 0x48
 80049e4:	f7fc fa57 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80049e8:	2048      	movs	r0, #72	; 0x48
 80049ea:	f7fc fa70 	bl	8000ece <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	210f      	movs	r1, #15
 80049f2:	2049      	movs	r0, #73	; 0x49
 80049f4:	f7fc fa4f 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80049f8:	2049      	movs	r0, #73	; 0x49
 80049fa:	f7fc fa68 	bl	8000ece <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80049fe:	e04d      	b.n	8004a9c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004a00:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	4a28      	ldr	r2, [pc, #160]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004a06:	f043 0302 	orr.w	r3, r3, #2
 8004a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0c:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a1c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004a1e:	2312      	movs	r3, #18
 8004a20:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004a26:	2302      	movs	r3, #2
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004a2e:	f107 031c 	add.w	r3, r7, #28
 8004a32:	4619      	mov	r1, r3
 8004a34:	481e      	ldr	r0, [pc, #120]	; (8004ab0 <I2Cx_MspInit+0x15c>)
 8004a36:	f7fc ff99 	bl	800196c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004a40:	f107 031c 	add.w	r3, r7, #28
 8004a44:	4619      	mov	r1, r3
 8004a46:	481a      	ldr	r0, [pc, #104]	; (8004ab0 <I2Cx_MspInit+0x15c>)
 8004a48:	f7fc ff90 	bl	800196c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004a4c:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a56:	6413      	str	r3, [r2, #64]	; 0x40
 8004a58:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004a64:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a6e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <I2Cx_MspInit+0x154>)
 8004a76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a7a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	210f      	movs	r1, #15
 8004a80:	201f      	movs	r0, #31
 8004a82:	f7fc fa08 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004a86:	201f      	movs	r0, #31
 8004a88:	f7fc fa21 	bl	8000ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	210f      	movs	r1, #15
 8004a90:	2020      	movs	r0, #32
 8004a92:	f7fc fa00 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004a96:	2020      	movs	r0, #32
 8004a98:	f7fc fa19 	bl	8000ece <HAL_NVIC_EnableIRQ>
}
 8004a9c:	bf00      	nop
 8004a9e:	3730      	adds	r7, #48	; 0x30
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	2000016c 	.word	0x2000016c
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40021c00 	.word	0x40021c00
 8004ab0:	40020400 	.word	0x40020400

08004ab4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fd fc1d 	bl	80022fc <HAL_I2C_GetState>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d125      	bne.n	8004b14 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <I2Cx_Init+0x68>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d103      	bne.n	8004ad8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <I2Cx_Init+0x6c>)
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e002      	b.n	8004ade <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <I2Cx_Init+0x70>)
 8004adc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <I2Cx_Init+0x74>)
 8004ae2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ff23 	bl	8004954 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fd f8f2 	bl	8001cf8 <HAL_I2C_Init>
  }
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	2000016c 	.word	0x2000016c
 8004b20:	40005c00 	.word	0x40005c00
 8004b24:	40005400 	.word	0x40005400
 8004b28:	40912732 	.word	0x40912732

08004b2c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af04      	add	r7, sp, #16
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	4608      	mov	r0, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	72fb      	strb	r3, [r7, #11]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	813b      	strh	r3, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004b4a:	7afb      	ldrb	r3, [r7, #11]
 8004b4c:	b299      	uxth	r1, r3
 8004b4e:	88f8      	ldrh	r0, [r7, #6]
 8004b50:	893a      	ldrh	r2, [r7, #8]
 8004b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b56:	9302      	str	r3, [sp, #8]
 8004b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	4603      	mov	r3, r0
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7fd fab0 	bl	80020c8 <HAL_I2C_Mem_Read>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004b72:	7afb      	ldrb	r3, [r7, #11]
 8004b74:	4619      	mov	r1, r3
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f832 	bl	8004be0 <I2Cx_Error>
  }
  return status;    
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b08a      	sub	sp, #40	; 0x28
 8004b8a:	af04      	add	r7, sp, #16
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	4608      	mov	r0, r1
 8004b90:	4611      	mov	r1, r2
 8004b92:	461a      	mov	r2, r3
 8004b94:	4603      	mov	r3, r0
 8004b96:	72fb      	strb	r3, [r7, #11]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	813b      	strh	r3, [r7, #8]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004ba4:	7afb      	ldrb	r3, [r7, #11]
 8004ba6:	b299      	uxth	r1, r3
 8004ba8:	88f8      	ldrh	r0, [r7, #6]
 8004baa:	893a      	ldrh	r2, [r7, #8]
 8004bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bb0:	9302      	str	r3, [sp, #8]
 8004bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	4603      	mov	r3, r0
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7fd f96f 	bl	8001ea0 <HAL_I2C_Mem_Write>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004bcc:	7afb      	ldrb	r3, [r7, #11]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f805 	bl	8004be0 <I2Cx_Error>
  }
  return status;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7fd f913 	bl	8001e18 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff ff5e 	bl	8004ab4 <I2Cx_Init>
}
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004c04:	4802      	ldr	r0, [pc, #8]	; (8004c10 <TS_IO_Init+0x10>)
 8004c06:	f7ff ff55 	bl	8004ab4 <I2Cx_Init>
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	2000016c 	.word	0x2000016c

08004c14 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	71bb      	strb	r3, [r7, #6]
 8004c22:	4613      	mov	r3, r2
 8004c24:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004c26:	79bb      	ldrb	r3, [r7, #6]
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	79f9      	ldrb	r1, [r7, #7]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	1d7b      	adds	r3, r7, #5
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2301      	movs	r3, #1
 8004c36:	4803      	ldr	r0, [pc, #12]	; (8004c44 <TS_IO_Write+0x30>)
 8004c38:	f7ff ffa5 	bl	8004b86 <I2Cx_WriteMultiple>
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	2000016c 	.word	0x2000016c

08004c48 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	4603      	mov	r3, r0
 8004c50:	460a      	mov	r2, r1
 8004c52:	71fb      	strb	r3, [r7, #7]
 8004c54:	4613      	mov	r3, r2
 8004c56:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004c5c:	79bb      	ldrb	r3, [r7, #6]
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	79f9      	ldrb	r1, [r7, #7]
 8004c62:	2301      	movs	r3, #1
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	f107 030f 	add.w	r3, r7, #15
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	4804      	ldr	r0, [pc, #16]	; (8004c80 <TS_IO_Read+0x38>)
 8004c70:	f7ff ff5c 	bl	8004b2c <I2Cx_ReadMultiple>

  return read_value;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	2000016c 	.word	0x2000016c

08004c84 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fc f803 	bl	8000c98 <HAL_Delay>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004ca0:	4b31      	ldr	r3, [pc, #196]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004ca2:	2228      	movs	r2, #40	; 0x28
 8004ca4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004ca6:	4b30      	ldr	r3, [pc, #192]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004ca8:	2209      	movs	r2, #9
 8004caa:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004cac:	4b2e      	ldr	r3, [pc, #184]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004cae:	2235      	movs	r2, #53	; 0x35
 8004cb0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004cb2:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004cb4:	220b      	movs	r2, #11
 8004cb6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004cba:	f240 121b 	movw	r2, #283	; 0x11b
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004cc0:	4b29      	ldr	r3, [pc, #164]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004cc2:	f240 2215 	movw	r2, #533	; 0x215
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004cca:	f240 121d 	movw	r2, #285	; 0x11d
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004cd2:	f240 2235 	movw	r2, #565	; 0x235
 8004cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4823      	ldr	r0, [pc, #140]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004cdc:	f000 fc20 	bl	8005520 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004ce0:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004ce2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004ce6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004ce8:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004cea:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004cee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004d00:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004d08:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004d14:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004d20:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004d22:	4a12      	ldr	r2, [pc, #72]	; (8004d6c <BSP_LCD_Init+0xd0>)
 8004d24:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004d26:	4810      	ldr	r0, [pc, #64]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004d28:	f7fd ff7e 	bl	8002c28 <HAL_LTDC_GetState>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004d32:	2100      	movs	r1, #0
 8004d34:	480c      	ldr	r0, [pc, #48]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004d36:	f000 fb19 	bl	800536c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004d3a:	480b      	ldr	r0, [pc, #44]	; (8004d68 <BSP_LCD_Init+0xcc>)
 8004d3c:	f7fd fd86 	bl	800284c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004d40:	2201      	movs	r2, #1
 8004d42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d46:	480a      	ldr	r0, [pc, #40]	; (8004d70 <BSP_LCD_Init+0xd4>)
 8004d48:	f7fc ffbc 	bl	8001cc4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	2108      	movs	r1, #8
 8004d50:	4808      	ldr	r0, [pc, #32]	; (8004d74 <BSP_LCD_Init+0xd8>)
 8004d52:	f7fc ffb7 	bl	8001cc4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004d56:	f000 fd03 	bl	8005760 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004d5a:	4807      	ldr	r0, [pc, #28]	; (8004d78 <BSP_LCD_Init+0xdc>)
 8004d5c:	f000 f8d8 	bl	8004f10 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200001c0 	.word	0x200001c0
 8004d6c:	40016800 	.word	0x40016800
 8004d70:	40022000 	.word	0x40022000
 8004d74:	40022800 	.word	0x40022800
 8004d78:	2000000c 	.word	0x2000000c

08004d7c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <BSP_LCD_GetXSize+0x20>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a06      	ldr	r2, [pc, #24]	; (8004da0 <BSP_LCD_GetXSize+0x24>)
 8004d86:	2134      	movs	r1, #52	; 0x34
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3360      	adds	r3, #96	; 0x60
 8004d90:	681b      	ldr	r3, [r3, #0]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	200002a8 	.word	0x200002a8
 8004da0:	200001c0 	.word	0x200001c0

08004da4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <BSP_LCD_GetYSize+0x20>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a06      	ldr	r2, [pc, #24]	; (8004dc8 <BSP_LCD_GetYSize+0x24>)
 8004dae:	2134      	movs	r1, #52	; 0x34
 8004db0:	fb01 f303 	mul.w	r3, r1, r3
 8004db4:	4413      	add	r3, r2
 8004db6:	3364      	adds	r3, #100	; 0x64
 8004db8:	681b      	ldr	r3, [r3, #0]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	200002a8 	.word	0x200002a8
 8004dc8:	200001c0 	.word	0x200001c0

08004dcc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b090      	sub	sp, #64	; 0x40
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	6039      	str	r1, [r7, #0]
 8004dd6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004ddc:	f7ff ffce 	bl	8004d7c <BSP_LCD_GetXSize>
 8004de0:	4603      	mov	r3, r0
 8004de2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004de8:	f7ff ffdc 	bl	8004da4 <BSP_LCD_GetYSize>
 8004dec:	4603      	mov	r3, r0
 8004dee:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004df8:	23ff      	movs	r3, #255	; 0xff
 8004dfa:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004e12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004e18:	2307      	movs	r3, #7
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004e1c:	f7ff ffae 	bl	8004d7c <BSP_LCD_GetXSize>
 8004e20:	4603      	mov	r3, r0
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004e24:	f7ff ffbe 	bl	8004da4 <BSP_LCD_GetYSize>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004e2c:	88fa      	ldrh	r2, [r7, #6]
 8004e2e:	f107 030c 	add.w	r3, r7, #12
 8004e32:	4619      	mov	r1, r3
 8004e34:	4812      	ldr	r0, [pc, #72]	; (8004e80 <BSP_LCD_LayerDefaultInit+0xb4>)
 8004e36:	f7fd feb9 	bl	8002bac <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	4911      	ldr	r1, [pc, #68]	; (8004e84 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	3304      	adds	r3, #4
 8004e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	490c      	ldr	r1, [pc, #48]	; (8004e84 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004e54:	4613      	mov	r3, r2
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3308      	adds	r3, #8
 8004e60:	4a09      	ldr	r2, [pc, #36]	; (8004e88 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004e62:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	4907      	ldr	r1, [pc, #28]	; (8004e84 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004e76:	601a      	str	r2, [r3, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	3740      	adds	r7, #64	; 0x40
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200001c0 	.word	0x200001c0
 8004e84:	200002ac 	.word	0x200002ac
 8004e88:	2000000c 	.word	0x2000000c

08004e8c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004e94:	4a04      	ldr	r2, [pc, #16]	; (8004ea8 <BSP_LCD_SelectLayer+0x1c>)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6013      	str	r3, [r2, #0]
} 
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	200002a8 	.word	0x200002a8

08004eac <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004eb4:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <BSP_LCD_SetTextColor+0x28>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4907      	ldr	r1, [pc, #28]	; (8004ed8 <BSP_LCD_SetTextColor+0x2c>)
 8004eba:	4613      	mov	r3, r2
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	601a      	str	r2, [r3, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	200002a8 	.word	0x200002a8
 8004ed8:	200002ac 	.word	0x200002ac

08004edc <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004ee4:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <BSP_LCD_SetBackColor+0x2c>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4908      	ldr	r1, [pc, #32]	; (8004f0c <BSP_LCD_SetBackColor+0x30>)
 8004eea:	4613      	mov	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	601a      	str	r2, [r3, #0]
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	200002a8 	.word	0x200002a8
 8004f0c:	200002ac 	.word	0x200002ac

08004f10 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <BSP_LCD_SetFont+0x2c>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4908      	ldr	r1, [pc, #32]	; (8004f40 <BSP_LCD_SetFont+0x30>)
 8004f1e:	4613      	mov	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3308      	adds	r3, #8
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	601a      	str	r2, [r3, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	200002a8 	.word	0x200002a8
 8004f40:	200002ac 	.word	0x200002ac

08004f44 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <BSP_LCD_Clear+0x48>)
 8004f4e:	681c      	ldr	r4, [r3, #0]
 8004f50:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <BSP_LCD_Clear+0x48>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <BSP_LCD_Clear+0x4c>)
 8004f56:	2134      	movs	r1, #52	; 0x34
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	335c      	adds	r3, #92	; 0x5c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461e      	mov	r6, r3
 8004f64:	f7ff ff0a 	bl	8004d7c <BSP_LCD_GetXSize>
 8004f68:	4605      	mov	r5, r0
 8004f6a:	f7ff ff1b 	bl	8004da4 <BSP_LCD_GetYSize>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	2300      	movs	r3, #0
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	4631      	mov	r1, r6
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f000 fba2 	bl	80056c8 <LL_FillBuffer>
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f8c:	200002a8 	.word	0x200002a8
 8004f90:	200001c0 	.word	0x200001c0

08004f94 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	80fb      	strh	r3, [r7, #6]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	80bb      	strh	r3, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <BSP_LCD_DisplayChar+0x80>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	491b      	ldr	r1, [pc, #108]	; (8005018 <BSP_LCD_DisplayChar+0x84>)
 8004fac:	4613      	mov	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6819      	ldr	r1, [r3, #0]
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004fc2:	4b14      	ldr	r3, [pc, #80]	; (8005014 <BSP_LCD_DisplayChar+0x80>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4c14      	ldr	r4, [pc, #80]	; (8005018 <BSP_LCD_DisplayChar+0x84>)
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4423      	add	r3, r4
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004fd8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <BSP_LCD_DisplayChar+0x80>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4c0d      	ldr	r4, [pc, #52]	; (8005018 <BSP_LCD_DisplayChar+0x84>)
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4423      	add	r3, r4
 8004fec:	3308      	adds	r3, #8
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	889b      	ldrh	r3, [r3, #4]
 8004ff2:	3307      	adds	r3, #7
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	da00      	bge.n	8004ffa <BSP_LCD_DisplayChar+0x66>
 8004ff8:	3307      	adds	r3, #7
 8004ffa:	10db      	asrs	r3, r3, #3
 8004ffc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005000:	18ca      	adds	r2, r1, r3
 8005002:	88b9      	ldrh	r1, [r7, #4]
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 faa6 	bl	8005558 <DrawChar>
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	bd90      	pop	{r4, r7, pc}
 8005014:	200002a8 	.word	0x200002a8
 8005018:	200002ac 	.word	0x200002ac

0800501c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800501c:	b5b0      	push	{r4, r5, r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	60ba      	str	r2, [r7, #8]
 8005024:	461a      	mov	r2, r3
 8005026:	4603      	mov	r3, r0
 8005028:	81fb      	strh	r3, [r7, #14]
 800502a:	460b      	mov	r3, r1
 800502c:	81bb      	strh	r3, [r7, #12]
 800502e:	4613      	mov	r3, r2
 8005030:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8005032:	2301      	movs	r3, #1
 8005034:	83fb      	strh	r3, [r7, #30]
 8005036:	2300      	movs	r3, #0
 8005038:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8005046:	e002      	b.n	800504e <BSP_LCD_DisplayStringAt+0x32>
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	3301      	adds	r3, #1
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	617a      	str	r2, [r7, #20]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f6      	bne.n	8005048 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800505a:	f7ff fe8f 	bl	8004d7c <BSP_LCD_GetXSize>
 800505e:	4601      	mov	r1, r0
 8005060:	4b50      	ldr	r3, [pc, #320]	; (80051a4 <BSP_LCD_DisplayStringAt+0x188>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4850      	ldr	r0, [pc, #320]	; (80051a8 <BSP_LCD_DisplayStringAt+0x18c>)
 8005066:	4613      	mov	r3, r2
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4403      	add	r3, r0
 8005070:	3308      	adds	r3, #8
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	889b      	ldrh	r3, [r3, #4]
 8005076:	fbb1 f3f3 	udiv	r3, r1, r3
 800507a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d01c      	beq.n	80050bc <BSP_LCD_DisplayStringAt+0xa0>
 8005082:	2b03      	cmp	r3, #3
 8005084:	dc33      	bgt.n	80050ee <BSP_LCD_DisplayStringAt+0xd2>
 8005086:	2b01      	cmp	r3, #1
 8005088:	d002      	beq.n	8005090 <BSP_LCD_DisplayStringAt+0x74>
 800508a:	2b02      	cmp	r3, #2
 800508c:	d019      	beq.n	80050c2 <BSP_LCD_DisplayStringAt+0xa6>
 800508e:	e02e      	b.n	80050ee <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	1ad1      	subs	r1, r2, r3
 8005096:	4b43      	ldr	r3, [pc, #268]	; (80051a4 <BSP_LCD_DisplayStringAt+0x188>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4843      	ldr	r0, [pc, #268]	; (80051a8 <BSP_LCD_DisplayStringAt+0x18c>)
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4403      	add	r3, r0
 80050a6:	3308      	adds	r3, #8
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	889b      	ldrh	r3, [r3, #4]
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	89fb      	ldrh	r3, [r7, #14]
 80050b6:	4413      	add	r3, r2
 80050b8:	83fb      	strh	r3, [r7, #30]
      break;
 80050ba:	e01b      	b.n	80050f4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	83fb      	strh	r3, [r7, #30]
      break;
 80050c0:	e018      	b.n	80050f4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	b299      	uxth	r1, r3
 80050ca:	4b36      	ldr	r3, [pc, #216]	; (80051a4 <BSP_LCD_DisplayStringAt+0x188>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4836      	ldr	r0, [pc, #216]	; (80051a8 <BSP_LCD_DisplayStringAt+0x18c>)
 80050d0:	4613      	mov	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4403      	add	r3, r0
 80050da:	3308      	adds	r3, #8
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	889b      	ldrh	r3, [r3, #4]
 80050e0:	fb11 f303 	smulbb	r3, r1, r3
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	89fb      	ldrh	r3, [r7, #14]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	83fb      	strh	r3, [r7, #30]
      break;
 80050ec:	e002      	b.n	80050f4 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80050ee:	89fb      	ldrh	r3, [r7, #14]
 80050f0:	83fb      	strh	r3, [r7, #30]
      break;
 80050f2:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80050f4:	8bfb      	ldrh	r3, [r7, #30]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <BSP_LCD_DisplayStringAt+0xe6>
 80050fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	da1d      	bge.n	800513e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8005102:	2301      	movs	r3, #1
 8005104:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005106:	e01a      	b.n	800513e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	89b9      	ldrh	r1, [r7, #12]
 800510e:	8bfb      	ldrh	r3, [r7, #30]
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff ff3f 	bl	8004f94 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8005116:	4b23      	ldr	r3, [pc, #140]	; (80051a4 <BSP_LCD_DisplayStringAt+0x188>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4923      	ldr	r1, [pc, #140]	; (80051a8 <BSP_LCD_DisplayStringAt+0x18c>)
 800511c:	4613      	mov	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	3308      	adds	r3, #8
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	889a      	ldrh	r2, [r3, #4]
 800512c:	8bfb      	ldrh	r3, [r7, #30]
 800512e:	4413      	add	r3, r2
 8005130:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	3301      	adds	r3, #1
 8005136:	60bb      	str	r3, [r7, #8]
    i++;
 8005138:	8bbb      	ldrh	r3, [r7, #28]
 800513a:	3301      	adds	r3, #1
 800513c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	bf14      	ite	ne
 8005146:	2301      	movne	r3, #1
 8005148:	2300      	moveq	r3, #0
 800514a:	b2dc      	uxtb	r4, r3
 800514c:	f7ff fe16 	bl	8004d7c <BSP_LCD_GetXSize>
 8005150:	8bb9      	ldrh	r1, [r7, #28]
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <BSP_LCD_DisplayStringAt+0x188>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	4d14      	ldr	r5, [pc, #80]	; (80051a8 <BSP_LCD_DisplayStringAt+0x18c>)
 8005158:	4613      	mov	r3, r2
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	442b      	add	r3, r5
 8005162:	3308      	adds	r3, #8
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	889b      	ldrh	r3, [r3, #4]
 8005168:	fb01 f303 	mul.w	r3, r1, r3
 800516c:	1ac3      	subs	r3, r0, r3
 800516e:	b299      	uxth	r1, r3
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <BSP_LCD_DisplayStringAt+0x188>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	480c      	ldr	r0, [pc, #48]	; (80051a8 <BSP_LCD_DisplayStringAt+0x18c>)
 8005176:	4613      	mov	r3, r2
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4403      	add	r3, r0
 8005180:	3308      	adds	r3, #8
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	889b      	ldrh	r3, [r3, #4]
 8005186:	4299      	cmp	r1, r3
 8005188:	bf2c      	ite	cs
 800518a:	2301      	movcs	r3, #1
 800518c:	2300      	movcc	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	4023      	ands	r3, r4
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1b7      	bne.n	8005108 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bdb0      	pop	{r4, r5, r7, pc}
 80051a2:	bf00      	nop
 80051a4:	200002a8 	.word	0x200002a8
 80051a8:	200002ac 	.word	0x200002ac

080051ac <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80051ac:	b5b0      	push	{r4, r5, r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	603a      	str	r2, [r7, #0]
 80051b6:	80fb      	strh	r3, [r7, #6]
 80051b8:	460b      	mov	r3, r1
 80051ba:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80051bc:	4b1d      	ldr	r3, [pc, #116]	; (8005234 <BSP_LCD_DrawPixel+0x88>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <BSP_LCD_DrawPixel+0x8c>)
 80051c2:	2134      	movs	r1, #52	; 0x34
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	4413      	add	r3, r2
 80051ca:	3348      	adds	r3, #72	; 0x48
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d116      	bne.n	8005200 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80051d2:	4b18      	ldr	r3, [pc, #96]	; (8005234 <BSP_LCD_DrawPixel+0x88>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a18      	ldr	r2, [pc, #96]	; (8005238 <BSP_LCD_DrawPixel+0x8c>)
 80051d8:	2134      	movs	r1, #52	; 0x34
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	4413      	add	r3, r2
 80051e0:	335c      	adds	r3, #92	; 0x5c
 80051e2:	681c      	ldr	r4, [r3, #0]
 80051e4:	88bd      	ldrh	r5, [r7, #4]
 80051e6:	f7ff fdc9 	bl	8004d7c <BSP_LCD_GetXSize>
 80051ea:	4603      	mov	r3, r0
 80051ec:	fb03 f205 	mul.w	r2, r3, r5
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	4413      	add	r3, r2
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	4423      	add	r3, r4
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	b292      	uxth	r2, r2
 80051fc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80051fe:	e015      	b.n	800522c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005200:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <BSP_LCD_DrawPixel+0x88>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <BSP_LCD_DrawPixel+0x8c>)
 8005206:	2134      	movs	r1, #52	; 0x34
 8005208:	fb01 f303 	mul.w	r3, r1, r3
 800520c:	4413      	add	r3, r2
 800520e:	335c      	adds	r3, #92	; 0x5c
 8005210:	681c      	ldr	r4, [r3, #0]
 8005212:	88bd      	ldrh	r5, [r7, #4]
 8005214:	f7ff fdb2 	bl	8004d7c <BSP_LCD_GetXSize>
 8005218:	4603      	mov	r3, r0
 800521a:	fb03 f205 	mul.w	r2, r3, r5
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4423      	add	r3, r4
 8005226:	461a      	mov	r2, r3
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6013      	str	r3, [r2, #0]
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bdb0      	pop	{r4, r5, r7, pc}
 8005234:	200002a8 	.word	0x200002a8
 8005238:	200001c0 	.word	0x200001c0

0800523c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	b086      	sub	sp, #24
 8005242:	af02      	add	r7, sp, #8
 8005244:	4604      	mov	r4, r0
 8005246:	4608      	mov	r0, r1
 8005248:	4611      	mov	r1, r2
 800524a:	461a      	mov	r2, r3
 800524c:	4623      	mov	r3, r4
 800524e:	80fb      	strh	r3, [r7, #6]
 8005250:	4603      	mov	r3, r0
 8005252:	80bb      	strh	r3, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	807b      	strh	r3, [r7, #2]
 8005258:	4613      	mov	r3, r2
 800525a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005260:	4b30      	ldr	r3, [pc, #192]	; (8005324 <BSP_LCD_FillRect+0xe8>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4930      	ldr	r1, [pc, #192]	; (8005328 <BSP_LCD_FillRect+0xec>)
 8005266:	4613      	mov	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fe1a 	bl	8004eac <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005278:	4b2a      	ldr	r3, [pc, #168]	; (8005324 <BSP_LCD_FillRect+0xe8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a2b      	ldr	r2, [pc, #172]	; (800532c <BSP_LCD_FillRect+0xf0>)
 800527e:	2134      	movs	r1, #52	; 0x34
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	4413      	add	r3, r2
 8005286:	3348      	adds	r3, #72	; 0x48
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d114      	bne.n	80052b8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800528e:	4b25      	ldr	r3, [pc, #148]	; (8005324 <BSP_LCD_FillRect+0xe8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a26      	ldr	r2, [pc, #152]	; (800532c <BSP_LCD_FillRect+0xf0>)
 8005294:	2134      	movs	r1, #52	; 0x34
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	4413      	add	r3, r2
 800529c:	335c      	adds	r3, #92	; 0x5c
 800529e:	681c      	ldr	r4, [r3, #0]
 80052a0:	f7ff fd6c 	bl	8004d7c <BSP_LCD_GetXSize>
 80052a4:	4602      	mov	r2, r0
 80052a6:	88bb      	ldrh	r3, [r7, #4]
 80052a8:	fb03 f202 	mul.w	r2, r3, r2
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	4413      	add	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4423      	add	r3, r4
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e013      	b.n	80052e0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80052b8:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <BSP_LCD_FillRect+0xe8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1b      	ldr	r2, [pc, #108]	; (800532c <BSP_LCD_FillRect+0xf0>)
 80052be:	2134      	movs	r1, #52	; 0x34
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	335c      	adds	r3, #92	; 0x5c
 80052c8:	681c      	ldr	r4, [r3, #0]
 80052ca:	f7ff fd57 	bl	8004d7c <BSP_LCD_GetXSize>
 80052ce:	4602      	mov	r2, r0
 80052d0:	88bb      	ldrh	r3, [r7, #4]
 80052d2:	fb03 f202 	mul.w	r2, r3, r2
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4423      	add	r3, r4
 80052de:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80052e0:	4b10      	ldr	r3, [pc, #64]	; (8005324 <BSP_LCD_FillRect+0xe8>)
 80052e2:	681c      	ldr	r4, [r3, #0]
 80052e4:	68fd      	ldr	r5, [r7, #12]
 80052e6:	887e      	ldrh	r6, [r7, #2]
 80052e8:	f8b7 8000 	ldrh.w	r8, [r7]
 80052ec:	f7ff fd46 	bl	8004d7c <BSP_LCD_GetXSize>
 80052f0:	4602      	mov	r2, r0
 80052f2:	887b      	ldrh	r3, [r7, #2]
 80052f4:	1ad1      	subs	r1, r2, r3
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <BSP_LCD_FillRect+0xe8>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	480b      	ldr	r0, [pc, #44]	; (8005328 <BSP_LCD_FillRect+0xec>)
 80052fc:	4613      	mov	r3, r2
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4403      	add	r3, r0
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	9301      	str	r3, [sp, #4]
 800530a:	9100      	str	r1, [sp, #0]
 800530c:	4643      	mov	r3, r8
 800530e:	4632      	mov	r2, r6
 8005310:	4629      	mov	r1, r5
 8005312:	4620      	mov	r0, r4
 8005314:	f000 f9d8 	bl	80056c8 <LL_FillBuffer>
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005322:	bf00      	nop
 8005324:	200002a8 	.word	0x200002a8
 8005328:	200002ac 	.word	0x200002ac
 800532c:	200001c0 	.word	0x200001c0

08005330 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <BSP_LCD_DisplayOn+0x30>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <BSP_LCD_DisplayOn+0x30>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8005344:	2201      	movs	r2, #1
 8005346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800534a:	4806      	ldr	r0, [pc, #24]	; (8005364 <BSP_LCD_DisplayOn+0x34>)
 800534c:	f7fc fcba 	bl	8001cc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005350:	2201      	movs	r2, #1
 8005352:	2108      	movs	r1, #8
 8005354:	4804      	ldr	r0, [pc, #16]	; (8005368 <BSP_LCD_DisplayOn+0x38>)
 8005356:	f7fc fcb5 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	200001c0 	.word	0x200001c0
 8005364:	40022000 	.word	0x40022000
 8005368:	40022800 	.word	0x40022800

0800536c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b090      	sub	sp, #64	; 0x40
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005376:	4b64      	ldr	r3, [pc, #400]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	4a63      	ldr	r2, [pc, #396]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 800537c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005380:	6453      	str	r3, [r2, #68]	; 0x44
 8005382:	4b61      	ldr	r3, [pc, #388]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800538e:	4b5e      	ldr	r3, [pc, #376]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	4a5d      	ldr	r2, [pc, #372]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 8005394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005398:	6313      	str	r3, [r2, #48]	; 0x30
 800539a:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053a6:	4b58      	ldr	r3, [pc, #352]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	4a57      	ldr	r2, [pc, #348]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053ac:	f043 0310 	orr.w	r3, r3, #16
 80053b0:	6313      	str	r3, [r2, #48]	; 0x30
 80053b2:	4b55      	ldr	r3, [pc, #340]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	623b      	str	r3, [r7, #32]
 80053bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80053be:	4b52      	ldr	r3, [pc, #328]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	4a51      	ldr	r2, [pc, #324]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c8:	6313      	str	r3, [r2, #48]	; 0x30
 80053ca:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80053d6:	4b4c      	ldr	r3, [pc, #304]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	4a4b      	ldr	r2, [pc, #300]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e0:	6313      	str	r3, [r2, #48]	; 0x30
 80053e2:	4b49      	ldr	r3, [pc, #292]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80053ee:	4b46      	ldr	r3, [pc, #280]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	4a45      	ldr	r2, [pc, #276]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053f8:	6313      	str	r3, [r2, #48]	; 0x30
 80053fa:	4b43      	ldr	r3, [pc, #268]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005406:	4b40      	ldr	r3, [pc, #256]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	4a3f      	ldr	r2, [pc, #252]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 800540c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005410:	6313      	str	r3, [r2, #48]	; 0x30
 8005412:	4b3d      	ldr	r3, [pc, #244]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800541e:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	4a39      	ldr	r2, [pc, #228]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 8005424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005428:	6313      	str	r3, [r2, #48]	; 0x30
 800542a:	4b37      	ldr	r3, [pc, #220]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005436:	4b34      	ldr	r3, [pc, #208]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	4a33      	ldr	r2, [pc, #204]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 800543c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005440:	6313      	str	r3, [r2, #48]	; 0x30
 8005442:	4b31      	ldr	r3, [pc, #196]	; (8005508 <BSP_LCD_MspInit+0x19c>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800544e:	2310      	movs	r3, #16
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005452:	2302      	movs	r3, #2
 8005454:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005456:	2300      	movs	r3, #0
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800545a:	2302      	movs	r3, #2
 800545c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800545e:	230e      	movs	r3, #14
 8005460:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005466:	4619      	mov	r1, r3
 8005468:	4828      	ldr	r0, [pc, #160]	; (800550c <BSP_LCD_MspInit+0x1a0>)
 800546a:	f7fc fa7f 	bl	800196c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800546e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005474:	2302      	movs	r3, #2
 8005476:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005478:	2309      	movs	r3, #9
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800547c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005480:	4619      	mov	r1, r3
 8005482:	4823      	ldr	r0, [pc, #140]	; (8005510 <BSP_LCD_MspInit+0x1a4>)
 8005484:	f7fc fa72 	bl	800196c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005488:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800548e:	2302      	movs	r3, #2
 8005490:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005492:	230e      	movs	r3, #14
 8005494:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800549a:	4619      	mov	r1, r3
 800549c:	481d      	ldr	r0, [pc, #116]	; (8005514 <BSP_LCD_MspInit+0x1a8>)
 800549e:	f7fc fa65 	bl	800196c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80054a2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80054a8:	2302      	movs	r3, #2
 80054aa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80054ac:	230e      	movs	r3, #14
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80054b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054b4:	4619      	mov	r1, r3
 80054b6:	4818      	ldr	r0, [pc, #96]	; (8005518 <BSP_LCD_MspInit+0x1ac>)
 80054b8:	f7fc fa58 	bl	800196c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80054bc:	23f7      	movs	r3, #247	; 0xf7
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80054c0:	2302      	movs	r3, #2
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80054c4:	230e      	movs	r3, #14
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80054c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054cc:	4619      	mov	r1, r3
 80054ce:	4813      	ldr	r0, [pc, #76]	; (800551c <BSP_LCD_MspInit+0x1b0>)
 80054d0:	f7fc fa4c 	bl	800196c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80054d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80054da:	2301      	movs	r3, #1
 80054dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80054de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054e2:	4619      	mov	r1, r3
 80054e4:	480b      	ldr	r0, [pc, #44]	; (8005514 <BSP_LCD_MspInit+0x1a8>)
 80054e6:	f7fc fa41 	bl	800196c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80054ea:	2308      	movs	r3, #8
 80054ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80054ee:	2301      	movs	r3, #1
 80054f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80054f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054f6:	4619      	mov	r1, r3
 80054f8:	4808      	ldr	r0, [pc, #32]	; (800551c <BSP_LCD_MspInit+0x1b0>)
 80054fa:	f7fc fa37 	bl	800196c <HAL_GPIO_Init>
}
 80054fe:	bf00      	nop
 8005500:	3740      	adds	r7, #64	; 0x40
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023800 	.word	0x40023800
 800550c:	40021000 	.word	0x40021000
 8005510:	40021800 	.word	0x40021800
 8005514:	40022000 	.word	0x40022000
 8005518:	40022400 	.word	0x40022400
 800551c:	40022800 	.word	0x40022800

08005520 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <BSP_LCD_ClockConfig+0x34>)
 800552c:	2208      	movs	r2, #8
 800552e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005530:	4b08      	ldr	r3, [pc, #32]	; (8005554 <BSP_LCD_ClockConfig+0x34>)
 8005532:	22c0      	movs	r2, #192	; 0xc0
 8005534:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005536:	4b07      	ldr	r3, [pc, #28]	; (8005554 <BSP_LCD_ClockConfig+0x34>)
 8005538:	2205      	movs	r2, #5
 800553a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <BSP_LCD_ClockConfig+0x34>)
 800553e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005542:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005544:	4803      	ldr	r0, [pc, #12]	; (8005554 <BSP_LCD_ClockConfig+0x34>)
 8005546:	f7fe f9c3 	bl	80038d0 <HAL_RCCEx_PeriphCLKConfig>
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	200002c4 	.word	0x200002c4

08005558 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	603a      	str	r2, [r7, #0]
 8005562:	80fb      	strh	r3, [r7, #6]
 8005564:	460b      	mov	r3, r1
 8005566:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005570:	4b53      	ldr	r3, [pc, #332]	; (80056c0 <DrawChar+0x168>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4953      	ldr	r1, [pc, #332]	; (80056c4 <DrawChar+0x16c>)
 8005576:	4613      	mov	r3, r2
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	3308      	adds	r3, #8
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	88db      	ldrh	r3, [r3, #6]
 8005586:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005588:	4b4d      	ldr	r3, [pc, #308]	; (80056c0 <DrawChar+0x168>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	494d      	ldr	r1, [pc, #308]	; (80056c4 <DrawChar+0x16c>)
 800558e:	4613      	mov	r3, r2
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3308      	adds	r3, #8
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	889b      	ldrh	r3, [r3, #4]
 800559e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80055a0:	8a3b      	ldrh	r3, [r7, #16]
 80055a2:	3307      	adds	r3, #7
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	da00      	bge.n	80055aa <DrawChar+0x52>
 80055a8:	3307      	adds	r3, #7
 80055aa:	10db      	asrs	r3, r3, #3
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	8a3b      	ldrh	r3, [r7, #16]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	e076      	b.n	80056ae <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80055c0:	8a3b      	ldrh	r3, [r7, #16]
 80055c2:	3307      	adds	r3, #7
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	da00      	bge.n	80055ca <DrawChar+0x72>
 80055c8:	3307      	adds	r3, #7
 80055ca:	10db      	asrs	r3, r3, #3
 80055cc:	461a      	mov	r2, r3
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	fb02 f303 	mul.w	r3, r2, r3
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	4413      	add	r3, r2
 80055d8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80055da:	8a3b      	ldrh	r3, [r7, #16]
 80055dc:	3307      	adds	r3, #7
 80055de:	2b00      	cmp	r3, #0
 80055e0:	da00      	bge.n	80055e4 <DrawChar+0x8c>
 80055e2:	3307      	adds	r3, #7
 80055e4:	10db      	asrs	r3, r3, #3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d002      	beq.n	80055f0 <DrawChar+0x98>
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d004      	beq.n	80055f8 <DrawChar+0xa0>
 80055ee:	e00c      	b.n	800560a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	617b      	str	r3, [r7, #20]
      break;
 80055f6:	e016      	b.n	8005626 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	021b      	lsls	r3, r3, #8
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	3201      	adds	r2, #1
 8005602:	7812      	ldrb	r2, [r2, #0]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
      break;
 8005608:	e00d      	b.n	8005626 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	041a      	lsls	r2, r3, #16
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	3301      	adds	r3, #1
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	4313      	orrs	r3, r2
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	3202      	adds	r2, #2
 800561e:	7812      	ldrb	r2, [r2, #0]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
      break;
 8005624:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	e036      	b.n	800569a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800562c:	8a3a      	ldrh	r2, [r7, #16]
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	1ad2      	subs	r2, r2, r3
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	4413      	add	r3, r2
 8005636:	3b01      	subs	r3, #1
 8005638:	2201      	movs	r2, #1
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	461a      	mov	r2, r3
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d012      	beq.n	800566e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	b29a      	uxth	r2, r3
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	4413      	add	r3, r2
 8005650:	b298      	uxth	r0, r3
 8005652:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <DrawChar+0x168>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	491b      	ldr	r1, [pc, #108]	; (80056c4 <DrawChar+0x16c>)
 8005658:	4613      	mov	r3, r2
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	88bb      	ldrh	r3, [r7, #4]
 8005666:	4619      	mov	r1, r3
 8005668:	f7ff fda0 	bl	80051ac <BSP_LCD_DrawPixel>
 800566c:	e012      	b.n	8005694 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	b29a      	uxth	r2, r3
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	4413      	add	r3, r2
 8005676:	b298      	uxth	r0, r3
 8005678:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <DrawChar+0x168>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4911      	ldr	r1, [pc, #68]	; (80056c4 <DrawChar+0x16c>)
 800567e:	4613      	mov	r3, r2
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	3304      	adds	r3, #4
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	88bb      	ldrh	r3, [r7, #4]
 800568e:	4619      	mov	r1, r3
 8005690:	f7ff fd8c 	bl	80051ac <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	3301      	adds	r3, #1
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	8a3b      	ldrh	r3, [r7, #16]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d3c4      	bcc.n	800562c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80056a2:	88bb      	ldrh	r3, [r7, #4]
 80056a4:	3301      	adds	r3, #1
 80056a6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	3301      	adds	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
 80056ae:	8a7b      	ldrh	r3, [r7, #18]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d384      	bcc.n	80055c0 <DrawChar+0x68>
  }
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	200002a8 	.word	0x200002a8
 80056c4:	200002ac 	.word	0x200002ac

080056c8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80056d6:	4b1e      	ldr	r3, [pc, #120]	; (8005750 <LL_FillBuffer+0x88>)
 80056d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80056dc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80056de:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <LL_FillBuffer+0x8c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <LL_FillBuffer+0x90>)
 80056e4:	2134      	movs	r1, #52	; 0x34
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	4413      	add	r3, r2
 80056ec:	3348      	adds	r3, #72	; 0x48
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d103      	bne.n	80056fc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80056f4:	4b16      	ldr	r3, [pc, #88]	; (8005750 <LL_FillBuffer+0x88>)
 80056f6:	2202      	movs	r2, #2
 80056f8:	609a      	str	r2, [r3, #8]
 80056fa:	e002      	b.n	8005702 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80056fc:	4b14      	ldr	r3, [pc, #80]	; (8005750 <LL_FillBuffer+0x88>)
 80056fe:	2200      	movs	r2, #0
 8005700:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8005702:	4a13      	ldr	r2, [pc, #76]	; (8005750 <LL_FillBuffer+0x88>)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005708:	4b11      	ldr	r3, [pc, #68]	; (8005750 <LL_FillBuffer+0x88>)
 800570a:	4a14      	ldr	r2, [pc, #80]	; (800575c <LL_FillBuffer+0x94>)
 800570c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800570e:	4810      	ldr	r0, [pc, #64]	; (8005750 <LL_FillBuffer+0x88>)
 8005710:	f7fb fea0 	bl	8001454 <HAL_DMA2D_Init>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d115      	bne.n	8005746 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	480c      	ldr	r0, [pc, #48]	; (8005750 <LL_FillBuffer+0x88>)
 800571e:	f7fb fff7 	bl	8001710 <HAL_DMA2D_ConfigLayer>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10e      	bne.n	8005746 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69f9      	ldr	r1, [r7, #28]
 8005732:	4807      	ldr	r0, [pc, #28]	; (8005750 <LL_FillBuffer+0x88>)
 8005734:	f7fb fed8 	bl	80014e8 <HAL_DMA2D_Start>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800573e:	210a      	movs	r1, #10
 8005740:	4803      	ldr	r0, [pc, #12]	; (8005750 <LL_FillBuffer+0x88>)
 8005742:	f7fb fefc 	bl	800153e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000268 	.word	0x20000268
 8005754:	200002a8 	.word	0x200002a8
 8005758:	200001c0 	.word	0x200001c0
 800575c:	4002b000 	.word	0x4002b000

08005760 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005764:	4b29      	ldr	r3, [pc, #164]	; (800580c <BSP_SDRAM_Init+0xac>)
 8005766:	4a2a      	ldr	r2, [pc, #168]	; (8005810 <BSP_SDRAM_Init+0xb0>)
 8005768:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800576a:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <BSP_SDRAM_Init+0xb4>)
 800576c:	2202      	movs	r2, #2
 800576e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005770:	4b28      	ldr	r3, [pc, #160]	; (8005814 <BSP_SDRAM_Init+0xb4>)
 8005772:	2207      	movs	r2, #7
 8005774:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005776:	4b27      	ldr	r3, [pc, #156]	; (8005814 <BSP_SDRAM_Init+0xb4>)
 8005778:	2204      	movs	r2, #4
 800577a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800577c:	4b25      	ldr	r3, [pc, #148]	; (8005814 <BSP_SDRAM_Init+0xb4>)
 800577e:	2207      	movs	r2, #7
 8005780:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8005782:	4b24      	ldr	r3, [pc, #144]	; (8005814 <BSP_SDRAM_Init+0xb4>)
 8005784:	2202      	movs	r2, #2
 8005786:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005788:	4b22      	ldr	r3, [pc, #136]	; (8005814 <BSP_SDRAM_Init+0xb4>)
 800578a:	2202      	movs	r2, #2
 800578c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800578e:	4b21      	ldr	r3, [pc, #132]	; (8005814 <BSP_SDRAM_Init+0xb4>)
 8005790:	2202      	movs	r2, #2
 8005792:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005794:	4b1d      	ldr	r3, [pc, #116]	; (800580c <BSP_SDRAM_Init+0xac>)
 8005796:	2200      	movs	r2, #0
 8005798:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800579a:	4b1c      	ldr	r3, [pc, #112]	; (800580c <BSP_SDRAM_Init+0xac>)
 800579c:	2200      	movs	r2, #0
 800579e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80057a0:	4b1a      	ldr	r3, [pc, #104]	; (800580c <BSP_SDRAM_Init+0xac>)
 80057a2:	2204      	movs	r2, #4
 80057a4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80057a6:	4b19      	ldr	r3, [pc, #100]	; (800580c <BSP_SDRAM_Init+0xac>)
 80057a8:	2210      	movs	r2, #16
 80057aa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80057ac:	4b17      	ldr	r3, [pc, #92]	; (800580c <BSP_SDRAM_Init+0xac>)
 80057ae:	2240      	movs	r2, #64	; 0x40
 80057b0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80057b2:	4b16      	ldr	r3, [pc, #88]	; (800580c <BSP_SDRAM_Init+0xac>)
 80057b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057b8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80057ba:	4b14      	ldr	r3, [pc, #80]	; (800580c <BSP_SDRAM_Init+0xac>)
 80057bc:	2200      	movs	r2, #0
 80057be:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80057c0:	4b12      	ldr	r3, [pc, #72]	; (800580c <BSP_SDRAM_Init+0xac>)
 80057c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80057c8:	4b10      	ldr	r3, [pc, #64]	; (800580c <BSP_SDRAM_Init+0xac>)
 80057ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80057d0:	4b0e      	ldr	r3, [pc, #56]	; (800580c <BSP_SDRAM_Init+0xac>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80057d6:	2100      	movs	r1, #0
 80057d8:	480c      	ldr	r0, [pc, #48]	; (800580c <BSP_SDRAM_Init+0xac>)
 80057da:	f000 f87f 	bl	80058dc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80057de:	490d      	ldr	r1, [pc, #52]	; (8005814 <BSP_SDRAM_Init+0xb4>)
 80057e0:	480a      	ldr	r0, [pc, #40]	; (800580c <BSP_SDRAM_Init+0xac>)
 80057e2:	f7fe fc65 	bl	80040b0 <HAL_SDRAM_Init>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <BSP_SDRAM_Init+0xb8>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e002      	b.n	80057fa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80057f4:	4b08      	ldr	r3, [pc, #32]	; (8005818 <BSP_SDRAM_Init+0xb8>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80057fa:	f240 6003 	movw	r0, #1539	; 0x603
 80057fe:	f000 f80d 	bl	800581c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <BSP_SDRAM_Init+0xb8>)
 8005804:	781b      	ldrb	r3, [r3, #0]
}
 8005806:	4618      	mov	r0, r3
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000348 	.word	0x20000348
 8005810:	a0000140 	.word	0xa0000140
 8005814:	2000037c 	.word	0x2000037c
 8005818:	2000003c 	.word	0x2000003c

0800581c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005828:	4b2a      	ldr	r3, [pc, #168]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800582e:	4b29      	ldr	r3, [pc, #164]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005830:	2210      	movs	r2, #16
 8005832:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005834:	4b27      	ldr	r3, [pc, #156]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005836:	2201      	movs	r2, #1
 8005838:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800583a:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800583c:	2200      	movs	r2, #0
 800583e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005844:	4923      	ldr	r1, [pc, #140]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005846:	4824      	ldr	r0, [pc, #144]	; (80058d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005848:	f7fe fc70 	bl	800412c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800584c:	2001      	movs	r0, #1
 800584e:	f7fb fa23 	bl	8000c98 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005852:	4b20      	ldr	r3, [pc, #128]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005854:	2202      	movs	r2, #2
 8005856:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005858:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800585a:	2210      	movs	r2, #16
 800585c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800585e:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005860:	2201      	movs	r2, #1
 8005862:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005864:	4b1b      	ldr	r3, [pc, #108]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005866:	2200      	movs	r2, #0
 8005868:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800586a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800586e:	4919      	ldr	r1, [pc, #100]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005870:	4819      	ldr	r0, [pc, #100]	; (80058d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005872:	f7fe fc5b 	bl	800412c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005876:	4b17      	ldr	r3, [pc, #92]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005878:	2203      	movs	r2, #3
 800587a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800587c:	4b15      	ldr	r3, [pc, #84]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800587e:	2210      	movs	r2, #16
 8005880:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005882:	4b14      	ldr	r3, [pc, #80]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005884:	2208      	movs	r2, #8
 8005886:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005888:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800588a:	2200      	movs	r2, #0
 800588c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800588e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005892:	4910      	ldr	r1, [pc, #64]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005894:	4810      	ldr	r0, [pc, #64]	; (80058d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005896:	f7fe fc49 	bl	800412c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800589a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800589e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80058a0:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058a2:	2204      	movs	r2, #4
 80058a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058a8:	2210      	movs	r2, #16
 80058aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4a07      	ldr	r2, [pc, #28]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058b6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80058b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058bc:	4905      	ldr	r1, [pc, #20]	; (80058d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80058be:	4806      	ldr	r0, [pc, #24]	; (80058d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80058c0:	f7fe fc34 	bl	800412c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4804      	ldr	r0, [pc, #16]	; (80058d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80058c8:	f7fe fc5b 	bl	8004182 <HAL_SDRAM_ProgramRefreshRate>
}
 80058cc:	bf00      	nop
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20000398 	.word	0x20000398
 80058d8:	20000348 	.word	0x20000348

080058dc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80058dc:	b580      	push	{r7, lr}
 80058de:	b090      	sub	sp, #64	; 0x40
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80058e6:	4b70      	ldr	r3, [pc, #448]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	4a6f      	ldr	r2, [pc, #444]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	6393      	str	r3, [r2, #56]	; 0x38
 80058f2:	4b6d      	ldr	r3, [pc, #436]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80058fe:	4b6a      	ldr	r3, [pc, #424]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	4a69      	ldr	r2, [pc, #420]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005904:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005908:	6313      	str	r3, [r2, #48]	; 0x30
 800590a:	4b67      	ldr	r3, [pc, #412]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005916:	4b64      	ldr	r3, [pc, #400]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	4a63      	ldr	r2, [pc, #396]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 800591c:	f043 0304 	orr.w	r3, r3, #4
 8005920:	6313      	str	r3, [r2, #48]	; 0x30
 8005922:	4b61      	ldr	r3, [pc, #388]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	623b      	str	r3, [r7, #32]
 800592c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800592e:	4b5e      	ldr	r3, [pc, #376]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	4a5d      	ldr	r2, [pc, #372]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005934:	f043 0308 	orr.w	r3, r3, #8
 8005938:	6313      	str	r3, [r2, #48]	; 0x30
 800593a:	4b5b      	ldr	r3, [pc, #364]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005946:	4b58      	ldr	r3, [pc, #352]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594a:	4a57      	ldr	r2, [pc, #348]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 800594c:	f043 0310 	orr.w	r3, r3, #16
 8005950:	6313      	str	r3, [r2, #48]	; 0x30
 8005952:	4b55      	ldr	r3, [pc, #340]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800595e:	4b52      	ldr	r3, [pc, #328]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	4a51      	ldr	r2, [pc, #324]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005964:	f043 0320 	orr.w	r3, r3, #32
 8005968:	6313      	str	r3, [r2, #48]	; 0x30
 800596a:	4b4f      	ldr	r3, [pc, #316]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005976:	4b4c      	ldr	r3, [pc, #304]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	4a4b      	ldr	r2, [pc, #300]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 800597c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005980:	6313      	str	r3, [r2, #48]	; 0x30
 8005982:	4b49      	ldr	r3, [pc, #292]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800598e:	4b46      	ldr	r3, [pc, #280]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	4a45      	ldr	r2, [pc, #276]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 8005994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005998:	6313      	str	r3, [r2, #48]	; 0x30
 800599a:	4b43      	ldr	r3, [pc, #268]	; (8005aa8 <BSP_SDRAM_MspInit+0x1cc>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80059a6:	2302      	movs	r3, #2
 80059a8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80059aa:	2301      	movs	r3, #1
 80059ac:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80059ae:	2302      	movs	r3, #2
 80059b0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80059b2:	230c      	movs	r3, #12
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80059b6:	2308      	movs	r3, #8
 80059b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80059ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059be:	4619      	mov	r1, r3
 80059c0:	483a      	ldr	r0, [pc, #232]	; (8005aac <BSP_SDRAM_MspInit+0x1d0>)
 80059c2:	f7fb ffd3 	bl	800196c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80059c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80059cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059d0:	4619      	mov	r1, r3
 80059d2:	4837      	ldr	r0, [pc, #220]	; (8005ab0 <BSP_SDRAM_MspInit+0x1d4>)
 80059d4:	f7fb ffca 	bl	800196c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80059d8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80059de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059e2:	4619      	mov	r1, r3
 80059e4:	4833      	ldr	r0, [pc, #204]	; (8005ab4 <BSP_SDRAM_MspInit+0x1d8>)
 80059e6:	f7fb ffc1 	bl	800196c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80059ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80059f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059f4:	4619      	mov	r1, r3
 80059f6:	4830      	ldr	r0, [pc, #192]	; (8005ab8 <BSP_SDRAM_MspInit+0x1dc>)
 80059f8:	f7fb ffb8 	bl	800196c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80059fc:	f248 1333 	movw	r3, #33075	; 0x8133
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a06:	4619      	mov	r1, r3
 8005a08:	482c      	ldr	r0, [pc, #176]	; (8005abc <BSP_SDRAM_MspInit+0x1e0>)
 8005a0a:	f7fb ffaf 	bl	800196c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8005a0e:	2328      	movs	r3, #40	; 0x28
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a16:	4619      	mov	r1, r3
 8005a18:	4829      	ldr	r0, [pc, #164]	; (8005ac0 <BSP_SDRAM_MspInit+0x1e4>)
 8005a1a:	f7fb ffa7 	bl	800196c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005a1e:	4b29      	ldr	r3, [pc, #164]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005a24:	4b27      	ldr	r3, [pc, #156]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a26:	2280      	movs	r2, #128	; 0x80
 8005a28:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005a2a:	4b26      	ldr	r3, [pc, #152]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a30:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005a32:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a38:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a3a:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a40:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a48:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005a4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005a50:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a56:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005a58:	4b1a      	ldr	r3, [pc, #104]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005a5e:	4b19      	ldr	r3, [pc, #100]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a60:	2203      	movs	r2, #3
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005a64:	4b17      	ldr	r3, [pc, #92]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005a6a:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005a70:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <BSP_SDRAM_MspInit+0x1ec>)
 8005a74:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a12      	ldr	r2, [pc, #72]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a7c:	4a11      	ldr	r2, [pc, #68]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005a82:	4810      	ldr	r0, [pc, #64]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a84:	f7fb fbd6 	bl	8001234 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005a88:	480e      	ldr	r0, [pc, #56]	; (8005ac4 <BSP_SDRAM_MspInit+0x1e8>)
 8005a8a:	f7fb fb25 	bl	80010d8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005a8e:	2200      	movs	r2, #0
 8005a90:	210f      	movs	r1, #15
 8005a92:	2038      	movs	r0, #56	; 0x38
 8005a94:	f7fb f9ff 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005a98:	2038      	movs	r0, #56	; 0x38
 8005a9a:	f7fb fa18 	bl	8000ece <HAL_NVIC_EnableIRQ>
}
 8005a9e:	bf00      	nop
 8005aa0:	3740      	adds	r7, #64	; 0x40
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40020800 	.word	0x40020800
 8005ab0:	40020c00 	.word	0x40020c00
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	40021400 	.word	0x40021400
 8005abc:	40021800 	.word	0x40021800
 8005ac0:	40021c00 	.word	0x40021c00
 8005ac4:	200003a8 	.word	0x200003a8
 8005ac8:	40026410 	.word	0x40026410

08005acc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	460a      	mov	r2, r1
 8005ad6:	80fb      	strh	r3, [r7, #6]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005ae0:	4a14      	ldr	r2, [pc, #80]	; (8005b34 <BSP_TS_Init+0x68>)
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005ae6:	4a14      	ldr	r2, [pc, #80]	; (8005b38 <BSP_TS_Init+0x6c>)
 8005ae8:	88bb      	ldrh	r3, [r7, #4]
 8005aea:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005aec:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <BSP_TS_Init+0x70>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2070      	movs	r0, #112	; 0x70
 8005af2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8005af4:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <BSP_TS_Init+0x70>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2070      	movs	r0, #112	; 0x70
 8005afa:	4798      	blx	r3
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b51      	cmp	r3, #81	; 0x51
 8005b00:	d111      	bne.n	8005b26 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8005b02:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <BSP_TS_Init+0x74>)
 8005b04:	4a0d      	ldr	r2, [pc, #52]	; (8005b3c <BSP_TS_Init+0x70>)
 8005b06:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <BSP_TS_Init+0x78>)
 8005b0a:	2270      	movs	r2, #112	; 0x70
 8005b0c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <BSP_TS_Init+0x7c>)
 8005b10:	2208      	movs	r2, #8
 8005b12:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <BSP_TS_Init+0x74>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <BSP_TS_Init+0x78>)
 8005b1c:	7812      	ldrb	r2, [r2, #0]
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
 8005b24:	e001      	b.n	8005b2a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8005b26:	2303      	movs	r3, #3
 8005b28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	2000040c 	.word	0x2000040c
 8005b38:	2000040e 	.word	0x2000040e
 8005b3c:	20000014 	.word	0x20000014
 8005b40:	20000408 	.word	0x20000408
 8005b44:	20000411 	.word	0x20000411
 8005b48:	20000410 	.word	0x20000410

08005b4c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8005b4c:	b590      	push	{r4, r7, lr}
 8005b4e:	b097      	sub	sp, #92	; 0x5c
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005b66:	4bb4      	ldr	r3, [pc, #720]	; (8005e38 <BSP_TS_GetState+0x2ec>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	4ab3      	ldr	r2, [pc, #716]	; (8005e3c <BSP_TS_GetState+0x2f0>)
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	b292      	uxth	r2, r2
 8005b72:	4610      	mov	r0, r2
 8005b74:	4798      	blx	r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	461a      	mov	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8196 	beq.w	8005eb4 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b8c:	e185      	b.n	8005e9a <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8005b8e:	4baa      	ldr	r3, [pc, #680]	; (8005e38 <BSP_TS_GetState+0x2ec>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	4aa9      	ldr	r2, [pc, #676]	; (8005e3c <BSP_TS_GetState+0x2f0>)
 8005b96:	7812      	ldrb	r2, [r2, #0]
 8005b98:	b290      	uxth	r0, r2
 8005b9a:	f107 0120 	add.w	r1, r7, #32
 8005b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ba0:	0052      	lsls	r2, r2, #1
 8005ba2:	188c      	adds	r4, r1, r2
 8005ba4:	f107 0114 	add.w	r1, r7, #20
 8005ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005baa:	0052      	lsls	r2, r2, #1
 8005bac:	440a      	add	r2, r1
 8005bae:	4621      	mov	r1, r4
 8005bb0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8005bb2:	4ba3      	ldr	r3, [pc, #652]	; (8005e40 <BSP_TS_GetState+0x2f4>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d117      	bne.n	8005bea <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8005bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	3350      	adds	r3, #80	; 0x50
 8005bc0:	443b      	add	r3, r7
 8005bc2:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	3350      	adds	r3, #80	; 0x50
 8005bcc:	443b      	add	r3, r7
 8005bce:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8005bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	3350      	adds	r3, #80	; 0x50
 8005bd8:	443b      	add	r3, r7
 8005bda:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	3350      	adds	r3, #80	; 0x50
 8005be4:	443b      	add	r3, r7
 8005be6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8005bea:	4b95      	ldr	r3, [pc, #596]	; (8005e40 <BSP_TS_GetState+0x2f4>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00e      	beq.n	8005c14 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8005bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	3350      	adds	r3, #80	; 0x50
 8005bfc:	443b      	add	r3, r7
 8005bfe:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8005c02:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	3350      	adds	r3, #80	; 0x50
 8005c0e:	443b      	add	r3, r7
 8005c10:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005c14:	4b8a      	ldr	r3, [pc, #552]	; (8005e40 <BSP_TS_GetState+0x2f4>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00e      	beq.n	8005c3e <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8005c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	3350      	adds	r3, #80	; 0x50
 8005c26:	443b      	add	r3, r7
 8005c28:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8005c2c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	3350      	adds	r3, #80	; 0x50
 8005c38:	443b      	add	r3, r7
 8005c3a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8005c3e:	4b80      	ldr	r3, [pc, #512]	; (8005e40 <BSP_TS_GetState+0x2f4>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d017      	beq.n	8005c7a <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8005c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	3350      	adds	r3, #80	; 0x50
 8005c50:	443b      	add	r3, r7
 8005c52:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	3350      	adds	r3, #80	; 0x50
 8005c5c:	443b      	add	r3, r7
 8005c5e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8005c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	3350      	adds	r3, #80	; 0x50
 8005c68:	443b      	add	r3, r7
 8005c6a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	3350      	adds	r3, #80	; 0x50
 8005c74:	443b      	add	r3, r7
 8005c76:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	3350      	adds	r3, #80	; 0x50
 8005c80:	443b      	add	r3, r7
 8005c82:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005c86:	4619      	mov	r1, r3
 8005c88:	4a6e      	ldr	r2, [pc, #440]	; (8005e44 <BSP_TS_GetState+0x2f8>)
 8005c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c90:	4299      	cmp	r1, r3
 8005c92:	d90d      	bls.n	8005cb0 <BSP_TS_GetState+0x164>
 8005c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	3350      	adds	r3, #80	; 0x50
 8005c9a:	443b      	add	r3, r7
 8005c9c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8005ca0:	4968      	ldr	r1, [pc, #416]	; (8005e44 <BSP_TS_GetState+0x2f8>)
 8005ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	e00c      	b.n	8005cca <BSP_TS_GetState+0x17e>
 8005cb0:	4a64      	ldr	r2, [pc, #400]	; (8005e44 <BSP_TS_GetState+0x2f8>)
 8005cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	3350      	adds	r3, #80	; 0x50
 8005cc0:	443b      	add	r3, r7
 8005cc2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	3350      	adds	r3, #80	; 0x50
 8005cd4:	443b      	add	r3, r7
 8005cd6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4a5a      	ldr	r2, [pc, #360]	; (8005e48 <BSP_TS_GetState+0x2fc>)
 8005cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce4:	4299      	cmp	r1, r3
 8005ce6:	d90d      	bls.n	8005d04 <BSP_TS_GetState+0x1b8>
 8005ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	3350      	adds	r3, #80	; 0x50
 8005cee:	443b      	add	r3, r7
 8005cf0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005cf4:	4954      	ldr	r1, [pc, #336]	; (8005e48 <BSP_TS_GetState+0x2fc>)
 8005cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	e00c      	b.n	8005d1e <BSP_TS_GetState+0x1d2>
 8005d04:	4a50      	ldr	r2, [pc, #320]	; (8005e48 <BSP_TS_GetState+0x2fc>)
 8005d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	3350      	adds	r3, #80	; 0x50
 8005d14:	443b      	add	r3, r7
 8005d16:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8005d22:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005d26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d2a:	4413      	add	r3, r2
 8005d2c:	2b05      	cmp	r3, #5
 8005d2e:	dd15      	ble.n	8005d5c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8005d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	3350      	adds	r3, #80	; 0x50
 8005d36:	443b      	add	r3, r7
 8005d38:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4a41      	ldr	r2, [pc, #260]	; (8005e44 <BSP_TS_GetState+0x2f8>)
 8005d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	3350      	adds	r3, #80	; 0x50
 8005d4c:	443b      	add	r3, r7
 8005d4e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005d52:	4619      	mov	r1, r3
 8005d54:	4a3c      	ldr	r2, [pc, #240]	; (8005e48 <BSP_TS_GetState+0x2fc>)
 8005d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005d5c:	4b37      	ldr	r3, [pc, #220]	; (8005e3c <BSP_TS_GetState+0x2f0>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b70      	cmp	r3, #112	; 0x70
 8005d62:	d119      	bne.n	8005d98 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8005d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	3350      	adds	r3, #80	; 0x50
 8005d6a:	443b      	add	r3, r7
 8005d6c:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	460a      	mov	r2, r1
 8005d7a:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8005d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	3350      	adds	r3, #80	; 0x50
 8005d82:	443b      	add	r3, r7
 8005d84:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	4413      	add	r3, r2
 8005d92:	460a      	mov	r2, r1
 8005d94:	809a      	strh	r2, [r3, #4]
 8005d96:	e022      	b.n	8005dde <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005d98:	4b2c      	ldr	r3, [pc, #176]	; (8005e4c <BSP_TS_GetState+0x300>)
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4a29      	ldr	r2, [pc, #164]	; (8005e44 <BSP_TS_GetState+0x2f8>)
 8005da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da6:	fb01 f303 	mul.w	r3, r1, r3
 8005daa:	0b1b      	lsrs	r3, r3, #12
 8005dac:	b299      	uxth	r1, r3
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	4413      	add	r3, r2
 8005db6:	460a      	mov	r2, r1
 8005db8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005dba:	4b25      	ldr	r3, [pc, #148]	; (8005e50 <BSP_TS_GetState+0x304>)
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <BSP_TS_GetState+0x2fc>)
 8005dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	0b1b      	lsrs	r3, r3, #12
 8005dce:	b299      	uxth	r1, r3
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	4413      	add	r3, r2
 8005dda:	460a      	mov	r2, r1
 8005ddc:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8005dde:	4b17      	ldr	r3, [pc, #92]	; (8005e3c <BSP_TS_GetState+0x2f0>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b298      	uxth	r0, r3
 8005de4:	f107 010c 	add.w	r1, r7, #12
 8005de8:	f107 0210 	add.w	r2, r7, #16
 8005dec:	f107 0308 	add.w	r3, r7, #8
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	460b      	mov	r3, r1
 8005df4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005df6:	f7fe fcd5 	bl	80047a4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	b2d9      	uxtb	r1, r3
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e02:	4413      	add	r3, r2
 8005e04:	3316      	adds	r3, #22
 8005e06:	460a      	mov	r2, r1
 8005e08:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	b2d9      	uxtb	r1, r3
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e12:	4413      	add	r3, r2
 8005e14:	3320      	adds	r3, #32
 8005e16:	460a      	mov	r2, r1
 8005e18:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d835      	bhi.n	8005e8c <BSP_TS_GetState+0x340>
 8005e20:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <BSP_TS_GetState+0x2dc>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e55 	.word	0x08005e55
 8005e2c:	08005e63 	.word	0x08005e63
 8005e30:	08005e71 	.word	0x08005e71
 8005e34:	08005e7f 	.word	0x08005e7f
 8005e38:	20000408 	.word	0x20000408
 8005e3c:	20000411 	.word	0x20000411
 8005e40:	20000410 	.word	0x20000410
 8005e44:	20000414 	.word	0x20000414
 8005e48:	20000428 	.word	0x20000428
 8005e4c:	2000040c 	.word	0x2000040c
 8005e50:	2000040e 	.word	0x2000040e
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e58:	4413      	add	r3, r2
 8005e5a:	331b      	adds	r3, #27
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	701a      	strb	r2, [r3, #0]
          break;
 8005e60:	e018      	b.n	8005e94 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e66:	4413      	add	r3, r2
 8005e68:	331b      	adds	r3, #27
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	701a      	strb	r2, [r3, #0]
          break;
 8005e6e:	e011      	b.n	8005e94 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e74:	4413      	add	r3, r2
 8005e76:	331b      	adds	r3, #27
 8005e78:	2203      	movs	r2, #3
 8005e7a:	701a      	strb	r2, [r3, #0]
          break;
 8005e7c:	e00a      	b.n	8005e94 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e82:	4413      	add	r3, r2
 8005e84:	331b      	adds	r3, #27
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
          break;
 8005e8a:	e003      	b.n	8005e94 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8005e92:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e96:	3301      	adds	r3, #1
 8005e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	f4ff ae73 	bcc.w	8005b8e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f809 	bl	8005ec0 <BSP_TS_Get_GestureId>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005eb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3754      	adds	r7, #84	; 0x54
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd90      	pop	{r4, r7, pc}

08005ec0 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005ed0:	4b3b      	ldr	r3, [pc, #236]	; (8005fc0 <BSP_TS_Get_GestureId+0x100>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f107 0208 	add.w	r2, r7, #8
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fc48 	bl	8004772 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b49      	cmp	r3, #73	; 0x49
 8005ee6:	d05e      	beq.n	8005fa6 <BSP_TS_Get_GestureId+0xe6>
 8005ee8:	2b49      	cmp	r3, #73	; 0x49
 8005eea:	d860      	bhi.n	8005fae <BSP_TS_Get_GestureId+0xee>
 8005eec:	2b1c      	cmp	r3, #28
 8005eee:	d83f      	bhi.n	8005f70 <BSP_TS_Get_GestureId+0xb0>
 8005ef0:	2b1c      	cmp	r3, #28
 8005ef2:	d85c      	bhi.n	8005fae <BSP_TS_Get_GestureId+0xee>
 8005ef4:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <BSP_TS_Get_GestureId+0x3c>)
 8005ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005f77 	.word	0x08005f77
 8005f00:	08005faf 	.word	0x08005faf
 8005f04:	08005faf 	.word	0x08005faf
 8005f08:	08005faf 	.word	0x08005faf
 8005f0c:	08005faf 	.word	0x08005faf
 8005f10:	08005faf 	.word	0x08005faf
 8005f14:	08005faf 	.word	0x08005faf
 8005f18:	08005faf 	.word	0x08005faf
 8005f1c:	08005faf 	.word	0x08005faf
 8005f20:	08005faf 	.word	0x08005faf
 8005f24:	08005faf 	.word	0x08005faf
 8005f28:	08005faf 	.word	0x08005faf
 8005f2c:	08005faf 	.word	0x08005faf
 8005f30:	08005faf 	.word	0x08005faf
 8005f34:	08005faf 	.word	0x08005faf
 8005f38:	08005faf 	.word	0x08005faf
 8005f3c:	08005f7f 	.word	0x08005f7f
 8005f40:	08005faf 	.word	0x08005faf
 8005f44:	08005faf 	.word	0x08005faf
 8005f48:	08005faf 	.word	0x08005faf
 8005f4c:	08005f87 	.word	0x08005f87
 8005f50:	08005faf 	.word	0x08005faf
 8005f54:	08005faf 	.word	0x08005faf
 8005f58:	08005faf 	.word	0x08005faf
 8005f5c:	08005f8f 	.word	0x08005f8f
 8005f60:	08005faf 	.word	0x08005faf
 8005f64:	08005faf 	.word	0x08005faf
 8005f68:	08005faf 	.word	0x08005faf
 8005f6c:	08005f97 	.word	0x08005f97
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	d014      	beq.n	8005f9e <BSP_TS_Get_GestureId+0xde>
 8005f74:	e01b      	b.n	8005fae <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f7c:	e01a      	b.n	8005fb4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f84:	e016      	b.n	8005fb4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f8c:	e012      	b.n	8005fb4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2203      	movs	r2, #3
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f94:	e00e      	b.n	8005fb4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2204      	movs	r2, #4
 8005f9a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005f9c:	e00a      	b.n	8005fb4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2205      	movs	r2, #5
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005fa4:	e006      	b.n	8005fb4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2206      	movs	r2, #6
 8005faa:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005fac:	e002      	b.n	8005fb4 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb2:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000411 	.word	0x20000411

08005fc4 <__errno>:
 8005fc4:	4b01      	ldr	r3, [pc, #4]	; (8005fcc <__errno+0x8>)
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	20000040 	.word	0x20000040

08005fd0 <__libc_init_array>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	4d0d      	ldr	r5, [pc, #52]	; (8006008 <__libc_init_array+0x38>)
 8005fd4:	4c0d      	ldr	r4, [pc, #52]	; (800600c <__libc_init_array+0x3c>)
 8005fd6:	1b64      	subs	r4, r4, r5
 8005fd8:	10a4      	asrs	r4, r4, #2
 8005fda:	2600      	movs	r6, #0
 8005fdc:	42a6      	cmp	r6, r4
 8005fde:	d109      	bne.n	8005ff4 <__libc_init_array+0x24>
 8005fe0:	4d0b      	ldr	r5, [pc, #44]	; (8006010 <__libc_init_array+0x40>)
 8005fe2:	4c0c      	ldr	r4, [pc, #48]	; (8006014 <__libc_init_array+0x44>)
 8005fe4:	f000 fc8e 	bl	8006904 <_init>
 8005fe8:	1b64      	subs	r4, r4, r5
 8005fea:	10a4      	asrs	r4, r4, #2
 8005fec:	2600      	movs	r6, #0
 8005fee:	42a6      	cmp	r6, r4
 8005ff0:	d105      	bne.n	8005ffe <__libc_init_array+0x2e>
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff8:	4798      	blx	r3
 8005ffa:	3601      	adds	r6, #1
 8005ffc:	e7ee      	b.n	8005fdc <__libc_init_array+0xc>
 8005ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006002:	4798      	blx	r3
 8006004:	3601      	adds	r6, #1
 8006006:	e7f2      	b.n	8005fee <__libc_init_array+0x1e>
 8006008:	08008460 	.word	0x08008460
 800600c:	08008460 	.word	0x08008460
 8006010:	08008460 	.word	0x08008460
 8006014:	08008464 	.word	0x08008464

08006018 <memset>:
 8006018:	4402      	add	r2, r0
 800601a:	4603      	mov	r3, r0
 800601c:	4293      	cmp	r3, r2
 800601e:	d100      	bne.n	8006022 <memset+0xa>
 8006020:	4770      	bx	lr
 8006022:	f803 1b01 	strb.w	r1, [r3], #1
 8006026:	e7f9      	b.n	800601c <memset+0x4>

08006028 <siprintf>:
 8006028:	b40e      	push	{r1, r2, r3}
 800602a:	b500      	push	{lr}
 800602c:	b09c      	sub	sp, #112	; 0x70
 800602e:	ab1d      	add	r3, sp, #116	; 0x74
 8006030:	9002      	str	r0, [sp, #8]
 8006032:	9006      	str	r0, [sp, #24]
 8006034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006038:	4809      	ldr	r0, [pc, #36]	; (8006060 <siprintf+0x38>)
 800603a:	9107      	str	r1, [sp, #28]
 800603c:	9104      	str	r1, [sp, #16]
 800603e:	4909      	ldr	r1, [pc, #36]	; (8006064 <siprintf+0x3c>)
 8006040:	f853 2b04 	ldr.w	r2, [r3], #4
 8006044:	9105      	str	r1, [sp, #20]
 8006046:	6800      	ldr	r0, [r0, #0]
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	a902      	add	r1, sp, #8
 800604c:	f000 f868 	bl	8006120 <_svfiprintf_r>
 8006050:	9b02      	ldr	r3, [sp, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	b01c      	add	sp, #112	; 0x70
 8006058:	f85d eb04 	ldr.w	lr, [sp], #4
 800605c:	b003      	add	sp, #12
 800605e:	4770      	bx	lr
 8006060:	20000040 	.word	0x20000040
 8006064:	ffff0208 	.word	0xffff0208

08006068 <__ssputs_r>:
 8006068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	688e      	ldr	r6, [r1, #8]
 800606e:	429e      	cmp	r6, r3
 8006070:	4682      	mov	sl, r0
 8006072:	460c      	mov	r4, r1
 8006074:	4690      	mov	r8, r2
 8006076:	461f      	mov	r7, r3
 8006078:	d838      	bhi.n	80060ec <__ssputs_r+0x84>
 800607a:	898a      	ldrh	r2, [r1, #12]
 800607c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006080:	d032      	beq.n	80060e8 <__ssputs_r+0x80>
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	6909      	ldr	r1, [r1, #16]
 8006086:	eba5 0901 	sub.w	r9, r5, r1
 800608a:	6965      	ldr	r5, [r4, #20]
 800608c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006094:	3301      	adds	r3, #1
 8006096:	444b      	add	r3, r9
 8006098:	106d      	asrs	r5, r5, #1
 800609a:	429d      	cmp	r5, r3
 800609c:	bf38      	it	cc
 800609e:	461d      	movcc	r5, r3
 80060a0:	0553      	lsls	r3, r2, #21
 80060a2:	d531      	bpl.n	8006108 <__ssputs_r+0xa0>
 80060a4:	4629      	mov	r1, r5
 80060a6:	f000 fb63 	bl	8006770 <_malloc_r>
 80060aa:	4606      	mov	r6, r0
 80060ac:	b950      	cbnz	r0, 80060c4 <__ssputs_r+0x5c>
 80060ae:	230c      	movs	r3, #12
 80060b0:	f8ca 3000 	str.w	r3, [sl]
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ba:	81a3      	strh	r3, [r4, #12]
 80060bc:	f04f 30ff 	mov.w	r0, #4294967295
 80060c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c4:	6921      	ldr	r1, [r4, #16]
 80060c6:	464a      	mov	r2, r9
 80060c8:	f000 fabe 	bl	8006648 <memcpy>
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	6126      	str	r6, [r4, #16]
 80060da:	6165      	str	r5, [r4, #20]
 80060dc:	444e      	add	r6, r9
 80060de:	eba5 0509 	sub.w	r5, r5, r9
 80060e2:	6026      	str	r6, [r4, #0]
 80060e4:	60a5      	str	r5, [r4, #8]
 80060e6:	463e      	mov	r6, r7
 80060e8:	42be      	cmp	r6, r7
 80060ea:	d900      	bls.n	80060ee <__ssputs_r+0x86>
 80060ec:	463e      	mov	r6, r7
 80060ee:	6820      	ldr	r0, [r4, #0]
 80060f0:	4632      	mov	r2, r6
 80060f2:	4641      	mov	r1, r8
 80060f4:	f000 fab6 	bl	8006664 <memmove>
 80060f8:	68a3      	ldr	r3, [r4, #8]
 80060fa:	1b9b      	subs	r3, r3, r6
 80060fc:	60a3      	str	r3, [r4, #8]
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	4433      	add	r3, r6
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	2000      	movs	r0, #0
 8006106:	e7db      	b.n	80060c0 <__ssputs_r+0x58>
 8006108:	462a      	mov	r2, r5
 800610a:	f000 fba5 	bl	8006858 <_realloc_r>
 800610e:	4606      	mov	r6, r0
 8006110:	2800      	cmp	r0, #0
 8006112:	d1e1      	bne.n	80060d8 <__ssputs_r+0x70>
 8006114:	6921      	ldr	r1, [r4, #16]
 8006116:	4650      	mov	r0, sl
 8006118:	f000 fabe 	bl	8006698 <_free_r>
 800611c:	e7c7      	b.n	80060ae <__ssputs_r+0x46>
	...

08006120 <_svfiprintf_r>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	4698      	mov	r8, r3
 8006126:	898b      	ldrh	r3, [r1, #12]
 8006128:	061b      	lsls	r3, r3, #24
 800612a:	b09d      	sub	sp, #116	; 0x74
 800612c:	4607      	mov	r7, r0
 800612e:	460d      	mov	r5, r1
 8006130:	4614      	mov	r4, r2
 8006132:	d50e      	bpl.n	8006152 <_svfiprintf_r+0x32>
 8006134:	690b      	ldr	r3, [r1, #16]
 8006136:	b963      	cbnz	r3, 8006152 <_svfiprintf_r+0x32>
 8006138:	2140      	movs	r1, #64	; 0x40
 800613a:	f000 fb19 	bl	8006770 <_malloc_r>
 800613e:	6028      	str	r0, [r5, #0]
 8006140:	6128      	str	r0, [r5, #16]
 8006142:	b920      	cbnz	r0, 800614e <_svfiprintf_r+0x2e>
 8006144:	230c      	movs	r3, #12
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	f04f 30ff 	mov.w	r0, #4294967295
 800614c:	e0d1      	b.n	80062f2 <_svfiprintf_r+0x1d2>
 800614e:	2340      	movs	r3, #64	; 0x40
 8006150:	616b      	str	r3, [r5, #20]
 8006152:	2300      	movs	r3, #0
 8006154:	9309      	str	r3, [sp, #36]	; 0x24
 8006156:	2320      	movs	r3, #32
 8006158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800615c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006160:	2330      	movs	r3, #48	; 0x30
 8006162:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800630c <_svfiprintf_r+0x1ec>
 8006166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800616a:	f04f 0901 	mov.w	r9, #1
 800616e:	4623      	mov	r3, r4
 8006170:	469a      	mov	sl, r3
 8006172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006176:	b10a      	cbz	r2, 800617c <_svfiprintf_r+0x5c>
 8006178:	2a25      	cmp	r2, #37	; 0x25
 800617a:	d1f9      	bne.n	8006170 <_svfiprintf_r+0x50>
 800617c:	ebba 0b04 	subs.w	fp, sl, r4
 8006180:	d00b      	beq.n	800619a <_svfiprintf_r+0x7a>
 8006182:	465b      	mov	r3, fp
 8006184:	4622      	mov	r2, r4
 8006186:	4629      	mov	r1, r5
 8006188:	4638      	mov	r0, r7
 800618a:	f7ff ff6d 	bl	8006068 <__ssputs_r>
 800618e:	3001      	adds	r0, #1
 8006190:	f000 80aa 	beq.w	80062e8 <_svfiprintf_r+0x1c8>
 8006194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006196:	445a      	add	r2, fp
 8006198:	9209      	str	r2, [sp, #36]	; 0x24
 800619a:	f89a 3000 	ldrb.w	r3, [sl]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 80a2 	beq.w	80062e8 <_svfiprintf_r+0x1c8>
 80061a4:	2300      	movs	r3, #0
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295
 80061aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ae:	f10a 0a01 	add.w	sl, sl, #1
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	9307      	str	r3, [sp, #28]
 80061b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ba:	931a      	str	r3, [sp, #104]	; 0x68
 80061bc:	4654      	mov	r4, sl
 80061be:	2205      	movs	r2, #5
 80061c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c4:	4851      	ldr	r0, [pc, #324]	; (800630c <_svfiprintf_r+0x1ec>)
 80061c6:	f7fa f823 	bl	8000210 <memchr>
 80061ca:	9a04      	ldr	r2, [sp, #16]
 80061cc:	b9d8      	cbnz	r0, 8006206 <_svfiprintf_r+0xe6>
 80061ce:	06d0      	lsls	r0, r2, #27
 80061d0:	bf44      	itt	mi
 80061d2:	2320      	movmi	r3, #32
 80061d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061d8:	0711      	lsls	r1, r2, #28
 80061da:	bf44      	itt	mi
 80061dc:	232b      	movmi	r3, #43	; 0x2b
 80061de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061e2:	f89a 3000 	ldrb.w	r3, [sl]
 80061e6:	2b2a      	cmp	r3, #42	; 0x2a
 80061e8:	d015      	beq.n	8006216 <_svfiprintf_r+0xf6>
 80061ea:	9a07      	ldr	r2, [sp, #28]
 80061ec:	4654      	mov	r4, sl
 80061ee:	2000      	movs	r0, #0
 80061f0:	f04f 0c0a 	mov.w	ip, #10
 80061f4:	4621      	mov	r1, r4
 80061f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061fa:	3b30      	subs	r3, #48	; 0x30
 80061fc:	2b09      	cmp	r3, #9
 80061fe:	d94e      	bls.n	800629e <_svfiprintf_r+0x17e>
 8006200:	b1b0      	cbz	r0, 8006230 <_svfiprintf_r+0x110>
 8006202:	9207      	str	r2, [sp, #28]
 8006204:	e014      	b.n	8006230 <_svfiprintf_r+0x110>
 8006206:	eba0 0308 	sub.w	r3, r0, r8
 800620a:	fa09 f303 	lsl.w	r3, r9, r3
 800620e:	4313      	orrs	r3, r2
 8006210:	9304      	str	r3, [sp, #16]
 8006212:	46a2      	mov	sl, r4
 8006214:	e7d2      	b.n	80061bc <_svfiprintf_r+0x9c>
 8006216:	9b03      	ldr	r3, [sp, #12]
 8006218:	1d19      	adds	r1, r3, #4
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	9103      	str	r1, [sp, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	bfbb      	ittet	lt
 8006222:	425b      	neglt	r3, r3
 8006224:	f042 0202 	orrlt.w	r2, r2, #2
 8006228:	9307      	strge	r3, [sp, #28]
 800622a:	9307      	strlt	r3, [sp, #28]
 800622c:	bfb8      	it	lt
 800622e:	9204      	strlt	r2, [sp, #16]
 8006230:	7823      	ldrb	r3, [r4, #0]
 8006232:	2b2e      	cmp	r3, #46	; 0x2e
 8006234:	d10c      	bne.n	8006250 <_svfiprintf_r+0x130>
 8006236:	7863      	ldrb	r3, [r4, #1]
 8006238:	2b2a      	cmp	r3, #42	; 0x2a
 800623a:	d135      	bne.n	80062a8 <_svfiprintf_r+0x188>
 800623c:	9b03      	ldr	r3, [sp, #12]
 800623e:	1d1a      	adds	r2, r3, #4
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	9203      	str	r2, [sp, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	bfb8      	it	lt
 8006248:	f04f 33ff 	movlt.w	r3, #4294967295
 800624c:	3402      	adds	r4, #2
 800624e:	9305      	str	r3, [sp, #20]
 8006250:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800631c <_svfiprintf_r+0x1fc>
 8006254:	7821      	ldrb	r1, [r4, #0]
 8006256:	2203      	movs	r2, #3
 8006258:	4650      	mov	r0, sl
 800625a:	f7f9 ffd9 	bl	8000210 <memchr>
 800625e:	b140      	cbz	r0, 8006272 <_svfiprintf_r+0x152>
 8006260:	2340      	movs	r3, #64	; 0x40
 8006262:	eba0 000a 	sub.w	r0, r0, sl
 8006266:	fa03 f000 	lsl.w	r0, r3, r0
 800626a:	9b04      	ldr	r3, [sp, #16]
 800626c:	4303      	orrs	r3, r0
 800626e:	3401      	adds	r4, #1
 8006270:	9304      	str	r3, [sp, #16]
 8006272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006276:	4826      	ldr	r0, [pc, #152]	; (8006310 <_svfiprintf_r+0x1f0>)
 8006278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800627c:	2206      	movs	r2, #6
 800627e:	f7f9 ffc7 	bl	8000210 <memchr>
 8006282:	2800      	cmp	r0, #0
 8006284:	d038      	beq.n	80062f8 <_svfiprintf_r+0x1d8>
 8006286:	4b23      	ldr	r3, [pc, #140]	; (8006314 <_svfiprintf_r+0x1f4>)
 8006288:	bb1b      	cbnz	r3, 80062d2 <_svfiprintf_r+0x1b2>
 800628a:	9b03      	ldr	r3, [sp, #12]
 800628c:	3307      	adds	r3, #7
 800628e:	f023 0307 	bic.w	r3, r3, #7
 8006292:	3308      	adds	r3, #8
 8006294:	9303      	str	r3, [sp, #12]
 8006296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006298:	4433      	add	r3, r6
 800629a:	9309      	str	r3, [sp, #36]	; 0x24
 800629c:	e767      	b.n	800616e <_svfiprintf_r+0x4e>
 800629e:	fb0c 3202 	mla	r2, ip, r2, r3
 80062a2:	460c      	mov	r4, r1
 80062a4:	2001      	movs	r0, #1
 80062a6:	e7a5      	b.n	80061f4 <_svfiprintf_r+0xd4>
 80062a8:	2300      	movs	r3, #0
 80062aa:	3401      	adds	r4, #1
 80062ac:	9305      	str	r3, [sp, #20]
 80062ae:	4619      	mov	r1, r3
 80062b0:	f04f 0c0a 	mov.w	ip, #10
 80062b4:	4620      	mov	r0, r4
 80062b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ba:	3a30      	subs	r2, #48	; 0x30
 80062bc:	2a09      	cmp	r2, #9
 80062be:	d903      	bls.n	80062c8 <_svfiprintf_r+0x1a8>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0c5      	beq.n	8006250 <_svfiprintf_r+0x130>
 80062c4:	9105      	str	r1, [sp, #20]
 80062c6:	e7c3      	b.n	8006250 <_svfiprintf_r+0x130>
 80062c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80062cc:	4604      	mov	r4, r0
 80062ce:	2301      	movs	r3, #1
 80062d0:	e7f0      	b.n	80062b4 <_svfiprintf_r+0x194>
 80062d2:	ab03      	add	r3, sp, #12
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	462a      	mov	r2, r5
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <_svfiprintf_r+0x1f8>)
 80062da:	a904      	add	r1, sp, #16
 80062dc:	4638      	mov	r0, r7
 80062de:	f3af 8000 	nop.w
 80062e2:	1c42      	adds	r2, r0, #1
 80062e4:	4606      	mov	r6, r0
 80062e6:	d1d6      	bne.n	8006296 <_svfiprintf_r+0x176>
 80062e8:	89ab      	ldrh	r3, [r5, #12]
 80062ea:	065b      	lsls	r3, r3, #25
 80062ec:	f53f af2c 	bmi.w	8006148 <_svfiprintf_r+0x28>
 80062f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062f2:	b01d      	add	sp, #116	; 0x74
 80062f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f8:	ab03      	add	r3, sp, #12
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	462a      	mov	r2, r5
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <_svfiprintf_r+0x1f8>)
 8006300:	a904      	add	r1, sp, #16
 8006302:	4638      	mov	r0, r7
 8006304:	f000 f87a 	bl	80063fc <_printf_i>
 8006308:	e7eb      	b.n	80062e2 <_svfiprintf_r+0x1c2>
 800630a:	bf00      	nop
 800630c:	08008424 	.word	0x08008424
 8006310:	0800842e 	.word	0x0800842e
 8006314:	00000000 	.word	0x00000000
 8006318:	08006069 	.word	0x08006069
 800631c:	0800842a 	.word	0x0800842a

08006320 <_printf_common>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	4616      	mov	r6, r2
 8006326:	4699      	mov	r9, r3
 8006328:	688a      	ldr	r2, [r1, #8]
 800632a:	690b      	ldr	r3, [r1, #16]
 800632c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006330:	4293      	cmp	r3, r2
 8006332:	bfb8      	it	lt
 8006334:	4613      	movlt	r3, r2
 8006336:	6033      	str	r3, [r6, #0]
 8006338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800633c:	4607      	mov	r7, r0
 800633e:	460c      	mov	r4, r1
 8006340:	b10a      	cbz	r2, 8006346 <_printf_common+0x26>
 8006342:	3301      	adds	r3, #1
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	0699      	lsls	r1, r3, #26
 800634a:	bf42      	ittt	mi
 800634c:	6833      	ldrmi	r3, [r6, #0]
 800634e:	3302      	addmi	r3, #2
 8006350:	6033      	strmi	r3, [r6, #0]
 8006352:	6825      	ldr	r5, [r4, #0]
 8006354:	f015 0506 	ands.w	r5, r5, #6
 8006358:	d106      	bne.n	8006368 <_printf_common+0x48>
 800635a:	f104 0a19 	add.w	sl, r4, #25
 800635e:	68e3      	ldr	r3, [r4, #12]
 8006360:	6832      	ldr	r2, [r6, #0]
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	42ab      	cmp	r3, r5
 8006366:	dc26      	bgt.n	80063b6 <_printf_common+0x96>
 8006368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800636c:	1e13      	subs	r3, r2, #0
 800636e:	6822      	ldr	r2, [r4, #0]
 8006370:	bf18      	it	ne
 8006372:	2301      	movne	r3, #1
 8006374:	0692      	lsls	r2, r2, #26
 8006376:	d42b      	bmi.n	80063d0 <_printf_common+0xb0>
 8006378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800637c:	4649      	mov	r1, r9
 800637e:	4638      	mov	r0, r7
 8006380:	47c0      	blx	r8
 8006382:	3001      	adds	r0, #1
 8006384:	d01e      	beq.n	80063c4 <_printf_common+0xa4>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	68e5      	ldr	r5, [r4, #12]
 800638a:	6832      	ldr	r2, [r6, #0]
 800638c:	f003 0306 	and.w	r3, r3, #6
 8006390:	2b04      	cmp	r3, #4
 8006392:	bf08      	it	eq
 8006394:	1aad      	subeq	r5, r5, r2
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	6922      	ldr	r2, [r4, #16]
 800639a:	bf0c      	ite	eq
 800639c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063a0:	2500      	movne	r5, #0
 80063a2:	4293      	cmp	r3, r2
 80063a4:	bfc4      	itt	gt
 80063a6:	1a9b      	subgt	r3, r3, r2
 80063a8:	18ed      	addgt	r5, r5, r3
 80063aa:	2600      	movs	r6, #0
 80063ac:	341a      	adds	r4, #26
 80063ae:	42b5      	cmp	r5, r6
 80063b0:	d11a      	bne.n	80063e8 <_printf_common+0xc8>
 80063b2:	2000      	movs	r0, #0
 80063b4:	e008      	b.n	80063c8 <_printf_common+0xa8>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4652      	mov	r2, sl
 80063ba:	4649      	mov	r1, r9
 80063bc:	4638      	mov	r0, r7
 80063be:	47c0      	blx	r8
 80063c0:	3001      	adds	r0, #1
 80063c2:	d103      	bne.n	80063cc <_printf_common+0xac>
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063cc:	3501      	adds	r5, #1
 80063ce:	e7c6      	b.n	800635e <_printf_common+0x3e>
 80063d0:	18e1      	adds	r1, r4, r3
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	2030      	movs	r0, #48	; 0x30
 80063d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063da:	4422      	add	r2, r4
 80063dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063e4:	3302      	adds	r3, #2
 80063e6:	e7c7      	b.n	8006378 <_printf_common+0x58>
 80063e8:	2301      	movs	r3, #1
 80063ea:	4622      	mov	r2, r4
 80063ec:	4649      	mov	r1, r9
 80063ee:	4638      	mov	r0, r7
 80063f0:	47c0      	blx	r8
 80063f2:	3001      	adds	r0, #1
 80063f4:	d0e6      	beq.n	80063c4 <_printf_common+0xa4>
 80063f6:	3601      	adds	r6, #1
 80063f8:	e7d9      	b.n	80063ae <_printf_common+0x8e>
	...

080063fc <_printf_i>:
 80063fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	7e0f      	ldrb	r7, [r1, #24]
 8006402:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006404:	2f78      	cmp	r7, #120	; 0x78
 8006406:	4691      	mov	r9, r2
 8006408:	4680      	mov	r8, r0
 800640a:	460c      	mov	r4, r1
 800640c:	469a      	mov	sl, r3
 800640e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006412:	d807      	bhi.n	8006424 <_printf_i+0x28>
 8006414:	2f62      	cmp	r7, #98	; 0x62
 8006416:	d80a      	bhi.n	800642e <_printf_i+0x32>
 8006418:	2f00      	cmp	r7, #0
 800641a:	f000 80d8 	beq.w	80065ce <_printf_i+0x1d2>
 800641e:	2f58      	cmp	r7, #88	; 0x58
 8006420:	f000 80a3 	beq.w	800656a <_printf_i+0x16e>
 8006424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800642c:	e03a      	b.n	80064a4 <_printf_i+0xa8>
 800642e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006432:	2b15      	cmp	r3, #21
 8006434:	d8f6      	bhi.n	8006424 <_printf_i+0x28>
 8006436:	a101      	add	r1, pc, #4	; (adr r1, 800643c <_printf_i+0x40>)
 8006438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800643c:	08006495 	.word	0x08006495
 8006440:	080064a9 	.word	0x080064a9
 8006444:	08006425 	.word	0x08006425
 8006448:	08006425 	.word	0x08006425
 800644c:	08006425 	.word	0x08006425
 8006450:	08006425 	.word	0x08006425
 8006454:	080064a9 	.word	0x080064a9
 8006458:	08006425 	.word	0x08006425
 800645c:	08006425 	.word	0x08006425
 8006460:	08006425 	.word	0x08006425
 8006464:	08006425 	.word	0x08006425
 8006468:	080065b5 	.word	0x080065b5
 800646c:	080064d9 	.word	0x080064d9
 8006470:	08006597 	.word	0x08006597
 8006474:	08006425 	.word	0x08006425
 8006478:	08006425 	.word	0x08006425
 800647c:	080065d7 	.word	0x080065d7
 8006480:	08006425 	.word	0x08006425
 8006484:	080064d9 	.word	0x080064d9
 8006488:	08006425 	.word	0x08006425
 800648c:	08006425 	.word	0x08006425
 8006490:	0800659f 	.word	0x0800659f
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	602a      	str	r2, [r5, #0]
 800649c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0a3      	b.n	80065f0 <_printf_i+0x1f4>
 80064a8:	6820      	ldr	r0, [r4, #0]
 80064aa:	6829      	ldr	r1, [r5, #0]
 80064ac:	0606      	lsls	r6, r0, #24
 80064ae:	f101 0304 	add.w	r3, r1, #4
 80064b2:	d50a      	bpl.n	80064ca <_printf_i+0xce>
 80064b4:	680e      	ldr	r6, [r1, #0]
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	da03      	bge.n	80064c4 <_printf_i+0xc8>
 80064bc:	232d      	movs	r3, #45	; 0x2d
 80064be:	4276      	negs	r6, r6
 80064c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c4:	485e      	ldr	r0, [pc, #376]	; (8006640 <_printf_i+0x244>)
 80064c6:	230a      	movs	r3, #10
 80064c8:	e019      	b.n	80064fe <_printf_i+0x102>
 80064ca:	680e      	ldr	r6, [r1, #0]
 80064cc:	602b      	str	r3, [r5, #0]
 80064ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064d2:	bf18      	it	ne
 80064d4:	b236      	sxthne	r6, r6
 80064d6:	e7ef      	b.n	80064b8 <_printf_i+0xbc>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	6820      	ldr	r0, [r4, #0]
 80064dc:	1d19      	adds	r1, r3, #4
 80064de:	6029      	str	r1, [r5, #0]
 80064e0:	0601      	lsls	r1, r0, #24
 80064e2:	d501      	bpl.n	80064e8 <_printf_i+0xec>
 80064e4:	681e      	ldr	r6, [r3, #0]
 80064e6:	e002      	b.n	80064ee <_printf_i+0xf2>
 80064e8:	0646      	lsls	r6, r0, #25
 80064ea:	d5fb      	bpl.n	80064e4 <_printf_i+0xe8>
 80064ec:	881e      	ldrh	r6, [r3, #0]
 80064ee:	4854      	ldr	r0, [pc, #336]	; (8006640 <_printf_i+0x244>)
 80064f0:	2f6f      	cmp	r7, #111	; 0x6f
 80064f2:	bf0c      	ite	eq
 80064f4:	2308      	moveq	r3, #8
 80064f6:	230a      	movne	r3, #10
 80064f8:	2100      	movs	r1, #0
 80064fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064fe:	6865      	ldr	r5, [r4, #4]
 8006500:	60a5      	str	r5, [r4, #8]
 8006502:	2d00      	cmp	r5, #0
 8006504:	bfa2      	ittt	ge
 8006506:	6821      	ldrge	r1, [r4, #0]
 8006508:	f021 0104 	bicge.w	r1, r1, #4
 800650c:	6021      	strge	r1, [r4, #0]
 800650e:	b90e      	cbnz	r6, 8006514 <_printf_i+0x118>
 8006510:	2d00      	cmp	r5, #0
 8006512:	d04d      	beq.n	80065b0 <_printf_i+0x1b4>
 8006514:	4615      	mov	r5, r2
 8006516:	fbb6 f1f3 	udiv	r1, r6, r3
 800651a:	fb03 6711 	mls	r7, r3, r1, r6
 800651e:	5dc7      	ldrb	r7, [r0, r7]
 8006520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006524:	4637      	mov	r7, r6
 8006526:	42bb      	cmp	r3, r7
 8006528:	460e      	mov	r6, r1
 800652a:	d9f4      	bls.n	8006516 <_printf_i+0x11a>
 800652c:	2b08      	cmp	r3, #8
 800652e:	d10b      	bne.n	8006548 <_printf_i+0x14c>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	07de      	lsls	r6, r3, #31
 8006534:	d508      	bpl.n	8006548 <_printf_i+0x14c>
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	6861      	ldr	r1, [r4, #4]
 800653a:	4299      	cmp	r1, r3
 800653c:	bfde      	ittt	le
 800653e:	2330      	movle	r3, #48	; 0x30
 8006540:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006544:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006548:	1b52      	subs	r2, r2, r5
 800654a:	6122      	str	r2, [r4, #16]
 800654c:	f8cd a000 	str.w	sl, [sp]
 8006550:	464b      	mov	r3, r9
 8006552:	aa03      	add	r2, sp, #12
 8006554:	4621      	mov	r1, r4
 8006556:	4640      	mov	r0, r8
 8006558:	f7ff fee2 	bl	8006320 <_printf_common>
 800655c:	3001      	adds	r0, #1
 800655e:	d14c      	bne.n	80065fa <_printf_i+0x1fe>
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	b004      	add	sp, #16
 8006566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656a:	4835      	ldr	r0, [pc, #212]	; (8006640 <_printf_i+0x244>)
 800656c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006570:	6829      	ldr	r1, [r5, #0]
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	f851 6b04 	ldr.w	r6, [r1], #4
 8006578:	6029      	str	r1, [r5, #0]
 800657a:	061d      	lsls	r5, r3, #24
 800657c:	d514      	bpl.n	80065a8 <_printf_i+0x1ac>
 800657e:	07df      	lsls	r7, r3, #31
 8006580:	bf44      	itt	mi
 8006582:	f043 0320 	orrmi.w	r3, r3, #32
 8006586:	6023      	strmi	r3, [r4, #0]
 8006588:	b91e      	cbnz	r6, 8006592 <_printf_i+0x196>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	f023 0320 	bic.w	r3, r3, #32
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	2310      	movs	r3, #16
 8006594:	e7b0      	b.n	80064f8 <_printf_i+0xfc>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	f043 0320 	orr.w	r3, r3, #32
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	2378      	movs	r3, #120	; 0x78
 80065a0:	4828      	ldr	r0, [pc, #160]	; (8006644 <_printf_i+0x248>)
 80065a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065a6:	e7e3      	b.n	8006570 <_printf_i+0x174>
 80065a8:	0659      	lsls	r1, r3, #25
 80065aa:	bf48      	it	mi
 80065ac:	b2b6      	uxthmi	r6, r6
 80065ae:	e7e6      	b.n	800657e <_printf_i+0x182>
 80065b0:	4615      	mov	r5, r2
 80065b2:	e7bb      	b.n	800652c <_printf_i+0x130>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	6826      	ldr	r6, [r4, #0]
 80065b8:	6961      	ldr	r1, [r4, #20]
 80065ba:	1d18      	adds	r0, r3, #4
 80065bc:	6028      	str	r0, [r5, #0]
 80065be:	0635      	lsls	r5, r6, #24
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	d501      	bpl.n	80065c8 <_printf_i+0x1cc>
 80065c4:	6019      	str	r1, [r3, #0]
 80065c6:	e002      	b.n	80065ce <_printf_i+0x1d2>
 80065c8:	0670      	lsls	r0, r6, #25
 80065ca:	d5fb      	bpl.n	80065c4 <_printf_i+0x1c8>
 80065cc:	8019      	strh	r1, [r3, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	6123      	str	r3, [r4, #16]
 80065d2:	4615      	mov	r5, r2
 80065d4:	e7ba      	b.n	800654c <_printf_i+0x150>
 80065d6:	682b      	ldr	r3, [r5, #0]
 80065d8:	1d1a      	adds	r2, r3, #4
 80065da:	602a      	str	r2, [r5, #0]
 80065dc:	681d      	ldr	r5, [r3, #0]
 80065de:	6862      	ldr	r2, [r4, #4]
 80065e0:	2100      	movs	r1, #0
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7f9 fe14 	bl	8000210 <memchr>
 80065e8:	b108      	cbz	r0, 80065ee <_printf_i+0x1f2>
 80065ea:	1b40      	subs	r0, r0, r5
 80065ec:	6060      	str	r0, [r4, #4]
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	2300      	movs	r3, #0
 80065f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f8:	e7a8      	b.n	800654c <_printf_i+0x150>
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	462a      	mov	r2, r5
 80065fe:	4649      	mov	r1, r9
 8006600:	4640      	mov	r0, r8
 8006602:	47d0      	blx	sl
 8006604:	3001      	adds	r0, #1
 8006606:	d0ab      	beq.n	8006560 <_printf_i+0x164>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	079b      	lsls	r3, r3, #30
 800660c:	d413      	bmi.n	8006636 <_printf_i+0x23a>
 800660e:	68e0      	ldr	r0, [r4, #12]
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	4298      	cmp	r0, r3
 8006614:	bfb8      	it	lt
 8006616:	4618      	movlt	r0, r3
 8006618:	e7a4      	b.n	8006564 <_printf_i+0x168>
 800661a:	2301      	movs	r3, #1
 800661c:	4632      	mov	r2, r6
 800661e:	4649      	mov	r1, r9
 8006620:	4640      	mov	r0, r8
 8006622:	47d0      	blx	sl
 8006624:	3001      	adds	r0, #1
 8006626:	d09b      	beq.n	8006560 <_printf_i+0x164>
 8006628:	3501      	adds	r5, #1
 800662a:	68e3      	ldr	r3, [r4, #12]
 800662c:	9903      	ldr	r1, [sp, #12]
 800662e:	1a5b      	subs	r3, r3, r1
 8006630:	42ab      	cmp	r3, r5
 8006632:	dcf2      	bgt.n	800661a <_printf_i+0x21e>
 8006634:	e7eb      	b.n	800660e <_printf_i+0x212>
 8006636:	2500      	movs	r5, #0
 8006638:	f104 0619 	add.w	r6, r4, #25
 800663c:	e7f5      	b.n	800662a <_printf_i+0x22e>
 800663e:	bf00      	nop
 8006640:	08008435 	.word	0x08008435
 8006644:	08008446 	.word	0x08008446

08006648 <memcpy>:
 8006648:	440a      	add	r2, r1
 800664a:	4291      	cmp	r1, r2
 800664c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006650:	d100      	bne.n	8006654 <memcpy+0xc>
 8006652:	4770      	bx	lr
 8006654:	b510      	push	{r4, lr}
 8006656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800665a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800665e:	4291      	cmp	r1, r2
 8006660:	d1f9      	bne.n	8006656 <memcpy+0xe>
 8006662:	bd10      	pop	{r4, pc}

08006664 <memmove>:
 8006664:	4288      	cmp	r0, r1
 8006666:	b510      	push	{r4, lr}
 8006668:	eb01 0402 	add.w	r4, r1, r2
 800666c:	d902      	bls.n	8006674 <memmove+0x10>
 800666e:	4284      	cmp	r4, r0
 8006670:	4623      	mov	r3, r4
 8006672:	d807      	bhi.n	8006684 <memmove+0x20>
 8006674:	1e43      	subs	r3, r0, #1
 8006676:	42a1      	cmp	r1, r4
 8006678:	d008      	beq.n	800668c <memmove+0x28>
 800667a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800667e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006682:	e7f8      	b.n	8006676 <memmove+0x12>
 8006684:	4402      	add	r2, r0
 8006686:	4601      	mov	r1, r0
 8006688:	428a      	cmp	r2, r1
 800668a:	d100      	bne.n	800668e <memmove+0x2a>
 800668c:	bd10      	pop	{r4, pc}
 800668e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006696:	e7f7      	b.n	8006688 <memmove+0x24>

08006698 <_free_r>:
 8006698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800669a:	2900      	cmp	r1, #0
 800669c:	d044      	beq.n	8006728 <_free_r+0x90>
 800669e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a2:	9001      	str	r0, [sp, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f1a1 0404 	sub.w	r4, r1, #4
 80066aa:	bfb8      	it	lt
 80066ac:	18e4      	addlt	r4, r4, r3
 80066ae:	f000 f913 	bl	80068d8 <__malloc_lock>
 80066b2:	4a1e      	ldr	r2, [pc, #120]	; (800672c <_free_r+0x94>)
 80066b4:	9801      	ldr	r0, [sp, #4]
 80066b6:	6813      	ldr	r3, [r2, #0]
 80066b8:	b933      	cbnz	r3, 80066c8 <_free_r+0x30>
 80066ba:	6063      	str	r3, [r4, #4]
 80066bc:	6014      	str	r4, [r2, #0]
 80066be:	b003      	add	sp, #12
 80066c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066c4:	f000 b90e 	b.w	80068e4 <__malloc_unlock>
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	d908      	bls.n	80066de <_free_r+0x46>
 80066cc:	6825      	ldr	r5, [r4, #0]
 80066ce:	1961      	adds	r1, r4, r5
 80066d0:	428b      	cmp	r3, r1
 80066d2:	bf01      	itttt	eq
 80066d4:	6819      	ldreq	r1, [r3, #0]
 80066d6:	685b      	ldreq	r3, [r3, #4]
 80066d8:	1949      	addeq	r1, r1, r5
 80066da:	6021      	streq	r1, [r4, #0]
 80066dc:	e7ed      	b.n	80066ba <_free_r+0x22>
 80066de:	461a      	mov	r2, r3
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	b10b      	cbz	r3, 80066e8 <_free_r+0x50>
 80066e4:	42a3      	cmp	r3, r4
 80066e6:	d9fa      	bls.n	80066de <_free_r+0x46>
 80066e8:	6811      	ldr	r1, [r2, #0]
 80066ea:	1855      	adds	r5, r2, r1
 80066ec:	42a5      	cmp	r5, r4
 80066ee:	d10b      	bne.n	8006708 <_free_r+0x70>
 80066f0:	6824      	ldr	r4, [r4, #0]
 80066f2:	4421      	add	r1, r4
 80066f4:	1854      	adds	r4, r2, r1
 80066f6:	42a3      	cmp	r3, r4
 80066f8:	6011      	str	r1, [r2, #0]
 80066fa:	d1e0      	bne.n	80066be <_free_r+0x26>
 80066fc:	681c      	ldr	r4, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	6053      	str	r3, [r2, #4]
 8006702:	4421      	add	r1, r4
 8006704:	6011      	str	r1, [r2, #0]
 8006706:	e7da      	b.n	80066be <_free_r+0x26>
 8006708:	d902      	bls.n	8006710 <_free_r+0x78>
 800670a:	230c      	movs	r3, #12
 800670c:	6003      	str	r3, [r0, #0]
 800670e:	e7d6      	b.n	80066be <_free_r+0x26>
 8006710:	6825      	ldr	r5, [r4, #0]
 8006712:	1961      	adds	r1, r4, r5
 8006714:	428b      	cmp	r3, r1
 8006716:	bf04      	itt	eq
 8006718:	6819      	ldreq	r1, [r3, #0]
 800671a:	685b      	ldreq	r3, [r3, #4]
 800671c:	6063      	str	r3, [r4, #4]
 800671e:	bf04      	itt	eq
 8006720:	1949      	addeq	r1, r1, r5
 8006722:	6021      	streq	r1, [r4, #0]
 8006724:	6054      	str	r4, [r2, #4]
 8006726:	e7ca      	b.n	80066be <_free_r+0x26>
 8006728:	b003      	add	sp, #12
 800672a:	bd30      	pop	{r4, r5, pc}
 800672c:	2000043c 	.word	0x2000043c

08006730 <sbrk_aligned>:
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	4e0e      	ldr	r6, [pc, #56]	; (800676c <sbrk_aligned+0x3c>)
 8006734:	460c      	mov	r4, r1
 8006736:	6831      	ldr	r1, [r6, #0]
 8006738:	4605      	mov	r5, r0
 800673a:	b911      	cbnz	r1, 8006742 <sbrk_aligned+0x12>
 800673c:	f000 f8bc 	bl	80068b8 <_sbrk_r>
 8006740:	6030      	str	r0, [r6, #0]
 8006742:	4621      	mov	r1, r4
 8006744:	4628      	mov	r0, r5
 8006746:	f000 f8b7 	bl	80068b8 <_sbrk_r>
 800674a:	1c43      	adds	r3, r0, #1
 800674c:	d00a      	beq.n	8006764 <sbrk_aligned+0x34>
 800674e:	1cc4      	adds	r4, r0, #3
 8006750:	f024 0403 	bic.w	r4, r4, #3
 8006754:	42a0      	cmp	r0, r4
 8006756:	d007      	beq.n	8006768 <sbrk_aligned+0x38>
 8006758:	1a21      	subs	r1, r4, r0
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f8ac 	bl	80068b8 <_sbrk_r>
 8006760:	3001      	adds	r0, #1
 8006762:	d101      	bne.n	8006768 <sbrk_aligned+0x38>
 8006764:	f04f 34ff 	mov.w	r4, #4294967295
 8006768:	4620      	mov	r0, r4
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	20000440 	.word	0x20000440

08006770 <_malloc_r>:
 8006770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006774:	1ccd      	adds	r5, r1, #3
 8006776:	f025 0503 	bic.w	r5, r5, #3
 800677a:	3508      	adds	r5, #8
 800677c:	2d0c      	cmp	r5, #12
 800677e:	bf38      	it	cc
 8006780:	250c      	movcc	r5, #12
 8006782:	2d00      	cmp	r5, #0
 8006784:	4607      	mov	r7, r0
 8006786:	db01      	blt.n	800678c <_malloc_r+0x1c>
 8006788:	42a9      	cmp	r1, r5
 800678a:	d905      	bls.n	8006798 <_malloc_r+0x28>
 800678c:	230c      	movs	r3, #12
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	2600      	movs	r6, #0
 8006792:	4630      	mov	r0, r6
 8006794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006798:	4e2e      	ldr	r6, [pc, #184]	; (8006854 <_malloc_r+0xe4>)
 800679a:	f000 f89d 	bl	80068d8 <__malloc_lock>
 800679e:	6833      	ldr	r3, [r6, #0]
 80067a0:	461c      	mov	r4, r3
 80067a2:	bb34      	cbnz	r4, 80067f2 <_malloc_r+0x82>
 80067a4:	4629      	mov	r1, r5
 80067a6:	4638      	mov	r0, r7
 80067a8:	f7ff ffc2 	bl	8006730 <sbrk_aligned>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	4604      	mov	r4, r0
 80067b0:	d14d      	bne.n	800684e <_malloc_r+0xde>
 80067b2:	6834      	ldr	r4, [r6, #0]
 80067b4:	4626      	mov	r6, r4
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	d140      	bne.n	800683c <_malloc_r+0xcc>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	4631      	mov	r1, r6
 80067be:	4638      	mov	r0, r7
 80067c0:	eb04 0803 	add.w	r8, r4, r3
 80067c4:	f000 f878 	bl	80068b8 <_sbrk_r>
 80067c8:	4580      	cmp	r8, r0
 80067ca:	d13a      	bne.n	8006842 <_malloc_r+0xd2>
 80067cc:	6821      	ldr	r1, [r4, #0]
 80067ce:	3503      	adds	r5, #3
 80067d0:	1a6d      	subs	r5, r5, r1
 80067d2:	f025 0503 	bic.w	r5, r5, #3
 80067d6:	3508      	adds	r5, #8
 80067d8:	2d0c      	cmp	r5, #12
 80067da:	bf38      	it	cc
 80067dc:	250c      	movcc	r5, #12
 80067de:	4629      	mov	r1, r5
 80067e0:	4638      	mov	r0, r7
 80067e2:	f7ff ffa5 	bl	8006730 <sbrk_aligned>
 80067e6:	3001      	adds	r0, #1
 80067e8:	d02b      	beq.n	8006842 <_malloc_r+0xd2>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	442b      	add	r3, r5
 80067ee:	6023      	str	r3, [r4, #0]
 80067f0:	e00e      	b.n	8006810 <_malloc_r+0xa0>
 80067f2:	6822      	ldr	r2, [r4, #0]
 80067f4:	1b52      	subs	r2, r2, r5
 80067f6:	d41e      	bmi.n	8006836 <_malloc_r+0xc6>
 80067f8:	2a0b      	cmp	r2, #11
 80067fa:	d916      	bls.n	800682a <_malloc_r+0xba>
 80067fc:	1961      	adds	r1, r4, r5
 80067fe:	42a3      	cmp	r3, r4
 8006800:	6025      	str	r5, [r4, #0]
 8006802:	bf18      	it	ne
 8006804:	6059      	strne	r1, [r3, #4]
 8006806:	6863      	ldr	r3, [r4, #4]
 8006808:	bf08      	it	eq
 800680a:	6031      	streq	r1, [r6, #0]
 800680c:	5162      	str	r2, [r4, r5]
 800680e:	604b      	str	r3, [r1, #4]
 8006810:	4638      	mov	r0, r7
 8006812:	f104 060b 	add.w	r6, r4, #11
 8006816:	f000 f865 	bl	80068e4 <__malloc_unlock>
 800681a:	f026 0607 	bic.w	r6, r6, #7
 800681e:	1d23      	adds	r3, r4, #4
 8006820:	1af2      	subs	r2, r6, r3
 8006822:	d0b6      	beq.n	8006792 <_malloc_r+0x22>
 8006824:	1b9b      	subs	r3, r3, r6
 8006826:	50a3      	str	r3, [r4, r2]
 8006828:	e7b3      	b.n	8006792 <_malloc_r+0x22>
 800682a:	6862      	ldr	r2, [r4, #4]
 800682c:	42a3      	cmp	r3, r4
 800682e:	bf0c      	ite	eq
 8006830:	6032      	streq	r2, [r6, #0]
 8006832:	605a      	strne	r2, [r3, #4]
 8006834:	e7ec      	b.n	8006810 <_malloc_r+0xa0>
 8006836:	4623      	mov	r3, r4
 8006838:	6864      	ldr	r4, [r4, #4]
 800683a:	e7b2      	b.n	80067a2 <_malloc_r+0x32>
 800683c:	4634      	mov	r4, r6
 800683e:	6876      	ldr	r6, [r6, #4]
 8006840:	e7b9      	b.n	80067b6 <_malloc_r+0x46>
 8006842:	230c      	movs	r3, #12
 8006844:	603b      	str	r3, [r7, #0]
 8006846:	4638      	mov	r0, r7
 8006848:	f000 f84c 	bl	80068e4 <__malloc_unlock>
 800684c:	e7a1      	b.n	8006792 <_malloc_r+0x22>
 800684e:	6025      	str	r5, [r4, #0]
 8006850:	e7de      	b.n	8006810 <_malloc_r+0xa0>
 8006852:	bf00      	nop
 8006854:	2000043c 	.word	0x2000043c

08006858 <_realloc_r>:
 8006858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800685c:	4680      	mov	r8, r0
 800685e:	4614      	mov	r4, r2
 8006860:	460e      	mov	r6, r1
 8006862:	b921      	cbnz	r1, 800686e <_realloc_r+0x16>
 8006864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006868:	4611      	mov	r1, r2
 800686a:	f7ff bf81 	b.w	8006770 <_malloc_r>
 800686e:	b92a      	cbnz	r2, 800687c <_realloc_r+0x24>
 8006870:	f7ff ff12 	bl	8006698 <_free_r>
 8006874:	4625      	mov	r5, r4
 8006876:	4628      	mov	r0, r5
 8006878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800687c:	f000 f838 	bl	80068f0 <_malloc_usable_size_r>
 8006880:	4284      	cmp	r4, r0
 8006882:	4607      	mov	r7, r0
 8006884:	d802      	bhi.n	800688c <_realloc_r+0x34>
 8006886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800688a:	d812      	bhi.n	80068b2 <_realloc_r+0x5a>
 800688c:	4621      	mov	r1, r4
 800688e:	4640      	mov	r0, r8
 8006890:	f7ff ff6e 	bl	8006770 <_malloc_r>
 8006894:	4605      	mov	r5, r0
 8006896:	2800      	cmp	r0, #0
 8006898:	d0ed      	beq.n	8006876 <_realloc_r+0x1e>
 800689a:	42bc      	cmp	r4, r7
 800689c:	4622      	mov	r2, r4
 800689e:	4631      	mov	r1, r6
 80068a0:	bf28      	it	cs
 80068a2:	463a      	movcs	r2, r7
 80068a4:	f7ff fed0 	bl	8006648 <memcpy>
 80068a8:	4631      	mov	r1, r6
 80068aa:	4640      	mov	r0, r8
 80068ac:	f7ff fef4 	bl	8006698 <_free_r>
 80068b0:	e7e1      	b.n	8006876 <_realloc_r+0x1e>
 80068b2:	4635      	mov	r5, r6
 80068b4:	e7df      	b.n	8006876 <_realloc_r+0x1e>
	...

080068b8 <_sbrk_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4d06      	ldr	r5, [pc, #24]	; (80068d4 <_sbrk_r+0x1c>)
 80068bc:	2300      	movs	r3, #0
 80068be:	4604      	mov	r4, r0
 80068c0:	4608      	mov	r0, r1
 80068c2:	602b      	str	r3, [r5, #0]
 80068c4:	f7fa f91a 	bl	8000afc <_sbrk>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_sbrk_r+0x1a>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_sbrk_r+0x1a>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	20000444 	.word	0x20000444

080068d8 <__malloc_lock>:
 80068d8:	4801      	ldr	r0, [pc, #4]	; (80068e0 <__malloc_lock+0x8>)
 80068da:	f000 b811 	b.w	8006900 <__retarget_lock_acquire_recursive>
 80068de:	bf00      	nop
 80068e0:	20000448 	.word	0x20000448

080068e4 <__malloc_unlock>:
 80068e4:	4801      	ldr	r0, [pc, #4]	; (80068ec <__malloc_unlock+0x8>)
 80068e6:	f000 b80c 	b.w	8006902 <__retarget_lock_release_recursive>
 80068ea:	bf00      	nop
 80068ec:	20000448 	.word	0x20000448

080068f0 <_malloc_usable_size_r>:
 80068f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f4:	1f18      	subs	r0, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bfbc      	itt	lt
 80068fa:	580b      	ldrlt	r3, [r1, r0]
 80068fc:	18c0      	addlt	r0, r0, r3
 80068fe:	4770      	bx	lr

08006900 <__retarget_lock_acquire_recursive>:
 8006900:	4770      	bx	lr

08006902 <__retarget_lock_release_recursive>:
 8006902:	4770      	bx	lr

08006904 <_init>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr

08006910 <_fini>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr
