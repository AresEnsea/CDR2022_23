
Test OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aea4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  0800b078  0800b078  0001b078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b700  0800b700  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b700  0800b700  0001b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b708  0800b708  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b708  0800b708  0001b708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b70c  0800b70c  0001b70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b7c  200001e4  0800b8f4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d60  0800b8f4  00024d60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad68  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000397c  00000000  00000000  0003af7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  0003e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  0003ff00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005973  00000000  00000000  000413a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017eb2  00000000  00000000  00046d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd15  00000000  00000000  0005ebc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea8da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000704c  00000000  00000000  000ea92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b05c 	.word	0x0800b05c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800b05c 	.word	0x0800b05c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0000      	movs	r0, r0
	...

08000f90 <positionRelative>:
#define pasDistance 25
#define rayonCapteurs 4.8
#define deltaAngle (10/360.)*2*pi


float * positionRelative(int number, int pseudoDistance, float * angleDeg){
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b092      	sub	sp, #72	; 0x48
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	float pas = pasDistance;				//Pas entre 2 incréments de distance mesuree
 8000f9c:	4bc0      	ldr	r3, [pc, #768]	; (80012a0 <positionRelative+0x310>)
 8000f9e:	647b      	str	r3, [r7, #68]	; 0x44
	float distance = pas*pseudoDistance;	//Distance reelle de l'obstacle
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000faa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float rayon = rayonCapteurs;			//Rayon de la tourelle
 8000fb6:	4bbb      	ldr	r3, [pc, #748]	; (80012a4 <positionRelative+0x314>)
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	float angleRob = 2*(float)pi*(*angleDeg)/360.;		//Angle relatif du robot
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 80012a8 <positionRelative+0x318>
 8000fc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fc8:	eddf 6ab8 	vldr	s13, [pc, #736]	; 80012ac <positionRelative+0x31c>
 8000fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float angleCapt = (float)number*pasAngulaire;	//Anlgle du capteur par rapport a l'avant du robot
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fde:	ee17 0a90 	vmov	r0, s15
 8000fe2:	f7ff fad1 	bl	8000588 <__aeabi_f2d>
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4bb1      	ldr	r3, [pc, #708]	; (80012b0 <positionRelative+0x320>)
 8000fec:	f7ff fb24 	bl	8000638 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	f7ff f966 	bl	80002cc <__adddf3>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	a39f      	add	r3, pc, #636	; (adr r3, 8001288 <positionRelative+0x2f8>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fb13 	bl	8000638 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fde5 	bl	8000be8 <__aeabi_d2f>
 800101e:	4603      	mov	r3, r0
 8001020:	637b      	str	r3, [r7, #52]	; 0x34

	
	static float  sortie[4];	//

	//Calcul du point P
	OP[0] = (rayon + distance)*cos(angleRob + angleCapt);
 8001022:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001026:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800102a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102e:	ee17 0a90 	vmov	r0, s15
 8001032:	f7ff faa9 	bl	8000588 <__aeabi_f2d>
 8001036:	4604      	mov	r4, r0
 8001038:	460d      	mov	r5, r1
 800103a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800103e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001046:	ee17 0a90 	vmov	r0, s15
 800104a:	f7ff fa9d 	bl	8000588 <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	ec43 2b10 	vmov	d0, r2, r3
 8001056:	f008 ff63 	bl	8009f20 <cos>
 800105a:	ec53 2b10 	vmov	r2, r3, d0
 800105e:	4620      	mov	r0, r4
 8001060:	4629      	mov	r1, r5
 8001062:	f7ff fae9 	bl	8000638 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fdbb 	bl	8000be8 <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
	OP[1] = (rayon + distance)*sin(angleRob + angleCapt);
 8001076:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800107a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001082:	ee17 0a90 	vmov	r0, s15
 8001086:	f7ff fa7f 	bl	8000588 <__aeabi_f2d>
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001092:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109a:	ee17 0a90 	vmov	r0, s15
 800109e:	f7ff fa73 	bl	8000588 <__aeabi_f2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	ec43 2b10 	vmov	d0, r2, r3
 80010aa:	f008 ff8d 	bl	8009fc8 <sin>
 80010ae:	ec53 2b10 	vmov	r2, r3, d0
 80010b2:	4620      	mov	r0, r4
 80010b4:	4629      	mov	r1, r5
 80010b6:	f7ff fabf 	bl	8000638 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fd91 	bl	8000be8 <__aeabi_d2f>
 80010c6:	4603      	mov	r3, r0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30

	//Creation de gamma
	gamma[0] = cos(angleRob + angleCapt + pi/2.);
 80010ca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80010ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	ee17 0a90 	vmov	r0, s15
 80010da:	f7ff fa55 	bl	8000588 <__aeabi_f2d>
 80010de:	a36c      	add	r3, pc, #432	; (adr r3, 8001290 <positionRelative+0x300>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff f8f2 	bl	80002cc <__adddf3>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	ec43 2b17 	vmov	d7, r2, r3
 80010f0:	eeb0 0a47 	vmov.f32	s0, s14
 80010f4:	eef0 0a67 	vmov.f32	s1, s15
 80010f8:	f008 ff12 	bl	8009f20 <cos>
 80010fc:	ec53 2b10 	vmov	r2, r3, d0
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fd70 	bl	8000be8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
	gamma[1] = sin(angleRob + angleCapt + pi/2.);
 800110c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001110:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	ee17 0a90 	vmov	r0, s15
 800111c:	f7ff fa34 	bl	8000588 <__aeabi_f2d>
 8001120:	a35b      	add	r3, pc, #364	; (adr r3, 8001290 <positionRelative+0x300>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff f8d1 	bl	80002cc <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	ec43 2b17 	vmov	d7, r2, r3
 8001132:	eeb0 0a47 	vmov.f32	s0, s14
 8001136:	eef0 0a67 	vmov.f32	s1, s15
 800113a:	f008 ff45 	bl	8009fc8 <sin>
 800113e:	ec53 2b10 	vmov	r2, r3, d0
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fd4f 	bl	8000be8 <__aeabi_d2f>
 800114a:	4603      	mov	r3, r0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28

	//Calcul des points maximaux
	//OA = OP - gamma*distance*tan(deltaAngle);
	OA[0] = OP[0] - gamma[0]*distance*tan(deltaAngle);
 800114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa19 	bl	8000588 <__aeabi_f2d>
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800115e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	ee17 0a90 	vmov	r0, s15
 800116a:	f7ff fa0d 	bl	8000588 <__aeabi_f2d>
 800116e:	a34a      	add	r3, pc, #296	; (adr r3, 8001298 <positionRelative+0x308>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fa60 	bl	8000638 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff f8a2 	bl	80002c8 <__aeabi_dsub>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fd2c 	bl	8000be8 <__aeabi_d2f>
 8001190:	4603      	mov	r3, r0
 8001192:	61fb      	str	r3, [r7, #28]
	OA[1] = OP[1] - gamma[1]*distance*tan(deltaAngle);
 8001194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9f6 	bl	8000588 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011a4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	ee17 0a90 	vmov	r0, s15
 80011b0:	f7ff f9ea 	bl	8000588 <__aeabi_f2d>
 80011b4:	a338      	add	r3, pc, #224	; (adr r3, 8001298 <positionRelative+0x308>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fa3d 	bl	8000638 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4620      	mov	r0, r4
 80011c4:	4629      	mov	r1, r5
 80011c6:	f7ff f87f 	bl	80002c8 <__aeabi_dsub>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fd09 	bl	8000be8 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	623b      	str	r3, [r7, #32]

	//OB = OP + gamma*distance*tan(deltaAngle);
	OB[0] = OP[0] + gamma[0]*distance*tan(deltaAngle);
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f9d3 	bl	8000588 <__aeabi_f2d>
 80011e2:	4604      	mov	r4, r0
 80011e4:	460d      	mov	r5, r1
 80011e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80011ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f2:	ee17 0a90 	vmov	r0, s15
 80011f6:	f7ff f9c7 	bl	8000588 <__aeabi_f2d>
 80011fa:	a327      	add	r3, pc, #156	; (adr r3, 8001298 <positionRelative+0x308>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f7ff fa1a 	bl	8000638 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4620      	mov	r0, r4
 800120a:	4629      	mov	r1, r5
 800120c:	f7ff f85e 	bl	80002cc <__adddf3>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fce6 	bl	8000be8 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	617b      	str	r3, [r7, #20]
	OB[1] = OP[1] + gamma[1]*distance*tan(deltaAngle);
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f9b0 	bl	8000588 <__aeabi_f2d>
 8001228:	4604      	mov	r4, r0
 800122a:	460d      	mov	r5, r1
 800122c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001230:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001238:	ee17 0a90 	vmov	r0, s15
 800123c:	f7ff f9a4 	bl	8000588 <__aeabi_f2d>
 8001240:	a315      	add	r3, pc, #84	; (adr r3, 8001298 <positionRelative+0x308>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	f7ff f9f7 	bl	8000638 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff f83b 	bl	80002cc <__adddf3>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fcc3 	bl	8000be8 <__aeabi_d2f>
 8001262:	4603      	mov	r3, r0
 8001264:	61bb      	str	r3, [r7, #24]

	sortie[0] = OA[0];
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <positionRelative+0x324>)
 800126a:	6013      	str	r3, [r2, #0]
	sortie[1] = OA[1];
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <positionRelative+0x324>)
 8001270:	6053      	str	r3, [r2, #4]

	sortie[2] = OB[0];
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <positionRelative+0x324>)
 8001276:	6093      	str	r3, [r2, #8]
	sortie[3] = OB[1];
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <positionRelative+0x324>)
 800127c:	60d3      	str	r3, [r2, #12]

	return sortie;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <positionRelative+0x324>)
}
 8001280:	4618      	mov	r0, r3
 8001282:	3748      	adds	r7, #72	; 0x48
 8001284:	46bd      	mov	sp, r7
 8001286:	bdb0      	pop	{r4, r5, r7, pc}
 8001288:	51eb851f 	.word	0x51eb851f
 800128c:	40091eb8 	.word	0x40091eb8
 8001290:	51eb851f 	.word	0x51eb851f
 8001294:	3ff91eb8 	.word	0x3ff91eb8
 8001298:	a02f2904 	.word	0xa02f2904
 800129c:	3fc68ee4 	.word	0x3fc68ee4
 80012a0:	41c80000 	.word	0x41c80000
 80012a4:	4099999a 	.word	0x4099999a
 80012a8:	40c8f5c3 	.word	0x40c8f5c3
 80012ac:	43b40000 	.word	0x43b40000
 80012b0:	3fb00000 	.word	0x3fb00000
 80012b4:	20000200 	.word	0x20000200

080012b8 <send_deftask>:





void send_deftask(float x){
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t value[12];
	gcvt(x, 8, value);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff f960 	bl	8000588 <__aeabi_f2d>
 80012c8:	4604      	mov	r4, r0
 80012ca:	460d      	mov	r5, r1
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	2008      	movs	r0, #8
 80012d4:	ec45 4b10 	vmov	d0, r4, r5
 80012d8:	f005 fee8 	bl	80070ac <gcvt>
	value[8] = ' ';
 80012dc:	2320      	movs	r3, #32
 80012de:	753b      	strb	r3, [r7, #20]
	value[9] = '\r';
 80012e0:	230d      	movs	r3, #13
 80012e2:	757b      	strb	r3, [r7, #21]
	value[10] = '\n';
 80012e4:	230a      	movs	r3, #10
 80012e6:	75bb      	strb	r3, [r7, #22]
	value[11]= '\0';
 80012e8:	2300      	movs	r3, #0
 80012ea:	75fb      	strb	r3, [r7, #23]

	//int size = snprintf((char*)value, 20, "%d\r\n",(int)(x*1000));
	HAL_UART_Transmit(&huart2, value, 8+3, 500);
 80012ec:	f107 010c 	add.w	r1, r7, #12
 80012f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012f4:	220b      	movs	r2, #11
 80012f6:	4803      	ldr	r0, [pc, #12]	; (8001304 <send_deftask+0x4c>)
 80012f8:	f002 f953 	bl	80035a2 <HAL_UART_Transmit>
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}
 8001304:	2000029c 	.word	0x2000029c

08001308 <print_point>:

void print_point(float * OP){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	float x = OP[0];
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	617b      	str	r3, [r7, #20]
	float y = OP[1];
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	613b      	str	r3, [r7, #16]

	uint8_t data[]= " - ";
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <print_point+0x40>)
 800131e:	60fb      	str	r3, [r7, #12]
	send_deftask(x);
 8001320:	ed97 0a05 	vldr	s0, [r7, #20]
 8001324:	f7ff ffc8 	bl	80012b8 <send_deftask>
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 8001328:	f107 010c 	add.w	r1, r7, #12
 800132c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001330:	2204      	movs	r2, #4
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <print_point+0x44>)
 8001334:	f002 f935 	bl	80035a2 <HAL_UART_Transmit>
	send_deftask(y);
 8001338:	ed97 0a04 	vldr	s0, [r7, #16]
 800133c:	f7ff ffbc 	bl	80012b8 <send_deftask>
}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	00202d20 	.word	0x00202d20
 800134c:	2000029c 	.word	0x2000029c

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001354:	f000 fcd0 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001358:	f000 f83a 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135c:	f000 f938 	bl	80015d0 <MX_GPIO_Init>
  MX_TIM5_Init();
 8001360:	f000 f894 	bl	800148c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001364:	f000 f8e0 	bl	8001528 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001368:	f000 f908 	bl	800157c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int true;
  tests();
 800136c:	f000 fc92 	bl	8001c94 <tests>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001370:	f003 f922 	bl	80045b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of checkDistance */
  checkDistanceHandle = osThreadNew(StartDefaultTask, NULL, &checkDistance_attributes);
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <main+0x5c>)
 8001376:	2100      	movs	r1, #0
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <main+0x60>)
 800137a:	f003 f967 	bl	800464c <osThreadNew>
 800137e:	4603      	mov	r3, r0
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <main+0x64>)
 8001382:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <main+0x68>)
 8001386:	2100      	movs	r1, #0
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <main+0x6c>)
 800138a:	f003 f95f 	bl	800464c <osThreadNew>
 800138e:	4603      	mov	r3, r0
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <main+0x70>)
 8001392:	6013      	str	r3, [r2, #0]

  /* creation of checkUserButton */
  checkUserButtonHandle = osThreadNew(button, NULL, &checkUserButton_attributes);
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <main+0x74>)
 8001396:	2100      	movs	r1, #0
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <main+0x78>)
 800139a:	f003 f957 	bl	800464c <osThreadNew>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <main+0x7c>)
 80013a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013a4:	f003 f92c 	bl	8004600 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <main+0x58>
 80013aa:	bf00      	nop
 80013ac:	0800b0c8 	.word	0x0800b0c8
 80013b0:	08001675 	.word	0x08001675
 80013b4:	200002e0 	.word	0x200002e0
 80013b8:	0800b0ec 	.word	0x0800b0ec
 80013bc:	080016b1 	.word	0x080016b1
 80013c0:	200002e4 	.word	0x200002e4
 80013c4:	0800b110 	.word	0x0800b110
 80013c8:	08001771 	.word	0x08001771
 80013cc:	200002e8 	.word	0x200002e8

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	; 0x50
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	2234      	movs	r2, #52	; 0x34
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 ffb9 	bl	8007356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <SystemClock_Config+0xb4>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a21      	ldr	r2, [pc, #132]	; (8001484 <SystemClock_Config+0xb4>)
 80013fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <SystemClock_Config+0xb4>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <SystemClock_Config+0xb8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <SystemClock_Config+0xb8>)
 800141a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <SystemClock_Config+0xb8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800142c:	2302      	movs	r3, #2
 800142e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001430:	2301      	movs	r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001434:	2310      	movs	r3, #16
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4618      	mov	r0, r3
 8001442:	f001 f9e1 	bl	8002808 <HAL_RCC_OscConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800144c:	f000 f9c4 	bl	80017d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001450:	230f      	movs	r3, #15
 8001452:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f000 ffba 	bl	80023e4 <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001476:	f000 f9af 	bl	80017d8 <Error_Handler>
  }
}
 800147a:	bf00      	nop
 800147c:	3750      	adds	r7, #80	; 0x50
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	463b      	mov	r3, r7
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_TIM5_Init+0x94>)
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <MX_TIM5_Init+0x98>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_TIM5_Init+0x94>)
 80014b0:	22f9      	movs	r2, #249	; 0xf9
 80014b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_TIM5_Init+0x94>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_TIM5_Init+0x94>)
 80014bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_TIM5_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_TIM5_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014ce:	4814      	ldr	r0, [pc, #80]	; (8001520 <MX_TIM5_Init+0x94>)
 80014d0:	f001 fc1e 	bl	8002d10 <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 f97d 	bl	80017d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4619      	mov	r1, r3
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_TIM5_Init+0x94>)
 80014ec:	f001 fdb6 	bl	800305c <HAL_TIM_ConfigClockSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80014f6:	f000 f96f 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001502:	463b      	mov	r3, r7
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <MX_TIM5_Init+0x94>)
 8001508:	f001 ff90 	bl	800342c <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001512:	f000 f961 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000210 	.word	0x20000210
 8001524:	40000c00 	.word	0x40000c00

08001528 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_USART1_UART_Init+0x50>)
 8001530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001560:	f001 ffd2 	bl	8003508 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800156a:	f000 f935 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000258 	.word	0x20000258
 8001578:	40011000 	.word	0x40011000

0800157c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_USART2_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART2_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART2_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART2_UART_Init+0x4c>)
 80015b4:	f001 ffa8 	bl	8003508 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015be:	f000 f90b 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000029c 	.word	0x2000029c
 80015cc:	40004400 	.word	0x40004400

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <MX_GPIO_Init+0x98>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <MX_GPIO_Init+0x98>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <MX_GPIO_Init+0x98>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_GPIO_Init+0x98>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <MX_GPIO_Init+0x98>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MX_GPIO_Init+0x98>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2120      	movs	r1, #32
 8001622:	4812      	ldr	r0, [pc, #72]	; (800166c <MX_GPIO_Init+0x9c>)
 8001624:	f000 feaa 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_GPIO_Init+0xa0>)
 800163e:	f000 fd11 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001642:	2320      	movs	r3, #32
 8001644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4619      	mov	r1, r3
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_GPIO_Init+0x9c>)
 800165a:	f000 fd03 	bl	8002064 <HAL_GPIO_Init>

}
 800165e:	bf00      	nop
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020800 	.word	0x40020800

08001674 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t n = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	75fb      	strb	r3, [r7, #23]
	int dist = 4;
 8001680:	2304      	movs	r3, #4
 8001682:	613b      	str	r3, [r7, #16]
	float angle = 90;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <StartDefaultTask+0x34>)
 8001686:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  n+= 10;
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	330a      	adds	r3, #10
 800168c:	75fb      	strb	r3, [r7, #23]
	  //double * distance = positionRelative(n, dist, angle);
	  if(n > 100) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	2b64      	cmp	r3, #100	; 0x64
 8001692:	d903      	bls.n	800169c <StartDefaultTask+0x28>
 8001694:	2120      	movs	r1, #32
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <StartDefaultTask+0x38>)
 8001698:	f000 fe89 	bl	80023ae <HAL_GPIO_TogglePin>
	  osDelay(500);
 800169c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a0:	f003 f866 	bl	8004770 <osDelay>
	  n+= 10;
 80016a4:	e7f0      	b.n	8001688 <StartDefaultTask+0x14>
 80016a6:	bf00      	nop
 80016a8:	42b40000 	.word	0x42b40000
 80016ac:	40020000 	.word	0x40020000

080016b0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	; 0x30
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  float * sortie;
	  float ag = (float)buttonCount;
 80016b8:	4b29      	ldr	r3, [pc, #164]	; (8001760 <StartTask02+0xb0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  sortie = positionRelative((int)i,3,&ag);
 80016c8:	4b26      	ldr	r3, [pc, #152]	; (8001764 <StartTask02+0xb4>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d6:	461a      	mov	r2, r3
 80016d8:	2103      	movs	r1, #3
 80016da:	ee17 0a90 	vmov	r0, s15
 80016de:	f7ff fc57 	bl	8000f90 <positionRelative>
 80016e2:	4603      	mov	r3, r0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  //sortie[0] = 12.4;
	  float OA[2]; float OB[2];
	  OA[0] = sortie[0]; OA[1] = sortie[1];
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	623b      	str	r3, [r7, #32]
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
	  OB[0] = sortie[2]; OB[1] = sortie[3];
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61fb      	str	r3, [r7, #28]
	  print_point(OA);
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fe00 	bl	8001308 <print_point>
	  print_point(OB);
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fdfb 	bl	8001308 <print_point>

	  uint8_t data[] = "###### \r\n";
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <StartTask02+0xb8>)
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	ca07      	ldmia	r2, {r0, r1, r2}
 800171a:	c303      	stmia	r3!, {r0, r1}
 800171c:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 800171e:	f107 010c 	add.w	r1, r7, #12
 8001722:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001726:	220a      	movs	r2, #10
 8001728:	4810      	ldr	r0, [pc, #64]	; (800176c <StartTask02+0xbc>)
 800172a:	f001 ff3a 	bl	80035a2 <HAL_UART_Transmit>
	  send_deftask(buttonCount);
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <StartTask02+0xb0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173a:	eeb0 0a67 	vmov.f32	s0, s15
 800173e:	f7ff fdbb 	bl	80012b8 <send_deftask>

	  i+=1;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <StartTask02+0xb4>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800174c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <StartTask02+0xb4>)
 8001752:	edc3 7a00 	vstr	s15, [r3]
    osDelay(500);
 8001756:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800175a:	f003 f809 	bl	8004770 <osDelay>
  {
 800175e:	e7ab      	b.n	80016b8 <StartTask02+0x8>
 8001760:	200002ec 	.word	0x200002ec
 8001764:	20000000 	.word	0x20000000
 8001768:	0800b0a4 	.word	0x0800b0a4
 800176c:	2000029c 	.word	0x2000029c

08001770 <button>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_button */
void button(void *argument)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  {
/*
	  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, 13)){
		  buttonCount++;
	  }*/
	  buttonCount = 1- (int)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177c:	480b      	ldr	r0, [pc, #44]	; (80017ac <button+0x3c>)
 800177e:	f000 fde5 	bl	800234c <HAL_GPIO_ReadPin>
 8001782:	4603      	mov	r3, r0
 8001784:	f1c3 0301 	rsb	r3, r3, #1
 8001788:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <button+0x40>)
 800178a:	6013      	str	r3, [r2, #0]
	  send_deftask(buttonCount);
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <button+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001798:	eeb0 0a67 	vmov.f32	s0, s15
 800179c:	f7ff fd8c 	bl	80012b8 <send_deftask>
    osDelay(500);
 80017a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a4:	f002 ffe4 	bl	8004770 <osDelay>
	  buttonCount = 1- (int)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80017a8:	e7e6      	b.n	8001778 <button+0x8>
 80017aa:	bf00      	nop
 80017ac:	40020800 	.word	0x40020800
 80017b0:	200002ec 	.word	0x200002ec

080017b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017c6:	f000 fab9 	bl	8001d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40010000 	.word	0x40010000

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <Error_Handler+0x8>
	...

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_MspInit+0x54>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_MspInit+0x54>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x54>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_MspInit+0x54>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_MspInit+0x54>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_MspInit+0x54>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	210f      	movs	r1, #15
 8001826:	f06f 0001 	mvn.w	r0, #1
 800182a:	f000 fb5f 	bl	8001eec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_TIM_Base_MspInit+0x3c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10d      	bne.n	800186a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_TIM_Base_MspInit+0x40>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_TIM_Base_MspInit+0x40>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_TIM_Base_MspInit+0x40>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40000c00 	.word	0x40000c00
 800187c:	40023800 	.word	0x40023800

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3a      	ldr	r2, [pc, #232]	; (8001988 <HAL_UART_MspInit+0x108>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d135      	bne.n	800190e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_UART_MspInit+0x10c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a38      	ldr	r2, [pc, #224]	; (800198c <HAL_UART_MspInit+0x10c>)
 80018ac:	f043 0310 	orr.w	r3, r3, #16
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b36      	ldr	r3, [pc, #216]	; (800198c <HAL_UART_MspInit+0x10c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	4b32      	ldr	r3, [pc, #200]	; (800198c <HAL_UART_MspInit+0x10c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a31      	ldr	r2, [pc, #196]	; (800198c <HAL_UART_MspInit+0x10c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_UART_MspInit+0x10c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ec:	2307      	movs	r3, #7
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4826      	ldr	r0, [pc, #152]	; (8001990 <HAL_UART_MspInit+0x110>)
 80018f8:	f000 fbb4 	bl	8002064 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2105      	movs	r1, #5
 8001900:	2025      	movs	r0, #37	; 0x25
 8001902:	f000 faf3 	bl	8001eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001906:	2025      	movs	r0, #37	; 0x25
 8001908:	f000 fb0c 	bl	8001f24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800190c:	e038      	b.n	8001980 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a20      	ldr	r2, [pc, #128]	; (8001994 <HAL_UART_MspInit+0x114>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d133      	bne.n	8001980 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_UART_MspInit+0x10c>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	4a1a      	ldr	r2, [pc, #104]	; (800198c <HAL_UART_MspInit+0x10c>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_UART_MspInit+0x10c>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_UART_MspInit+0x10c>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	4a13      	ldr	r2, [pc, #76]	; (800198c <HAL_UART_MspInit+0x10c>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6313      	str	r3, [r2, #48]	; 0x30
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_UART_MspInit+0x10c>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001950:	230c      	movs	r3, #12
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001960:	2307      	movs	r3, #7
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	4809      	ldr	r0, [pc, #36]	; (8001990 <HAL_UART_MspInit+0x110>)
 800196c:	f000 fb7a 	bl	8002064 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2105      	movs	r1, #5
 8001974:	2026      	movs	r0, #38	; 0x26
 8001976:	f000 fab9 	bl	8001eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800197a:	2026      	movs	r0, #38	; 0x26
 800197c:	f000 fad2 	bl	8001f24 <HAL_NVIC_EnableIRQ>
}
 8001980:	bf00      	nop
 8001982:	3730      	adds	r7, #48	; 0x30
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40011000 	.word	0x40011000
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	40004400 	.word	0x40004400

08001998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_InitTick+0xd0>)
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	4a2d      	ldr	r2, [pc, #180]	; (8001a68 <HAL_InitTick+0xd0>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6453      	str	r3, [r2, #68]	; 0x44
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_InitTick+0xd0>)
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019c4:	f107 020c 	add.w	r2, r7, #12
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fee8 	bl	80027a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019d4:	f000 fed2 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 80019d8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_InitTick+0xd4>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	0c9b      	lsrs	r3, r3, #18
 80019e4:	3b01      	subs	r3, #1
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_InitTick+0xd8>)
 80019ea:	4a22      	ldr	r2, [pc, #136]	; (8001a74 <HAL_InitTick+0xdc>)
 80019ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_InitTick+0xd8>)
 80019f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019f6:	4a1e      	ldr	r2, [pc, #120]	; (8001a70 <HAL_InitTick+0xd8>)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019fc:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_InitTick+0xd8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_InitTick+0xd8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_InitTick+0xd8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a0e:	4818      	ldr	r0, [pc, #96]	; (8001a70 <HAL_InitTick+0xd8>)
 8001a10:	f001 f97e 	bl	8002d10 <HAL_TIM_Base_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11b      	bne.n	8001a5a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a22:	4813      	ldr	r0, [pc, #76]	; (8001a70 <HAL_InitTick+0xd8>)
 8001a24:	f001 f9c4 	bl	8002db0 <HAL_TIM_Base_Start_IT>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d111      	bne.n	8001a5a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a36:	2019      	movs	r0, #25
 8001a38:	f000 fa74 	bl	8001f24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	d808      	bhi.n	8001a54 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001a42:	2200      	movs	r2, #0
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	2019      	movs	r0, #25
 8001a48:	f000 fa50 	bl	8001eec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_InitTick+0xe0>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e002      	b.n	8001a5a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3730      	adds	r7, #48	; 0x30
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	431bde83 	.word	0x431bde83
 8001a70:	200002f0 	.word	0x200002f0
 8001a74:	40010000 	.word	0x40010000
 8001a78:	20000008 	.word	0x20000008

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <TIM1_UP_IRQHandler+0x10>)
 8001aae:	f001 f9cd 	bl	8002e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002f0 	.word	0x200002f0

08001abc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <USART1_IRQHandler+0x10>)
 8001ac2:	f001 fe01 	bl	80036c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000258 	.word	0x20000258

08001ad0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <USART2_IRQHandler+0x10>)
 8001ad6:	f001 fdf7 	bl	80036c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000029c 	.word	0x2000029c

08001ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
	return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_kill>:

int _kill(int pid, int sig)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001afe:	f005 faf9 	bl	80070f4 <__errno>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2216      	movs	r2, #22
 8001b06:	601a      	str	r2, [r3, #0]
	return -1;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_exit>:

void _exit (int status)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ffe7 	bl	8001af4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b26:	e7fe      	b.n	8001b26 <_exit+0x12>

08001b28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e00a      	b.n	8001b50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b3a:	f3af 8000 	nop.w
 8001b3e:	4601      	mov	r1, r0
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	60ba      	str	r2, [r7, #8]
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dbf0      	blt.n	8001b3a <_read+0x12>
	}

return len;
 8001b58:	687b      	ldr	r3, [r7, #4]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e009      	b.n	8001b88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbf1      	blt.n	8001b74 <_write+0x12>
	}
	return len;
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_close>:

int _close(int file)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_isatty>:

int _isatty(int file)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f005 fa5e 	bl	80070f4 <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20008000 	.word	0x20008000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	20000338 	.word	0x20000338
 8001c6c:	20004d60 	.word	0x20004d60

08001c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <SystemInit+0x20>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <SystemInit+0x20>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <tests>:
 *      Author: Victor Lesne
 */
#include "tests.h"


void tests(void){
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
	//test_fcts_annexes_calcSeg();
	//test_masque();
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001caa:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cc0:	4c0b      	ldr	r4, [pc, #44]	; (8001cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cce:	f7ff ffcf 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f005 fb0b 	bl	80072ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd6:	f7ff fb3b 	bl	8001350 <main>
  bx  lr    
 8001cda:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cdc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ce8:	0800b710 	.word	0x0800b710
  ldr r2, =_sbss
 8001cec:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001cf0:	20004d60 	.word	0x20004d60

08001cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <HAL_Init+0x40>)
 8001d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_Init+0x40>)
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x40>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 f8d8 	bl	8001ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	200f      	movs	r0, #15
 8001d28:	f7ff fe36 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff fd5a 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	2000000c 	.word	0x2000000c
 8001d60:	2000033c 	.word	0x2000033c

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2000033c 	.word	0x2000033c

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <__NVIC_EnableIRQ+0x38>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ff4c 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efe:	f7ff ff61 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68b9      	ldr	r1, [r7, #8]
 8001f08:	6978      	ldr	r0, [r7, #20]
 8001f0a:	f7ff ffb1 	bl	8001e70 <NVIC_EncodePriority>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff80 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff54 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f4e:	f7ff ff09 	bl	8001d64 <HAL_GetTick>
 8001f52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d008      	beq.n	8001f72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e052      	b.n	8002018 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0216 	bic.w	r2, r2, #22
 8001f80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d103      	bne.n	8001fa2 <HAL_DMA_Abort+0x62>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0208 	bic.w	r2, r2, #8
 8001fb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc2:	e013      	b.n	8001fec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fc4:	f7ff fece 	bl	8001d64 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d90c      	bls.n	8001fec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2203      	movs	r2, #3
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e015      	b.n	8002018 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e4      	bne.n	8001fc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	223f      	movs	r2, #63	; 0x3f
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d004      	beq.n	800203e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00c      	b.n	8002058 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2205      	movs	r2, #5
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0201 	bic.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	e14d      	b.n	800231c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 813c 	bne.w	8002316 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d005      	beq.n	80020b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d130      	bne.n	8002118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 0201 	and.w	r2, r3, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b03      	cmp	r3, #3
 8002122:	d017      	beq.n	8002154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d123      	bne.n	80021a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8096 	beq.w	8002316 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b51      	ldr	r3, [pc, #324]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a50      	ldr	r2, [pc, #320]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b4e      	ldr	r3, [pc, #312]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	4a4c      	ldr	r2, [pc, #304]	; (8002338 <HAL_GPIO_Init+0x2d4>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a43      	ldr	r2, [pc, #268]	; (800233c <HAL_GPIO_Init+0x2d8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x1ea>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a42      	ldr	r2, [pc, #264]	; (8002340 <HAL_GPIO_Init+0x2dc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x1e6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a41      	ldr	r2, [pc, #260]	; (8002344 <HAL_GPIO_Init+0x2e0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x1e2>
 8002242:	2302      	movs	r3, #2
 8002244:	e004      	b.n	8002250 <HAL_GPIO_Init+0x1ec>
 8002246:	2307      	movs	r3, #7
 8002248:	e002      	b.n	8002250 <HAL_GPIO_Init+0x1ec>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_GPIO_Init+0x1ec>
 800224e:	2300      	movs	r3, #0
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	f002 0203 	and.w	r2, r2, #3
 8002256:	0092      	lsls	r2, r2, #2
 8002258:	4093      	lsls	r3, r2
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002260:	4935      	ldr	r1, [pc, #212]	; (8002338 <HAL_GPIO_Init+0x2d4>)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	3302      	adds	r3, #2
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800226e:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_GPIO_Init+0x2e4>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002292:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <HAL_GPIO_Init+0x2e4>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_GPIO_Init+0x2e4>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022bc:	4a22      	ldr	r2, [pc, #136]	; (8002348 <HAL_GPIO_Init+0x2e4>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022c2:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_GPIO_Init+0x2e4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022e6:	4a18      	ldr	r2, [pc, #96]	; (8002348 <HAL_GPIO_Init+0x2e4>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ec:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_GPIO_Init+0x2e4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <HAL_GPIO_Init+0x2e4>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3301      	adds	r3, #1
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b0f      	cmp	r3, #15
 8002320:	f67f aeae 	bls.w	8002080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	40013800 	.word	0x40013800
 800233c:	40020000 	.word	0x40020000
 8002340:	40020400 	.word	0x40020400
 8002344:	40020800 	.word	0x40020800
 8002348:	40013c00 	.word	0x40013c00

0800234c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e001      	b.n	800236e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
 8002388:	4613      	mov	r3, r2
 800238a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002398:	e003      	b.n	80023a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	041a      	lsls	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	619a      	str	r2, [r3, #24]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c0:	887a      	ldrh	r2, [r7, #2]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	041a      	lsls	r2, r3, #16
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	400b      	ands	r3, r1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0cc      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d90c      	bls.n	8002420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b65      	ldr	r3, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800245a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d044      	beq.n	8002504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d119      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e067      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4934      	ldr	r1, [pc, #208]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d4:	f7ff fc46 	bl	8001d64 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7ff fc42 	bl	8001d64 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e04f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d20c      	bcs.n	800252c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fa04 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00
 80025a0:	40023800 	.word	0x40023800
 80025a4:	0800b134 	.word	0x0800b134
 80025a8:	20000004 	.word	0x20000004
 80025ac:	20000008 	.word	0x20000008

080025b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b4:	b090      	sub	sp, #64	; 0x40
 80025b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
 80025bc:	2300      	movs	r3, #0
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d00d      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x40>
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	f200 80a1 	bhi.w	800271c <HAL_RCC_GetSysClockFreq+0x16c>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x34>
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x3a>
 80025e2:	e09b      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_GetSysClockFreq+0x184>)
 80025e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80025e8:	e09b      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ea:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_GetSysClockFreq+0x188>)
 80025ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ee:	e098      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f0:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fa:	4b4d      	ldr	r3, [pc, #308]	; (8002730 <HAL_RCC_GetSysClockFreq+0x180>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d028      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002606:	4b4a      	ldr	r3, [pc, #296]	; (8002730 <HAL_RCC_GetSysClockFreq+0x180>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	2200      	movs	r2, #0
 800260e:	623b      	str	r3, [r7, #32]
 8002610:	627a      	str	r2, [r7, #36]	; 0x24
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002618:	2100      	movs	r1, #0
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_GetSysClockFreq+0x188>)
 800261c:	fb03 f201 	mul.w	r2, r3, r1
 8002620:	2300      	movs	r3, #0
 8002622:	fb00 f303 	mul.w	r3, r0, r3
 8002626:	4413      	add	r3, r2
 8002628:	4a43      	ldr	r2, [pc, #268]	; (8002738 <HAL_RCC_GetSysClockFreq+0x188>)
 800262a:	fba0 1202 	umull	r1, r2, r0, r2
 800262e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002630:	460a      	mov	r2, r1
 8002632:	62ba      	str	r2, [r7, #40]	; 0x28
 8002634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002636:	4413      	add	r3, r2
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800263a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263c:	2200      	movs	r2, #0
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	61fa      	str	r2, [r7, #28]
 8002642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002646:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800264a:	f7fe fb1d 	bl	8000c88 <__aeabi_uldivmod>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4613      	mov	r3, r2
 8002654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002656:	e053      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002658:	4b35      	ldr	r3, [pc, #212]	; (8002730 <HAL_RCC_GetSysClockFreq+0x180>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	2200      	movs	r2, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	617a      	str	r2, [r7, #20]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800266a:	f04f 0b00 	mov.w	fp, #0
 800266e:	4652      	mov	r2, sl
 8002670:	465b      	mov	r3, fp
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	0159      	lsls	r1, r3, #5
 800267c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002680:	0150      	lsls	r0, r2, #5
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	ebb2 080a 	subs.w	r8, r2, sl
 800268a:	eb63 090b 	sbc.w	r9, r3, fp
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800269a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800269e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026a2:	ebb2 0408 	subs.w	r4, r2, r8
 80026a6:	eb63 0509 	sbc.w	r5, r3, r9
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	00eb      	lsls	r3, r5, #3
 80026b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b8:	00e2      	lsls	r2, r4, #3
 80026ba:	4614      	mov	r4, r2
 80026bc:	461d      	mov	r5, r3
 80026be:	eb14 030a 	adds.w	r3, r4, sl
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	eb45 030b 	adc.w	r3, r5, fp
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026d6:	4629      	mov	r1, r5
 80026d8:	028b      	lsls	r3, r1, #10
 80026da:	4621      	mov	r1, r4
 80026dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026e0:	4621      	mov	r1, r4
 80026e2:	028a      	lsls	r2, r1, #10
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ea:	2200      	movs	r2, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	60fa      	str	r2, [r7, #12]
 80026f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026f4:	f7fe fac8 	bl	8000c88 <__aeabi_uldivmod>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4613      	mov	r3, r2
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_GetSysClockFreq+0x180>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002710:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800271a:	e002      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetSysClockFreq+0x184>)
 800271e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002724:	4618      	mov	r0, r3
 8002726:	3740      	adds	r7, #64	; 0x40
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	00f42400 	.word	0x00f42400
 8002738:	017d7840 	.word	0x017d7840

0800273c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_RCC_GetHCLKFreq+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000004 	.word	0x20000004

08002754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002758:	f7ff fff0 	bl	800273c <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0a9b      	lsrs	r3, r3, #10
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	0800b144 	.word	0x0800b144

0800277c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002780:	f7ff ffdc 	bl	800273c <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0b5b      	lsrs	r3, r3, #13
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	0800b144 	.word	0x0800b144

080027a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	220f      	movs	r2, #15
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_RCC_GetClockConfig+0x5c>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0203 	and.w	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_RCC_GetClockConfig+0x5c>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_RCC_GetClockConfig+0x5c>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_GetClockConfig+0x5c>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_RCC_GetClockConfig+0x60>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0207 	and.w	r2, r3, #7
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	601a      	str	r2, [r3, #0]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40023c00 	.word	0x40023c00

08002808 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e273      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d075      	beq.n	8002912 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002826:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d00c      	beq.n	800284c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002832:	4b85      	ldr	r3, [pc, #532]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800283a:	2b08      	cmp	r3, #8
 800283c:	d112      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d05b      	beq.n	8002910 <HAL_RCC_OscConfig+0x108>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d157      	bne.n	8002910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e24e      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x74>
 800286e:	4b76      	ldr	r3, [pc, #472]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a75      	ldr	r2, [pc, #468]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6f      	ldr	r2, [pc, #444]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6c      	ldr	r2, [pc, #432]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 80028a0:	4b69      	ldr	r3, [pc, #420]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a68      	ldr	r2, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7ff fa50 	bl	8001d64 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c8:	f7ff fa4c 	bl	8001d64 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e213      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b5b      	ldr	r3, [pc, #364]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0xc0>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff fa3c 	bl	8001d64 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff fa38 	bl	8001d64 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1ff      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0xe8>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d063      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800291e:	4b4a      	ldr	r3, [pc, #296]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002932:	2b08      	cmp	r3, #8
 8002934:	d11c      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b44      	ldr	r3, [pc, #272]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e1d3      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4937      	ldr	r1, [pc, #220]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	e03a      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002978:	4b34      	ldr	r3, [pc, #208]	; (8002a4c <HAL_RCC_OscConfig+0x244>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7ff f9f1 	bl	8001d64 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002986:	f7ff f9ed 	bl	8001d64 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e1b4      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4925      	ldr	r1, [pc, #148]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
 80029b8:	e015      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_RCC_OscConfig+0x244>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7ff f9d0 	bl	8001d64 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c8:	f7ff f9cc 	bl	8001d64 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e193      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d036      	beq.n	8002a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_RCC_OscConfig+0x248>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff f9b0 	bl	8001d64 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7ff f9ac 	bl	8001d64 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e173      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x200>
 8002a26:	e01b      	b.n	8002a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_OscConfig+0x248>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7ff f999 	bl	8001d64 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	e00e      	b.n	8002a54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a36:	f7ff f995 	bl	8001d64 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d907      	bls.n	8002a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e15c      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	42470000 	.word	0x42470000
 8002a50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	4b8a      	ldr	r3, [pc, #552]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ea      	bne.n	8002a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8097 	beq.w	8002b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a72:	4b83      	ldr	r3, [pc, #524]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10f      	bne.n	8002a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b7f      	ldr	r3, [pc, #508]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a7e      	ldr	r2, [pc, #504]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8e:	4b7c      	ldr	r3, [pc, #496]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b79      	ldr	r3, [pc, #484]	; (8002c84 <HAL_RCC_OscConfig+0x47c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b76      	ldr	r3, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x47c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a75      	ldr	r2, [pc, #468]	; (8002c84 <HAL_RCC_OscConfig+0x47c>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7ff f955 	bl	8001d64 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7ff f951 	bl	8001d64 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e118      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <HAL_RCC_OscConfig+0x47c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2ea>
 8002ae4:	4b66      	ldr	r3, [pc, #408]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a65      	ldr	r2, [pc, #404]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0x324>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x30c>
 8002afa:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a60      	ldr	r2, [pc, #384]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
 8002b06:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a5d      	ldr	r2, [pc, #372]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0x324>
 8002b14:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a59      	ldr	r2, [pc, #356]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b20:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a56      	ldr	r2, [pc, #344]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b26:	f023 0304 	bic.w	r3, r3, #4
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7ff f916 	bl	8001d64 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7ff f912 	bl	8001d64 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0d7      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ee      	beq.n	8002b3c <HAL_RCC_OscConfig+0x334>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7ff f900 	bl	8001d64 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7ff f8fc 	bl	8001d64 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0c1      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7e:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ee      	bne.n	8002b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	4a3a      	ldr	r2, [pc, #232]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80ad 	beq.w	8002d00 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d060      	beq.n	8002c74 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d145      	bne.n	8002c46 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <HAL_RCC_OscConfig+0x480>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7ff f8d0 	bl	8001d64 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7ff f8cc 	bl	8001d64 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e093      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	019b      	lsls	r3, r3, #6
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	071b      	lsls	r3, r3, #28
 8002c12:	491b      	ldr	r1, [pc, #108]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_RCC_OscConfig+0x480>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7ff f8a1 	bl	8001d64 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c26:	f7ff f89d 	bl	8001d64 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e064      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x41e>
 8002c44:	e05c      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_RCC_OscConfig+0x480>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7ff f88a 	bl	8001d64 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7ff f886 	bl	8001d64 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e04d      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x44c>
 8002c72:	e045      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e040      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40007000 	.word	0x40007000
 8002c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d030      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d129      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d122      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d119      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d10f      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e041      	b.n	8002da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fd80 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 fa74 	bl	800323c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d001      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e035      	b.n	8002e34 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <HAL_TIM_Base_Start_IT+0x90>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_TIM_Base_Start_IT+0x4e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <HAL_TIM_Base_Start_IT+0x94>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d004      	beq.n	8002dfe <HAL_TIM_Base_Start_IT+0x4e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <HAL_TIM_Base_Start_IT+0x98>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d111      	bne.n	8002e22 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b06      	cmp	r3, #6
 8002e0e:	d010      	beq.n	8002e32 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e20:	e007      	b.n	8002e32 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40014000 	.word	0x40014000

08002e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d122      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0202 	mvn.w	r2, #2
 8002e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f9b5 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9a7 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f9b8 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d122      	bne.n	8002efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0204 	mvn.w	r2, #4
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f98b 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f97d 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f98e 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d122      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d11b      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0208 	mvn.w	r2, #8
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f961 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f953 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f964 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d122      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0210 	mvn.w	r2, #16
 8002f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f937 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002f90:	e005      	b.n	8002f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f929 	bl	80031ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f93a 	bl	8003212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0201 	mvn.w	r2, #1
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe fbf2 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe8:	2b80      	cmp	r3, #128	; 0x80
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa7c 	bl	80034f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d10e      	bne.n	8003028 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d107      	bne.n	8003028 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8ff 	bl	8003226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b20      	cmp	r3, #32
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b20      	cmp	r3, #32
 8003042:	d107      	bne.n	8003054 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0220 	mvn.w	r2, #32
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fa46 	bl	80034e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_TIM_ConfigClockSource+0x1c>
 8003074:	2302      	movs	r3, #2
 8003076:	e0b4      	b.n	80031e2 <HAL_TIM_ConfigClockSource+0x186>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800309e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b0:	d03e      	beq.n	8003130 <HAL_TIM_ConfigClockSource+0xd4>
 80030b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b6:	f200 8087 	bhi.w	80031c8 <HAL_TIM_ConfigClockSource+0x16c>
 80030ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030be:	f000 8086 	beq.w	80031ce <HAL_TIM_ConfigClockSource+0x172>
 80030c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c6:	d87f      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b70      	cmp	r3, #112	; 0x70
 80030ca:	d01a      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0xa6>
 80030cc:	2b70      	cmp	r3, #112	; 0x70
 80030ce:	d87b      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x16c>
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d050      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0x11a>
 80030d4:	2b60      	cmp	r3, #96	; 0x60
 80030d6:	d877      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x16c>
 80030d8:	2b50      	cmp	r3, #80	; 0x50
 80030da:	d03c      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0xfa>
 80030dc:	2b50      	cmp	r3, #80	; 0x50
 80030de:	d873      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x16c>
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d058      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x13a>
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d86f      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x16c>
 80030e8:	2b30      	cmp	r3, #48	; 0x30
 80030ea:	d064      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x15a>
 80030ec:	2b30      	cmp	r3, #48	; 0x30
 80030ee:	d86b      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x16c>
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d060      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x15a>
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d867      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x16c>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d05c      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x15a>
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d05a      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003100:	e062      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6899      	ldr	r1, [r3, #8]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f000 f96b 	bl	80033ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003124:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	609a      	str	r2, [r3, #8]
      break;
 800312e:	e04f      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6899      	ldr	r1, [r3, #8]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f000 f954 	bl	80033ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003152:	609a      	str	r2, [r3, #8]
      break;
 8003154:	e03c      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	461a      	mov	r2, r3
 8003164:	f000 f8c8 	bl	80032f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2150      	movs	r1, #80	; 0x50
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f921 	bl	80033b6 <TIM_ITRx_SetConfig>
      break;
 8003174:	e02c      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6859      	ldr	r1, [r3, #4]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	461a      	mov	r2, r3
 8003184:	f000 f8e7 	bl	8003356 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2160      	movs	r1, #96	; 0x60
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f911 	bl	80033b6 <TIM_ITRx_SetConfig>
      break;
 8003194:	e01c      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f000 f8a8 	bl	80032f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2140      	movs	r1, #64	; 0x40
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f901 	bl	80033b6 <TIM_ITRx_SetConfig>
      break;
 80031b4:	e00c      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f000 f8f8 	bl	80033b6 <TIM_ITRx_SetConfig>
      break;
 80031c6:	e003      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      break;
 80031cc:	e000      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <TIM_Base_SetConfig+0xac>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_Base_SetConfig+0x20>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a25      	ldr	r2, [pc, #148]	; (80032ec <TIM_Base_SetConfig+0xb0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d108      	bne.n	800326e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <TIM_Base_SetConfig+0xac>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00b      	beq.n	800328e <TIM_Base_SetConfig+0x52>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <TIM_Base_SetConfig+0xb0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <TIM_Base_SetConfig+0x52>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <TIM_Base_SetConfig+0xb4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_Base_SetConfig+0x52>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <TIM_Base_SetConfig+0xb8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d108      	bne.n	80032a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <TIM_Base_SetConfig+0xac>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d103      	bne.n	80032d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	615a      	str	r2, [r3, #20]
}
 80032da:	bf00      	nop
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40000c00 	.word	0x40000c00
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40014800 	.word	0x40014800

080032f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0201 	bic.w	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f023 030a 	bic.w	r3, r3, #10
 8003334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003356:	b480      	push	{r7}
 8003358:	b087      	sub	sp, #28
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0210 	bic.w	r2, r3, #16
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	031b      	lsls	r3, r3, #12
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003392:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	621a      	str	r2, [r3, #32]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f043 0307 	orr.w	r3, r3, #7
 80033d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	021a      	lsls	r2, r3, #8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	431a      	orrs	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4313      	orrs	r3, r2
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003440:	2302      	movs	r3, #2
 8003442:	e041      	b.n	80034c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a11      	ldr	r2, [pc, #68]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10c      	bne.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40000c00 	.word	0x40000c00
 80034dc:	40014000 	.word	0x40014000

080034e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e03f      	b.n	800359a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fe f9a6 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fd7b 	bl	8004048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b08a      	sub	sp, #40	; 0x28
 80035a6:	af02      	add	r7, sp, #8
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d17c      	bne.n	80036bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_UART_Transmit+0x2c>
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e075      	b.n	80036be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x3e>
 80035dc:	2302      	movs	r3, #2
 80035de:	e06e      	b.n	80036be <HAL_UART_Transmit+0x11c>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2221      	movs	r2, #33	; 0x21
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f6:	f7fe fbb5 	bl	8001d64 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003610:	d108      	bne.n	8003624 <HAL_UART_Transmit+0x82>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d104      	bne.n	8003624 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e003      	b.n	800362c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003628:	2300      	movs	r3, #0
 800362a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003634:	e02a      	b.n	800368c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 faf9 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e036      	b.n	80036be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10b      	bne.n	800366e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	3302      	adds	r3, #2
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e007      	b.n	800367e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3301      	adds	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1cf      	bne.n	8003636 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2200      	movs	r2, #0
 800369e:	2140      	movs	r1, #64	; 0x40
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fac9 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e006      	b.n	80036be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b0ba      	sub	sp, #232	; 0xe8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_UART_IRQHandler+0x66>
 800371a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fbd3 	bl	8003ed2 <UART_Receive_IT>
      return;
 800372c:	e256      	b.n	8003bdc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800372e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80de 	beq.w	80038f4 <HAL_UART_IRQHandler+0x22c>
 8003738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003748:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80d1 	beq.w	80038f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <HAL_UART_IRQHandler+0xae>
 800375e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f043 0201 	orr.w	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_UART_IRQHandler+0xd2>
 8003782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f043 0202 	orr.w	r2, r3, #2
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800379a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_UART_IRQHandler+0xf6>
 80037a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f043 0204 	orr.w	r2, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d011      	beq.n	80037ee <HAL_UART_IRQHandler+0x126>
 80037ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f043 0208 	orr.w	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 81ed 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_UART_IRQHandler+0x14e>
 8003804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fb5e 	bl	8003ed2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <HAL_UART_IRQHandler+0x17a>
 800383a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800383e:	2b00      	cmp	r3, #0
 8003840:	d04f      	beq.n	80038e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fa66 	bl	8003d14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d141      	bne.n	80038da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3314      	adds	r3, #20
 800385c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800386c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003882:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800388e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800389a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1d9      	bne.n	8003856 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d013      	beq.n	80038d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	4a7d      	ldr	r2, [pc, #500]	; (8003aa4 <HAL_UART_IRQHandler+0x3dc>)
 80038b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fbb2 	bl	8002020 <HAL_DMA_Abort_IT>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d016      	beq.n	80038f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038cc:	4610      	mov	r0, r2
 80038ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	e00e      	b.n	80038f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f99a 	bl	8003c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	e00a      	b.n	80038f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f996 	bl	8003c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	e006      	b.n	80038f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f992 	bl	8003c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038ee:	e170      	b.n	8003bd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	bf00      	nop
    return;
 80038f2:	e16e      	b.n	8003bd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f040 814a 	bne.w	8003b92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8143 	beq.w	8003b92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800390c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 813c 	beq.w	8003b92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	f040 80b4 	bne.w	8003aa8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800394c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8140 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800395a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800395e:	429a      	cmp	r2, r3
 8003960:	f080 8139 	bcs.w	8003bd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800396a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003976:	f000 8088 	beq.w	8003a8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1d9      	bne.n	800397a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3314      	adds	r3, #20
 80039e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e1      	bne.n	80039c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3314      	adds	r3, #20
 8003a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e3      	bne.n	8003a02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5a:	f023 0310 	bic.w	r3, r3, #16
 8003a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e3      	bne.n	8003a48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fa5b 	bl	8001f40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f8c0 	bl	8003c20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aa0:	e099      	b.n	8003bd6 <HAL_UART_IRQHandler+0x50e>
 8003aa2:	bf00      	nop
 8003aa4:	08003ddb 	.word	0x08003ddb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 808b 	beq.w	8003bda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8086 	beq.w	8003bda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003af2:	647a      	str	r2, [r7, #68]	; 0x44
 8003af4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003af8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e3      	bne.n	8003ace <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3314      	adds	r3, #20
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	623b      	str	r3, [r7, #32]
   return(result);
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3314      	adds	r3, #20
 8003b26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b2a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e3      	bne.n	8003b06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0310 	bic.w	r3, r3, #16
 8003b62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	330c      	adds	r3, #12
 8003b6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b70:	61fa      	str	r2, [r7, #28]
 8003b72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	69b9      	ldr	r1, [r7, #24]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e3      	bne.n	8003b4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f848 	bl	8003c20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b90:	e023      	b.n	8003bda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x4ea>
 8003b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f929 	bl	8003e02 <UART_Transmit_IT>
    return;
 8003bb0:	e014      	b.n	8003bdc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00e      	beq.n	8003bdc <HAL_UART_IRQHandler+0x514>
 8003bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f969 	bl	8003ea2 <UART_EndTransmit_IT>
    return;
 8003bd0:	e004      	b.n	8003bdc <HAL_UART_IRQHandler+0x514>
    return;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <HAL_UART_IRQHandler+0x514>
      return;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <HAL_UART_IRQHandler+0x514>
      return;
 8003bda:	bf00      	nop
  }
}
 8003bdc:	37e8      	adds	r7, #232	; 0xe8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop

08003be4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b090      	sub	sp, #64	; 0x40
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c48:	e050      	b.n	8003cec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d04c      	beq.n	8003cec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c58:	f7fe f884 	bl	8001d64 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d241      	bcs.n	8003cec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c88:	637a      	str	r2, [r7, #52]	; 0x34
 8003c8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e5      	bne.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	613b      	str	r3, [r7, #16]
   return(result);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cbc:	623a      	str	r2, [r7, #32]
 8003cbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	69f9      	ldr	r1, [r7, #28]
 8003cc2:	6a3a      	ldr	r2, [r7, #32]
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e5      	bne.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e00f      	b.n	8003d0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d09f      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3740      	adds	r7, #64	; 0x40
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b095      	sub	sp, #84	; 0x54
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d3c:	643a      	str	r2, [r7, #64]	; 0x40
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3314      	adds	r3, #20
 8003d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d119      	bne.n	8003dc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f023 0310 	bic.w	r3, r3, #16
 8003da2:	647b      	str	r3, [r7, #68]	; 0x44
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dac:	61ba      	str	r2, [r7, #24]
 8003dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6979      	ldr	r1, [r7, #20]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e5      	bne.n	8003d8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dce:	bf00      	nop
 8003dd0:	3754      	adds	r7, #84	; 0x54
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff ff09 	bl	8003c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b21      	cmp	r3, #33	; 0x21
 8003e14:	d13e      	bne.n	8003e94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1e:	d114      	bne.n	8003e4a <UART_Transmit_IT+0x48>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d110      	bne.n	8003e4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	1c9a      	adds	r2, r3, #2
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]
 8003e48:	e008      	b.n	8003e5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	1c59      	adds	r1, r3, #1
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6211      	str	r1, [r2, #32]
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10f      	bne.n	8003e90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fe8e 	bl	8003be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b08c      	sub	sp, #48	; 0x30
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b22      	cmp	r3, #34	; 0x22
 8003ee4:	f040 80ab 	bne.w	800403e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	d117      	bne.n	8003f22 <UART_Receive_IT+0x50>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d113      	bne.n	8003f22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f20:	e026      	b.n	8003f70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d007      	beq.n	8003f46 <UART_Receive_IT+0x74>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <UART_Receive_IT+0x82>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	e008      	b.n	8003f66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d15a      	bne.n	800403a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0220 	bic.w	r2, r2, #32
 8003f92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0201 	bic.w	r2, r2, #1
 8003fb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d135      	bne.n	8004030 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f023 0310 	bic.w	r3, r3, #16
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fea:	623a      	str	r2, [r7, #32]
 8003fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	69f9      	ldr	r1, [r7, #28]
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e5      	bne.n	8003fca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d10a      	bne.n	8004022 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004026:	4619      	mov	r1, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fdf9 	bl	8003c20 <HAL_UARTEx_RxEventCallback>
 800402e:	e002      	b.n	8004036 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fde1 	bl	8003bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e002      	b.n	8004040 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
  }
}
 8004040:	4618      	mov	r0, r3
 8004042:	3730      	adds	r7, #48	; 0x30
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800404c:	b0c0      	sub	sp, #256	; 0x100
 800404e:	af00      	add	r7, sp, #0
 8004050:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	68d9      	ldr	r1, [r3, #12]
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	ea40 0301 	orr.w	r3, r0, r1
 8004070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	431a      	orrs	r2, r3
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	431a      	orrs	r2, r3
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040a0:	f021 010c 	bic.w	r1, r1, #12
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040ae:	430b      	orrs	r3, r1
 80040b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c2:	6999      	ldr	r1, [r3, #24]
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	ea40 0301 	orr.w	r3, r0, r1
 80040ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b8f      	ldr	r3, [pc, #572]	; (8004314 <UART_SetConfig+0x2cc>)
 80040d8:	429a      	cmp	r2, r3
 80040da:	d005      	beq.n	80040e8 <UART_SetConfig+0xa0>
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b8d      	ldr	r3, [pc, #564]	; (8004318 <UART_SetConfig+0x2d0>)
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d104      	bne.n	80040f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e8:	f7fe fb48 	bl	800277c <HAL_RCC_GetPCLK2Freq>
 80040ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040f0:	e003      	b.n	80040fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040f2:	f7fe fb2f 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 80040f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004104:	f040 810c 	bne.w	8004320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410c:	2200      	movs	r2, #0
 800410e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004112:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	1891      	adds	r1, r2, r2
 8004120:	65b9      	str	r1, [r7, #88]	; 0x58
 8004122:	415b      	adcs	r3, r3
 8004124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800412a:	4621      	mov	r1, r4
 800412c:	eb12 0801 	adds.w	r8, r2, r1
 8004130:	4629      	mov	r1, r5
 8004132:	eb43 0901 	adc.w	r9, r3, r1
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800414a:	4690      	mov	r8, r2
 800414c:	4699      	mov	r9, r3
 800414e:	4623      	mov	r3, r4
 8004150:	eb18 0303 	adds.w	r3, r8, r3
 8004154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004158:	462b      	mov	r3, r5
 800415a:	eb49 0303 	adc.w	r3, r9, r3
 800415e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800416e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004176:	460b      	mov	r3, r1
 8004178:	18db      	adds	r3, r3, r3
 800417a:	653b      	str	r3, [r7, #80]	; 0x50
 800417c:	4613      	mov	r3, r2
 800417e:	eb42 0303 	adc.w	r3, r2, r3
 8004182:	657b      	str	r3, [r7, #84]	; 0x54
 8004184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800418c:	f7fc fd7c 	bl	8000c88 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4b61      	ldr	r3, [pc, #388]	; (800431c <UART_SetConfig+0x2d4>)
 8004196:	fba3 2302 	umull	r2, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	011c      	lsls	r4, r3, #4
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80041b8:	415b      	adcs	r3, r3
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041c0:	4641      	mov	r1, r8
 80041c2:	eb12 0a01 	adds.w	sl, r2, r1
 80041c6:	4649      	mov	r1, r9
 80041c8:	eb43 0b01 	adc.w	fp, r3, r1
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e0:	4692      	mov	sl, r2
 80041e2:	469b      	mov	fp, r3
 80041e4:	4643      	mov	r3, r8
 80041e6:	eb1a 0303 	adds.w	r3, sl, r3
 80041ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ee:	464b      	mov	r3, r9
 80041f0:	eb4b 0303 	adc.w	r3, fp, r3
 80041f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004204:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800420c:	460b      	mov	r3, r1
 800420e:	18db      	adds	r3, r3, r3
 8004210:	643b      	str	r3, [r7, #64]	; 0x40
 8004212:	4613      	mov	r3, r2
 8004214:	eb42 0303 	adc.w	r3, r2, r3
 8004218:	647b      	str	r3, [r7, #68]	; 0x44
 800421a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800421e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004222:	f7fc fd31 	bl	8000c88 <__aeabi_uldivmod>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4611      	mov	r1, r2
 800422c:	4b3b      	ldr	r3, [pc, #236]	; (800431c <UART_SetConfig+0x2d4>)
 800422e:	fba3 2301 	umull	r2, r3, r3, r1
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2264      	movs	r2, #100	; 0x64
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	1acb      	subs	r3, r1, r3
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <UART_SetConfig+0x2d4>)
 8004244:	fba3 2302 	umull	r2, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004250:	441c      	add	r4, r3
 8004252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800425c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	1891      	adds	r1, r2, r2
 800426a:	63b9      	str	r1, [r7, #56]	; 0x38
 800426c:	415b      	adcs	r3, r3
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004274:	4641      	mov	r1, r8
 8004276:	1851      	adds	r1, r2, r1
 8004278:	6339      	str	r1, [r7, #48]	; 0x30
 800427a:	4649      	mov	r1, r9
 800427c:	414b      	adcs	r3, r1
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800428c:	4659      	mov	r1, fp
 800428e:	00cb      	lsls	r3, r1, #3
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004296:	4651      	mov	r1, sl
 8004298:	00ca      	lsls	r2, r1, #3
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	4642      	mov	r2, r8
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a8:	464b      	mov	r3, r9
 80042aa:	460a      	mov	r2, r1
 80042ac:	eb42 0303 	adc.w	r3, r2, r3
 80042b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042c8:	460b      	mov	r3, r1
 80042ca:	18db      	adds	r3, r3, r3
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ce:	4613      	mov	r3, r2
 80042d0:	eb42 0303 	adc.w	r3, r2, r3
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042de:	f7fc fcd3 	bl	8000c88 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <UART_SetConfig+0x2d4>)
 80042e8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	2164      	movs	r1, #100	; 0x64
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	3332      	adds	r3, #50	; 0x32
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <UART_SetConfig+0x2d4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	f003 0207 	and.w	r2, r3, #7
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4422      	add	r2, r4
 800430e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004310:	e105      	b.n	800451e <UART_SetConfig+0x4d6>
 8004312:	bf00      	nop
 8004314:	40011000 	.word	0x40011000
 8004318:	40011400 	.word	0x40011400
 800431c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800432a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800432e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004332:	4642      	mov	r2, r8
 8004334:	464b      	mov	r3, r9
 8004336:	1891      	adds	r1, r2, r2
 8004338:	6239      	str	r1, [r7, #32]
 800433a:	415b      	adcs	r3, r3
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
 800433e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004342:	4641      	mov	r1, r8
 8004344:	1854      	adds	r4, r2, r1
 8004346:	4649      	mov	r1, r9
 8004348:	eb43 0501 	adc.w	r5, r3, r1
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	00eb      	lsls	r3, r5, #3
 8004356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800435a:	00e2      	lsls	r2, r4, #3
 800435c:	4614      	mov	r4, r2
 800435e:	461d      	mov	r5, r3
 8004360:	4643      	mov	r3, r8
 8004362:	18e3      	adds	r3, r4, r3
 8004364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004368:	464b      	mov	r3, r9
 800436a:	eb45 0303 	adc.w	r3, r5, r3
 800436e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800437e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800438e:	4629      	mov	r1, r5
 8004390:	008b      	lsls	r3, r1, #2
 8004392:	4621      	mov	r1, r4
 8004394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004398:	4621      	mov	r1, r4
 800439a:	008a      	lsls	r2, r1, #2
 800439c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043a0:	f7fc fc72 	bl	8000c88 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4b60      	ldr	r3, [pc, #384]	; (800452c <UART_SetConfig+0x4e4>)
 80043aa:	fba3 2302 	umull	r2, r3, r3, r2
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	011c      	lsls	r4, r3, #4
 80043b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	61b9      	str	r1, [r7, #24]
 80043cc:	415b      	adcs	r3, r3
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d4:	4641      	mov	r1, r8
 80043d6:	1851      	adds	r1, r2, r1
 80043d8:	6139      	str	r1, [r7, #16]
 80043da:	4649      	mov	r1, r9
 80043dc:	414b      	adcs	r3, r1
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043ec:	4659      	mov	r1, fp
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	4651      	mov	r1, sl
 80043f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f6:	4651      	mov	r1, sl
 80043f8:	00ca      	lsls	r2, r1, #3
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	4642      	mov	r2, r8
 8004402:	189b      	adds	r3, r3, r2
 8004404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004408:	464b      	mov	r3, r9
 800440a:	460a      	mov	r2, r1
 800440c:	eb42 0303 	adc.w	r3, r2, r3
 8004410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	67bb      	str	r3, [r7, #120]	; 0x78
 800441e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800442c:	4649      	mov	r1, r9
 800442e:	008b      	lsls	r3, r1, #2
 8004430:	4641      	mov	r1, r8
 8004432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004436:	4641      	mov	r1, r8
 8004438:	008a      	lsls	r2, r1, #2
 800443a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800443e:	f7fc fc23 	bl	8000c88 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4b39      	ldr	r3, [pc, #228]	; (800452c <UART_SetConfig+0x4e4>)
 8004448:	fba3 1302 	umull	r1, r3, r3, r2
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	2164      	movs	r1, #100	; 0x64
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	3332      	adds	r3, #50	; 0x32
 800445a:	4a34      	ldr	r2, [pc, #208]	; (800452c <UART_SetConfig+0x4e4>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004466:	441c      	add	r4, r3
 8004468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800446c:	2200      	movs	r2, #0
 800446e:	673b      	str	r3, [r7, #112]	; 0x70
 8004470:	677a      	str	r2, [r7, #116]	; 0x74
 8004472:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004476:	4642      	mov	r2, r8
 8004478:	464b      	mov	r3, r9
 800447a:	1891      	adds	r1, r2, r2
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	415b      	adcs	r3, r3
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004486:	4641      	mov	r1, r8
 8004488:	1851      	adds	r1, r2, r1
 800448a:	6039      	str	r1, [r7, #0]
 800448c:	4649      	mov	r1, r9
 800448e:	414b      	adcs	r3, r1
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800449e:	4659      	mov	r1, fp
 80044a0:	00cb      	lsls	r3, r1, #3
 80044a2:	4651      	mov	r1, sl
 80044a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a8:	4651      	mov	r1, sl
 80044aa:	00ca      	lsls	r2, r1, #3
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	4603      	mov	r3, r0
 80044b2:	4642      	mov	r2, r8
 80044b4:	189b      	adds	r3, r3, r2
 80044b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80044b8:	464b      	mov	r3, r9
 80044ba:	460a      	mov	r2, r1
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	663b      	str	r3, [r7, #96]	; 0x60
 80044cc:	667a      	str	r2, [r7, #100]	; 0x64
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044da:	4649      	mov	r1, r9
 80044dc:	008b      	lsls	r3, r1, #2
 80044de:	4641      	mov	r1, r8
 80044e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e4:	4641      	mov	r1, r8
 80044e6:	008a      	lsls	r2, r1, #2
 80044e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044ec:	f7fc fbcc 	bl	8000c88 <__aeabi_uldivmod>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4b0d      	ldr	r3, [pc, #52]	; (800452c <UART_SetConfig+0x4e4>)
 80044f6:	fba3 1302 	umull	r1, r3, r3, r2
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2164      	movs	r1, #100	; 0x64
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	3332      	adds	r3, #50	; 0x32
 8004508:	4a08      	ldr	r2, [pc, #32]	; (800452c <UART_SetConfig+0x4e4>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	f003 020f 	and.w	r2, r3, #15
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4422      	add	r2, r4
 800451c:	609a      	str	r2, [r3, #8]
}
 800451e:	bf00      	nop
 8004520:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004524:	46bd      	mov	sp, r7
 8004526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452a:	bf00      	nop
 800452c:	51eb851f 	.word	0x51eb851f

08004530 <__NVIC_SetPriority>:
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	6039      	str	r1, [r7, #0]
 800453a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800453c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004540:	2b00      	cmp	r3, #0
 8004542:	db0a      	blt.n	800455a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	b2da      	uxtb	r2, r3
 8004548:	490c      	ldr	r1, [pc, #48]	; (800457c <__NVIC_SetPriority+0x4c>)
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	0112      	lsls	r2, r2, #4
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	440b      	add	r3, r1
 8004554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004558:	e00a      	b.n	8004570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	4908      	ldr	r1, [pc, #32]	; (8004580 <__NVIC_SetPriority+0x50>)
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	3b04      	subs	r3, #4
 8004568:	0112      	lsls	r2, r2, #4
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	440b      	add	r3, r1
 800456e:	761a      	strb	r2, [r3, #24]
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	e000e100 	.word	0xe000e100
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <SysTick_Handler+0x1c>)
 800458a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800458c:	f001 fd28 	bl	8005fe0 <xTaskGetSchedulerState>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d001      	beq.n	800459a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004596:	f002 fb0f 	bl	8006bb8 <xPortSysTickHandler>
  }
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	e000e010 	.word	0xe000e010

080045a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045a8:	2100      	movs	r1, #0
 80045aa:	f06f 0004 	mvn.w	r0, #4
 80045ae:	f7ff ffbf 	bl	8004530 <__NVIC_SetPriority>
#endif
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045be:	f3ef 8305 	mrs	r3, IPSR
 80045c2:	603b      	str	r3, [r7, #0]
  return(result);
 80045c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80045ca:	f06f 0305 	mvn.w	r3, #5
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	e00c      	b.n	80045ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <osKernelInitialize+0x44>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <osKernelInitialize+0x44>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	e002      	b.n	80045ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045ec:	687b      	ldr	r3, [r7, #4]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000340 	.word	0x20000340

08004600 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004606:	f3ef 8305 	mrs	r3, IPSR
 800460a:	603b      	str	r3, [r7, #0]
  return(result);
 800460c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004612:	f06f 0305 	mvn.w	r3, #5
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	e010      	b.n	800463c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <osKernelStart+0x48>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d109      	bne.n	8004636 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004622:	f7ff ffbf 	bl	80045a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <osKernelStart+0x48>)
 8004628:	2202      	movs	r2, #2
 800462a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800462c:	f001 f87c 	bl	8005728 <vTaskStartScheduler>
      stat = osOK;
 8004630:	2300      	movs	r3, #0
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	e002      	b.n	800463c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800463c:	687b      	ldr	r3, [r7, #4]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000340 	.word	0x20000340

0800464c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b08e      	sub	sp, #56	; 0x38
 8004650:	af04      	add	r7, sp, #16
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465c:	f3ef 8305 	mrs	r3, IPSR
 8004660:	617b      	str	r3, [r7, #20]
  return(result);
 8004662:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004664:	2b00      	cmp	r3, #0
 8004666:	d17e      	bne.n	8004766 <osThreadNew+0x11a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d07b      	beq.n	8004766 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004672:	2318      	movs	r3, #24
 8004674:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d045      	beq.n	8004712 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <osThreadNew+0x48>
        name = attr->name;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <osThreadNew+0x6e>
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b38      	cmp	r3, #56	; 0x38
 80046ac:	d805      	bhi.n	80046ba <osThreadNew+0x6e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <osThreadNew+0x72>
        return (NULL);
 80046ba:	2300      	movs	r3, #0
 80046bc:	e054      	b.n	8004768 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	089b      	lsrs	r3, r3, #2
 80046cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00e      	beq.n	80046f4 <osThreadNew+0xa8>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2bbb      	cmp	r3, #187	; 0xbb
 80046dc:	d90a      	bls.n	80046f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d006      	beq.n	80046f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <osThreadNew+0xa8>
        mem = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e010      	b.n	8004716 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10c      	bne.n	8004716 <osThreadNew+0xca>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d108      	bne.n	8004716 <osThreadNew+0xca>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <osThreadNew+0xca>
          mem = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	e001      	b.n	8004716 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d110      	bne.n	800473e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004724:	9202      	str	r2, [sp, #8]
 8004726:	9301      	str	r3, [sp, #4]
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	6a3a      	ldr	r2, [r7, #32]
 8004730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fe0c 	bl	8005350 <xTaskCreateStatic>
 8004738:	4603      	mov	r3, r0
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	e013      	b.n	8004766 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d110      	bne.n	8004766 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	b29a      	uxth	r2, r3
 8004748:	f107 0310 	add.w	r3, r7, #16
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fe57 	bl	800540a <xTaskCreate>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	d001      	beq.n	8004766 <osThreadNew+0x11a>
            hTask = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004766:	693b      	ldr	r3, [r7, #16]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3728      	adds	r7, #40	; 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004778:	f3ef 8305 	mrs	r3, IPSR
 800477c:	60bb      	str	r3, [r7, #8]
  return(result);
 800477e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <osDelay+0x1c>
    stat = osErrorISR;
 8004784:	f06f 0305 	mvn.w	r3, #5
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e007      	b.n	800479c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 ff92 	bl	80056c0 <vTaskDelay>
    }
  }

  return (stat);
 800479c:	68fb      	ldr	r3, [r7, #12]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80047b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4a06      	ldr	r2, [pc, #24]	; (80047d8 <vApplicationGetIdleTaskMemory+0x30>)
 80047be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	601a      	str	r2, [r3, #0]
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000344 	.word	0x20000344
 80047d8:	20000400 	.word	0x20000400

080047dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a07      	ldr	r2, [pc, #28]	; (8004808 <vApplicationGetTimerTaskMemory+0x2c>)
 80047ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4a06      	ldr	r2, [pc, #24]	; (800480c <vApplicationGetTimerTaskMemory+0x30>)
 80047f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047fa:	601a      	str	r2, [r3, #0]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	20000600 	.word	0x20000600
 800480c:	200006bc 	.word	0x200006bc

08004810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f103 0208 	add.w	r2, r3, #8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f04f 32ff 	mov.w	r2, #4294967295
 8004828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f103 0208 	add.w	r2, r3, #8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f103 0208 	add.w	r2, r3, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800486a:	b480      	push	{r7}
 800486c:	b085      	sub	sp, #20
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	601a      	str	r2, [r3, #0]
}
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d103      	bne.n	80048d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e00c      	b.n	80048ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3308      	adds	r3, #8
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e002      	b.n	80048e0 <vListInsert+0x2e>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d2f6      	bcs.n	80048da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6892      	ldr	r2, [r2, #8]
 800493a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6852      	ldr	r2, [r2, #4]
 8004944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	429a      	cmp	r2, r3
 800494e:	d103      	bne.n	8004958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	1e5a      	subs	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049a2:	f002 f877 	bl	8006a94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049b2:	fb01 f303 	mul.w	r3, r1, r3
 80049b6:	441a      	add	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	3b01      	subs	r3, #1
 80049d4:	68f9      	ldr	r1, [r7, #12]
 80049d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	441a      	add	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	22ff      	movs	r2, #255	; 0xff
 80049e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d114      	bne.n	8004a22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01a      	beq.n	8004a36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3310      	adds	r3, #16
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 f929 	bl	8005c5c <xTaskRemoveFromEventList>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d012      	beq.n	8004a36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <xQueueGenericReset+0xcc>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	e009      	b.n	8004a36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3310      	adds	r3, #16
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fef2 	bl	8004810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3324      	adds	r3, #36	; 0x24
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff feed 	bl	8004810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a36:	f002 f85d 	bl	8006af4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a3a:	2301      	movs	r3, #1
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	e000ed04 	.word	0xe000ed04

08004a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08e      	sub	sp, #56	; 0x38
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <xQueueGenericCreateStatic+0x52>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <xQueueGenericCreateStatic+0x56>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <xQueueGenericCreateStatic+0x58>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	623b      	str	r3, [r7, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <xQueueGenericCreateStatic+0x7e>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <xQueueGenericCreateStatic+0x82>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <xQueueGenericCreateStatic+0x84>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	61fb      	str	r3, [r7, #28]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ae6:	2350      	movs	r3, #80	; 0x50
 8004ae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b50      	cmp	r3, #80	; 0x50
 8004aee:	d00a      	beq.n	8004b06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	61bb      	str	r3, [r7, #24]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00d      	beq.n	8004b2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	4613      	mov	r3, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f805 	bl	8004b38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3730      	adds	r7, #48	; 0x30
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e002      	b.n	8004b5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b66:	2101      	movs	r1, #1
 8004b68:	69b8      	ldr	r0, [r7, #24]
 8004b6a:	f7ff ff05 	bl	8004978 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08e      	sub	sp, #56	; 0x38
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <xQueueGenericSend+0x32>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d103      	bne.n	8004bc0 <xQueueGenericSend+0x40>
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <xQueueGenericSend+0x44>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <xQueueGenericSend+0x46>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <xQueueGenericSend+0x60>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d103      	bne.n	8004bee <xQueueGenericSend+0x6e>
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <xQueueGenericSend+0x72>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <xQueueGenericSend+0x74>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <xQueueGenericSend+0x8e>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	623b      	str	r3, [r7, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c0e:	f001 f9e7 	bl	8005fe0 <xTaskGetSchedulerState>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <xQueueGenericSend+0x9e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <xQueueGenericSend+0xa2>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <xQueueGenericSend+0xa4>
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <xQueueGenericSend+0xbe>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	61fb      	str	r3, [r7, #28]
}
 8004c3a:	bf00      	nop
 8004c3c:	e7fe      	b.n	8004c3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c3e:	f001 ff29 	bl	8006a94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <xQueueGenericSend+0xd4>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d129      	bne.n	8004ca8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c5a:	f000 fa0b 	bl	8005074 <prvCopyDataToQueue>
 8004c5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d010      	beq.n	8004c8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	3324      	adds	r3, #36	; 0x24
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fff5 	bl	8005c5c <xTaskRemoveFromEventList>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d013      	beq.n	8004ca0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c78:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <xQueueGenericSend+0x1f8>)
 8004c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	e00a      	b.n	8004ca0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c90:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <xQueueGenericSend+0x1f8>)
 8004c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ca0:	f001 ff28 	bl	8006af4 <vPortExitCritical>
				return pdPASS;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e063      	b.n	8004d70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d103      	bne.n	8004cb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cae:	f001 ff21 	bl	8006af4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e05c      	b.n	8004d70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cbc:	f107 0314 	add.w	r3, r7, #20
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f001 f82f 	bl	8005d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cca:	f001 ff13 	bl	8006af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cce:	f000 fd9b 	bl	8005808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cd2:	f001 fedf 	bl	8006a94 <vPortEnterCritical>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d103      	bne.n	8004cec <xQueueGenericSend+0x16c>
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf2:	b25b      	sxtb	r3, r3
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d103      	bne.n	8004d02 <xQueueGenericSend+0x182>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d02:	f001 fef7 	bl	8006af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d06:	1d3a      	adds	r2, r7, #4
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 f81e 	bl	8005d50 <xTaskCheckForTimeOut>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d124      	bne.n	8004d64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d1c:	f000 faa2 	bl	8005264 <prvIsQueueFull>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d018      	beq.n	8004d58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	3310      	adds	r3, #16
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 ff44 	bl	8005bbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d36:	f000 fa2d 	bl	8005194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d3a:	f000 fd73 	bl	8005824 <xTaskResumeAll>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f47f af7c 	bne.w	8004c3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d46:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <xQueueGenericSend+0x1f8>)
 8004d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	e772      	b.n	8004c3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d5a:	f000 fa1b 	bl	8005194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d5e:	f000 fd61 	bl	8005824 <xTaskResumeAll>
 8004d62:	e76c      	b.n	8004c3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d66:	f000 fa15 	bl	8005194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d6a:	f000 fd5b 	bl	8005824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3738      	adds	r7, #56	; 0x38
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b090      	sub	sp, #64	; 0x40
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d103      	bne.n	8004db8 <xQueueGenericSendFromISR+0x3c>
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <xQueueGenericSendFromISR+0x40>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <xQueueGenericSendFromISR+0x42>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d103      	bne.n	8004de6 <xQueueGenericSendFromISR+0x6a>
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <xQueueGenericSendFromISR+0x6e>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <xQueueGenericSendFromISR+0x70>
 8004dea:	2300      	movs	r3, #0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	623b      	str	r3, [r7, #32]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e06:	f001 ff27 	bl	8006c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	61fa      	str	r2, [r7, #28]
 8004e20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <xQueueGenericSendFromISR+0xbc>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d12f      	bne.n	8004e98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e4e:	f000 f911 	bl	8005074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d112      	bne.n	8004e82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d016      	beq.n	8004e92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	3324      	adds	r3, #36	; 0x24
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fef7 	bl	8005c5c <xTaskRemoveFromEventList>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00b      	beq.n	8004e92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e007      	b.n	8004e92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e86:	3301      	adds	r3, #1
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	b25a      	sxtb	r2, r3
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e92:	2301      	movs	r3, #1
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e96:	e001      	b.n	8004e9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ea6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3740      	adds	r7, #64	; 0x40
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08c      	sub	sp, #48	; 0x30
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <xQueueReceive+0x30>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	623b      	str	r3, [r7, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d103      	bne.n	8004ef2 <xQueueReceive+0x3e>
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <xQueueReceive+0x42>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <xQueueReceive+0x44>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <xQueueReceive+0x5e>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	61fb      	str	r3, [r7, #28]
}
 8004f0e:	bf00      	nop
 8004f10:	e7fe      	b.n	8004f10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f12:	f001 f865 	bl	8005fe0 <xTaskGetSchedulerState>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d102      	bne.n	8004f22 <xQueueReceive+0x6e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <xQueueReceive+0x72>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <xQueueReceive+0x74>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <xQueueReceive+0x8e>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	61bb      	str	r3, [r7, #24]
}
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f42:	f001 fda7 	bl	8006a94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01f      	beq.n	8004f92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f56:	f000 f8f7 	bl	8005148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	1e5a      	subs	r2, r3, #1
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00f      	beq.n	8004f8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	3310      	adds	r3, #16
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fe74 	bl	8005c5c <xTaskRemoveFromEventList>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f7a:	4b3d      	ldr	r3, [pc, #244]	; (8005070 <xQueueReceive+0x1bc>)
 8004f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f8a:	f001 fdb3 	bl	8006af4 <vPortExitCritical>
				return pdPASS;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e069      	b.n	8005066 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d103      	bne.n	8004fa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f98:	f001 fdac 	bl	8006af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e062      	b.n	8005066 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fa6:	f107 0310 	add.w	r3, r7, #16
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 feba 	bl	8005d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fb4:	f001 fd9e 	bl	8006af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fb8:	f000 fc26 	bl	8005808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fbc:	f001 fd6a 	bl	8006a94 <vPortEnterCritical>
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc6:	b25b      	sxtb	r3, r3
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d103      	bne.n	8004fd6 <xQueueReceive+0x122>
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fdc:	b25b      	sxtb	r3, r3
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d103      	bne.n	8004fec <xQueueReceive+0x138>
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fec:	f001 fd82 	bl	8006af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ff0:	1d3a      	adds	r2, r7, #4
 8004ff2:	f107 0310 	add.w	r3, r7, #16
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fea9 	bl	8005d50 <xTaskCheckForTimeOut>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d123      	bne.n	800504c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005006:	f000 f917 	bl	8005238 <prvIsQueueEmpty>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d017      	beq.n	8005040 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	3324      	adds	r3, #36	; 0x24
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fdcf 	bl	8005bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800501e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005020:	f000 f8b8 	bl	8005194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005024:	f000 fbfe 	bl	8005824 <xTaskResumeAll>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d189      	bne.n	8004f42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <xQueueReceive+0x1bc>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	e780      	b.n	8004f42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005042:	f000 f8a7 	bl	8005194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005046:	f000 fbed 	bl	8005824 <xTaskResumeAll>
 800504a:	e77a      	b.n	8004f42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800504c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800504e:	f000 f8a1 	bl	8005194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005052:	f000 fbe7 	bl	8005824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005058:	f000 f8ee 	bl	8005238 <prvIsQueueEmpty>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	f43f af6f 	beq.w	8004f42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005064:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005066:	4618      	mov	r0, r3
 8005068:	3730      	adds	r7, #48	; 0x30
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10d      	bne.n	80050ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d14d      	bne.n	8005136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 ffbc 	bl	800601c <xTaskPriorityDisinherit>
 80050a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	e043      	b.n	8005136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d119      	bne.n	80050e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6858      	ldr	r0, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	461a      	mov	r2, r3
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	f002 f93b 	bl	800733a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	441a      	add	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d32b      	bcc.n	8005136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	e026      	b.n	8005136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68d8      	ldr	r0, [r3, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	461a      	mov	r2, r3
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	f002 f921 	bl	800733a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	425b      	negs	r3, r3
 8005102:	441a      	add	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d207      	bcs.n	8005124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	425b      	negs	r3, r3
 800511e:	441a      	add	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d105      	bne.n	8005136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	3b01      	subs	r3, #1
 8005134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800513e:	697b      	ldr	r3, [r7, #20]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d018      	beq.n	800518c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	441a      	add	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	d303      	bcc.n	800517c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68d9      	ldr	r1, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	461a      	mov	r2, r3
 8005186:	6838      	ldr	r0, [r7, #0]
 8005188:	f002 f8d7 	bl	800733a <memcpy>
	}
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800519c:	f001 fc7a 	bl	8006a94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051a8:	e011      	b.n	80051ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3324      	adds	r3, #36	; 0x24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fd50 	bl	8005c5c <xTaskRemoveFromEventList>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051c2:	f000 fe27 	bl	8005e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dce9      	bgt.n	80051aa <prvUnlockQueue+0x16>
 80051d6:	e000      	b.n	80051da <prvUnlockQueue+0x46>
					break;
 80051d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	22ff      	movs	r2, #255	; 0xff
 80051de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051e2:	f001 fc87 	bl	8006af4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051e6:	f001 fc55 	bl	8006a94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051f2:	e011      	b.n	8005218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3310      	adds	r3, #16
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fd2b 	bl	8005c5c <xTaskRemoveFromEventList>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800520c:	f000 fe02 	bl	8005e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005210:	7bbb      	ldrb	r3, [r7, #14]
 8005212:	3b01      	subs	r3, #1
 8005214:	b2db      	uxtb	r3, r3
 8005216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800521c:	2b00      	cmp	r3, #0
 800521e:	dce9      	bgt.n	80051f4 <prvUnlockQueue+0x60>
 8005220:	e000      	b.n	8005224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	22ff      	movs	r2, #255	; 0xff
 8005228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800522c:	f001 fc62 	bl	8006af4 <vPortExitCritical>
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005240:	f001 fc28 	bl	8006a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800524c:	2301      	movs	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e001      	b.n	8005256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005256:	f001 fc4d 	bl	8006af4 <vPortExitCritical>

	return xReturn;
 800525a:	68fb      	ldr	r3, [r7, #12]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800526c:	f001 fc12 	bl	8006a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	429a      	cmp	r2, r3
 800527a:	d102      	bne.n	8005282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e001      	b.n	8005286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005286:	f001 fc35 	bl	8006af4 <vPortExitCritical>

	return xReturn;
 800528a:	68fb      	ldr	r3, [r7, #12]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	e014      	b.n	80052ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052a4:	4a0f      	ldr	r2, [pc, #60]	; (80052e4 <vQueueAddToRegistry+0x50>)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052b0:	490c      	ldr	r1, [pc, #48]	; (80052e4 <vQueueAddToRegistry+0x50>)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052ba:	4a0a      	ldr	r2, [pc, #40]	; (80052e4 <vQueueAddToRegistry+0x50>)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052c6:	e006      	b.n	80052d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b07      	cmp	r3, #7
 80052d2:	d9e7      	bls.n	80052a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20000abc 	.word	0x20000abc

080052e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052f8:	f001 fbcc 	bl	8006a94 <vPortEnterCritical>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005302:	b25b      	sxtb	r3, r3
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d103      	bne.n	8005312 <vQueueWaitForMessageRestricted+0x2a>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005318:	b25b      	sxtb	r3, r3
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d103      	bne.n	8005328 <vQueueWaitForMessageRestricted+0x40>
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005328:	f001 fbe4 	bl	8006af4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3324      	adds	r3, #36	; 0x24
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fc61 	bl	8005c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005342:	6978      	ldr	r0, [r7, #20]
 8005344:	f7ff ff26 	bl	8005194 <prvUnlockQueue>
	}
 8005348:	bf00      	nop
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08e      	sub	sp, #56	; 0x38
 8005354:	af04      	add	r7, sp, #16
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	623b      	str	r3, [r7, #32]
}
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xTaskCreateStatic+0x46>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	61fb      	str	r3, [r7, #28]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005396:	23bc      	movs	r3, #188	; 0xbc
 8005398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2bbc      	cmp	r3, #188	; 0xbc
 800539e:	d00a      	beq.n	80053b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	61bb      	str	r3, [r7, #24]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01e      	beq.n	80053fc <xTaskCreateStatic+0xac>
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053d6:	2300      	movs	r3, #0
 80053d8:	9303      	str	r3, [sp, #12]
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	9302      	str	r3, [sp, #8]
 80053de:	f107 0314 	add.w	r3, r7, #20
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f850 	bl	8005494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053f6:	f000 f8f3 	bl	80055e0 <prvAddNewTaskToReadyList>
 80053fa:	e001      	b.n	8005400 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005400:	697b      	ldr	r3, [r7, #20]
	}
 8005402:	4618      	mov	r0, r3
 8005404:	3728      	adds	r7, #40	; 0x28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800540a:	b580      	push	{r7, lr}
 800540c:	b08c      	sub	sp, #48	; 0x30
 800540e:	af04      	add	r7, sp, #16
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4618      	mov	r0, r3
 8005420:	f001 fc5a 	bl	8006cd8 <pvPortMalloc>
 8005424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00e      	beq.n	800544a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800542c:	20bc      	movs	r0, #188	; 0xbc
 800542e:	f001 fc53 	bl	8006cd8 <pvPortMalloc>
 8005432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
 8005440:	e005      	b.n	800544e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005442:	6978      	ldr	r0, [r7, #20]
 8005444:	f001 fd14 	bl	8006e70 <vPortFree>
 8005448:	e001      	b.n	800544e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d017      	beq.n	8005484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800545c:	88fa      	ldrh	r2, [r7, #6]
 800545e:	2300      	movs	r3, #0
 8005460:	9303      	str	r3, [sp, #12]
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	9302      	str	r3, [sp, #8]
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f80e 	bl	8005494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005478:	69f8      	ldr	r0, [r7, #28]
 800547a:	f000 f8b1 	bl	80055e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800547e:	2301      	movs	r3, #1
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	e002      	b.n	800548a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005484:	f04f 33ff 	mov.w	r3, #4294967295
 8005488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800548a:	69bb      	ldr	r3, [r7, #24]
	}
 800548c:	4618      	mov	r0, r3
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	461a      	mov	r2, r3
 80054ac:	21a5      	movs	r1, #165	; 0xa5
 80054ae:	f001 ff52 	bl	8007356 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054bc:	3b01      	subs	r3, #1
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f023 0307 	bic.w	r3, r3, #7
 80054ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	617b      	str	r3, [r7, #20]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01f      	beq.n	8005532 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	e012      	b.n	800551e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	7819      	ldrb	r1, [r3, #0]
 8005500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	3334      	adds	r3, #52	; 0x34
 8005508:	460a      	mov	r2, r1
 800550a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	3301      	adds	r3, #1
 800551c:	61fb      	str	r3, [r7, #28]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	2b0f      	cmp	r3, #15
 8005522:	d9e9      	bls.n	80054f8 <prvInitialiseNewTask+0x64>
 8005524:	e000      	b.n	8005528 <prvInitialiseNewTask+0x94>
			{
				break;
 8005526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005530:	e003      	b.n	800553a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	2b37      	cmp	r3, #55	; 0x37
 800553e:	d901      	bls.n	8005544 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005540:	2337      	movs	r3, #55	; 0x37
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800554e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	2200      	movs	r2, #0
 8005554:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	3304      	adds	r3, #4
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff f978 	bl	8004850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	3318      	adds	r3, #24
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff f973 	bl	8004850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	2200      	movs	r2, #0
 8005584:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	2200      	movs	r2, #0
 800558c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	3354      	adds	r3, #84	; 0x54
 8005594:	2260      	movs	r2, #96	; 0x60
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f001 fedc 	bl	8007356 <memset>
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <prvInitialiseNewTask+0x140>)
 80055a2:	659a      	str	r2, [r3, #88]	; 0x58
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	4a0c      	ldr	r2, [pc, #48]	; (80055d8 <prvInitialiseNewTask+0x144>)
 80055a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	4a0b      	ldr	r2, [pc, #44]	; (80055dc <prvInitialiseNewTask+0x148>)
 80055ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	69b8      	ldr	r0, [r7, #24]
 80055b6:	f001 f941 	bl	800683c <pxPortInitialiseStack>
 80055ba:	4602      	mov	r2, r0
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055cc:	bf00      	nop
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	0800b16c 	.word	0x0800b16c
 80055d8:	0800b18c 	.word	0x0800b18c
 80055dc:	0800b14c 	.word	0x0800b14c

080055e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055e8:	f001 fa54 	bl	8006a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055ec:	4b2d      	ldr	r3, [pc, #180]	; (80056a4 <prvAddNewTaskToReadyList+0xc4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3301      	adds	r3, #1
 80055f2:	4a2c      	ldr	r2, [pc, #176]	; (80056a4 <prvAddNewTaskToReadyList+0xc4>)
 80055f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055f6:	4b2c      	ldr	r3, [pc, #176]	; (80056a8 <prvAddNewTaskToReadyList+0xc8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055fe:	4a2a      	ldr	r2, [pc, #168]	; (80056a8 <prvAddNewTaskToReadyList+0xc8>)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005604:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <prvAddNewTaskToReadyList+0xc4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d110      	bne.n	800562e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800560c:	f000 fc26 	bl	8005e5c <prvInitialiseTaskLists>
 8005610:	e00d      	b.n	800562e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005612:	4b26      	ldr	r3, [pc, #152]	; (80056ac <prvAddNewTaskToReadyList+0xcc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800561a:	4b23      	ldr	r3, [pc, #140]	; (80056a8 <prvAddNewTaskToReadyList+0xc8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	429a      	cmp	r2, r3
 8005626:	d802      	bhi.n	800562e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005628:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <prvAddNewTaskToReadyList+0xc8>)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800562e:	4b20      	ldr	r3, [pc, #128]	; (80056b0 <prvAddNewTaskToReadyList+0xd0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	4a1e      	ldr	r2, [pc, #120]	; (80056b0 <prvAddNewTaskToReadyList+0xd0>)
 8005636:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005638:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <prvAddNewTaskToReadyList+0xd0>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <prvAddNewTaskToReadyList+0xd4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d903      	bls.n	8005654 <prvAddNewTaskToReadyList+0x74>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	4a18      	ldr	r2, [pc, #96]	; (80056b4 <prvAddNewTaskToReadyList+0xd4>)
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <prvAddNewTaskToReadyList+0xd8>)
 8005662:	441a      	add	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3304      	adds	r3, #4
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f7ff f8fd 	bl	800486a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005670:	f001 fa40 	bl	8006af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005674:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <prvAddNewTaskToReadyList+0xcc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00e      	beq.n	800569a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <prvAddNewTaskToReadyList+0xc8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	429a      	cmp	r2, r3
 8005688:	d207      	bcs.n	800569a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800568a:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <prvAddNewTaskToReadyList+0xdc>)
 800568c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000fd0 	.word	0x20000fd0
 80056a8:	20000afc 	.word	0x20000afc
 80056ac:	20000fdc 	.word	0x20000fdc
 80056b0:	20000fec 	.word	0x20000fec
 80056b4:	20000fd8 	.word	0x20000fd8
 80056b8:	20000b00 	.word	0x20000b00
 80056bc:	e000ed04 	.word	0xe000ed04

080056c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d017      	beq.n	8005702 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <vTaskDelay+0x60>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <vTaskDelay+0x30>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	60bb      	str	r3, [r7, #8]
}
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056f0:	f000 f88a 	bl	8005808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056f4:	2100      	movs	r1, #0
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fcfe 	bl	80060f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056fc:	f000 f892 	bl	8005824 <xTaskResumeAll>
 8005700:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d107      	bne.n	8005718 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <vTaskDelay+0x64>)
 800570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005718:	bf00      	nop
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20000ff8 	.word	0x20000ff8
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005736:	463a      	mov	r2, r7
 8005738:	1d39      	adds	r1, r7, #4
 800573a:	f107 0308 	add.w	r3, r7, #8
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff f832 	bl	80047a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	9202      	str	r2, [sp, #8]
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	2300      	movs	r3, #0
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	460a      	mov	r2, r1
 8005756:	4924      	ldr	r1, [pc, #144]	; (80057e8 <vTaskStartScheduler+0xc0>)
 8005758:	4824      	ldr	r0, [pc, #144]	; (80057ec <vTaskStartScheduler+0xc4>)
 800575a:	f7ff fdf9 	bl	8005350 <xTaskCreateStatic>
 800575e:	4603      	mov	r3, r0
 8005760:	4a23      	ldr	r2, [pc, #140]	; (80057f0 <vTaskStartScheduler+0xc8>)
 8005762:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005764:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <vTaskStartScheduler+0xc8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e001      	b.n	8005776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d102      	bne.n	8005782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800577c:	f000 fd10 	bl	80061a0 <xTimerCreateTimerTask>
 8005780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d11b      	bne.n	80057c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	613b      	str	r3, [r7, #16]
}
 800579a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800579c:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <vTaskStartScheduler+0xcc>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3354      	adds	r3, #84	; 0x54
 80057a2:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <vTaskStartScheduler+0xd0>)
 80057a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057a6:	4b15      	ldr	r3, [pc, #84]	; (80057fc <vTaskStartScheduler+0xd4>)
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ae:	4b14      	ldr	r3, [pc, #80]	; (8005800 <vTaskStartScheduler+0xd8>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057b4:	4b13      	ldr	r3, [pc, #76]	; (8005804 <vTaskStartScheduler+0xdc>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ba:	f001 f8c9 	bl	8006950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057be:	e00e      	b.n	80057de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d10a      	bne.n	80057de <vTaskStartScheduler+0xb6>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	60fb      	str	r3, [r7, #12]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <vTaskStartScheduler+0xb4>
}
 80057de:	bf00      	nop
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	0800b0b0 	.word	0x0800b0b0
 80057ec:	08005e2d 	.word	0x08005e2d
 80057f0:	20000ff4 	.word	0x20000ff4
 80057f4:	20000afc 	.word	0x20000afc
 80057f8:	20000014 	.word	0x20000014
 80057fc:	20000ff0 	.word	0x20000ff0
 8005800:	20000fdc 	.word	0x20000fdc
 8005804:	20000fd4 	.word	0x20000fd4

08005808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800580c:	4b04      	ldr	r3, [pc, #16]	; (8005820 <vTaskSuspendAll+0x18>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	4a03      	ldr	r2, [pc, #12]	; (8005820 <vTaskSuspendAll+0x18>)
 8005814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005816:	bf00      	nop
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	20000ff8 	.word	0x20000ff8

08005824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005832:	4b42      	ldr	r3, [pc, #264]	; (800593c <xTaskResumeAll+0x118>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <xTaskResumeAll+0x2c>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	603b      	str	r3, [r7, #0]
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005850:	f001 f920 	bl	8006a94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005854:	4b39      	ldr	r3, [pc, #228]	; (800593c <xTaskResumeAll+0x118>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3b01      	subs	r3, #1
 800585a:	4a38      	ldr	r2, [pc, #224]	; (800593c <xTaskResumeAll+0x118>)
 800585c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585e:	4b37      	ldr	r3, [pc, #220]	; (800593c <xTaskResumeAll+0x118>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d162      	bne.n	800592c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005866:	4b36      	ldr	r3, [pc, #216]	; (8005940 <xTaskResumeAll+0x11c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d05e      	beq.n	800592c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800586e:	e02f      	b.n	80058d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005870:	4b34      	ldr	r3, [pc, #208]	; (8005944 <xTaskResumeAll+0x120>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3318      	adds	r3, #24
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff f851 	bl	8004924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3304      	adds	r3, #4
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff f84c 	bl	8004924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005890:	4b2d      	ldr	r3, [pc, #180]	; (8005948 <xTaskResumeAll+0x124>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d903      	bls.n	80058a0 <xTaskResumeAll+0x7c>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <xTaskResumeAll+0x124>)
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4a27      	ldr	r2, [pc, #156]	; (800594c <xTaskResumeAll+0x128>)
 80058ae:	441a      	add	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f7fe ffd7 	bl	800486a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	4b23      	ldr	r3, [pc, #140]	; (8005950 <xTaskResumeAll+0x12c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d302      	bcc.n	80058d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058ca:	4b22      	ldr	r3, [pc, #136]	; (8005954 <xTaskResumeAll+0x130>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058d0:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <xTaskResumeAll+0x120>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1cb      	bne.n	8005870 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058de:	f000 fb5f 	bl	8005fa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058e2:	4b1d      	ldr	r3, [pc, #116]	; (8005958 <xTaskResumeAll+0x134>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d010      	beq.n	8005910 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058ee:	f000 f847 	bl	8005980 <xTaskIncrementTick>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058f8:	4b16      	ldr	r3, [pc, #88]	; (8005954 <xTaskResumeAll+0x130>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3b01      	subs	r3, #1
 8005902:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f1      	bne.n	80058ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800590a:	4b13      	ldr	r3, [pc, #76]	; (8005958 <xTaskResumeAll+0x134>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005910:	4b10      	ldr	r3, [pc, #64]	; (8005954 <xTaskResumeAll+0x130>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005918:	2301      	movs	r3, #1
 800591a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800591c:	4b0f      	ldr	r3, [pc, #60]	; (800595c <xTaskResumeAll+0x138>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800592c:	f001 f8e2 	bl	8006af4 <vPortExitCritical>

	return xAlreadyYielded;
 8005930:	68bb      	ldr	r3, [r7, #8]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000ff8 	.word	0x20000ff8
 8005940:	20000fd0 	.word	0x20000fd0
 8005944:	20000f90 	.word	0x20000f90
 8005948:	20000fd8 	.word	0x20000fd8
 800594c:	20000b00 	.word	0x20000b00
 8005950:	20000afc 	.word	0x20000afc
 8005954:	20000fe4 	.word	0x20000fe4
 8005958:	20000fe0 	.word	0x20000fe0
 800595c:	e000ed04 	.word	0xe000ed04

08005960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <xTaskGetTickCount+0x1c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800596c:	687b      	ldr	r3, [r7, #4]
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20000fd4 	.word	0x20000fd4

08005980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598a:	4b4f      	ldr	r3, [pc, #316]	; (8005ac8 <xTaskIncrementTick+0x148>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f040 808f 	bne.w	8005ab2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005994:	4b4d      	ldr	r3, [pc, #308]	; (8005acc <xTaskIncrementTick+0x14c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3301      	adds	r3, #1
 800599a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800599c:	4a4b      	ldr	r2, [pc, #300]	; (8005acc <xTaskIncrementTick+0x14c>)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d120      	bne.n	80059ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80059a8:	4b49      	ldr	r3, [pc, #292]	; (8005ad0 <xTaskIncrementTick+0x150>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	603b      	str	r3, [r7, #0]
}
 80059c4:	bf00      	nop
 80059c6:	e7fe      	b.n	80059c6 <xTaskIncrementTick+0x46>
 80059c8:	4b41      	ldr	r3, [pc, #260]	; (8005ad0 <xTaskIncrementTick+0x150>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	4b41      	ldr	r3, [pc, #260]	; (8005ad4 <xTaskIncrementTick+0x154>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a3f      	ldr	r2, [pc, #252]	; (8005ad0 <xTaskIncrementTick+0x150>)
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	4a3f      	ldr	r2, [pc, #252]	; (8005ad4 <xTaskIncrementTick+0x154>)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	4b3e      	ldr	r3, [pc, #248]	; (8005ad8 <xTaskIncrementTick+0x158>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	4a3d      	ldr	r2, [pc, #244]	; (8005ad8 <xTaskIncrementTick+0x158>)
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	f000 fadb 	bl	8005fa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059ea:	4b3c      	ldr	r3, [pc, #240]	; (8005adc <xTaskIncrementTick+0x15c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d349      	bcc.n	8005a88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f4:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <xTaskIncrementTick+0x150>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d104      	bne.n	8005a08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059fe:	4b37      	ldr	r3, [pc, #220]	; (8005adc <xTaskIncrementTick+0x15c>)
 8005a00:	f04f 32ff 	mov.w	r2, #4294967295
 8005a04:	601a      	str	r2, [r3, #0]
					break;
 8005a06:	e03f      	b.n	8005a88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a08:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <xTaskIncrementTick+0x150>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d203      	bcs.n	8005a28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a20:	4a2e      	ldr	r2, [pc, #184]	; (8005adc <xTaskIncrementTick+0x15c>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a26:	e02f      	b.n	8005a88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe ff79 	bl	8004924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	3318      	adds	r3, #24
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe ff70 	bl	8004924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <xTaskIncrementTick+0x160>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d903      	bls.n	8005a58 <xTaskIncrementTick+0xd8>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	4a22      	ldr	r2, [pc, #136]	; (8005ae0 <xTaskIncrementTick+0x160>)
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4a1f      	ldr	r2, [pc, #124]	; (8005ae4 <xTaskIncrementTick+0x164>)
 8005a66:	441a      	add	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7fe fefb 	bl	800486a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <xTaskIncrementTick+0x168>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d3b8      	bcc.n	80059f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a86:	e7b5      	b.n	80059f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a88:	4b17      	ldr	r3, [pc, #92]	; (8005ae8 <xTaskIncrementTick+0x168>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	4915      	ldr	r1, [pc, #84]	; (8005ae4 <xTaskIncrementTick+0x164>)
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d901      	bls.n	8005aa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005aa4:	4b11      	ldr	r3, [pc, #68]	; (8005aec <xTaskIncrementTick+0x16c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d007      	beq.n	8005abc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e004      	b.n	8005abc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <xTaskIncrementTick+0x170>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	4a0d      	ldr	r2, [pc, #52]	; (8005af0 <xTaskIncrementTick+0x170>)
 8005aba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005abc:	697b      	ldr	r3, [r7, #20]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000ff8 	.word	0x20000ff8
 8005acc:	20000fd4 	.word	0x20000fd4
 8005ad0:	20000f88 	.word	0x20000f88
 8005ad4:	20000f8c 	.word	0x20000f8c
 8005ad8:	20000fe8 	.word	0x20000fe8
 8005adc:	20000ff0 	.word	0x20000ff0
 8005ae0:	20000fd8 	.word	0x20000fd8
 8005ae4:	20000b00 	.word	0x20000b00
 8005ae8:	20000afc 	.word	0x20000afc
 8005aec:	20000fe4 	.word	0x20000fe4
 8005af0:	20000fe0 	.word	0x20000fe0

08005af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005afa:	4b2a      	ldr	r3, [pc, #168]	; (8005ba4 <vTaskSwitchContext+0xb0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b02:	4b29      	ldr	r3, [pc, #164]	; (8005ba8 <vTaskSwitchContext+0xb4>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b08:	e046      	b.n	8005b98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005b0a:	4b27      	ldr	r3, [pc, #156]	; (8005ba8 <vTaskSwitchContext+0xb4>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b10:	4b26      	ldr	r3, [pc, #152]	; (8005bac <vTaskSwitchContext+0xb8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e010      	b.n	8005b3a <vTaskSwitchContext+0x46>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <vTaskSwitchContext+0x3e>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	491d      	ldr	r1, [pc, #116]	; (8005bb0 <vTaskSwitchContext+0xbc>)
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0e4      	beq.n	8005b18 <vTaskSwitchContext+0x24>
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4a15      	ldr	r2, [pc, #84]	; (8005bb0 <vTaskSwitchContext+0xbc>)
 8005b5a:	4413      	add	r3, r2
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	605a      	str	r2, [r3, #4]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d104      	bne.n	8005b7e <vTaskSwitchContext+0x8a>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4a0b      	ldr	r2, [pc, #44]	; (8005bb4 <vTaskSwitchContext+0xc0>)
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	4a08      	ldr	r2, [pc, #32]	; (8005bac <vTaskSwitchContext+0xb8>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <vTaskSwitchContext+0xc0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3354      	adds	r3, #84	; 0x54
 8005b94:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <vTaskSwitchContext+0xc4>)
 8005b96:	6013      	str	r3, [r2, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	20000ff8 	.word	0x20000ff8
 8005ba8:	20000fe4 	.word	0x20000fe4
 8005bac:	20000fd8 	.word	0x20000fd8
 8005bb0:	20000b00 	.word	0x20000b00
 8005bb4:	20000afc 	.word	0x20000afc
 8005bb8:	20000014 	.word	0x20000014

08005bbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	60fb      	str	r3, [r7, #12]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <vTaskPlaceOnEventList+0x44>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3318      	adds	r3, #24
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fe fe61 	bl	80048b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	6838      	ldr	r0, [r7, #0]
 8005bf4:	f000 fa80 	bl	80060f8 <prvAddCurrentTaskToDelayedList>
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000afc 	.word	0x20000afc

08005c04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	617b      	str	r3, [r7, #20]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3318      	adds	r3, #24
 8005c32:	4619      	mov	r1, r3
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7fe fe18 	bl	800486a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295
 8005c44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	68b8      	ldr	r0, [r7, #8]
 8005c4a:	f000 fa55 	bl	80060f8 <prvAddCurrentTaskToDelayedList>
	}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000afc 	.word	0x20000afc

08005c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60fb      	str	r3, [r7, #12]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	3318      	adds	r3, #24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe fe49 	bl	8004924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <xTaskRemoveFromEventList+0xb0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d11d      	bne.n	8005cd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fe40 	bl	8004924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <xTaskRemoveFromEventList+0xb4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d903      	bls.n	8005cb8 <xTaskRemoveFromEventList+0x5c>
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <xTaskRemoveFromEventList+0xb4>)
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <xTaskRemoveFromEventList+0xb8>)
 8005cc6:	441a      	add	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7fe fdcb 	bl	800486a <vListInsertEnd>
 8005cd4:	e005      	b.n	8005ce2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	3318      	adds	r3, #24
 8005cda:	4619      	mov	r1, r3
 8005cdc:	480e      	ldr	r0, [pc, #56]	; (8005d18 <xTaskRemoveFromEventList+0xbc>)
 8005cde:	f7fe fdc4 	bl	800486a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce6:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <xTaskRemoveFromEventList+0xc0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d905      	bls.n	8005cfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <xTaskRemoveFromEventList+0xc4>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e001      	b.n	8005d00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d00:	697b      	ldr	r3, [r7, #20]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000ff8 	.word	0x20000ff8
 8005d10:	20000fd8 	.word	0x20000fd8
 8005d14:	20000b00 	.word	0x20000b00
 8005d18:	20000f90 	.word	0x20000f90
 8005d1c:	20000afc 	.word	0x20000afc
 8005d20:	20000fe4 	.word	0x20000fe4

08005d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <vTaskInternalSetTimeOutState+0x24>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <vTaskInternalSetTimeOutState+0x28>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	605a      	str	r2, [r3, #4]
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000fe8 	.word	0x20000fe8
 8005d4c:	20000fd4 	.word	0x20000fd4

08005d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60fb      	str	r3, [r7, #12]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d92:	f000 fe7f 	bl	8006a94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d96:	4b1d      	ldr	r3, [pc, #116]	; (8005e0c <xTaskCheckForTimeOut+0xbc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d102      	bne.n	8005db6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	e023      	b.n	8005dfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <xTaskCheckForTimeOut+0xc0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d007      	beq.n	8005dd2 <xTaskCheckForTimeOut+0x82>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d302      	bcc.n	8005dd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	e015      	b.n	8005dfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d20b      	bcs.n	8005df4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1ad2      	subs	r2, r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff9b 	bl	8005d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	e004      	b.n	8005dfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dfe:	f000 fe79 	bl	8006af4 <vPortExitCritical>

	return xReturn;
 8005e02:	69fb      	ldr	r3, [r7, #28]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000fd4 	.word	0x20000fd4
 8005e10:	20000fe8 	.word	0x20000fe8

08005e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e18:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <vTaskMissedYield+0x14>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	20000fe4 	.word	0x20000fe4

08005e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e34:	f000 f852 	bl	8005edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e38:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <prvIdleTask+0x28>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d9f9      	bls.n	8005e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e40:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <prvIdleTask+0x2c>)
 8005e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e50:	e7f0      	b.n	8005e34 <prvIdleTask+0x8>
 8005e52:	bf00      	nop
 8005e54:	20000b00 	.word	0x20000b00
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e62:	2300      	movs	r3, #0
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	e00c      	b.n	8005e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4a12      	ldr	r2, [pc, #72]	; (8005ebc <prvInitialiseTaskLists+0x60>)
 8005e74:	4413      	add	r3, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fcca 	bl	8004810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b37      	cmp	r3, #55	; 0x37
 8005e86:	d9ef      	bls.n	8005e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e88:	480d      	ldr	r0, [pc, #52]	; (8005ec0 <prvInitialiseTaskLists+0x64>)
 8005e8a:	f7fe fcc1 	bl	8004810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e8e:	480d      	ldr	r0, [pc, #52]	; (8005ec4 <prvInitialiseTaskLists+0x68>)
 8005e90:	f7fe fcbe 	bl	8004810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e94:	480c      	ldr	r0, [pc, #48]	; (8005ec8 <prvInitialiseTaskLists+0x6c>)
 8005e96:	f7fe fcbb 	bl	8004810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e9a:	480c      	ldr	r0, [pc, #48]	; (8005ecc <prvInitialiseTaskLists+0x70>)
 8005e9c:	f7fe fcb8 	bl	8004810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ea0:	480b      	ldr	r0, [pc, #44]	; (8005ed0 <prvInitialiseTaskLists+0x74>)
 8005ea2:	f7fe fcb5 	bl	8004810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <prvInitialiseTaskLists+0x78>)
 8005ea8:	4a05      	ldr	r2, [pc, #20]	; (8005ec0 <prvInitialiseTaskLists+0x64>)
 8005eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <prvInitialiseTaskLists+0x7c>)
 8005eae:	4a05      	ldr	r2, [pc, #20]	; (8005ec4 <prvInitialiseTaskLists+0x68>)
 8005eb0:	601a      	str	r2, [r3, #0]
}
 8005eb2:	bf00      	nop
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000b00 	.word	0x20000b00
 8005ec0:	20000f60 	.word	0x20000f60
 8005ec4:	20000f74 	.word	0x20000f74
 8005ec8:	20000f90 	.word	0x20000f90
 8005ecc:	20000fa4 	.word	0x20000fa4
 8005ed0:	20000fbc 	.word	0x20000fbc
 8005ed4:	20000f88 	.word	0x20000f88
 8005ed8:	20000f8c 	.word	0x20000f8c

08005edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ee2:	e019      	b.n	8005f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ee4:	f000 fdd6 	bl	8006a94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee8:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <prvCheckTasksWaitingTermination+0x50>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fe fd15 	bl	8004924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <prvCheckTasksWaitingTermination+0x54>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <prvCheckTasksWaitingTermination+0x54>)
 8005f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f04:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <prvCheckTasksWaitingTermination+0x58>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	4a0a      	ldr	r2, [pc, #40]	; (8005f34 <prvCheckTasksWaitingTermination+0x58>)
 8005f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f0e:	f000 fdf1 	bl	8006af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f810 	bl	8005f38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f18:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <prvCheckTasksWaitingTermination+0x58>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e1      	bne.n	8005ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000fa4 	.word	0x20000fa4
 8005f30:	20000fd0 	.word	0x20000fd0
 8005f34:	20000fb8 	.word	0x20000fb8

08005f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3354      	adds	r3, #84	; 0x54
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 ff1b 	bl	8007d80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d108      	bne.n	8005f66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 ff89 	bl	8006e70 <vPortFree>
				vPortFree( pxTCB );
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 ff86 	bl	8006e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f64:	e018      	b.n	8005f98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d103      	bne.n	8005f78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 ff7d 	bl	8006e70 <vPortFree>
	}
 8005f76:	e00f      	b.n	8005f98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d00a      	beq.n	8005f98 <prvDeleteTCB+0x60>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60fb      	str	r3, [r7, #12]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <prvDeleteTCB+0x5e>
	}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <prvResetNextTaskUnblockTime+0x38>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <prvResetNextTaskUnblockTime+0x3c>)
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fb8:	e008      	b.n	8005fcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fba:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <prvResetNextTaskUnblockTime+0x38>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	4a04      	ldr	r2, [pc, #16]	; (8005fdc <prvResetNextTaskUnblockTime+0x3c>)
 8005fca:	6013      	str	r3, [r2, #0]
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	20000f88 	.word	0x20000f88
 8005fdc:	20000ff0 	.word	0x20000ff0

08005fe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <xTaskGetSchedulerState+0x34>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	607b      	str	r3, [r7, #4]
 8005ff2:	e008      	b.n	8006006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ff4:	4b08      	ldr	r3, [pc, #32]	; (8006018 <xTaskGetSchedulerState+0x38>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	607b      	str	r3, [r7, #4]
 8006000:	e001      	b.n	8006006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006002:	2300      	movs	r3, #0
 8006004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006006:	687b      	ldr	r3, [r7, #4]
	}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	20000fdc 	.word	0x20000fdc
 8006018:	20000ff8 	.word	0x20000ff8

0800601c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d056      	beq.n	80060e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006032:	4b2e      	ldr	r3, [pc, #184]	; (80060ec <xTaskPriorityDisinherit+0xd0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	429a      	cmp	r2, r3
 800603a:	d00a      	beq.n	8006052 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60fb      	str	r3, [r7, #12]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	60bb      	str	r3, [r7, #8]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006074:	1e5a      	subs	r2, r3, #1
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006082:	429a      	cmp	r2, r3
 8006084:	d02c      	beq.n	80060e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608a:	2b00      	cmp	r3, #0
 800608c:	d128      	bne.n	80060e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	3304      	adds	r3, #4
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe fc46 	bl	8004924 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <xTaskPriorityDisinherit+0xd4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d903      	bls.n	80060c0 <xTaskPriorityDisinherit+0xa4>
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	4a0c      	ldr	r2, [pc, #48]	; (80060f0 <xTaskPriorityDisinherit+0xd4>)
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4a09      	ldr	r2, [pc, #36]	; (80060f4 <xTaskPriorityDisinherit+0xd8>)
 80060ce:	441a      	add	r2, r3
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f7fe fbc7 	bl	800486a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060dc:	2301      	movs	r3, #1
 80060de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060e0:	697b      	ldr	r3, [r7, #20]
	}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000afc 	.word	0x20000afc
 80060f0:	20000fd8 	.word	0x20000fd8
 80060f4:	20000b00 	.word	0x20000b00

080060f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006102:	4b21      	ldr	r3, [pc, #132]	; (8006188 <prvAddCurrentTaskToDelayedList+0x90>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006108:	4b20      	ldr	r3, [pc, #128]	; (800618c <prvAddCurrentTaskToDelayedList+0x94>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3304      	adds	r3, #4
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe fc08 	bl	8004924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d10a      	bne.n	8006132 <prvAddCurrentTaskToDelayedList+0x3a>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006122:	4b1a      	ldr	r3, [pc, #104]	; (800618c <prvAddCurrentTaskToDelayedList+0x94>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4819      	ldr	r0, [pc, #100]	; (8006190 <prvAddCurrentTaskToDelayedList+0x98>)
 800612c:	f7fe fb9d 	bl	800486a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006130:	e026      	b.n	8006180 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4413      	add	r3, r2
 8006138:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800613a:	4b14      	ldr	r3, [pc, #80]	; (800618c <prvAddCurrentTaskToDelayedList+0x94>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	429a      	cmp	r2, r3
 8006148:	d209      	bcs.n	800615e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800614a:	4b12      	ldr	r3, [pc, #72]	; (8006194 <prvAddCurrentTaskToDelayedList+0x9c>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <prvAddCurrentTaskToDelayedList+0x94>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe fbab 	bl	80048b2 <vListInsert>
}
 800615c:	e010      	b.n	8006180 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615e:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b0a      	ldr	r3, [pc, #40]	; (800618c <prvAddCurrentTaskToDelayedList+0x94>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fe fba1 	bl	80048b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	d202      	bcs.n	8006180 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800617a:	4a08      	ldr	r2, [pc, #32]	; (800619c <prvAddCurrentTaskToDelayedList+0xa4>)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	6013      	str	r3, [r2, #0]
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000fd4 	.word	0x20000fd4
 800618c:	20000afc 	.word	0x20000afc
 8006190:	20000fbc 	.word	0x20000fbc
 8006194:	20000f8c 	.word	0x20000f8c
 8006198:	20000f88 	.word	0x20000f88
 800619c:	20000ff0 	.word	0x20000ff0

080061a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	; 0x28
 80061a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061aa:	f000 fb07 	bl	80067bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061ae:	4b1c      	ldr	r3, [pc, #112]	; (8006220 <xTimerCreateTimerTask+0x80>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d021      	beq.n	80061fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061be:	1d3a      	adds	r2, r7, #4
 80061c0:	f107 0108 	add.w	r1, r7, #8
 80061c4:	f107 030c 	add.w	r3, r7, #12
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe fb07 	bl	80047dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	9202      	str	r2, [sp, #8]
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	2302      	movs	r3, #2
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2300      	movs	r3, #0
 80061de:	460a      	mov	r2, r1
 80061e0:	4910      	ldr	r1, [pc, #64]	; (8006224 <xTimerCreateTimerTask+0x84>)
 80061e2:	4811      	ldr	r0, [pc, #68]	; (8006228 <xTimerCreateTimerTask+0x88>)
 80061e4:	f7ff f8b4 	bl	8005350 <xTaskCreateStatic>
 80061e8:	4603      	mov	r3, r0
 80061ea:	4a10      	ldr	r2, [pc, #64]	; (800622c <xTimerCreateTimerTask+0x8c>)
 80061ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061ee:	4b0f      	ldr	r3, [pc, #60]	; (800622c <xTimerCreateTimerTask+0x8c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061f6:	2301      	movs	r3, #1
 80061f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	613b      	str	r3, [r7, #16]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006216:	697b      	ldr	r3, [r7, #20]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	2000102c 	.word	0x2000102c
 8006224:	0800b0b8 	.word	0x0800b0b8
 8006228:	08006365 	.word	0x08006365
 800622c:	20001030 	.word	0x20001030

08006230 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08a      	sub	sp, #40	; 0x28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800623e:	2300      	movs	r3, #0
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	623b      	str	r3, [r7, #32]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800625e:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <xTimerGenericCommand+0x98>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d02a      	beq.n	80062bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b05      	cmp	r3, #5
 8006276:	dc18      	bgt.n	80062aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006278:	f7ff feb2 	bl	8005fe0 <xTaskGetSchedulerState>
 800627c:	4603      	mov	r3, r0
 800627e:	2b02      	cmp	r3, #2
 8006280:	d109      	bne.n	8006296 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006282:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <xTimerGenericCommand+0x98>)
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	f107 0110 	add.w	r1, r7, #16
 800628a:	2300      	movs	r3, #0
 800628c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628e:	f7fe fc77 	bl	8004b80 <xQueueGenericSend>
 8006292:	6278      	str	r0, [r7, #36]	; 0x24
 8006294:	e012      	b.n	80062bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <xTimerGenericCommand+0x98>)
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	f107 0110 	add.w	r1, r7, #16
 800629e:	2300      	movs	r3, #0
 80062a0:	2200      	movs	r2, #0
 80062a2:	f7fe fc6d 	bl	8004b80 <xQueueGenericSend>
 80062a6:	6278      	str	r0, [r7, #36]	; 0x24
 80062a8:	e008      	b.n	80062bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062aa:	4b07      	ldr	r3, [pc, #28]	; (80062c8 <xTimerGenericCommand+0x98>)
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	f107 0110 	add.w	r1, r7, #16
 80062b2:	2300      	movs	r3, #0
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	f7fe fd61 	bl	8004d7c <xQueueGenericSendFromISR>
 80062ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3728      	adds	r7, #40	; 0x28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2000102c 	.word	0x2000102c

080062cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d6:	4b22      	ldr	r3, [pc, #136]	; (8006360 <prvProcessExpiredTimer+0x94>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe fb1d 	bl	8004924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d022      	beq.n	800633e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	18d1      	adds	r1, r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	6978      	ldr	r0, [r7, #20]
 8006306:	f000 f8d1 	bl	80064ac <prvInsertTimerInActiveList>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d01f      	beq.n	8006350 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006310:	2300      	movs	r3, #0
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	2100      	movs	r1, #0
 800631a:	6978      	ldr	r0, [r7, #20]
 800631c:	f7ff ff88 	bl	8006230 <xTimerGenericCommand>
 8006320:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d113      	bne.n	8006350 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	60fb      	str	r3, [r7, #12]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	b2da      	uxtb	r2, r3
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	6978      	ldr	r0, [r7, #20]
 8006356:	4798      	blx	r3
}
 8006358:	bf00      	nop
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20001024 	.word	0x20001024

08006364 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800636c:	f107 0308 	add.w	r3, r7, #8
 8006370:	4618      	mov	r0, r3
 8006372:	f000 f857 	bl	8006424 <prvGetNextExpireTime>
 8006376:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4619      	mov	r1, r3
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 f803 	bl	8006388 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006382:	f000 f8d5 	bl	8006530 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006386:	e7f1      	b.n	800636c <prvTimerTask+0x8>

08006388 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006392:	f7ff fa39 	bl	8005808 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006396:	f107 0308 	add.w	r3, r7, #8
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f866 	bl	800646c <prvSampleTimeNow>
 80063a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d130      	bne.n	800640a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <prvProcessTimerOrBlockTask+0x3c>
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d806      	bhi.n	80063c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063b6:	f7ff fa35 	bl	8005824 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff ff85 	bl	80062cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063c2:	e024      	b.n	800640e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d008      	beq.n	80063dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <prvProcessTimerOrBlockTask+0x90>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <prvProcessTimerOrBlockTask+0x50>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <prvProcessTimerOrBlockTask+0x52>
 80063d8:	2300      	movs	r3, #0
 80063da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <prvProcessTimerOrBlockTask+0x94>)
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	4619      	mov	r1, r3
 80063ea:	f7fe ff7d 	bl	80052e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063ee:	f7ff fa19 	bl	8005824 <xTaskResumeAll>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063f8:	4b09      	ldr	r3, [pc, #36]	; (8006420 <prvProcessTimerOrBlockTask+0x98>)
 80063fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	f3bf 8f6f 	isb	sy
}
 8006408:	e001      	b.n	800640e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800640a:	f7ff fa0b 	bl	8005824 <xTaskResumeAll>
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20001028 	.word	0x20001028
 800641c:	2000102c 	.word	0x2000102c
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800642c:	4b0e      	ldr	r3, [pc, #56]	; (8006468 <prvGetNextExpireTime+0x44>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <prvGetNextExpireTime+0x16>
 8006436:	2201      	movs	r2, #1
 8006438:	e000      	b.n	800643c <prvGetNextExpireTime+0x18>
 800643a:	2200      	movs	r2, #0
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006448:	4b07      	ldr	r3, [pc, #28]	; (8006468 <prvGetNextExpireTime+0x44>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e001      	b.n	8006458 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006458:	68fb      	ldr	r3, [r7, #12]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20001024 	.word	0x20001024

0800646c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006474:	f7ff fa74 	bl	8005960 <xTaskGetTickCount>
 8006478:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800647a:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <prvSampleTimeNow+0x3c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	429a      	cmp	r2, r3
 8006482:	d205      	bcs.n	8006490 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006484:	f000 f936 	bl	80066f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	e002      	b.n	8006496 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006496:	4a04      	ldr	r2, [pc, #16]	; (80064a8 <prvSampleTimeNow+0x3c>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800649c:	68fb      	ldr	r3, [r7, #12]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20001034 	.word	0x20001034

080064ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d812      	bhi.n	80064f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d302      	bcc.n	80064e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064e0:	2301      	movs	r3, #1
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e01b      	b.n	800651e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064e6:	4b10      	ldr	r3, [pc, #64]	; (8006528 <prvInsertTimerInActiveList+0x7c>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3304      	adds	r3, #4
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f7fe f9de 	bl	80048b2 <vListInsert>
 80064f6:	e012      	b.n	800651e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d206      	bcs.n	800650e <prvInsertTimerInActiveList+0x62>
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d302      	bcc.n	800650e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e007      	b.n	800651e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800650e:	4b07      	ldr	r3, [pc, #28]	; (800652c <prvInsertTimerInActiveList+0x80>)
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3304      	adds	r3, #4
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f7fe f9ca 	bl	80048b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800651e:	697b      	ldr	r3, [r7, #20]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20001028 	.word	0x20001028
 800652c:	20001024 	.word	0x20001024

08006530 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08e      	sub	sp, #56	; 0x38
 8006534:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006536:	e0ca      	b.n	80066ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	da18      	bge.n	8006570 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800653e:	1d3b      	adds	r3, r7, #4
 8006540:	3304      	adds	r3, #4
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	61fb      	str	r3, [r7, #28]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006566:	6850      	ldr	r0, [r2, #4]
 8006568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800656a:	6892      	ldr	r2, [r2, #8]
 800656c:	4611      	mov	r1, r2
 800656e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f2c0 80aa 	blt.w	80066cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	3304      	adds	r3, #4
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe f9cb 	bl	8004924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800658e:	463b      	mov	r3, r7
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff ff6b 	bl	800646c <prvSampleTimeNow>
 8006596:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b09      	cmp	r3, #9
 800659c:	f200 8097 	bhi.w	80066ce <prvProcessReceivedCommands+0x19e>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <prvProcessReceivedCommands+0x78>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065d1 	.word	0x080065d1
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	080065d1 	.word	0x080065d1
 80065b4:	08006645 	.word	0x08006645
 80065b8:	08006659 	.word	0x08006659
 80065bc:	080066a3 	.word	0x080066a3
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	080065d1 	.word	0x080065d1
 80065c8:	08006645 	.word	0x08006645
 80065cc:	08006659 	.word	0x08006659
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	18d1      	adds	r1, r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f0:	f7ff ff5c 	bl	80064ac <prvInsertTimerInActiveList>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d069      	beq.n	80066ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006600:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d05e      	beq.n	80066ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	441a      	add	r2, r3
 8006618:	2300      	movs	r3, #0
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	2300      	movs	r3, #0
 800661e:	2100      	movs	r1, #0
 8006620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006622:	f7ff fe05 	bl	8006230 <xTimerGenericCommand>
 8006626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d14f      	bne.n	80066ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	61bb      	str	r3, [r7, #24]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	b2da      	uxtb	r2, r3
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006656:	e03a      	b.n	80066ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	b2da      	uxtb	r2, r3
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	617b      	str	r3, [r7, #20]
}
 800668a:	bf00      	nop
 800668c:	e7fe      	b.n	800668c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	18d1      	adds	r1, r2, r3
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800669c:	f7ff ff06 	bl	80064ac <prvInsertTimerInActiveList>
					break;
 80066a0:	e015      	b.n	80066ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d103      	bne.n	80066b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80066b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b2:	f000 fbdd 	bl	8006e70 <vPortFree>
 80066b6:	e00a      	b.n	80066ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066be:	f023 0301 	bic.w	r3, r3, #1
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066ca:	e000      	b.n	80066ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ce:	4b08      	ldr	r3, [pc, #32]	; (80066f0 <prvProcessReceivedCommands+0x1c0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	1d39      	adds	r1, r7, #4
 80066d4:	2200      	movs	r2, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fbec 	bl	8004eb4 <xQueueReceive>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f47f af2a 	bne.w	8006538 <prvProcessReceivedCommands+0x8>
	}
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop
 80066e8:	3730      	adds	r7, #48	; 0x30
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	2000102c 	.word	0x2000102c

080066f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066fa:	e048      	b.n	800678e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066fc:	4b2d      	ldr	r3, [pc, #180]	; (80067b4 <prvSwitchTimerLists+0xc0>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006706:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <prvSwitchTimerLists+0xc0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3304      	adds	r3, #4
 8006714:	4618      	mov	r0, r3
 8006716:	f7fe f905 	bl	8004924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d02e      	beq.n	800678e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4413      	add	r3, r2
 8006738:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	429a      	cmp	r2, r3
 8006740:	d90e      	bls.n	8006760 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800674e:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <prvSwitchTimerLists+0xc0>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3304      	adds	r3, #4
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f7fe f8aa 	bl	80048b2 <vListInsert>
 800675e:	e016      	b.n	800678e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006760:	2300      	movs	r3, #0
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	2300      	movs	r3, #0
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	2100      	movs	r1, #0
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff fd60 	bl	8006230 <xTimerGenericCommand>
 8006770:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10a      	bne.n	800678e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	603b      	str	r3, [r7, #0]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800678e:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <prvSwitchTimerLists+0xc0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1b1      	bne.n	80066fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <prvSwitchTimerLists+0xc0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <prvSwitchTimerLists+0xc4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <prvSwitchTimerLists+0xc0>)
 80067a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067a6:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <prvSwitchTimerLists+0xc4>)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	6013      	str	r3, [r2, #0]
}
 80067ac:	bf00      	nop
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20001024 	.word	0x20001024
 80067b8:	20001028 	.word	0x20001028

080067bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067c2:	f000 f967 	bl	8006a94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067c6:	4b15      	ldr	r3, [pc, #84]	; (800681c <prvCheckForValidListAndQueue+0x60>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d120      	bne.n	8006810 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067ce:	4814      	ldr	r0, [pc, #80]	; (8006820 <prvCheckForValidListAndQueue+0x64>)
 80067d0:	f7fe f81e 	bl	8004810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067d4:	4813      	ldr	r0, [pc, #76]	; (8006824 <prvCheckForValidListAndQueue+0x68>)
 80067d6:	f7fe f81b 	bl	8004810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <prvCheckForValidListAndQueue+0x6c>)
 80067dc:	4a10      	ldr	r2, [pc, #64]	; (8006820 <prvCheckForValidListAndQueue+0x64>)
 80067de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067e0:	4b12      	ldr	r3, [pc, #72]	; (800682c <prvCheckForValidListAndQueue+0x70>)
 80067e2:	4a10      	ldr	r2, [pc, #64]	; (8006824 <prvCheckForValidListAndQueue+0x68>)
 80067e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067e6:	2300      	movs	r3, #0
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	4b11      	ldr	r3, [pc, #68]	; (8006830 <prvCheckForValidListAndQueue+0x74>)
 80067ec:	4a11      	ldr	r2, [pc, #68]	; (8006834 <prvCheckForValidListAndQueue+0x78>)
 80067ee:	2110      	movs	r1, #16
 80067f0:	200a      	movs	r0, #10
 80067f2:	f7fe f929 	bl	8004a48 <xQueueGenericCreateStatic>
 80067f6:	4603      	mov	r3, r0
 80067f8:	4a08      	ldr	r2, [pc, #32]	; (800681c <prvCheckForValidListAndQueue+0x60>)
 80067fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <prvCheckForValidListAndQueue+0x60>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <prvCheckForValidListAndQueue+0x60>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	490b      	ldr	r1, [pc, #44]	; (8006838 <prvCheckForValidListAndQueue+0x7c>)
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fd42 	bl	8005294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006810:	f000 f970 	bl	8006af4 <vPortExitCritical>
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	2000102c 	.word	0x2000102c
 8006820:	20000ffc 	.word	0x20000ffc
 8006824:	20001010 	.word	0x20001010
 8006828:	20001024 	.word	0x20001024
 800682c:	20001028 	.word	0x20001028
 8006830:	200010d8 	.word	0x200010d8
 8006834:	20001038 	.word	0x20001038
 8006838:	0800b0c0 	.word	0x0800b0c0

0800683c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3b04      	subs	r3, #4
 800684c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3b04      	subs	r3, #4
 800685a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f023 0201 	bic.w	r2, r3, #1
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3b04      	subs	r3, #4
 800686a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800686c:	4a0c      	ldr	r2, [pc, #48]	; (80068a0 <pxPortInitialiseStack+0x64>)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3b14      	subs	r3, #20
 8006876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3b04      	subs	r3, #4
 8006882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f06f 0202 	mvn.w	r2, #2
 800688a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3b20      	subs	r3, #32
 8006890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006892:	68fb      	ldr	r3, [r7, #12]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	080068a5 	.word	0x080068a5

080068a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068ae:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <prvTaskExitError+0x54>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	d00a      	beq.n	80068ce <prvTaskExitError+0x2a>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	60fb      	str	r3, [r7, #12]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <prvTaskExitError+0x28>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	60bb      	str	r3, [r7, #8]
}
 80068e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068e2:	bf00      	nop
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0fc      	beq.n	80068e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	20000010 	.word	0x20000010
 80068fc:	00000000 	.word	0x00000000

08006900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006900:	4b07      	ldr	r3, [pc, #28]	; (8006920 <pxCurrentTCBConst2>)
 8006902:	6819      	ldr	r1, [r3, #0]
 8006904:	6808      	ldr	r0, [r1, #0]
 8006906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690a:	f380 8809 	msr	PSP, r0
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f04f 0000 	mov.w	r0, #0
 8006916:	f380 8811 	msr	BASEPRI, r0
 800691a:	4770      	bx	lr
 800691c:	f3af 8000 	nop.w

08006920 <pxCurrentTCBConst2>:
 8006920:	20000afc 	.word	0x20000afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop

08006928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006928:	4808      	ldr	r0, [pc, #32]	; (800694c <prvPortStartFirstTask+0x24>)
 800692a:	6800      	ldr	r0, [r0, #0]
 800692c:	6800      	ldr	r0, [r0, #0]
 800692e:	f380 8808 	msr	MSP, r0
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f380 8814 	msr	CONTROL, r0
 800693a:	b662      	cpsie	i
 800693c:	b661      	cpsie	f
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	df00      	svc	0
 8006948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800694a:	bf00      	nop
 800694c:	e000ed08 	.word	0xe000ed08

08006950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006956:	4b46      	ldr	r3, [pc, #280]	; (8006a70 <xPortStartScheduler+0x120>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a46      	ldr	r2, [pc, #280]	; (8006a74 <xPortStartScheduler+0x124>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d10a      	bne.n	8006976 <xPortStartScheduler+0x26>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	613b      	str	r3, [r7, #16]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006976:	4b3e      	ldr	r3, [pc, #248]	; (8006a70 <xPortStartScheduler+0x120>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a3f      	ldr	r2, [pc, #252]	; (8006a78 <xPortStartScheduler+0x128>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d10a      	bne.n	8006996 <xPortStartScheduler+0x46>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	60fb      	str	r3, [r7, #12]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006996:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <xPortStartScheduler+0x12c>)
 8006998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	22ff      	movs	r2, #255	; 0xff
 80069a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	4b31      	ldr	r3, [pc, #196]	; (8006a80 <xPortStartScheduler+0x130>)
 80069bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069be:	4b31      	ldr	r3, [pc, #196]	; (8006a84 <xPortStartScheduler+0x134>)
 80069c0:	2207      	movs	r2, #7
 80069c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069c4:	e009      	b.n	80069da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80069c6:	4b2f      	ldr	r3, [pc, #188]	; (8006a84 <xPortStartScheduler+0x134>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	4a2d      	ldr	r2, [pc, #180]	; (8006a84 <xPortStartScheduler+0x134>)
 80069ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e2:	2b80      	cmp	r3, #128	; 0x80
 80069e4:	d0ef      	beq.n	80069c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069e6:	4b27      	ldr	r3, [pc, #156]	; (8006a84 <xPortStartScheduler+0x134>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f1c3 0307 	rsb	r3, r3, #7
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d00a      	beq.n	8006a08 <xPortStartScheduler+0xb8>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	60bb      	str	r3, [r7, #8]
}
 8006a04:	bf00      	nop
 8006a06:	e7fe      	b.n	8006a06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a08:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <xPortStartScheduler+0x134>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <xPortStartScheduler+0x134>)
 8006a10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a12:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <xPortStartScheduler+0x134>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a1a:	4a1a      	ldr	r2, [pc, #104]	; (8006a84 <xPortStartScheduler+0x134>)
 8006a1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a26:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <xPortStartScheduler+0x138>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <xPortStartScheduler+0x138>)
 8006a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a32:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <xPortStartScheduler+0x138>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a14      	ldr	r2, [pc, #80]	; (8006a88 <xPortStartScheduler+0x138>)
 8006a38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a3e:	f000 f8dd 	bl	8006bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a42:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <xPortStartScheduler+0x13c>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a48:	f000 f8fc 	bl	8006c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a4c:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <xPortStartScheduler+0x140>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a0f      	ldr	r2, [pc, #60]	; (8006a90 <xPortStartScheduler+0x140>)
 8006a52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a58:	f7ff ff66 	bl	8006928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a5c:	f7ff f84a 	bl	8005af4 <vTaskSwitchContext>
	prvTaskExitError();
 8006a60:	f7ff ff20 	bl	80068a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	e000ed00 	.word	0xe000ed00
 8006a74:	410fc271 	.word	0x410fc271
 8006a78:	410fc270 	.word	0x410fc270
 8006a7c:	e000e400 	.word	0xe000e400
 8006a80:	20001128 	.word	0x20001128
 8006a84:	2000112c 	.word	0x2000112c
 8006a88:	e000ed20 	.word	0xe000ed20
 8006a8c:	20000010 	.word	0x20000010
 8006a90:	e000ef34 	.word	0xe000ef34

08006a94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	607b      	str	r3, [r7, #4]
}
 8006aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006aae:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <vPortEnterCritical+0x58>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	4a0d      	ldr	r2, [pc, #52]	; (8006aec <vPortEnterCritical+0x58>)
 8006ab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <vPortEnterCritical+0x58>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d10f      	bne.n	8006ae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <vPortEnterCritical+0x5c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	603b      	str	r3, [r7, #0]
}
 8006adc:	bf00      	nop
 8006ade:	e7fe      	b.n	8006ade <vPortEnterCritical+0x4a>
	}
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	20000010 	.word	0x20000010
 8006af0:	e000ed04 	.word	0xe000ed04

08006af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006afa:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <vPortExitCritical+0x50>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <vPortExitCritical+0x24>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	607b      	str	r3, [r7, #4]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <vPortExitCritical+0x50>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	4a09      	ldr	r2, [pc, #36]	; (8006b44 <vPortExitCritical+0x50>)
 8006b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b22:	4b08      	ldr	r3, [pc, #32]	; (8006b44 <vPortExitCritical+0x50>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d105      	bne.n	8006b36 <vPortExitCritical+0x42>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	f383 8811 	msr	BASEPRI, r3
}
 8006b34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000010 	.word	0x20000010
	...

08006b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b50:	f3ef 8009 	mrs	r0, PSP
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <pxCurrentTCBConst>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	f01e 0f10 	tst.w	lr, #16
 8006b60:	bf08      	it	eq
 8006b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	6010      	str	r0, [r2, #0]
 8006b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b74:	f380 8811 	msr	BASEPRI, r0
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f7fe ffb8 	bl	8005af4 <vTaskSwitchContext>
 8006b84:	f04f 0000 	mov.w	r0, #0
 8006b88:	f380 8811 	msr	BASEPRI, r0
 8006b8c:	bc09      	pop	{r0, r3}
 8006b8e:	6819      	ldr	r1, [r3, #0]
 8006b90:	6808      	ldr	r0, [r1, #0]
 8006b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b96:	f01e 0f10 	tst.w	lr, #16
 8006b9a:	bf08      	it	eq
 8006b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ba0:	f380 8809 	msr	PSP, r0
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	f3af 8000 	nop.w

08006bb0 <pxCurrentTCBConst>:
 8006bb0:	20000afc 	.word	0x20000afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop

08006bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	607b      	str	r3, [r7, #4]
}
 8006bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bd2:	f7fe fed5 	bl	8005980 <xTaskIncrementTick>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <xPortSysTickHandler+0x40>)
 8006bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	2300      	movs	r3, #0
 8006be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	f383 8811 	msr	BASEPRI, r3
}
 8006bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <vPortSetupTimerInterrupt+0x34>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <vPortSetupTimerInterrupt+0x38>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <vPortSetupTimerInterrupt+0x3c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a0a      	ldr	r2, [pc, #40]	; (8006c3c <vPortSetupTimerInterrupt+0x40>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	099b      	lsrs	r3, r3, #6
 8006c18:	4a09      	ldr	r2, [pc, #36]	; (8006c40 <vPortSetupTimerInterrupt+0x44>)
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c1e:	4b04      	ldr	r3, [pc, #16]	; (8006c30 <vPortSetupTimerInterrupt+0x34>)
 8006c20:	2207      	movs	r2, #7
 8006c22:	601a      	str	r2, [r3, #0]
}
 8006c24:	bf00      	nop
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	e000e010 	.word	0xe000e010
 8006c34:	e000e018 	.word	0xe000e018
 8006c38:	20000004 	.word	0x20000004
 8006c3c:	10624dd3 	.word	0x10624dd3
 8006c40:	e000e014 	.word	0xe000e014

08006c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c54 <vPortEnableVFP+0x10>
 8006c48:	6801      	ldr	r1, [r0, #0]
 8006c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c4e:	6001      	str	r1, [r0, #0]
 8006c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c52:	bf00      	nop
 8006c54:	e000ed88 	.word	0xe000ed88

08006c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c5e:	f3ef 8305 	mrs	r3, IPSR
 8006c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b0f      	cmp	r3, #15
 8006c68:	d914      	bls.n	8006c94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c6a:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <vPortValidateInterruptPriority+0x70>)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c74:	4b15      	ldr	r3, [pc, #84]	; (8006ccc <vPortValidateInterruptPriority+0x74>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	7afa      	ldrb	r2, [r7, #11]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d20a      	bcs.n	8006c94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	607b      	str	r3, [r7, #4]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c94:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <vPortValidateInterruptPriority+0x78>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c9c:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <vPortValidateInterruptPriority+0x7c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d90a      	bls.n	8006cba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	603b      	str	r3, [r7, #0]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <vPortValidateInterruptPriority+0x60>
	}
 8006cba:	bf00      	nop
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	e000e3f0 	.word	0xe000e3f0
 8006ccc:	20001128 	.word	0x20001128
 8006cd0:	e000ed0c 	.word	0xe000ed0c
 8006cd4:	2000112c 	.word	0x2000112c

08006cd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ce4:	f7fe fd90 	bl	8005808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ce8:	4b5b      	ldr	r3, [pc, #364]	; (8006e58 <pvPortMalloc+0x180>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cf0:	f000 f920 	bl	8006f34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cf4:	4b59      	ldr	r3, [pc, #356]	; (8006e5c <pvPortMalloc+0x184>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f040 8093 	bne.w	8006e28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d01d      	beq.n	8006d44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d08:	2208      	movs	r2, #8
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d014      	beq.n	8006d44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f023 0307 	bic.w	r3, r3, #7
 8006d20:	3308      	adds	r3, #8
 8006d22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <pvPortMalloc+0x6c>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	617b      	str	r3, [r7, #20]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d06e      	beq.n	8006e28 <pvPortMalloc+0x150>
 8006d4a:	4b45      	ldr	r3, [pc, #276]	; (8006e60 <pvPortMalloc+0x188>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d869      	bhi.n	8006e28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d54:	4b43      	ldr	r3, [pc, #268]	; (8006e64 <pvPortMalloc+0x18c>)
 8006d56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d58:	4b42      	ldr	r3, [pc, #264]	; (8006e64 <pvPortMalloc+0x18c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d5e:	e004      	b.n	8006d6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d903      	bls.n	8006d7c <pvPortMalloc+0xa4>
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1f1      	bne.n	8006d60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d7c:	4b36      	ldr	r3, [pc, #216]	; (8006e58 <pvPortMalloc+0x180>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d050      	beq.n	8006e28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2208      	movs	r2, #8
 8006d8c:	4413      	add	r3, r2
 8006d8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	1ad2      	subs	r2, r2, r3
 8006da0:	2308      	movs	r3, #8
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d91f      	bls.n	8006de8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4413      	add	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <pvPortMalloc+0xf8>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	613b      	str	r3, [r7, #16]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006de2:	69b8      	ldr	r0, [r7, #24]
 8006de4:	f000 f908 	bl	8006ff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006de8:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <pvPortMalloc+0x188>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	4a1b      	ldr	r2, [pc, #108]	; (8006e60 <pvPortMalloc+0x188>)
 8006df4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006df6:	4b1a      	ldr	r3, [pc, #104]	; (8006e60 <pvPortMalloc+0x188>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <pvPortMalloc+0x190>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d203      	bcs.n	8006e0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e02:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <pvPortMalloc+0x188>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <pvPortMalloc+0x190>)
 8006e08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <pvPortMalloc+0x184>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e1e:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <pvPortMalloc+0x194>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3301      	adds	r3, #1
 8006e24:	4a11      	ldr	r2, [pc, #68]	; (8006e6c <pvPortMalloc+0x194>)
 8006e26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e28:	f7fe fcfc 	bl	8005824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <pvPortMalloc+0x174>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60fb      	str	r3, [r7, #12]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <pvPortMalloc+0x172>
	return pvReturn;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3728      	adds	r7, #40	; 0x28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20004d38 	.word	0x20004d38
 8006e5c:	20004d4c 	.word	0x20004d4c
 8006e60:	20004d3c 	.word	0x20004d3c
 8006e64:	20004d30 	.word	0x20004d30
 8006e68:	20004d40 	.word	0x20004d40
 8006e6c:	20004d44 	.word	0x20004d44

08006e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d04d      	beq.n	8006f1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e82:	2308      	movs	r3, #8
 8006e84:	425b      	negs	r3, r3
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4413      	add	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <vPortFree+0xb8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <vPortFree+0x44>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	60fb      	str	r3, [r7, #12]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <vPortFree+0x62>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60bb      	str	r3, [r7, #8]
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <vPortFree+0xb8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4013      	ands	r3, r2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01e      	beq.n	8006f1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d11a      	bne.n	8006f1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <vPortFree+0xb8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	43db      	mvns	r3, r3
 8006ef2:	401a      	ands	r2, r3
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ef8:	f7fe fc86 	bl	8005808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <vPortFree+0xbc>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4413      	add	r3, r2
 8006f06:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <vPortFree+0xbc>)
 8006f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f0a:	6938      	ldr	r0, [r7, #16]
 8006f0c:	f000 f874 	bl	8006ff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f10:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <vPortFree+0xc0>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	4a06      	ldr	r2, [pc, #24]	; (8006f30 <vPortFree+0xc0>)
 8006f18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f1a:	f7fe fc83 	bl	8005824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f1e:	bf00      	nop
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20004d4c 	.word	0x20004d4c
 8006f2c:	20004d3c 	.word	0x20004d3c
 8006f30:	20004d48 	.word	0x20004d48

08006f34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f40:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <prvHeapInit+0xac>)
 8006f42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00c      	beq.n	8006f68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3307      	adds	r3, #7
 8006f52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0307 	bic.w	r3, r3, #7
 8006f5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	4a1f      	ldr	r2, [pc, #124]	; (8006fe0 <prvHeapInit+0xac>)
 8006f64:	4413      	add	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f6c:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <prvHeapInit+0xb0>)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f72:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <prvHeapInit+0xb0>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f80:	2208      	movs	r2, #8
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	1a9b      	subs	r3, r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0307 	bic.w	r3, r3, #7
 8006f8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <prvHeapInit+0xb4>)
 8006f94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <prvHeapInit+0xb4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <prvHeapInit+0xb4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <prvHeapInit+0xb4>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	4a0a      	ldr	r2, [pc, #40]	; (8006fec <prvHeapInit+0xb8>)
 8006fc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	4a09      	ldr	r2, [pc, #36]	; (8006ff0 <prvHeapInit+0xbc>)
 8006fca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fcc:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <prvHeapInit+0xc0>)
 8006fce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fd2:	601a      	str	r2, [r3, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	20001130 	.word	0x20001130
 8006fe4:	20004d30 	.word	0x20004d30
 8006fe8:	20004d38 	.word	0x20004d38
 8006fec:	20004d40 	.word	0x20004d40
 8006ff0:	20004d3c 	.word	0x20004d3c
 8006ff4:	20004d4c 	.word	0x20004d4c

08006ff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007000:	4b28      	ldr	r3, [pc, #160]	; (80070a4 <prvInsertBlockIntoFreeList+0xac>)
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e002      	b.n	800700c <prvInsertBlockIntoFreeList+0x14>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	429a      	cmp	r2, r3
 8007014:	d8f7      	bhi.n	8007006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4413      	add	r3, r2
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	429a      	cmp	r2, r3
 8007026:	d108      	bne.n	800703a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	441a      	add	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	441a      	add	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d118      	bne.n	8007080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d00d      	beq.n	8007076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	441a      	add	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	e008      	b.n	8007088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	e003      	b.n	8007088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	d002      	beq.n	8007096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20004d30 	.word	0x20004d30
 80070a8:	20004d38 	.word	0x20004d38

080070ac <gcvt>:
 80070ac:	b530      	push	{r4, r5, lr}
 80070ae:	2200      	movs	r2, #0
 80070b0:	b085      	sub	sp, #20
 80070b2:	460c      	mov	r4, r1
 80070b4:	4605      	mov	r5, r0
 80070b6:	2300      	movs	r3, #0
 80070b8:	ec51 0b10 	vmov	r0, r1, d0
 80070bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80070c0:	f7f9 fd2c 	bl	8000b1c <__aeabi_dcmplt>
 80070c4:	ed9d 0b02 	vldr	d0, [sp, #8]
 80070c8:	4622      	mov	r2, r4
 80070ca:	b118      	cbz	r0, 80070d4 <gcvt+0x28>
 80070cc:	232d      	movs	r3, #45	; 0x2d
 80070ce:	f802 3b01 	strb.w	r3, [r2], #1
 80070d2:	3d01      	subs	r5, #1
 80070d4:	2300      	movs	r3, #0
 80070d6:	4806      	ldr	r0, [pc, #24]	; (80070f0 <gcvt+0x44>)
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	4629      	mov	r1, r5
 80070dc:	2367      	movs	r3, #103	; 0x67
 80070de:	6800      	ldr	r0, [r0, #0]
 80070e0:	f001 fe16 	bl	8008d10 <_gcvt>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	bf14      	ite	ne
 80070e8:	4620      	movne	r0, r4
 80070ea:	2000      	moveq	r0, #0
 80070ec:	b005      	add	sp, #20
 80070ee:	bd30      	pop	{r4, r5, pc}
 80070f0:	20000014 	.word	0x20000014

080070f4 <__errno>:
 80070f4:	4b01      	ldr	r3, [pc, #4]	; (80070fc <__errno+0x8>)
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20000014 	.word	0x20000014

08007100 <std>:
 8007100:	2300      	movs	r3, #0
 8007102:	b510      	push	{r4, lr}
 8007104:	4604      	mov	r4, r0
 8007106:	e9c0 3300 	strd	r3, r3, [r0]
 800710a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800710e:	6083      	str	r3, [r0, #8]
 8007110:	8181      	strh	r1, [r0, #12]
 8007112:	6643      	str	r3, [r0, #100]	; 0x64
 8007114:	81c2      	strh	r2, [r0, #14]
 8007116:	6183      	str	r3, [r0, #24]
 8007118:	4619      	mov	r1, r3
 800711a:	2208      	movs	r2, #8
 800711c:	305c      	adds	r0, #92	; 0x5c
 800711e:	f000 f91a 	bl	8007356 <memset>
 8007122:	4b05      	ldr	r3, [pc, #20]	; (8007138 <std+0x38>)
 8007124:	6263      	str	r3, [r4, #36]	; 0x24
 8007126:	4b05      	ldr	r3, [pc, #20]	; (800713c <std+0x3c>)
 8007128:	62a3      	str	r3, [r4, #40]	; 0x28
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <std+0x40>)
 800712c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800712e:	4b05      	ldr	r3, [pc, #20]	; (8007144 <std+0x44>)
 8007130:	6224      	str	r4, [r4, #32]
 8007132:	6323      	str	r3, [r4, #48]	; 0x30
 8007134:	bd10      	pop	{r4, pc}
 8007136:	bf00      	nop
 8007138:	08007e59 	.word	0x08007e59
 800713c:	08007e7b 	.word	0x08007e7b
 8007140:	08007eb3 	.word	0x08007eb3
 8007144:	08007ed7 	.word	0x08007ed7

08007148 <_cleanup_r>:
 8007148:	4901      	ldr	r1, [pc, #4]	; (8007150 <_cleanup_r+0x8>)
 800714a:	f000 b8af 	b.w	80072ac <_fwalk_reent>
 800714e:	bf00      	nop
 8007150:	08008f9d 	.word	0x08008f9d

08007154 <__sfmoreglue>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	2268      	movs	r2, #104	; 0x68
 8007158:	1e4d      	subs	r5, r1, #1
 800715a:	4355      	muls	r5, r2
 800715c:	460e      	mov	r6, r1
 800715e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007162:	f000 f921 	bl	80073a8 <_malloc_r>
 8007166:	4604      	mov	r4, r0
 8007168:	b140      	cbz	r0, 800717c <__sfmoreglue+0x28>
 800716a:	2100      	movs	r1, #0
 800716c:	e9c0 1600 	strd	r1, r6, [r0]
 8007170:	300c      	adds	r0, #12
 8007172:	60a0      	str	r0, [r4, #8]
 8007174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007178:	f000 f8ed 	bl	8007356 <memset>
 800717c:	4620      	mov	r0, r4
 800717e:	bd70      	pop	{r4, r5, r6, pc}

08007180 <__sfp_lock_acquire>:
 8007180:	4801      	ldr	r0, [pc, #4]	; (8007188 <__sfp_lock_acquire+0x8>)
 8007182:	f000 b8d8 	b.w	8007336 <__retarget_lock_acquire_recursive>
 8007186:	bf00      	nop
 8007188:	20004d51 	.word	0x20004d51

0800718c <__sfp_lock_release>:
 800718c:	4801      	ldr	r0, [pc, #4]	; (8007194 <__sfp_lock_release+0x8>)
 800718e:	f000 b8d3 	b.w	8007338 <__retarget_lock_release_recursive>
 8007192:	bf00      	nop
 8007194:	20004d51 	.word	0x20004d51

08007198 <__sinit_lock_acquire>:
 8007198:	4801      	ldr	r0, [pc, #4]	; (80071a0 <__sinit_lock_acquire+0x8>)
 800719a:	f000 b8cc 	b.w	8007336 <__retarget_lock_acquire_recursive>
 800719e:	bf00      	nop
 80071a0:	20004d52 	.word	0x20004d52

080071a4 <__sinit_lock_release>:
 80071a4:	4801      	ldr	r0, [pc, #4]	; (80071ac <__sinit_lock_release+0x8>)
 80071a6:	f000 b8c7 	b.w	8007338 <__retarget_lock_release_recursive>
 80071aa:	bf00      	nop
 80071ac:	20004d52 	.word	0x20004d52

080071b0 <__sinit>:
 80071b0:	b510      	push	{r4, lr}
 80071b2:	4604      	mov	r4, r0
 80071b4:	f7ff fff0 	bl	8007198 <__sinit_lock_acquire>
 80071b8:	69a3      	ldr	r3, [r4, #24]
 80071ba:	b11b      	cbz	r3, 80071c4 <__sinit+0x14>
 80071bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c0:	f7ff bff0 	b.w	80071a4 <__sinit_lock_release>
 80071c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071c8:	6523      	str	r3, [r4, #80]	; 0x50
 80071ca:	4b13      	ldr	r3, [pc, #76]	; (8007218 <__sinit+0x68>)
 80071cc:	4a13      	ldr	r2, [pc, #76]	; (800721c <__sinit+0x6c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80071d2:	42a3      	cmp	r3, r4
 80071d4:	bf04      	itt	eq
 80071d6:	2301      	moveq	r3, #1
 80071d8:	61a3      	streq	r3, [r4, #24]
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 f820 	bl	8007220 <__sfp>
 80071e0:	6060      	str	r0, [r4, #4]
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 f81c 	bl	8007220 <__sfp>
 80071e8:	60a0      	str	r0, [r4, #8]
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 f818 	bl	8007220 <__sfp>
 80071f0:	2200      	movs	r2, #0
 80071f2:	60e0      	str	r0, [r4, #12]
 80071f4:	2104      	movs	r1, #4
 80071f6:	6860      	ldr	r0, [r4, #4]
 80071f8:	f7ff ff82 	bl	8007100 <std>
 80071fc:	68a0      	ldr	r0, [r4, #8]
 80071fe:	2201      	movs	r2, #1
 8007200:	2109      	movs	r1, #9
 8007202:	f7ff ff7d 	bl	8007100 <std>
 8007206:	68e0      	ldr	r0, [r4, #12]
 8007208:	2202      	movs	r2, #2
 800720a:	2112      	movs	r1, #18
 800720c:	f7ff ff78 	bl	8007100 <std>
 8007210:	2301      	movs	r3, #1
 8007212:	61a3      	str	r3, [r4, #24]
 8007214:	e7d2      	b.n	80071bc <__sinit+0xc>
 8007216:	bf00      	nop
 8007218:	0800b1ac 	.word	0x0800b1ac
 800721c:	08007149 	.word	0x08007149

08007220 <__sfp>:
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007222:	4607      	mov	r7, r0
 8007224:	f7ff ffac 	bl	8007180 <__sfp_lock_acquire>
 8007228:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <__sfp+0x84>)
 800722a:	681e      	ldr	r6, [r3, #0]
 800722c:	69b3      	ldr	r3, [r6, #24]
 800722e:	b913      	cbnz	r3, 8007236 <__sfp+0x16>
 8007230:	4630      	mov	r0, r6
 8007232:	f7ff ffbd 	bl	80071b0 <__sinit>
 8007236:	3648      	adds	r6, #72	; 0x48
 8007238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800723c:	3b01      	subs	r3, #1
 800723e:	d503      	bpl.n	8007248 <__sfp+0x28>
 8007240:	6833      	ldr	r3, [r6, #0]
 8007242:	b30b      	cbz	r3, 8007288 <__sfp+0x68>
 8007244:	6836      	ldr	r6, [r6, #0]
 8007246:	e7f7      	b.n	8007238 <__sfp+0x18>
 8007248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800724c:	b9d5      	cbnz	r5, 8007284 <__sfp+0x64>
 800724e:	4b16      	ldr	r3, [pc, #88]	; (80072a8 <__sfp+0x88>)
 8007250:	60e3      	str	r3, [r4, #12]
 8007252:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007256:	6665      	str	r5, [r4, #100]	; 0x64
 8007258:	f000 f86c 	bl	8007334 <__retarget_lock_init_recursive>
 800725c:	f7ff ff96 	bl	800718c <__sfp_lock_release>
 8007260:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007264:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007268:	6025      	str	r5, [r4, #0]
 800726a:	61a5      	str	r5, [r4, #24]
 800726c:	2208      	movs	r2, #8
 800726e:	4629      	mov	r1, r5
 8007270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007274:	f000 f86f 	bl	8007356 <memset>
 8007278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800727c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007280:	4620      	mov	r0, r4
 8007282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007284:	3468      	adds	r4, #104	; 0x68
 8007286:	e7d9      	b.n	800723c <__sfp+0x1c>
 8007288:	2104      	movs	r1, #4
 800728a:	4638      	mov	r0, r7
 800728c:	f7ff ff62 	bl	8007154 <__sfmoreglue>
 8007290:	4604      	mov	r4, r0
 8007292:	6030      	str	r0, [r6, #0]
 8007294:	2800      	cmp	r0, #0
 8007296:	d1d5      	bne.n	8007244 <__sfp+0x24>
 8007298:	f7ff ff78 	bl	800718c <__sfp_lock_release>
 800729c:	230c      	movs	r3, #12
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	e7ee      	b.n	8007280 <__sfp+0x60>
 80072a2:	bf00      	nop
 80072a4:	0800b1ac 	.word	0x0800b1ac
 80072a8:	ffff0001 	.word	0xffff0001

080072ac <_fwalk_reent>:
 80072ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b0:	4606      	mov	r6, r0
 80072b2:	4688      	mov	r8, r1
 80072b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072b8:	2700      	movs	r7, #0
 80072ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072be:	f1b9 0901 	subs.w	r9, r9, #1
 80072c2:	d505      	bpl.n	80072d0 <_fwalk_reent+0x24>
 80072c4:	6824      	ldr	r4, [r4, #0]
 80072c6:	2c00      	cmp	r4, #0
 80072c8:	d1f7      	bne.n	80072ba <_fwalk_reent+0xe>
 80072ca:	4638      	mov	r0, r7
 80072cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d0:	89ab      	ldrh	r3, [r5, #12]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d907      	bls.n	80072e6 <_fwalk_reent+0x3a>
 80072d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072da:	3301      	adds	r3, #1
 80072dc:	d003      	beq.n	80072e6 <_fwalk_reent+0x3a>
 80072de:	4629      	mov	r1, r5
 80072e0:	4630      	mov	r0, r6
 80072e2:	47c0      	blx	r8
 80072e4:	4307      	orrs	r7, r0
 80072e6:	3568      	adds	r5, #104	; 0x68
 80072e8:	e7e9      	b.n	80072be <_fwalk_reent+0x12>
	...

080072ec <__libc_init_array>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	4d0d      	ldr	r5, [pc, #52]	; (8007324 <__libc_init_array+0x38>)
 80072f0:	4c0d      	ldr	r4, [pc, #52]	; (8007328 <__libc_init_array+0x3c>)
 80072f2:	1b64      	subs	r4, r4, r5
 80072f4:	10a4      	asrs	r4, r4, #2
 80072f6:	2600      	movs	r6, #0
 80072f8:	42a6      	cmp	r6, r4
 80072fa:	d109      	bne.n	8007310 <__libc_init_array+0x24>
 80072fc:	4d0b      	ldr	r5, [pc, #44]	; (800732c <__libc_init_array+0x40>)
 80072fe:	4c0c      	ldr	r4, [pc, #48]	; (8007330 <__libc_init_array+0x44>)
 8007300:	f003 feac 	bl	800b05c <_init>
 8007304:	1b64      	subs	r4, r4, r5
 8007306:	10a4      	asrs	r4, r4, #2
 8007308:	2600      	movs	r6, #0
 800730a:	42a6      	cmp	r6, r4
 800730c:	d105      	bne.n	800731a <__libc_init_array+0x2e>
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	f855 3b04 	ldr.w	r3, [r5], #4
 8007314:	4798      	blx	r3
 8007316:	3601      	adds	r6, #1
 8007318:	e7ee      	b.n	80072f8 <__libc_init_array+0xc>
 800731a:	f855 3b04 	ldr.w	r3, [r5], #4
 800731e:	4798      	blx	r3
 8007320:	3601      	adds	r6, #1
 8007322:	e7f2      	b.n	800730a <__libc_init_array+0x1e>
 8007324:	0800b708 	.word	0x0800b708
 8007328:	0800b708 	.word	0x0800b708
 800732c:	0800b708 	.word	0x0800b708
 8007330:	0800b70c 	.word	0x0800b70c

08007334 <__retarget_lock_init_recursive>:
 8007334:	4770      	bx	lr

08007336 <__retarget_lock_acquire_recursive>:
 8007336:	4770      	bx	lr

08007338 <__retarget_lock_release_recursive>:
 8007338:	4770      	bx	lr

0800733a <memcpy>:
 800733a:	440a      	add	r2, r1
 800733c:	4291      	cmp	r1, r2
 800733e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007342:	d100      	bne.n	8007346 <memcpy+0xc>
 8007344:	4770      	bx	lr
 8007346:	b510      	push	{r4, lr}
 8007348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007350:	4291      	cmp	r1, r2
 8007352:	d1f9      	bne.n	8007348 <memcpy+0xe>
 8007354:	bd10      	pop	{r4, pc}

08007356 <memset>:
 8007356:	4402      	add	r2, r0
 8007358:	4603      	mov	r3, r0
 800735a:	4293      	cmp	r3, r2
 800735c:	d100      	bne.n	8007360 <memset+0xa>
 800735e:	4770      	bx	lr
 8007360:	f803 1b01 	strb.w	r1, [r3], #1
 8007364:	e7f9      	b.n	800735a <memset+0x4>
	...

08007368 <sbrk_aligned>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	4e0e      	ldr	r6, [pc, #56]	; (80073a4 <sbrk_aligned+0x3c>)
 800736c:	460c      	mov	r4, r1
 800736e:	6831      	ldr	r1, [r6, #0]
 8007370:	4605      	mov	r5, r0
 8007372:	b911      	cbnz	r1, 800737a <sbrk_aligned+0x12>
 8007374:	f000 fd60 	bl	8007e38 <_sbrk_r>
 8007378:	6030      	str	r0, [r6, #0]
 800737a:	4621      	mov	r1, r4
 800737c:	4628      	mov	r0, r5
 800737e:	f000 fd5b 	bl	8007e38 <_sbrk_r>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d00a      	beq.n	800739c <sbrk_aligned+0x34>
 8007386:	1cc4      	adds	r4, r0, #3
 8007388:	f024 0403 	bic.w	r4, r4, #3
 800738c:	42a0      	cmp	r0, r4
 800738e:	d007      	beq.n	80073a0 <sbrk_aligned+0x38>
 8007390:	1a21      	subs	r1, r4, r0
 8007392:	4628      	mov	r0, r5
 8007394:	f000 fd50 	bl	8007e38 <_sbrk_r>
 8007398:	3001      	adds	r0, #1
 800739a:	d101      	bne.n	80073a0 <sbrk_aligned+0x38>
 800739c:	f04f 34ff 	mov.w	r4, #4294967295
 80073a0:	4620      	mov	r0, r4
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	20004d58 	.word	0x20004d58

080073a8 <_malloc_r>:
 80073a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ac:	1ccd      	adds	r5, r1, #3
 80073ae:	f025 0503 	bic.w	r5, r5, #3
 80073b2:	3508      	adds	r5, #8
 80073b4:	2d0c      	cmp	r5, #12
 80073b6:	bf38      	it	cc
 80073b8:	250c      	movcc	r5, #12
 80073ba:	2d00      	cmp	r5, #0
 80073bc:	4607      	mov	r7, r0
 80073be:	db01      	blt.n	80073c4 <_malloc_r+0x1c>
 80073c0:	42a9      	cmp	r1, r5
 80073c2:	d905      	bls.n	80073d0 <_malloc_r+0x28>
 80073c4:	230c      	movs	r3, #12
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	2600      	movs	r6, #0
 80073ca:	4630      	mov	r0, r6
 80073cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d0:	4e2e      	ldr	r6, [pc, #184]	; (800748c <_malloc_r+0xe4>)
 80073d2:	f001 fe3d 	bl	8009050 <__malloc_lock>
 80073d6:	6833      	ldr	r3, [r6, #0]
 80073d8:	461c      	mov	r4, r3
 80073da:	bb34      	cbnz	r4, 800742a <_malloc_r+0x82>
 80073dc:	4629      	mov	r1, r5
 80073de:	4638      	mov	r0, r7
 80073e0:	f7ff ffc2 	bl	8007368 <sbrk_aligned>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	4604      	mov	r4, r0
 80073e8:	d14d      	bne.n	8007486 <_malloc_r+0xde>
 80073ea:	6834      	ldr	r4, [r6, #0]
 80073ec:	4626      	mov	r6, r4
 80073ee:	2e00      	cmp	r6, #0
 80073f0:	d140      	bne.n	8007474 <_malloc_r+0xcc>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	4631      	mov	r1, r6
 80073f6:	4638      	mov	r0, r7
 80073f8:	eb04 0803 	add.w	r8, r4, r3
 80073fc:	f000 fd1c 	bl	8007e38 <_sbrk_r>
 8007400:	4580      	cmp	r8, r0
 8007402:	d13a      	bne.n	800747a <_malloc_r+0xd2>
 8007404:	6821      	ldr	r1, [r4, #0]
 8007406:	3503      	adds	r5, #3
 8007408:	1a6d      	subs	r5, r5, r1
 800740a:	f025 0503 	bic.w	r5, r5, #3
 800740e:	3508      	adds	r5, #8
 8007410:	2d0c      	cmp	r5, #12
 8007412:	bf38      	it	cc
 8007414:	250c      	movcc	r5, #12
 8007416:	4629      	mov	r1, r5
 8007418:	4638      	mov	r0, r7
 800741a:	f7ff ffa5 	bl	8007368 <sbrk_aligned>
 800741e:	3001      	adds	r0, #1
 8007420:	d02b      	beq.n	800747a <_malloc_r+0xd2>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	442b      	add	r3, r5
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	e00e      	b.n	8007448 <_malloc_r+0xa0>
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	1b52      	subs	r2, r2, r5
 800742e:	d41e      	bmi.n	800746e <_malloc_r+0xc6>
 8007430:	2a0b      	cmp	r2, #11
 8007432:	d916      	bls.n	8007462 <_malloc_r+0xba>
 8007434:	1961      	adds	r1, r4, r5
 8007436:	42a3      	cmp	r3, r4
 8007438:	6025      	str	r5, [r4, #0]
 800743a:	bf18      	it	ne
 800743c:	6059      	strne	r1, [r3, #4]
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	bf08      	it	eq
 8007442:	6031      	streq	r1, [r6, #0]
 8007444:	5162      	str	r2, [r4, r5]
 8007446:	604b      	str	r3, [r1, #4]
 8007448:	4638      	mov	r0, r7
 800744a:	f104 060b 	add.w	r6, r4, #11
 800744e:	f001 fe05 	bl	800905c <__malloc_unlock>
 8007452:	f026 0607 	bic.w	r6, r6, #7
 8007456:	1d23      	adds	r3, r4, #4
 8007458:	1af2      	subs	r2, r6, r3
 800745a:	d0b6      	beq.n	80073ca <_malloc_r+0x22>
 800745c:	1b9b      	subs	r3, r3, r6
 800745e:	50a3      	str	r3, [r4, r2]
 8007460:	e7b3      	b.n	80073ca <_malloc_r+0x22>
 8007462:	6862      	ldr	r2, [r4, #4]
 8007464:	42a3      	cmp	r3, r4
 8007466:	bf0c      	ite	eq
 8007468:	6032      	streq	r2, [r6, #0]
 800746a:	605a      	strne	r2, [r3, #4]
 800746c:	e7ec      	b.n	8007448 <_malloc_r+0xa0>
 800746e:	4623      	mov	r3, r4
 8007470:	6864      	ldr	r4, [r4, #4]
 8007472:	e7b2      	b.n	80073da <_malloc_r+0x32>
 8007474:	4634      	mov	r4, r6
 8007476:	6876      	ldr	r6, [r6, #4]
 8007478:	e7b9      	b.n	80073ee <_malloc_r+0x46>
 800747a:	230c      	movs	r3, #12
 800747c:	603b      	str	r3, [r7, #0]
 800747e:	4638      	mov	r0, r7
 8007480:	f001 fdec 	bl	800905c <__malloc_unlock>
 8007484:	e7a1      	b.n	80073ca <_malloc_r+0x22>
 8007486:	6025      	str	r5, [r4, #0]
 8007488:	e7de      	b.n	8007448 <_malloc_r+0xa0>
 800748a:	bf00      	nop
 800748c:	20004d54 	.word	0x20004d54

08007490 <__cvt>:
 8007490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	ec55 4b10 	vmov	r4, r5, d0
 8007498:	2d00      	cmp	r5, #0
 800749a:	460e      	mov	r6, r1
 800749c:	4619      	mov	r1, r3
 800749e:	462b      	mov	r3, r5
 80074a0:	bfbb      	ittet	lt
 80074a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074a6:	461d      	movlt	r5, r3
 80074a8:	2300      	movge	r3, #0
 80074aa:	232d      	movlt	r3, #45	; 0x2d
 80074ac:	700b      	strb	r3, [r1, #0]
 80074ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074b4:	4691      	mov	r9, r2
 80074b6:	f023 0820 	bic.w	r8, r3, #32
 80074ba:	bfbc      	itt	lt
 80074bc:	4622      	movlt	r2, r4
 80074be:	4614      	movlt	r4, r2
 80074c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074c4:	d005      	beq.n	80074d2 <__cvt+0x42>
 80074c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074ca:	d100      	bne.n	80074ce <__cvt+0x3e>
 80074cc:	3601      	adds	r6, #1
 80074ce:	2102      	movs	r1, #2
 80074d0:	e000      	b.n	80074d4 <__cvt+0x44>
 80074d2:	2103      	movs	r1, #3
 80074d4:	ab03      	add	r3, sp, #12
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	ab02      	add	r3, sp, #8
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	ec45 4b10 	vmov	d0, r4, r5
 80074e0:	4653      	mov	r3, sl
 80074e2:	4632      	mov	r2, r6
 80074e4:	f000 fdac 	bl	8008040 <_dtoa_r>
 80074e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074ec:	4607      	mov	r7, r0
 80074ee:	d102      	bne.n	80074f6 <__cvt+0x66>
 80074f0:	f019 0f01 	tst.w	r9, #1
 80074f4:	d022      	beq.n	800753c <__cvt+0xac>
 80074f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074fa:	eb07 0906 	add.w	r9, r7, r6
 80074fe:	d110      	bne.n	8007522 <__cvt+0x92>
 8007500:	783b      	ldrb	r3, [r7, #0]
 8007502:	2b30      	cmp	r3, #48	; 0x30
 8007504:	d10a      	bne.n	800751c <__cvt+0x8c>
 8007506:	2200      	movs	r2, #0
 8007508:	2300      	movs	r3, #0
 800750a:	4620      	mov	r0, r4
 800750c:	4629      	mov	r1, r5
 800750e:	f7f9 fafb 	bl	8000b08 <__aeabi_dcmpeq>
 8007512:	b918      	cbnz	r0, 800751c <__cvt+0x8c>
 8007514:	f1c6 0601 	rsb	r6, r6, #1
 8007518:	f8ca 6000 	str.w	r6, [sl]
 800751c:	f8da 3000 	ldr.w	r3, [sl]
 8007520:	4499      	add	r9, r3
 8007522:	2200      	movs	r2, #0
 8007524:	2300      	movs	r3, #0
 8007526:	4620      	mov	r0, r4
 8007528:	4629      	mov	r1, r5
 800752a:	f7f9 faed 	bl	8000b08 <__aeabi_dcmpeq>
 800752e:	b108      	cbz	r0, 8007534 <__cvt+0xa4>
 8007530:	f8cd 900c 	str.w	r9, [sp, #12]
 8007534:	2230      	movs	r2, #48	; 0x30
 8007536:	9b03      	ldr	r3, [sp, #12]
 8007538:	454b      	cmp	r3, r9
 800753a:	d307      	bcc.n	800754c <__cvt+0xbc>
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007540:	1bdb      	subs	r3, r3, r7
 8007542:	4638      	mov	r0, r7
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	b004      	add	sp, #16
 8007548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754c:	1c59      	adds	r1, r3, #1
 800754e:	9103      	str	r1, [sp, #12]
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	e7f0      	b.n	8007536 <__cvt+0xa6>

08007554 <__exponent>:
 8007554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007556:	4603      	mov	r3, r0
 8007558:	2900      	cmp	r1, #0
 800755a:	bfb8      	it	lt
 800755c:	4249      	neglt	r1, r1
 800755e:	f803 2b02 	strb.w	r2, [r3], #2
 8007562:	bfb4      	ite	lt
 8007564:	222d      	movlt	r2, #45	; 0x2d
 8007566:	222b      	movge	r2, #43	; 0x2b
 8007568:	2909      	cmp	r1, #9
 800756a:	7042      	strb	r2, [r0, #1]
 800756c:	dd2a      	ble.n	80075c4 <__exponent+0x70>
 800756e:	f10d 0407 	add.w	r4, sp, #7
 8007572:	46a4      	mov	ip, r4
 8007574:	270a      	movs	r7, #10
 8007576:	46a6      	mov	lr, r4
 8007578:	460a      	mov	r2, r1
 800757a:	fb91 f6f7 	sdiv	r6, r1, r7
 800757e:	fb07 1516 	mls	r5, r7, r6, r1
 8007582:	3530      	adds	r5, #48	; 0x30
 8007584:	2a63      	cmp	r2, #99	; 0x63
 8007586:	f104 34ff 	add.w	r4, r4, #4294967295
 800758a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800758e:	4631      	mov	r1, r6
 8007590:	dcf1      	bgt.n	8007576 <__exponent+0x22>
 8007592:	3130      	adds	r1, #48	; 0x30
 8007594:	f1ae 0502 	sub.w	r5, lr, #2
 8007598:	f804 1c01 	strb.w	r1, [r4, #-1]
 800759c:	1c44      	adds	r4, r0, #1
 800759e:	4629      	mov	r1, r5
 80075a0:	4561      	cmp	r1, ip
 80075a2:	d30a      	bcc.n	80075ba <__exponent+0x66>
 80075a4:	f10d 0209 	add.w	r2, sp, #9
 80075a8:	eba2 020e 	sub.w	r2, r2, lr
 80075ac:	4565      	cmp	r5, ip
 80075ae:	bf88      	it	hi
 80075b0:	2200      	movhi	r2, #0
 80075b2:	4413      	add	r3, r2
 80075b4:	1a18      	subs	r0, r3, r0
 80075b6:	b003      	add	sp, #12
 80075b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80075c2:	e7ed      	b.n	80075a0 <__exponent+0x4c>
 80075c4:	2330      	movs	r3, #48	; 0x30
 80075c6:	3130      	adds	r1, #48	; 0x30
 80075c8:	7083      	strb	r3, [r0, #2]
 80075ca:	70c1      	strb	r1, [r0, #3]
 80075cc:	1d03      	adds	r3, r0, #4
 80075ce:	e7f1      	b.n	80075b4 <__exponent+0x60>

080075d0 <_printf_float>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	ed2d 8b02 	vpush	{d8}
 80075d8:	b08d      	sub	sp, #52	; 0x34
 80075da:	460c      	mov	r4, r1
 80075dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075e0:	4616      	mov	r6, r2
 80075e2:	461f      	mov	r7, r3
 80075e4:	4605      	mov	r5, r0
 80075e6:	f001 fd15 	bl	8009014 <_localeconv_r>
 80075ea:	f8d0 a000 	ldr.w	sl, [r0]
 80075ee:	4650      	mov	r0, sl
 80075f0:	f7f8 fe0e 	bl	8000210 <strlen>
 80075f4:	2300      	movs	r3, #0
 80075f6:	930a      	str	r3, [sp, #40]	; 0x28
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	9305      	str	r3, [sp, #20]
 80075fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007600:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007604:	3307      	adds	r3, #7
 8007606:	f023 0307 	bic.w	r3, r3, #7
 800760a:	f103 0208 	add.w	r2, r3, #8
 800760e:	f8c8 2000 	str.w	r2, [r8]
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800761a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800761e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007622:	9307      	str	r3, [sp, #28]
 8007624:	f8cd 8018 	str.w	r8, [sp, #24]
 8007628:	ee08 0a10 	vmov	s16, r0
 800762c:	4b9f      	ldr	r3, [pc, #636]	; (80078ac <_printf_float+0x2dc>)
 800762e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007632:	f04f 32ff 	mov.w	r2, #4294967295
 8007636:	f7f9 fa99 	bl	8000b6c <__aeabi_dcmpun>
 800763a:	bb88      	cbnz	r0, 80076a0 <_printf_float+0xd0>
 800763c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007640:	4b9a      	ldr	r3, [pc, #616]	; (80078ac <_printf_float+0x2dc>)
 8007642:	f04f 32ff 	mov.w	r2, #4294967295
 8007646:	f7f9 fa73 	bl	8000b30 <__aeabi_dcmple>
 800764a:	bb48      	cbnz	r0, 80076a0 <_printf_float+0xd0>
 800764c:	2200      	movs	r2, #0
 800764e:	2300      	movs	r3, #0
 8007650:	4640      	mov	r0, r8
 8007652:	4649      	mov	r1, r9
 8007654:	f7f9 fa62 	bl	8000b1c <__aeabi_dcmplt>
 8007658:	b110      	cbz	r0, 8007660 <_printf_float+0x90>
 800765a:	232d      	movs	r3, #45	; 0x2d
 800765c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007660:	4b93      	ldr	r3, [pc, #588]	; (80078b0 <_printf_float+0x2e0>)
 8007662:	4894      	ldr	r0, [pc, #592]	; (80078b4 <_printf_float+0x2e4>)
 8007664:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007668:	bf94      	ite	ls
 800766a:	4698      	movls	r8, r3
 800766c:	4680      	movhi	r8, r0
 800766e:	2303      	movs	r3, #3
 8007670:	6123      	str	r3, [r4, #16]
 8007672:	9b05      	ldr	r3, [sp, #20]
 8007674:	f023 0204 	bic.w	r2, r3, #4
 8007678:	6022      	str	r2, [r4, #0]
 800767a:	f04f 0900 	mov.w	r9, #0
 800767e:	9700      	str	r7, [sp, #0]
 8007680:	4633      	mov	r3, r6
 8007682:	aa0b      	add	r2, sp, #44	; 0x2c
 8007684:	4621      	mov	r1, r4
 8007686:	4628      	mov	r0, r5
 8007688:	f000 f9d8 	bl	8007a3c <_printf_common>
 800768c:	3001      	adds	r0, #1
 800768e:	f040 8090 	bne.w	80077b2 <_printf_float+0x1e2>
 8007692:	f04f 30ff 	mov.w	r0, #4294967295
 8007696:	b00d      	add	sp, #52	; 0x34
 8007698:	ecbd 8b02 	vpop	{d8}
 800769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a0:	4642      	mov	r2, r8
 80076a2:	464b      	mov	r3, r9
 80076a4:	4640      	mov	r0, r8
 80076a6:	4649      	mov	r1, r9
 80076a8:	f7f9 fa60 	bl	8000b6c <__aeabi_dcmpun>
 80076ac:	b140      	cbz	r0, 80076c0 <_printf_float+0xf0>
 80076ae:	464b      	mov	r3, r9
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bfbc      	itt	lt
 80076b4:	232d      	movlt	r3, #45	; 0x2d
 80076b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076ba:	487f      	ldr	r0, [pc, #508]	; (80078b8 <_printf_float+0x2e8>)
 80076bc:	4b7f      	ldr	r3, [pc, #508]	; (80078bc <_printf_float+0x2ec>)
 80076be:	e7d1      	b.n	8007664 <_printf_float+0x94>
 80076c0:	6863      	ldr	r3, [r4, #4]
 80076c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076c6:	9206      	str	r2, [sp, #24]
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	d13f      	bne.n	800774c <_printf_float+0x17c>
 80076cc:	2306      	movs	r3, #6
 80076ce:	6063      	str	r3, [r4, #4]
 80076d0:	9b05      	ldr	r3, [sp, #20]
 80076d2:	6861      	ldr	r1, [r4, #4]
 80076d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076d8:	2300      	movs	r3, #0
 80076da:	9303      	str	r3, [sp, #12]
 80076dc:	ab0a      	add	r3, sp, #40	; 0x28
 80076de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076e2:	ab09      	add	r3, sp, #36	; 0x24
 80076e4:	ec49 8b10 	vmov	d0, r8, r9
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	6022      	str	r2, [r4, #0]
 80076ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076f0:	4628      	mov	r0, r5
 80076f2:	f7ff fecd 	bl	8007490 <__cvt>
 80076f6:	9b06      	ldr	r3, [sp, #24]
 80076f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076fa:	2b47      	cmp	r3, #71	; 0x47
 80076fc:	4680      	mov	r8, r0
 80076fe:	d108      	bne.n	8007712 <_printf_float+0x142>
 8007700:	1cc8      	adds	r0, r1, #3
 8007702:	db02      	blt.n	800770a <_printf_float+0x13a>
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	4299      	cmp	r1, r3
 8007708:	dd41      	ble.n	800778e <_printf_float+0x1be>
 800770a:	f1ab 0b02 	sub.w	fp, fp, #2
 800770e:	fa5f fb8b 	uxtb.w	fp, fp
 8007712:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007716:	d820      	bhi.n	800775a <_printf_float+0x18a>
 8007718:	3901      	subs	r1, #1
 800771a:	465a      	mov	r2, fp
 800771c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007720:	9109      	str	r1, [sp, #36]	; 0x24
 8007722:	f7ff ff17 	bl	8007554 <__exponent>
 8007726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007728:	1813      	adds	r3, r2, r0
 800772a:	2a01      	cmp	r2, #1
 800772c:	4681      	mov	r9, r0
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	dc02      	bgt.n	8007738 <_printf_float+0x168>
 8007732:	6822      	ldr	r2, [r4, #0]
 8007734:	07d2      	lsls	r2, r2, #31
 8007736:	d501      	bpl.n	800773c <_printf_float+0x16c>
 8007738:	3301      	adds	r3, #1
 800773a:	6123      	str	r3, [r4, #16]
 800773c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007740:	2b00      	cmp	r3, #0
 8007742:	d09c      	beq.n	800767e <_printf_float+0xae>
 8007744:	232d      	movs	r3, #45	; 0x2d
 8007746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800774a:	e798      	b.n	800767e <_printf_float+0xae>
 800774c:	9a06      	ldr	r2, [sp, #24]
 800774e:	2a47      	cmp	r2, #71	; 0x47
 8007750:	d1be      	bne.n	80076d0 <_printf_float+0x100>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1bc      	bne.n	80076d0 <_printf_float+0x100>
 8007756:	2301      	movs	r3, #1
 8007758:	e7b9      	b.n	80076ce <_printf_float+0xfe>
 800775a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800775e:	d118      	bne.n	8007792 <_printf_float+0x1c2>
 8007760:	2900      	cmp	r1, #0
 8007762:	6863      	ldr	r3, [r4, #4]
 8007764:	dd0b      	ble.n	800777e <_printf_float+0x1ae>
 8007766:	6121      	str	r1, [r4, #16]
 8007768:	b913      	cbnz	r3, 8007770 <_printf_float+0x1a0>
 800776a:	6822      	ldr	r2, [r4, #0]
 800776c:	07d0      	lsls	r0, r2, #31
 800776e:	d502      	bpl.n	8007776 <_printf_float+0x1a6>
 8007770:	3301      	adds	r3, #1
 8007772:	440b      	add	r3, r1
 8007774:	6123      	str	r3, [r4, #16]
 8007776:	65a1      	str	r1, [r4, #88]	; 0x58
 8007778:	f04f 0900 	mov.w	r9, #0
 800777c:	e7de      	b.n	800773c <_printf_float+0x16c>
 800777e:	b913      	cbnz	r3, 8007786 <_printf_float+0x1b6>
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	07d2      	lsls	r2, r2, #31
 8007784:	d501      	bpl.n	800778a <_printf_float+0x1ba>
 8007786:	3302      	adds	r3, #2
 8007788:	e7f4      	b.n	8007774 <_printf_float+0x1a4>
 800778a:	2301      	movs	r3, #1
 800778c:	e7f2      	b.n	8007774 <_printf_float+0x1a4>
 800778e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007794:	4299      	cmp	r1, r3
 8007796:	db05      	blt.n	80077a4 <_printf_float+0x1d4>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	6121      	str	r1, [r4, #16]
 800779c:	07d8      	lsls	r0, r3, #31
 800779e:	d5ea      	bpl.n	8007776 <_printf_float+0x1a6>
 80077a0:	1c4b      	adds	r3, r1, #1
 80077a2:	e7e7      	b.n	8007774 <_printf_float+0x1a4>
 80077a4:	2900      	cmp	r1, #0
 80077a6:	bfd4      	ite	le
 80077a8:	f1c1 0202 	rsble	r2, r1, #2
 80077ac:	2201      	movgt	r2, #1
 80077ae:	4413      	add	r3, r2
 80077b0:	e7e0      	b.n	8007774 <_printf_float+0x1a4>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	055a      	lsls	r2, r3, #21
 80077b6:	d407      	bmi.n	80077c8 <_printf_float+0x1f8>
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	4642      	mov	r2, r8
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	d12c      	bne.n	8007820 <_printf_float+0x250>
 80077c6:	e764      	b.n	8007692 <_printf_float+0xc2>
 80077c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077cc:	f240 80e0 	bls.w	8007990 <_printf_float+0x3c0>
 80077d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077d4:	2200      	movs	r2, #0
 80077d6:	2300      	movs	r3, #0
 80077d8:	f7f9 f996 	bl	8000b08 <__aeabi_dcmpeq>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d034      	beq.n	800784a <_printf_float+0x27a>
 80077e0:	4a37      	ldr	r2, [pc, #220]	; (80078c0 <_printf_float+0x2f0>)
 80077e2:	2301      	movs	r3, #1
 80077e4:	4631      	mov	r1, r6
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b8      	blx	r7
 80077ea:	3001      	adds	r0, #1
 80077ec:	f43f af51 	beq.w	8007692 <_printf_float+0xc2>
 80077f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077f4:	429a      	cmp	r2, r3
 80077f6:	db02      	blt.n	80077fe <_printf_float+0x22e>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	07d8      	lsls	r0, r3, #31
 80077fc:	d510      	bpl.n	8007820 <_printf_float+0x250>
 80077fe:	ee18 3a10 	vmov	r3, s16
 8007802:	4652      	mov	r2, sl
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f af41 	beq.w	8007692 <_printf_float+0xc2>
 8007810:	f04f 0800 	mov.w	r8, #0
 8007814:	f104 091a 	add.w	r9, r4, #26
 8007818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781a:	3b01      	subs	r3, #1
 800781c:	4543      	cmp	r3, r8
 800781e:	dc09      	bgt.n	8007834 <_printf_float+0x264>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	079b      	lsls	r3, r3, #30
 8007824:	f100 8105 	bmi.w	8007a32 <_printf_float+0x462>
 8007828:	68e0      	ldr	r0, [r4, #12]
 800782a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782c:	4298      	cmp	r0, r3
 800782e:	bfb8      	it	lt
 8007830:	4618      	movlt	r0, r3
 8007832:	e730      	b.n	8007696 <_printf_float+0xc6>
 8007834:	2301      	movs	r3, #1
 8007836:	464a      	mov	r2, r9
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	f43f af27 	beq.w	8007692 <_printf_float+0xc2>
 8007844:	f108 0801 	add.w	r8, r8, #1
 8007848:	e7e6      	b.n	8007818 <_printf_float+0x248>
 800784a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc39      	bgt.n	80078c4 <_printf_float+0x2f4>
 8007850:	4a1b      	ldr	r2, [pc, #108]	; (80078c0 <_printf_float+0x2f0>)
 8007852:	2301      	movs	r3, #1
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	47b8      	blx	r7
 800785a:	3001      	adds	r0, #1
 800785c:	f43f af19 	beq.w	8007692 <_printf_float+0xc2>
 8007860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007864:	4313      	orrs	r3, r2
 8007866:	d102      	bne.n	800786e <_printf_float+0x29e>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	07d9      	lsls	r1, r3, #31
 800786c:	d5d8      	bpl.n	8007820 <_printf_float+0x250>
 800786e:	ee18 3a10 	vmov	r3, s16
 8007872:	4652      	mov	r2, sl
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f af09 	beq.w	8007692 <_printf_float+0xc2>
 8007880:	f04f 0900 	mov.w	r9, #0
 8007884:	f104 0a1a 	add.w	sl, r4, #26
 8007888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788a:	425b      	negs	r3, r3
 800788c:	454b      	cmp	r3, r9
 800788e:	dc01      	bgt.n	8007894 <_printf_float+0x2c4>
 8007890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007892:	e792      	b.n	80077ba <_printf_float+0x1ea>
 8007894:	2301      	movs	r3, #1
 8007896:	4652      	mov	r2, sl
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f aef7 	beq.w	8007692 <_printf_float+0xc2>
 80078a4:	f109 0901 	add.w	r9, r9, #1
 80078a8:	e7ee      	b.n	8007888 <_printf_float+0x2b8>
 80078aa:	bf00      	nop
 80078ac:	7fefffff 	.word	0x7fefffff
 80078b0:	0800b1b0 	.word	0x0800b1b0
 80078b4:	0800b1b4 	.word	0x0800b1b4
 80078b8:	0800b1bc 	.word	0x0800b1bc
 80078bc:	0800b1b8 	.word	0x0800b1b8
 80078c0:	0800b1c0 	.word	0x0800b1c0
 80078c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078c8:	429a      	cmp	r2, r3
 80078ca:	bfa8      	it	ge
 80078cc:	461a      	movge	r2, r3
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	4691      	mov	r9, r2
 80078d2:	dc37      	bgt.n	8007944 <_printf_float+0x374>
 80078d4:	f04f 0b00 	mov.w	fp, #0
 80078d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078dc:	f104 021a 	add.w	r2, r4, #26
 80078e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078e2:	9305      	str	r3, [sp, #20]
 80078e4:	eba3 0309 	sub.w	r3, r3, r9
 80078e8:	455b      	cmp	r3, fp
 80078ea:	dc33      	bgt.n	8007954 <_printf_float+0x384>
 80078ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078f0:	429a      	cmp	r2, r3
 80078f2:	db3b      	blt.n	800796c <_printf_float+0x39c>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	07da      	lsls	r2, r3, #31
 80078f8:	d438      	bmi.n	800796c <_printf_float+0x39c>
 80078fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078fc:	9a05      	ldr	r2, [sp, #20]
 80078fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007900:	1a9a      	subs	r2, r3, r2
 8007902:	eba3 0901 	sub.w	r9, r3, r1
 8007906:	4591      	cmp	r9, r2
 8007908:	bfa8      	it	ge
 800790a:	4691      	movge	r9, r2
 800790c:	f1b9 0f00 	cmp.w	r9, #0
 8007910:	dc35      	bgt.n	800797e <_printf_float+0x3ae>
 8007912:	f04f 0800 	mov.w	r8, #0
 8007916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800791a:	f104 0a1a 	add.w	sl, r4, #26
 800791e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	eba3 0309 	sub.w	r3, r3, r9
 8007928:	4543      	cmp	r3, r8
 800792a:	f77f af79 	ble.w	8007820 <_printf_float+0x250>
 800792e:	2301      	movs	r3, #1
 8007930:	4652      	mov	r2, sl
 8007932:	4631      	mov	r1, r6
 8007934:	4628      	mov	r0, r5
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	f43f aeaa 	beq.w	8007692 <_printf_float+0xc2>
 800793e:	f108 0801 	add.w	r8, r8, #1
 8007942:	e7ec      	b.n	800791e <_printf_float+0x34e>
 8007944:	4613      	mov	r3, r2
 8007946:	4631      	mov	r1, r6
 8007948:	4642      	mov	r2, r8
 800794a:	4628      	mov	r0, r5
 800794c:	47b8      	blx	r7
 800794e:	3001      	adds	r0, #1
 8007950:	d1c0      	bne.n	80078d4 <_printf_float+0x304>
 8007952:	e69e      	b.n	8007692 <_printf_float+0xc2>
 8007954:	2301      	movs	r3, #1
 8007956:	4631      	mov	r1, r6
 8007958:	4628      	mov	r0, r5
 800795a:	9205      	str	r2, [sp, #20]
 800795c:	47b8      	blx	r7
 800795e:	3001      	adds	r0, #1
 8007960:	f43f ae97 	beq.w	8007692 <_printf_float+0xc2>
 8007964:	9a05      	ldr	r2, [sp, #20]
 8007966:	f10b 0b01 	add.w	fp, fp, #1
 800796a:	e7b9      	b.n	80078e0 <_printf_float+0x310>
 800796c:	ee18 3a10 	vmov	r3, s16
 8007970:	4652      	mov	r2, sl
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	d1be      	bne.n	80078fa <_printf_float+0x32a>
 800797c:	e689      	b.n	8007692 <_printf_float+0xc2>
 800797e:	9a05      	ldr	r2, [sp, #20]
 8007980:	464b      	mov	r3, r9
 8007982:	4442      	add	r2, r8
 8007984:	4631      	mov	r1, r6
 8007986:	4628      	mov	r0, r5
 8007988:	47b8      	blx	r7
 800798a:	3001      	adds	r0, #1
 800798c:	d1c1      	bne.n	8007912 <_printf_float+0x342>
 800798e:	e680      	b.n	8007692 <_printf_float+0xc2>
 8007990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007992:	2a01      	cmp	r2, #1
 8007994:	dc01      	bgt.n	800799a <_printf_float+0x3ca>
 8007996:	07db      	lsls	r3, r3, #31
 8007998:	d538      	bpl.n	8007a0c <_printf_float+0x43c>
 800799a:	2301      	movs	r3, #1
 800799c:	4642      	mov	r2, r8
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	f43f ae74 	beq.w	8007692 <_printf_float+0xc2>
 80079aa:	ee18 3a10 	vmov	r3, s16
 80079ae:	4652      	mov	r2, sl
 80079b0:	4631      	mov	r1, r6
 80079b2:	4628      	mov	r0, r5
 80079b4:	47b8      	blx	r7
 80079b6:	3001      	adds	r0, #1
 80079b8:	f43f ae6b 	beq.w	8007692 <_printf_float+0xc2>
 80079bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079c0:	2200      	movs	r2, #0
 80079c2:	2300      	movs	r3, #0
 80079c4:	f7f9 f8a0 	bl	8000b08 <__aeabi_dcmpeq>
 80079c8:	b9d8      	cbnz	r0, 8007a02 <_printf_float+0x432>
 80079ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079cc:	f108 0201 	add.w	r2, r8, #1
 80079d0:	3b01      	subs	r3, #1
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	d10e      	bne.n	80079fa <_printf_float+0x42a>
 80079dc:	e659      	b.n	8007692 <_printf_float+0xc2>
 80079de:	2301      	movs	r3, #1
 80079e0:	4652      	mov	r2, sl
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	f43f ae52 	beq.w	8007692 <_printf_float+0xc2>
 80079ee:	f108 0801 	add.w	r8, r8, #1
 80079f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f4:	3b01      	subs	r3, #1
 80079f6:	4543      	cmp	r3, r8
 80079f8:	dcf1      	bgt.n	80079de <_printf_float+0x40e>
 80079fa:	464b      	mov	r3, r9
 80079fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a00:	e6dc      	b.n	80077bc <_printf_float+0x1ec>
 8007a02:	f04f 0800 	mov.w	r8, #0
 8007a06:	f104 0a1a 	add.w	sl, r4, #26
 8007a0a:	e7f2      	b.n	80079f2 <_printf_float+0x422>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	4642      	mov	r2, r8
 8007a10:	e7df      	b.n	80079d2 <_printf_float+0x402>
 8007a12:	2301      	movs	r3, #1
 8007a14:	464a      	mov	r2, r9
 8007a16:	4631      	mov	r1, r6
 8007a18:	4628      	mov	r0, r5
 8007a1a:	47b8      	blx	r7
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	f43f ae38 	beq.w	8007692 <_printf_float+0xc2>
 8007a22:	f108 0801 	add.w	r8, r8, #1
 8007a26:	68e3      	ldr	r3, [r4, #12]
 8007a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a2a:	1a5b      	subs	r3, r3, r1
 8007a2c:	4543      	cmp	r3, r8
 8007a2e:	dcf0      	bgt.n	8007a12 <_printf_float+0x442>
 8007a30:	e6fa      	b.n	8007828 <_printf_float+0x258>
 8007a32:	f04f 0800 	mov.w	r8, #0
 8007a36:	f104 0919 	add.w	r9, r4, #25
 8007a3a:	e7f4      	b.n	8007a26 <_printf_float+0x456>

08007a3c <_printf_common>:
 8007a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a40:	4616      	mov	r6, r2
 8007a42:	4699      	mov	r9, r3
 8007a44:	688a      	ldr	r2, [r1, #8]
 8007a46:	690b      	ldr	r3, [r1, #16]
 8007a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	bfb8      	it	lt
 8007a50:	4613      	movlt	r3, r2
 8007a52:	6033      	str	r3, [r6, #0]
 8007a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a58:	4607      	mov	r7, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	b10a      	cbz	r2, 8007a62 <_printf_common+0x26>
 8007a5e:	3301      	adds	r3, #1
 8007a60:	6033      	str	r3, [r6, #0]
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	0699      	lsls	r1, r3, #26
 8007a66:	bf42      	ittt	mi
 8007a68:	6833      	ldrmi	r3, [r6, #0]
 8007a6a:	3302      	addmi	r3, #2
 8007a6c:	6033      	strmi	r3, [r6, #0]
 8007a6e:	6825      	ldr	r5, [r4, #0]
 8007a70:	f015 0506 	ands.w	r5, r5, #6
 8007a74:	d106      	bne.n	8007a84 <_printf_common+0x48>
 8007a76:	f104 0a19 	add.w	sl, r4, #25
 8007a7a:	68e3      	ldr	r3, [r4, #12]
 8007a7c:	6832      	ldr	r2, [r6, #0]
 8007a7e:	1a9b      	subs	r3, r3, r2
 8007a80:	42ab      	cmp	r3, r5
 8007a82:	dc26      	bgt.n	8007ad2 <_printf_common+0x96>
 8007a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a88:	1e13      	subs	r3, r2, #0
 8007a8a:	6822      	ldr	r2, [r4, #0]
 8007a8c:	bf18      	it	ne
 8007a8e:	2301      	movne	r3, #1
 8007a90:	0692      	lsls	r2, r2, #26
 8007a92:	d42b      	bmi.n	8007aec <_printf_common+0xb0>
 8007a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a98:	4649      	mov	r1, r9
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	47c0      	blx	r8
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d01e      	beq.n	8007ae0 <_printf_common+0xa4>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	68e5      	ldr	r5, [r4, #12]
 8007aa6:	6832      	ldr	r2, [r6, #0]
 8007aa8:	f003 0306 	and.w	r3, r3, #6
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	bf08      	it	eq
 8007ab0:	1aad      	subeq	r5, r5, r2
 8007ab2:	68a3      	ldr	r3, [r4, #8]
 8007ab4:	6922      	ldr	r2, [r4, #16]
 8007ab6:	bf0c      	ite	eq
 8007ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007abc:	2500      	movne	r5, #0
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	bfc4      	itt	gt
 8007ac2:	1a9b      	subgt	r3, r3, r2
 8007ac4:	18ed      	addgt	r5, r5, r3
 8007ac6:	2600      	movs	r6, #0
 8007ac8:	341a      	adds	r4, #26
 8007aca:	42b5      	cmp	r5, r6
 8007acc:	d11a      	bne.n	8007b04 <_printf_common+0xc8>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e008      	b.n	8007ae4 <_printf_common+0xa8>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	4638      	mov	r0, r7
 8007ada:	47c0      	blx	r8
 8007adc:	3001      	adds	r0, #1
 8007ade:	d103      	bne.n	8007ae8 <_printf_common+0xac>
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae8:	3501      	adds	r5, #1
 8007aea:	e7c6      	b.n	8007a7a <_printf_common+0x3e>
 8007aec:	18e1      	adds	r1, r4, r3
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	2030      	movs	r0, #48	; 0x30
 8007af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007af6:	4422      	add	r2, r4
 8007af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b00:	3302      	adds	r3, #2
 8007b02:	e7c7      	b.n	8007a94 <_printf_common+0x58>
 8007b04:	2301      	movs	r3, #1
 8007b06:	4622      	mov	r2, r4
 8007b08:	4649      	mov	r1, r9
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	47c0      	blx	r8
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d0e6      	beq.n	8007ae0 <_printf_common+0xa4>
 8007b12:	3601      	adds	r6, #1
 8007b14:	e7d9      	b.n	8007aca <_printf_common+0x8e>
	...

08007b18 <_printf_i>:
 8007b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	7e0f      	ldrb	r7, [r1, #24]
 8007b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b20:	2f78      	cmp	r7, #120	; 0x78
 8007b22:	4691      	mov	r9, r2
 8007b24:	4680      	mov	r8, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	469a      	mov	sl, r3
 8007b2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b2e:	d807      	bhi.n	8007b40 <_printf_i+0x28>
 8007b30:	2f62      	cmp	r7, #98	; 0x62
 8007b32:	d80a      	bhi.n	8007b4a <_printf_i+0x32>
 8007b34:	2f00      	cmp	r7, #0
 8007b36:	f000 80d8 	beq.w	8007cea <_printf_i+0x1d2>
 8007b3a:	2f58      	cmp	r7, #88	; 0x58
 8007b3c:	f000 80a3 	beq.w	8007c86 <_printf_i+0x16e>
 8007b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b48:	e03a      	b.n	8007bc0 <_printf_i+0xa8>
 8007b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b4e:	2b15      	cmp	r3, #21
 8007b50:	d8f6      	bhi.n	8007b40 <_printf_i+0x28>
 8007b52:	a101      	add	r1, pc, #4	; (adr r1, 8007b58 <_printf_i+0x40>)
 8007b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b58:	08007bb1 	.word	0x08007bb1
 8007b5c:	08007bc5 	.word	0x08007bc5
 8007b60:	08007b41 	.word	0x08007b41
 8007b64:	08007b41 	.word	0x08007b41
 8007b68:	08007b41 	.word	0x08007b41
 8007b6c:	08007b41 	.word	0x08007b41
 8007b70:	08007bc5 	.word	0x08007bc5
 8007b74:	08007b41 	.word	0x08007b41
 8007b78:	08007b41 	.word	0x08007b41
 8007b7c:	08007b41 	.word	0x08007b41
 8007b80:	08007b41 	.word	0x08007b41
 8007b84:	08007cd1 	.word	0x08007cd1
 8007b88:	08007bf5 	.word	0x08007bf5
 8007b8c:	08007cb3 	.word	0x08007cb3
 8007b90:	08007b41 	.word	0x08007b41
 8007b94:	08007b41 	.word	0x08007b41
 8007b98:	08007cf3 	.word	0x08007cf3
 8007b9c:	08007b41 	.word	0x08007b41
 8007ba0:	08007bf5 	.word	0x08007bf5
 8007ba4:	08007b41 	.word	0x08007b41
 8007ba8:	08007b41 	.word	0x08007b41
 8007bac:	08007cbb 	.word	0x08007cbb
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	1d1a      	adds	r2, r3, #4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	602a      	str	r2, [r5, #0]
 8007bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0a3      	b.n	8007d0c <_printf_i+0x1f4>
 8007bc4:	6820      	ldr	r0, [r4, #0]
 8007bc6:	6829      	ldr	r1, [r5, #0]
 8007bc8:	0606      	lsls	r6, r0, #24
 8007bca:	f101 0304 	add.w	r3, r1, #4
 8007bce:	d50a      	bpl.n	8007be6 <_printf_i+0xce>
 8007bd0:	680e      	ldr	r6, [r1, #0]
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	2e00      	cmp	r6, #0
 8007bd6:	da03      	bge.n	8007be0 <_printf_i+0xc8>
 8007bd8:	232d      	movs	r3, #45	; 0x2d
 8007bda:	4276      	negs	r6, r6
 8007bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be0:	485e      	ldr	r0, [pc, #376]	; (8007d5c <_printf_i+0x244>)
 8007be2:	230a      	movs	r3, #10
 8007be4:	e019      	b.n	8007c1a <_printf_i+0x102>
 8007be6:	680e      	ldr	r6, [r1, #0]
 8007be8:	602b      	str	r3, [r5, #0]
 8007bea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bee:	bf18      	it	ne
 8007bf0:	b236      	sxthne	r6, r6
 8007bf2:	e7ef      	b.n	8007bd4 <_printf_i+0xbc>
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	6820      	ldr	r0, [r4, #0]
 8007bf8:	1d19      	adds	r1, r3, #4
 8007bfa:	6029      	str	r1, [r5, #0]
 8007bfc:	0601      	lsls	r1, r0, #24
 8007bfe:	d501      	bpl.n	8007c04 <_printf_i+0xec>
 8007c00:	681e      	ldr	r6, [r3, #0]
 8007c02:	e002      	b.n	8007c0a <_printf_i+0xf2>
 8007c04:	0646      	lsls	r6, r0, #25
 8007c06:	d5fb      	bpl.n	8007c00 <_printf_i+0xe8>
 8007c08:	881e      	ldrh	r6, [r3, #0]
 8007c0a:	4854      	ldr	r0, [pc, #336]	; (8007d5c <_printf_i+0x244>)
 8007c0c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c0e:	bf0c      	ite	eq
 8007c10:	2308      	moveq	r3, #8
 8007c12:	230a      	movne	r3, #10
 8007c14:	2100      	movs	r1, #0
 8007c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c1a:	6865      	ldr	r5, [r4, #4]
 8007c1c:	60a5      	str	r5, [r4, #8]
 8007c1e:	2d00      	cmp	r5, #0
 8007c20:	bfa2      	ittt	ge
 8007c22:	6821      	ldrge	r1, [r4, #0]
 8007c24:	f021 0104 	bicge.w	r1, r1, #4
 8007c28:	6021      	strge	r1, [r4, #0]
 8007c2a:	b90e      	cbnz	r6, 8007c30 <_printf_i+0x118>
 8007c2c:	2d00      	cmp	r5, #0
 8007c2e:	d04d      	beq.n	8007ccc <_printf_i+0x1b4>
 8007c30:	4615      	mov	r5, r2
 8007c32:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c36:	fb03 6711 	mls	r7, r3, r1, r6
 8007c3a:	5dc7      	ldrb	r7, [r0, r7]
 8007c3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c40:	4637      	mov	r7, r6
 8007c42:	42bb      	cmp	r3, r7
 8007c44:	460e      	mov	r6, r1
 8007c46:	d9f4      	bls.n	8007c32 <_printf_i+0x11a>
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d10b      	bne.n	8007c64 <_printf_i+0x14c>
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	07de      	lsls	r6, r3, #31
 8007c50:	d508      	bpl.n	8007c64 <_printf_i+0x14c>
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	6861      	ldr	r1, [r4, #4]
 8007c56:	4299      	cmp	r1, r3
 8007c58:	bfde      	ittt	le
 8007c5a:	2330      	movle	r3, #48	; 0x30
 8007c5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c64:	1b52      	subs	r2, r2, r5
 8007c66:	6122      	str	r2, [r4, #16]
 8007c68:	f8cd a000 	str.w	sl, [sp]
 8007c6c:	464b      	mov	r3, r9
 8007c6e:	aa03      	add	r2, sp, #12
 8007c70:	4621      	mov	r1, r4
 8007c72:	4640      	mov	r0, r8
 8007c74:	f7ff fee2 	bl	8007a3c <_printf_common>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d14c      	bne.n	8007d16 <_printf_i+0x1fe>
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	b004      	add	sp, #16
 8007c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c86:	4835      	ldr	r0, [pc, #212]	; (8007d5c <_printf_i+0x244>)
 8007c88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c8c:	6829      	ldr	r1, [r5, #0]
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c94:	6029      	str	r1, [r5, #0]
 8007c96:	061d      	lsls	r5, r3, #24
 8007c98:	d514      	bpl.n	8007cc4 <_printf_i+0x1ac>
 8007c9a:	07df      	lsls	r7, r3, #31
 8007c9c:	bf44      	itt	mi
 8007c9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007ca2:	6023      	strmi	r3, [r4, #0]
 8007ca4:	b91e      	cbnz	r6, 8007cae <_printf_i+0x196>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	f023 0320 	bic.w	r3, r3, #32
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	2310      	movs	r3, #16
 8007cb0:	e7b0      	b.n	8007c14 <_printf_i+0xfc>
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	f043 0320 	orr.w	r3, r3, #32
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	2378      	movs	r3, #120	; 0x78
 8007cbc:	4828      	ldr	r0, [pc, #160]	; (8007d60 <_printf_i+0x248>)
 8007cbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cc2:	e7e3      	b.n	8007c8c <_printf_i+0x174>
 8007cc4:	0659      	lsls	r1, r3, #25
 8007cc6:	bf48      	it	mi
 8007cc8:	b2b6      	uxthmi	r6, r6
 8007cca:	e7e6      	b.n	8007c9a <_printf_i+0x182>
 8007ccc:	4615      	mov	r5, r2
 8007cce:	e7bb      	b.n	8007c48 <_printf_i+0x130>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	6826      	ldr	r6, [r4, #0]
 8007cd4:	6961      	ldr	r1, [r4, #20]
 8007cd6:	1d18      	adds	r0, r3, #4
 8007cd8:	6028      	str	r0, [r5, #0]
 8007cda:	0635      	lsls	r5, r6, #24
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	d501      	bpl.n	8007ce4 <_printf_i+0x1cc>
 8007ce0:	6019      	str	r1, [r3, #0]
 8007ce2:	e002      	b.n	8007cea <_printf_i+0x1d2>
 8007ce4:	0670      	lsls	r0, r6, #25
 8007ce6:	d5fb      	bpl.n	8007ce0 <_printf_i+0x1c8>
 8007ce8:	8019      	strh	r1, [r3, #0]
 8007cea:	2300      	movs	r3, #0
 8007cec:	6123      	str	r3, [r4, #16]
 8007cee:	4615      	mov	r5, r2
 8007cf0:	e7ba      	b.n	8007c68 <_printf_i+0x150>
 8007cf2:	682b      	ldr	r3, [r5, #0]
 8007cf4:	1d1a      	adds	r2, r3, #4
 8007cf6:	602a      	str	r2, [r5, #0]
 8007cf8:	681d      	ldr	r5, [r3, #0]
 8007cfa:	6862      	ldr	r2, [r4, #4]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f7f8 fa8e 	bl	8000220 <memchr>
 8007d04:	b108      	cbz	r0, 8007d0a <_printf_i+0x1f2>
 8007d06:	1b40      	subs	r0, r0, r5
 8007d08:	6060      	str	r0, [r4, #4]
 8007d0a:	6863      	ldr	r3, [r4, #4]
 8007d0c:	6123      	str	r3, [r4, #16]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d14:	e7a8      	b.n	8007c68 <_printf_i+0x150>
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	462a      	mov	r2, r5
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	47d0      	blx	sl
 8007d20:	3001      	adds	r0, #1
 8007d22:	d0ab      	beq.n	8007c7c <_printf_i+0x164>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	079b      	lsls	r3, r3, #30
 8007d28:	d413      	bmi.n	8007d52 <_printf_i+0x23a>
 8007d2a:	68e0      	ldr	r0, [r4, #12]
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	4298      	cmp	r0, r3
 8007d30:	bfb8      	it	lt
 8007d32:	4618      	movlt	r0, r3
 8007d34:	e7a4      	b.n	8007c80 <_printf_i+0x168>
 8007d36:	2301      	movs	r3, #1
 8007d38:	4632      	mov	r2, r6
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	4640      	mov	r0, r8
 8007d3e:	47d0      	blx	sl
 8007d40:	3001      	adds	r0, #1
 8007d42:	d09b      	beq.n	8007c7c <_printf_i+0x164>
 8007d44:	3501      	adds	r5, #1
 8007d46:	68e3      	ldr	r3, [r4, #12]
 8007d48:	9903      	ldr	r1, [sp, #12]
 8007d4a:	1a5b      	subs	r3, r3, r1
 8007d4c:	42ab      	cmp	r3, r5
 8007d4e:	dcf2      	bgt.n	8007d36 <_printf_i+0x21e>
 8007d50:	e7eb      	b.n	8007d2a <_printf_i+0x212>
 8007d52:	2500      	movs	r5, #0
 8007d54:	f104 0619 	add.w	r6, r4, #25
 8007d58:	e7f5      	b.n	8007d46 <_printf_i+0x22e>
 8007d5a:	bf00      	nop
 8007d5c:	0800b1c2 	.word	0x0800b1c2
 8007d60:	0800b1d3 	.word	0x0800b1d3

08007d64 <cleanup_glue>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	460c      	mov	r4, r1
 8007d68:	6809      	ldr	r1, [r1, #0]
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	b109      	cbz	r1, 8007d72 <cleanup_glue+0xe>
 8007d6e:	f7ff fff9 	bl	8007d64 <cleanup_glue>
 8007d72:	4621      	mov	r1, r4
 8007d74:	4628      	mov	r0, r5
 8007d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d7a:	f001 bd2d 	b.w	80097d8 <_free_r>
	...

08007d80 <_reclaim_reent>:
 8007d80:	4b2c      	ldr	r3, [pc, #176]	; (8007e34 <_reclaim_reent+0xb4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4283      	cmp	r3, r0
 8007d86:	b570      	push	{r4, r5, r6, lr}
 8007d88:	4604      	mov	r4, r0
 8007d8a:	d051      	beq.n	8007e30 <_reclaim_reent+0xb0>
 8007d8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d8e:	b143      	cbz	r3, 8007da2 <_reclaim_reent+0x22>
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d14a      	bne.n	8007e2c <_reclaim_reent+0xac>
 8007d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d98:	6819      	ldr	r1, [r3, #0]
 8007d9a:	b111      	cbz	r1, 8007da2 <_reclaim_reent+0x22>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f001 fd1b 	bl	80097d8 <_free_r>
 8007da2:	6961      	ldr	r1, [r4, #20]
 8007da4:	b111      	cbz	r1, 8007dac <_reclaim_reent+0x2c>
 8007da6:	4620      	mov	r0, r4
 8007da8:	f001 fd16 	bl	80097d8 <_free_r>
 8007dac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007dae:	b111      	cbz	r1, 8007db6 <_reclaim_reent+0x36>
 8007db0:	4620      	mov	r0, r4
 8007db2:	f001 fd11 	bl	80097d8 <_free_r>
 8007db6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007db8:	b111      	cbz	r1, 8007dc0 <_reclaim_reent+0x40>
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f001 fd0c 	bl	80097d8 <_free_r>
 8007dc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007dc2:	b111      	cbz	r1, 8007dca <_reclaim_reent+0x4a>
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f001 fd07 	bl	80097d8 <_free_r>
 8007dca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007dcc:	b111      	cbz	r1, 8007dd4 <_reclaim_reent+0x54>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f001 fd02 	bl	80097d8 <_free_r>
 8007dd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007dd6:	b111      	cbz	r1, 8007dde <_reclaim_reent+0x5e>
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f001 fcfd 	bl	80097d8 <_free_r>
 8007dde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007de0:	b111      	cbz	r1, 8007de8 <_reclaim_reent+0x68>
 8007de2:	4620      	mov	r0, r4
 8007de4:	f001 fcf8 	bl	80097d8 <_free_r>
 8007de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dea:	b111      	cbz	r1, 8007df2 <_reclaim_reent+0x72>
 8007dec:	4620      	mov	r0, r4
 8007dee:	f001 fcf3 	bl	80097d8 <_free_r>
 8007df2:	69a3      	ldr	r3, [r4, #24]
 8007df4:	b1e3      	cbz	r3, 8007e30 <_reclaim_reent+0xb0>
 8007df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4798      	blx	r3
 8007dfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007dfe:	b1b9      	cbz	r1, 8007e30 <_reclaim_reent+0xb0>
 8007e00:	4620      	mov	r0, r4
 8007e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e06:	f7ff bfad 	b.w	8007d64 <cleanup_glue>
 8007e0a:	5949      	ldr	r1, [r1, r5]
 8007e0c:	b941      	cbnz	r1, 8007e20 <_reclaim_reent+0xa0>
 8007e0e:	3504      	adds	r5, #4
 8007e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e12:	2d80      	cmp	r5, #128	; 0x80
 8007e14:	68d9      	ldr	r1, [r3, #12]
 8007e16:	d1f8      	bne.n	8007e0a <_reclaim_reent+0x8a>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f001 fcdd 	bl	80097d8 <_free_r>
 8007e1e:	e7ba      	b.n	8007d96 <_reclaim_reent+0x16>
 8007e20:	680e      	ldr	r6, [r1, #0]
 8007e22:	4620      	mov	r0, r4
 8007e24:	f001 fcd8 	bl	80097d8 <_free_r>
 8007e28:	4631      	mov	r1, r6
 8007e2a:	e7ef      	b.n	8007e0c <_reclaim_reent+0x8c>
 8007e2c:	2500      	movs	r5, #0
 8007e2e:	e7ef      	b.n	8007e10 <_reclaim_reent+0x90>
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
 8007e32:	bf00      	nop
 8007e34:	20000014 	.word	0x20000014

08007e38 <_sbrk_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d06      	ldr	r5, [pc, #24]	; (8007e54 <_sbrk_r+0x1c>)
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	602b      	str	r3, [r5, #0]
 8007e44:	f7f9 fede 	bl	8001c04 <_sbrk>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_sbrk_r+0x1a>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_sbrk_r+0x1a>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	20004d5c 	.word	0x20004d5c

08007e58 <__sread>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e60:	f001 fd06 	bl	8009870 <_read_r>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	bfab      	itete	ge
 8007e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e6c:	181b      	addge	r3, r3, r0
 8007e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e72:	bfac      	ite	ge
 8007e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e76:	81a3      	strhlt	r3, [r4, #12]
 8007e78:	bd10      	pop	{r4, pc}

08007e7a <__swrite>:
 8007e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7e:	461f      	mov	r7, r3
 8007e80:	898b      	ldrh	r3, [r1, #12]
 8007e82:	05db      	lsls	r3, r3, #23
 8007e84:	4605      	mov	r5, r0
 8007e86:	460c      	mov	r4, r1
 8007e88:	4616      	mov	r6, r2
 8007e8a:	d505      	bpl.n	8007e98 <__swrite+0x1e>
 8007e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e90:	2302      	movs	r3, #2
 8007e92:	2200      	movs	r2, #0
 8007e94:	f001 f8c2 	bl	800901c <_lseek_r>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ea2:	81a3      	strh	r3, [r4, #12]
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eae:	f000 b817 	b.w	8007ee0 <_write_r>

08007eb2 <__sseek>:
 8007eb2:	b510      	push	{r4, lr}
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eba:	f001 f8af 	bl	800901c <_lseek_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	bf15      	itete	ne
 8007ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ece:	81a3      	strheq	r3, [r4, #12]
 8007ed0:	bf18      	it	ne
 8007ed2:	81a3      	strhne	r3, [r4, #12]
 8007ed4:	bd10      	pop	{r4, pc}

08007ed6 <__sclose>:
 8007ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eda:	f000 b813 	b.w	8007f04 <_close_r>
	...

08007ee0 <_write_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d07      	ldr	r5, [pc, #28]	; (8007f00 <_write_r+0x20>)
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	4608      	mov	r0, r1
 8007ee8:	4611      	mov	r1, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	602a      	str	r2, [r5, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f7f9 fe37 	bl	8001b62 <_write>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_write_r+0x1e>
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_write_r+0x1e>
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	20004d5c 	.word	0x20004d5c

08007f04 <_close_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4d06      	ldr	r5, [pc, #24]	; (8007f20 <_close_r+0x1c>)
 8007f08:	2300      	movs	r3, #0
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	602b      	str	r3, [r5, #0]
 8007f10:	f7f9 fe43 	bl	8001b9a <_close>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_close_r+0x1a>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_close_r+0x1a>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	20004d5c 	.word	0x20004d5c

08007f24 <quorem>:
 8007f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	6903      	ldr	r3, [r0, #16]
 8007f2a:	690c      	ldr	r4, [r1, #16]
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	4607      	mov	r7, r0
 8007f30:	f2c0 8081 	blt.w	8008036 <quorem+0x112>
 8007f34:	3c01      	subs	r4, #1
 8007f36:	f101 0814 	add.w	r8, r1, #20
 8007f3a:	f100 0514 	add.w	r5, r0, #20
 8007f3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f58:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f5c:	d331      	bcc.n	8007fc2 <quorem+0x9e>
 8007f5e:	f04f 0e00 	mov.w	lr, #0
 8007f62:	4640      	mov	r0, r8
 8007f64:	46ac      	mov	ip, r5
 8007f66:	46f2      	mov	sl, lr
 8007f68:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f6c:	b293      	uxth	r3, r2
 8007f6e:	fb06 e303 	mla	r3, r6, r3, lr
 8007f72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	ebaa 0303 	sub.w	r3, sl, r3
 8007f7c:	f8dc a000 	ldr.w	sl, [ip]
 8007f80:	0c12      	lsrs	r2, r2, #16
 8007f82:	fa13 f38a 	uxtah	r3, r3, sl
 8007f86:	fb06 e202 	mla	r2, r6, r2, lr
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	9b00      	ldr	r3, [sp, #0]
 8007f8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f92:	b292      	uxth	r2, r2
 8007f94:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f9c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007fa0:	4581      	cmp	r9, r0
 8007fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fa6:	f84c 3b04 	str.w	r3, [ip], #4
 8007faa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fae:	d2db      	bcs.n	8007f68 <quorem+0x44>
 8007fb0:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fb4:	b92b      	cbnz	r3, 8007fc2 <quorem+0x9e>
 8007fb6:	9b01      	ldr	r3, [sp, #4]
 8007fb8:	3b04      	subs	r3, #4
 8007fba:	429d      	cmp	r5, r3
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	d32e      	bcc.n	800801e <quorem+0xfa>
 8007fc0:	613c      	str	r4, [r7, #16]
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	f001 fad2 	bl	800956c <__mcmp>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	db24      	blt.n	8008016 <quorem+0xf2>
 8007fcc:	3601      	adds	r6, #1
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f04f 0c00 	mov.w	ip, #0
 8007fd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fd8:	f8d0 e000 	ldr.w	lr, [r0]
 8007fdc:	b293      	uxth	r3, r2
 8007fde:	ebac 0303 	sub.w	r3, ip, r3
 8007fe2:	0c12      	lsrs	r2, r2, #16
 8007fe4:	fa13 f38e 	uxtah	r3, r3, lr
 8007fe8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007fec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ff6:	45c1      	cmp	r9, r8
 8007ff8:	f840 3b04 	str.w	r3, [r0], #4
 8007ffc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008000:	d2e8      	bcs.n	8007fd4 <quorem+0xb0>
 8008002:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008006:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800800a:	b922      	cbnz	r2, 8008016 <quorem+0xf2>
 800800c:	3b04      	subs	r3, #4
 800800e:	429d      	cmp	r5, r3
 8008010:	461a      	mov	r2, r3
 8008012:	d30a      	bcc.n	800802a <quorem+0x106>
 8008014:	613c      	str	r4, [r7, #16]
 8008016:	4630      	mov	r0, r6
 8008018:	b003      	add	sp, #12
 800801a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	3b04      	subs	r3, #4
 8008022:	2a00      	cmp	r2, #0
 8008024:	d1cc      	bne.n	8007fc0 <quorem+0x9c>
 8008026:	3c01      	subs	r4, #1
 8008028:	e7c7      	b.n	8007fba <quorem+0x96>
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	3b04      	subs	r3, #4
 800802e:	2a00      	cmp	r2, #0
 8008030:	d1f0      	bne.n	8008014 <quorem+0xf0>
 8008032:	3c01      	subs	r4, #1
 8008034:	e7eb      	b.n	800800e <quorem+0xea>
 8008036:	2000      	movs	r0, #0
 8008038:	e7ee      	b.n	8008018 <quorem+0xf4>
 800803a:	0000      	movs	r0, r0
 800803c:	0000      	movs	r0, r0
	...

08008040 <_dtoa_r>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	ed2d 8b04 	vpush	{d8-d9}
 8008048:	ec57 6b10 	vmov	r6, r7, d0
 800804c:	b093      	sub	sp, #76	; 0x4c
 800804e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008050:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008054:	9106      	str	r1, [sp, #24]
 8008056:	ee10 aa10 	vmov	sl, s0
 800805a:	4604      	mov	r4, r0
 800805c:	9209      	str	r2, [sp, #36]	; 0x24
 800805e:	930c      	str	r3, [sp, #48]	; 0x30
 8008060:	46bb      	mov	fp, r7
 8008062:	b975      	cbnz	r5, 8008082 <_dtoa_r+0x42>
 8008064:	2010      	movs	r0, #16
 8008066:	f000 ffeb 	bl	8009040 <malloc>
 800806a:	4602      	mov	r2, r0
 800806c:	6260      	str	r0, [r4, #36]	; 0x24
 800806e:	b920      	cbnz	r0, 800807a <_dtoa_r+0x3a>
 8008070:	4ba7      	ldr	r3, [pc, #668]	; (8008310 <_dtoa_r+0x2d0>)
 8008072:	21ea      	movs	r1, #234	; 0xea
 8008074:	48a7      	ldr	r0, [pc, #668]	; (8008314 <_dtoa_r+0x2d4>)
 8008076:	f001 fc15 	bl	80098a4 <__assert_func>
 800807a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800807e:	6005      	str	r5, [r0, #0]
 8008080:	60c5      	str	r5, [r0, #12]
 8008082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008084:	6819      	ldr	r1, [r3, #0]
 8008086:	b151      	cbz	r1, 800809e <_dtoa_r+0x5e>
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	604a      	str	r2, [r1, #4]
 800808c:	2301      	movs	r3, #1
 800808e:	4093      	lsls	r3, r2
 8008090:	608b      	str	r3, [r1, #8]
 8008092:	4620      	mov	r0, r4
 8008094:	f001 f828 	bl	80090e8 <_Bfree>
 8008098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800809a:	2200      	movs	r2, #0
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	1e3b      	subs	r3, r7, #0
 80080a0:	bfaa      	itet	ge
 80080a2:	2300      	movge	r3, #0
 80080a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80080a8:	f8c8 3000 	strge.w	r3, [r8]
 80080ac:	4b9a      	ldr	r3, [pc, #616]	; (8008318 <_dtoa_r+0x2d8>)
 80080ae:	bfbc      	itt	lt
 80080b0:	2201      	movlt	r2, #1
 80080b2:	f8c8 2000 	strlt.w	r2, [r8]
 80080b6:	ea33 030b 	bics.w	r3, r3, fp
 80080ba:	d11b      	bne.n	80080f4 <_dtoa_r+0xb4>
 80080bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080be:	f242 730f 	movw	r3, #9999	; 0x270f
 80080c2:	6013      	str	r3, [r2, #0]
 80080c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080c8:	4333      	orrs	r3, r6
 80080ca:	f000 8592 	beq.w	8008bf2 <_dtoa_r+0xbb2>
 80080ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080d0:	b963      	cbnz	r3, 80080ec <_dtoa_r+0xac>
 80080d2:	4b92      	ldr	r3, [pc, #584]	; (800831c <_dtoa_r+0x2dc>)
 80080d4:	e022      	b.n	800811c <_dtoa_r+0xdc>
 80080d6:	4b92      	ldr	r3, [pc, #584]	; (8008320 <_dtoa_r+0x2e0>)
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	3308      	adds	r3, #8
 80080dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	9801      	ldr	r0, [sp, #4]
 80080e2:	b013      	add	sp, #76	; 0x4c
 80080e4:	ecbd 8b04 	vpop	{d8-d9}
 80080e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ec:	4b8b      	ldr	r3, [pc, #556]	; (800831c <_dtoa_r+0x2dc>)
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	3303      	adds	r3, #3
 80080f2:	e7f3      	b.n	80080dc <_dtoa_r+0x9c>
 80080f4:	2200      	movs	r2, #0
 80080f6:	2300      	movs	r3, #0
 80080f8:	4650      	mov	r0, sl
 80080fa:	4659      	mov	r1, fp
 80080fc:	f7f8 fd04 	bl	8000b08 <__aeabi_dcmpeq>
 8008100:	ec4b ab19 	vmov	d9, sl, fp
 8008104:	4680      	mov	r8, r0
 8008106:	b158      	cbz	r0, 8008120 <_dtoa_r+0xe0>
 8008108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800810a:	2301      	movs	r3, #1
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 856b 	beq.w	8008bec <_dtoa_r+0xbac>
 8008116:	4883      	ldr	r0, [pc, #524]	; (8008324 <_dtoa_r+0x2e4>)
 8008118:	6018      	str	r0, [r3, #0]
 800811a:	1e43      	subs	r3, r0, #1
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	e7df      	b.n	80080e0 <_dtoa_r+0xa0>
 8008120:	ec4b ab10 	vmov	d0, sl, fp
 8008124:	aa10      	add	r2, sp, #64	; 0x40
 8008126:	a911      	add	r1, sp, #68	; 0x44
 8008128:	4620      	mov	r0, r4
 800812a:	f001 fac5 	bl	80096b8 <__d2b>
 800812e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008132:	ee08 0a10 	vmov	s16, r0
 8008136:	2d00      	cmp	r5, #0
 8008138:	f000 8084 	beq.w	8008244 <_dtoa_r+0x204>
 800813c:	ee19 3a90 	vmov	r3, s19
 8008140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008144:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008148:	4656      	mov	r6, sl
 800814a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800814e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008152:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008156:	4b74      	ldr	r3, [pc, #464]	; (8008328 <_dtoa_r+0x2e8>)
 8008158:	2200      	movs	r2, #0
 800815a:	4630      	mov	r0, r6
 800815c:	4639      	mov	r1, r7
 800815e:	f7f8 f8b3 	bl	80002c8 <__aeabi_dsub>
 8008162:	a365      	add	r3, pc, #404	; (adr r3, 80082f8 <_dtoa_r+0x2b8>)
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	f7f8 fa66 	bl	8000638 <__aeabi_dmul>
 800816c:	a364      	add	r3, pc, #400	; (adr r3, 8008300 <_dtoa_r+0x2c0>)
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f7f8 f8ab 	bl	80002cc <__adddf3>
 8008176:	4606      	mov	r6, r0
 8008178:	4628      	mov	r0, r5
 800817a:	460f      	mov	r7, r1
 800817c:	f7f8 f9f2 	bl	8000564 <__aeabi_i2d>
 8008180:	a361      	add	r3, pc, #388	; (adr r3, 8008308 <_dtoa_r+0x2c8>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 fa57 	bl	8000638 <__aeabi_dmul>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4630      	mov	r0, r6
 8008190:	4639      	mov	r1, r7
 8008192:	f7f8 f89b 	bl	80002cc <__adddf3>
 8008196:	4606      	mov	r6, r0
 8008198:	460f      	mov	r7, r1
 800819a:	f7f8 fcfd 	bl	8000b98 <__aeabi_d2iz>
 800819e:	2200      	movs	r2, #0
 80081a0:	9000      	str	r0, [sp, #0]
 80081a2:	2300      	movs	r3, #0
 80081a4:	4630      	mov	r0, r6
 80081a6:	4639      	mov	r1, r7
 80081a8:	f7f8 fcb8 	bl	8000b1c <__aeabi_dcmplt>
 80081ac:	b150      	cbz	r0, 80081c4 <_dtoa_r+0x184>
 80081ae:	9800      	ldr	r0, [sp, #0]
 80081b0:	f7f8 f9d8 	bl	8000564 <__aeabi_i2d>
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	f7f8 fca6 	bl	8000b08 <__aeabi_dcmpeq>
 80081bc:	b910      	cbnz	r0, 80081c4 <_dtoa_r+0x184>
 80081be:	9b00      	ldr	r3, [sp, #0]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	9b00      	ldr	r3, [sp, #0]
 80081c6:	2b16      	cmp	r3, #22
 80081c8:	d85a      	bhi.n	8008280 <_dtoa_r+0x240>
 80081ca:	9a00      	ldr	r2, [sp, #0]
 80081cc:	4b57      	ldr	r3, [pc, #348]	; (800832c <_dtoa_r+0x2ec>)
 80081ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	ec51 0b19 	vmov	r0, r1, d9
 80081da:	f7f8 fc9f 	bl	8000b1c <__aeabi_dcmplt>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d050      	beq.n	8008284 <_dtoa_r+0x244>
 80081e2:	9b00      	ldr	r3, [sp, #0]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2300      	movs	r3, #0
 80081ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081ee:	1b5d      	subs	r5, r3, r5
 80081f0:	1e6b      	subs	r3, r5, #1
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	bf45      	ittet	mi
 80081f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80081fa:	9304      	strmi	r3, [sp, #16]
 80081fc:	2300      	movpl	r3, #0
 80081fe:	2300      	movmi	r3, #0
 8008200:	bf4c      	ite	mi
 8008202:	9305      	strmi	r3, [sp, #20]
 8008204:	9304      	strpl	r3, [sp, #16]
 8008206:	9b00      	ldr	r3, [sp, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	db3d      	blt.n	8008288 <_dtoa_r+0x248>
 800820c:	9b05      	ldr	r3, [sp, #20]
 800820e:	9a00      	ldr	r2, [sp, #0]
 8008210:	920a      	str	r2, [sp, #40]	; 0x28
 8008212:	4413      	add	r3, r2
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	2300      	movs	r3, #0
 8008218:	9307      	str	r3, [sp, #28]
 800821a:	9b06      	ldr	r3, [sp, #24]
 800821c:	2b09      	cmp	r3, #9
 800821e:	f200 8089 	bhi.w	8008334 <_dtoa_r+0x2f4>
 8008222:	2b05      	cmp	r3, #5
 8008224:	bfc4      	itt	gt
 8008226:	3b04      	subgt	r3, #4
 8008228:	9306      	strgt	r3, [sp, #24]
 800822a:	9b06      	ldr	r3, [sp, #24]
 800822c:	f1a3 0302 	sub.w	r3, r3, #2
 8008230:	bfcc      	ite	gt
 8008232:	2500      	movgt	r5, #0
 8008234:	2501      	movle	r5, #1
 8008236:	2b03      	cmp	r3, #3
 8008238:	f200 8087 	bhi.w	800834a <_dtoa_r+0x30a>
 800823c:	e8df f003 	tbb	[pc, r3]
 8008240:	59383a2d 	.word	0x59383a2d
 8008244:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008248:	441d      	add	r5, r3
 800824a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800824e:	2b20      	cmp	r3, #32
 8008250:	bfc1      	itttt	gt
 8008252:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008256:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800825a:	fa0b f303 	lslgt.w	r3, fp, r3
 800825e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008262:	bfda      	itte	le
 8008264:	f1c3 0320 	rsble	r3, r3, #32
 8008268:	fa06 f003 	lslle.w	r0, r6, r3
 800826c:	4318      	orrgt	r0, r3
 800826e:	f7f8 f969 	bl	8000544 <__aeabi_ui2d>
 8008272:	2301      	movs	r3, #1
 8008274:	4606      	mov	r6, r0
 8008276:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800827a:	3d01      	subs	r5, #1
 800827c:	930e      	str	r3, [sp, #56]	; 0x38
 800827e:	e76a      	b.n	8008156 <_dtoa_r+0x116>
 8008280:	2301      	movs	r3, #1
 8008282:	e7b2      	b.n	80081ea <_dtoa_r+0x1aa>
 8008284:	900b      	str	r0, [sp, #44]	; 0x2c
 8008286:	e7b1      	b.n	80081ec <_dtoa_r+0x1ac>
 8008288:	9b04      	ldr	r3, [sp, #16]
 800828a:	9a00      	ldr	r2, [sp, #0]
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	9304      	str	r3, [sp, #16]
 8008290:	4253      	negs	r3, r2
 8008292:	9307      	str	r3, [sp, #28]
 8008294:	2300      	movs	r3, #0
 8008296:	930a      	str	r3, [sp, #40]	; 0x28
 8008298:	e7bf      	b.n	800821a <_dtoa_r+0x1da>
 800829a:	2300      	movs	r3, #0
 800829c:	9308      	str	r3, [sp, #32]
 800829e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dc55      	bgt.n	8008350 <_dtoa_r+0x310>
 80082a4:	2301      	movs	r3, #1
 80082a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082aa:	461a      	mov	r2, r3
 80082ac:	9209      	str	r2, [sp, #36]	; 0x24
 80082ae:	e00c      	b.n	80082ca <_dtoa_r+0x28a>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e7f3      	b.n	800829c <_dtoa_r+0x25c>
 80082b4:	2300      	movs	r3, #0
 80082b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082b8:	9308      	str	r3, [sp, #32]
 80082ba:	9b00      	ldr	r3, [sp, #0]
 80082bc:	4413      	add	r3, r2
 80082be:	9302      	str	r3, [sp, #8]
 80082c0:	3301      	adds	r3, #1
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	9303      	str	r3, [sp, #12]
 80082c6:	bfb8      	it	lt
 80082c8:	2301      	movlt	r3, #1
 80082ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80082cc:	2200      	movs	r2, #0
 80082ce:	6042      	str	r2, [r0, #4]
 80082d0:	2204      	movs	r2, #4
 80082d2:	f102 0614 	add.w	r6, r2, #20
 80082d6:	429e      	cmp	r6, r3
 80082d8:	6841      	ldr	r1, [r0, #4]
 80082da:	d93d      	bls.n	8008358 <_dtoa_r+0x318>
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 fec3 	bl	8009068 <_Balloc>
 80082e2:	9001      	str	r0, [sp, #4]
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d13b      	bne.n	8008360 <_dtoa_r+0x320>
 80082e8:	4b11      	ldr	r3, [pc, #68]	; (8008330 <_dtoa_r+0x2f0>)
 80082ea:	4602      	mov	r2, r0
 80082ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082f0:	e6c0      	b.n	8008074 <_dtoa_r+0x34>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e7df      	b.n	80082b6 <_dtoa_r+0x276>
 80082f6:	bf00      	nop
 80082f8:	636f4361 	.word	0x636f4361
 80082fc:	3fd287a7 	.word	0x3fd287a7
 8008300:	8b60c8b3 	.word	0x8b60c8b3
 8008304:	3fc68a28 	.word	0x3fc68a28
 8008308:	509f79fb 	.word	0x509f79fb
 800830c:	3fd34413 	.word	0x3fd34413
 8008310:	0800b1f1 	.word	0x0800b1f1
 8008314:	0800b208 	.word	0x0800b208
 8008318:	7ff00000 	.word	0x7ff00000
 800831c:	0800b1ed 	.word	0x0800b1ed
 8008320:	0800b1e4 	.word	0x0800b1e4
 8008324:	0800b1c1 	.word	0x0800b1c1
 8008328:	3ff80000 	.word	0x3ff80000
 800832c:	0800b2f8 	.word	0x0800b2f8
 8008330:	0800b263 	.word	0x0800b263
 8008334:	2501      	movs	r5, #1
 8008336:	2300      	movs	r3, #0
 8008338:	9306      	str	r3, [sp, #24]
 800833a:	9508      	str	r5, [sp, #32]
 800833c:	f04f 33ff 	mov.w	r3, #4294967295
 8008340:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008344:	2200      	movs	r2, #0
 8008346:	2312      	movs	r3, #18
 8008348:	e7b0      	b.n	80082ac <_dtoa_r+0x26c>
 800834a:	2301      	movs	r3, #1
 800834c:	9308      	str	r3, [sp, #32]
 800834e:	e7f5      	b.n	800833c <_dtoa_r+0x2fc>
 8008350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008352:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008356:	e7b8      	b.n	80082ca <_dtoa_r+0x28a>
 8008358:	3101      	adds	r1, #1
 800835a:	6041      	str	r1, [r0, #4]
 800835c:	0052      	lsls	r2, r2, #1
 800835e:	e7b8      	b.n	80082d2 <_dtoa_r+0x292>
 8008360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008362:	9a01      	ldr	r2, [sp, #4]
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	2b0e      	cmp	r3, #14
 800836a:	f200 809d 	bhi.w	80084a8 <_dtoa_r+0x468>
 800836e:	2d00      	cmp	r5, #0
 8008370:	f000 809a 	beq.w	80084a8 <_dtoa_r+0x468>
 8008374:	9b00      	ldr	r3, [sp, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	dd32      	ble.n	80083e0 <_dtoa_r+0x3a0>
 800837a:	4ab7      	ldr	r2, [pc, #732]	; (8008658 <_dtoa_r+0x618>)
 800837c:	f003 030f 	and.w	r3, r3, #15
 8008380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008384:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008388:	9b00      	ldr	r3, [sp, #0]
 800838a:	05d8      	lsls	r0, r3, #23
 800838c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008390:	d516      	bpl.n	80083c0 <_dtoa_r+0x380>
 8008392:	4bb2      	ldr	r3, [pc, #712]	; (800865c <_dtoa_r+0x61c>)
 8008394:	ec51 0b19 	vmov	r0, r1, d9
 8008398:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800839c:	f7f8 fa76 	bl	800088c <__aeabi_ddiv>
 80083a0:	f007 070f 	and.w	r7, r7, #15
 80083a4:	4682      	mov	sl, r0
 80083a6:	468b      	mov	fp, r1
 80083a8:	2503      	movs	r5, #3
 80083aa:	4eac      	ldr	r6, [pc, #688]	; (800865c <_dtoa_r+0x61c>)
 80083ac:	b957      	cbnz	r7, 80083c4 <_dtoa_r+0x384>
 80083ae:	4642      	mov	r2, r8
 80083b0:	464b      	mov	r3, r9
 80083b2:	4650      	mov	r0, sl
 80083b4:	4659      	mov	r1, fp
 80083b6:	f7f8 fa69 	bl	800088c <__aeabi_ddiv>
 80083ba:	4682      	mov	sl, r0
 80083bc:	468b      	mov	fp, r1
 80083be:	e028      	b.n	8008412 <_dtoa_r+0x3d2>
 80083c0:	2502      	movs	r5, #2
 80083c2:	e7f2      	b.n	80083aa <_dtoa_r+0x36a>
 80083c4:	07f9      	lsls	r1, r7, #31
 80083c6:	d508      	bpl.n	80083da <_dtoa_r+0x39a>
 80083c8:	4640      	mov	r0, r8
 80083ca:	4649      	mov	r1, r9
 80083cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083d0:	f7f8 f932 	bl	8000638 <__aeabi_dmul>
 80083d4:	3501      	adds	r5, #1
 80083d6:	4680      	mov	r8, r0
 80083d8:	4689      	mov	r9, r1
 80083da:	107f      	asrs	r7, r7, #1
 80083dc:	3608      	adds	r6, #8
 80083de:	e7e5      	b.n	80083ac <_dtoa_r+0x36c>
 80083e0:	f000 809b 	beq.w	800851a <_dtoa_r+0x4da>
 80083e4:	9b00      	ldr	r3, [sp, #0]
 80083e6:	4f9d      	ldr	r7, [pc, #628]	; (800865c <_dtoa_r+0x61c>)
 80083e8:	425e      	negs	r6, r3
 80083ea:	4b9b      	ldr	r3, [pc, #620]	; (8008658 <_dtoa_r+0x618>)
 80083ec:	f006 020f 	and.w	r2, r6, #15
 80083f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	ec51 0b19 	vmov	r0, r1, d9
 80083fc:	f7f8 f91c 	bl	8000638 <__aeabi_dmul>
 8008400:	1136      	asrs	r6, r6, #4
 8008402:	4682      	mov	sl, r0
 8008404:	468b      	mov	fp, r1
 8008406:	2300      	movs	r3, #0
 8008408:	2502      	movs	r5, #2
 800840a:	2e00      	cmp	r6, #0
 800840c:	d17a      	bne.n	8008504 <_dtoa_r+0x4c4>
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1d3      	bne.n	80083ba <_dtoa_r+0x37a>
 8008412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 8082 	beq.w	800851e <_dtoa_r+0x4de>
 800841a:	4b91      	ldr	r3, [pc, #580]	; (8008660 <_dtoa_r+0x620>)
 800841c:	2200      	movs	r2, #0
 800841e:	4650      	mov	r0, sl
 8008420:	4659      	mov	r1, fp
 8008422:	f7f8 fb7b 	bl	8000b1c <__aeabi_dcmplt>
 8008426:	2800      	cmp	r0, #0
 8008428:	d079      	beq.n	800851e <_dtoa_r+0x4de>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d076      	beq.n	800851e <_dtoa_r+0x4de>
 8008430:	9b02      	ldr	r3, [sp, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	dd36      	ble.n	80084a4 <_dtoa_r+0x464>
 8008436:	9b00      	ldr	r3, [sp, #0]
 8008438:	4650      	mov	r0, sl
 800843a:	4659      	mov	r1, fp
 800843c:	1e5f      	subs	r7, r3, #1
 800843e:	2200      	movs	r2, #0
 8008440:	4b88      	ldr	r3, [pc, #544]	; (8008664 <_dtoa_r+0x624>)
 8008442:	f7f8 f8f9 	bl	8000638 <__aeabi_dmul>
 8008446:	9e02      	ldr	r6, [sp, #8]
 8008448:	4682      	mov	sl, r0
 800844a:	468b      	mov	fp, r1
 800844c:	3501      	adds	r5, #1
 800844e:	4628      	mov	r0, r5
 8008450:	f7f8 f888 	bl	8000564 <__aeabi_i2d>
 8008454:	4652      	mov	r2, sl
 8008456:	465b      	mov	r3, fp
 8008458:	f7f8 f8ee 	bl	8000638 <__aeabi_dmul>
 800845c:	4b82      	ldr	r3, [pc, #520]	; (8008668 <_dtoa_r+0x628>)
 800845e:	2200      	movs	r2, #0
 8008460:	f7f7 ff34 	bl	80002cc <__adddf3>
 8008464:	46d0      	mov	r8, sl
 8008466:	46d9      	mov	r9, fp
 8008468:	4682      	mov	sl, r0
 800846a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800846e:	2e00      	cmp	r6, #0
 8008470:	d158      	bne.n	8008524 <_dtoa_r+0x4e4>
 8008472:	4b7e      	ldr	r3, [pc, #504]	; (800866c <_dtoa_r+0x62c>)
 8008474:	2200      	movs	r2, #0
 8008476:	4640      	mov	r0, r8
 8008478:	4649      	mov	r1, r9
 800847a:	f7f7 ff25 	bl	80002c8 <__aeabi_dsub>
 800847e:	4652      	mov	r2, sl
 8008480:	465b      	mov	r3, fp
 8008482:	4680      	mov	r8, r0
 8008484:	4689      	mov	r9, r1
 8008486:	f7f8 fb67 	bl	8000b58 <__aeabi_dcmpgt>
 800848a:	2800      	cmp	r0, #0
 800848c:	f040 8295 	bne.w	80089ba <_dtoa_r+0x97a>
 8008490:	4652      	mov	r2, sl
 8008492:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008496:	4640      	mov	r0, r8
 8008498:	4649      	mov	r1, r9
 800849a:	f7f8 fb3f 	bl	8000b1c <__aeabi_dcmplt>
 800849e:	2800      	cmp	r0, #0
 80084a0:	f040 8289 	bne.w	80089b6 <_dtoa_r+0x976>
 80084a4:	ec5b ab19 	vmov	sl, fp, d9
 80084a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f2c0 8148 	blt.w	8008740 <_dtoa_r+0x700>
 80084b0:	9a00      	ldr	r2, [sp, #0]
 80084b2:	2a0e      	cmp	r2, #14
 80084b4:	f300 8144 	bgt.w	8008740 <_dtoa_r+0x700>
 80084b8:	4b67      	ldr	r3, [pc, #412]	; (8008658 <_dtoa_r+0x618>)
 80084ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f280 80d5 	bge.w	8008674 <_dtoa_r+0x634>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f300 80d1 	bgt.w	8008674 <_dtoa_r+0x634>
 80084d2:	f040 826f 	bne.w	80089b4 <_dtoa_r+0x974>
 80084d6:	4b65      	ldr	r3, [pc, #404]	; (800866c <_dtoa_r+0x62c>)
 80084d8:	2200      	movs	r2, #0
 80084da:	4640      	mov	r0, r8
 80084dc:	4649      	mov	r1, r9
 80084de:	f7f8 f8ab 	bl	8000638 <__aeabi_dmul>
 80084e2:	4652      	mov	r2, sl
 80084e4:	465b      	mov	r3, fp
 80084e6:	f7f8 fb2d 	bl	8000b44 <__aeabi_dcmpge>
 80084ea:	9e03      	ldr	r6, [sp, #12]
 80084ec:	4637      	mov	r7, r6
 80084ee:	2800      	cmp	r0, #0
 80084f0:	f040 8245 	bne.w	800897e <_dtoa_r+0x93e>
 80084f4:	9d01      	ldr	r5, [sp, #4]
 80084f6:	2331      	movs	r3, #49	; 0x31
 80084f8:	f805 3b01 	strb.w	r3, [r5], #1
 80084fc:	9b00      	ldr	r3, [sp, #0]
 80084fe:	3301      	adds	r3, #1
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	e240      	b.n	8008986 <_dtoa_r+0x946>
 8008504:	07f2      	lsls	r2, r6, #31
 8008506:	d505      	bpl.n	8008514 <_dtoa_r+0x4d4>
 8008508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800850c:	f7f8 f894 	bl	8000638 <__aeabi_dmul>
 8008510:	3501      	adds	r5, #1
 8008512:	2301      	movs	r3, #1
 8008514:	1076      	asrs	r6, r6, #1
 8008516:	3708      	adds	r7, #8
 8008518:	e777      	b.n	800840a <_dtoa_r+0x3ca>
 800851a:	2502      	movs	r5, #2
 800851c:	e779      	b.n	8008412 <_dtoa_r+0x3d2>
 800851e:	9f00      	ldr	r7, [sp, #0]
 8008520:	9e03      	ldr	r6, [sp, #12]
 8008522:	e794      	b.n	800844e <_dtoa_r+0x40e>
 8008524:	9901      	ldr	r1, [sp, #4]
 8008526:	4b4c      	ldr	r3, [pc, #304]	; (8008658 <_dtoa_r+0x618>)
 8008528:	4431      	add	r1, r6
 800852a:	910d      	str	r1, [sp, #52]	; 0x34
 800852c:	9908      	ldr	r1, [sp, #32]
 800852e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008532:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008536:	2900      	cmp	r1, #0
 8008538:	d043      	beq.n	80085c2 <_dtoa_r+0x582>
 800853a:	494d      	ldr	r1, [pc, #308]	; (8008670 <_dtoa_r+0x630>)
 800853c:	2000      	movs	r0, #0
 800853e:	f7f8 f9a5 	bl	800088c <__aeabi_ddiv>
 8008542:	4652      	mov	r2, sl
 8008544:	465b      	mov	r3, fp
 8008546:	f7f7 febf 	bl	80002c8 <__aeabi_dsub>
 800854a:	9d01      	ldr	r5, [sp, #4]
 800854c:	4682      	mov	sl, r0
 800854e:	468b      	mov	fp, r1
 8008550:	4649      	mov	r1, r9
 8008552:	4640      	mov	r0, r8
 8008554:	f7f8 fb20 	bl	8000b98 <__aeabi_d2iz>
 8008558:	4606      	mov	r6, r0
 800855a:	f7f8 f803 	bl	8000564 <__aeabi_i2d>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	4640      	mov	r0, r8
 8008564:	4649      	mov	r1, r9
 8008566:	f7f7 feaf 	bl	80002c8 <__aeabi_dsub>
 800856a:	3630      	adds	r6, #48	; 0x30
 800856c:	f805 6b01 	strb.w	r6, [r5], #1
 8008570:	4652      	mov	r2, sl
 8008572:	465b      	mov	r3, fp
 8008574:	4680      	mov	r8, r0
 8008576:	4689      	mov	r9, r1
 8008578:	f7f8 fad0 	bl	8000b1c <__aeabi_dcmplt>
 800857c:	2800      	cmp	r0, #0
 800857e:	d163      	bne.n	8008648 <_dtoa_r+0x608>
 8008580:	4642      	mov	r2, r8
 8008582:	464b      	mov	r3, r9
 8008584:	4936      	ldr	r1, [pc, #216]	; (8008660 <_dtoa_r+0x620>)
 8008586:	2000      	movs	r0, #0
 8008588:	f7f7 fe9e 	bl	80002c8 <__aeabi_dsub>
 800858c:	4652      	mov	r2, sl
 800858e:	465b      	mov	r3, fp
 8008590:	f7f8 fac4 	bl	8000b1c <__aeabi_dcmplt>
 8008594:	2800      	cmp	r0, #0
 8008596:	f040 80b5 	bne.w	8008704 <_dtoa_r+0x6c4>
 800859a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800859c:	429d      	cmp	r5, r3
 800859e:	d081      	beq.n	80084a4 <_dtoa_r+0x464>
 80085a0:	4b30      	ldr	r3, [pc, #192]	; (8008664 <_dtoa_r+0x624>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	4650      	mov	r0, sl
 80085a6:	4659      	mov	r1, fp
 80085a8:	f7f8 f846 	bl	8000638 <__aeabi_dmul>
 80085ac:	4b2d      	ldr	r3, [pc, #180]	; (8008664 <_dtoa_r+0x624>)
 80085ae:	4682      	mov	sl, r0
 80085b0:	468b      	mov	fp, r1
 80085b2:	4640      	mov	r0, r8
 80085b4:	4649      	mov	r1, r9
 80085b6:	2200      	movs	r2, #0
 80085b8:	f7f8 f83e 	bl	8000638 <__aeabi_dmul>
 80085bc:	4680      	mov	r8, r0
 80085be:	4689      	mov	r9, r1
 80085c0:	e7c6      	b.n	8008550 <_dtoa_r+0x510>
 80085c2:	4650      	mov	r0, sl
 80085c4:	4659      	mov	r1, fp
 80085c6:	f7f8 f837 	bl	8000638 <__aeabi_dmul>
 80085ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085cc:	9d01      	ldr	r5, [sp, #4]
 80085ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80085d0:	4682      	mov	sl, r0
 80085d2:	468b      	mov	fp, r1
 80085d4:	4649      	mov	r1, r9
 80085d6:	4640      	mov	r0, r8
 80085d8:	f7f8 fade 	bl	8000b98 <__aeabi_d2iz>
 80085dc:	4606      	mov	r6, r0
 80085de:	f7f7 ffc1 	bl	8000564 <__aeabi_i2d>
 80085e2:	3630      	adds	r6, #48	; 0x30
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	4640      	mov	r0, r8
 80085ea:	4649      	mov	r1, r9
 80085ec:	f7f7 fe6c 	bl	80002c8 <__aeabi_dsub>
 80085f0:	f805 6b01 	strb.w	r6, [r5], #1
 80085f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085f6:	429d      	cmp	r5, r3
 80085f8:	4680      	mov	r8, r0
 80085fa:	4689      	mov	r9, r1
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	d124      	bne.n	800864c <_dtoa_r+0x60c>
 8008602:	4b1b      	ldr	r3, [pc, #108]	; (8008670 <_dtoa_r+0x630>)
 8008604:	4650      	mov	r0, sl
 8008606:	4659      	mov	r1, fp
 8008608:	f7f7 fe60 	bl	80002cc <__adddf3>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4640      	mov	r0, r8
 8008612:	4649      	mov	r1, r9
 8008614:	f7f8 faa0 	bl	8000b58 <__aeabi_dcmpgt>
 8008618:	2800      	cmp	r0, #0
 800861a:	d173      	bne.n	8008704 <_dtoa_r+0x6c4>
 800861c:	4652      	mov	r2, sl
 800861e:	465b      	mov	r3, fp
 8008620:	4913      	ldr	r1, [pc, #76]	; (8008670 <_dtoa_r+0x630>)
 8008622:	2000      	movs	r0, #0
 8008624:	f7f7 fe50 	bl	80002c8 <__aeabi_dsub>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4640      	mov	r0, r8
 800862e:	4649      	mov	r1, r9
 8008630:	f7f8 fa74 	bl	8000b1c <__aeabi_dcmplt>
 8008634:	2800      	cmp	r0, #0
 8008636:	f43f af35 	beq.w	80084a4 <_dtoa_r+0x464>
 800863a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800863c:	1e6b      	subs	r3, r5, #1
 800863e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008640:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008644:	2b30      	cmp	r3, #48	; 0x30
 8008646:	d0f8      	beq.n	800863a <_dtoa_r+0x5fa>
 8008648:	9700      	str	r7, [sp, #0]
 800864a:	e049      	b.n	80086e0 <_dtoa_r+0x6a0>
 800864c:	4b05      	ldr	r3, [pc, #20]	; (8008664 <_dtoa_r+0x624>)
 800864e:	f7f7 fff3 	bl	8000638 <__aeabi_dmul>
 8008652:	4680      	mov	r8, r0
 8008654:	4689      	mov	r9, r1
 8008656:	e7bd      	b.n	80085d4 <_dtoa_r+0x594>
 8008658:	0800b2f8 	.word	0x0800b2f8
 800865c:	0800b2d0 	.word	0x0800b2d0
 8008660:	3ff00000 	.word	0x3ff00000
 8008664:	40240000 	.word	0x40240000
 8008668:	401c0000 	.word	0x401c0000
 800866c:	40140000 	.word	0x40140000
 8008670:	3fe00000 	.word	0x3fe00000
 8008674:	9d01      	ldr	r5, [sp, #4]
 8008676:	4656      	mov	r6, sl
 8008678:	465f      	mov	r7, fp
 800867a:	4642      	mov	r2, r8
 800867c:	464b      	mov	r3, r9
 800867e:	4630      	mov	r0, r6
 8008680:	4639      	mov	r1, r7
 8008682:	f7f8 f903 	bl	800088c <__aeabi_ddiv>
 8008686:	f7f8 fa87 	bl	8000b98 <__aeabi_d2iz>
 800868a:	4682      	mov	sl, r0
 800868c:	f7f7 ff6a 	bl	8000564 <__aeabi_i2d>
 8008690:	4642      	mov	r2, r8
 8008692:	464b      	mov	r3, r9
 8008694:	f7f7 ffd0 	bl	8000638 <__aeabi_dmul>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4630      	mov	r0, r6
 800869e:	4639      	mov	r1, r7
 80086a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80086a4:	f7f7 fe10 	bl	80002c8 <__aeabi_dsub>
 80086a8:	f805 6b01 	strb.w	r6, [r5], #1
 80086ac:	9e01      	ldr	r6, [sp, #4]
 80086ae:	9f03      	ldr	r7, [sp, #12]
 80086b0:	1bae      	subs	r6, r5, r6
 80086b2:	42b7      	cmp	r7, r6
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	d135      	bne.n	8008726 <_dtoa_r+0x6e6>
 80086ba:	f7f7 fe07 	bl	80002cc <__adddf3>
 80086be:	4642      	mov	r2, r8
 80086c0:	464b      	mov	r3, r9
 80086c2:	4606      	mov	r6, r0
 80086c4:	460f      	mov	r7, r1
 80086c6:	f7f8 fa47 	bl	8000b58 <__aeabi_dcmpgt>
 80086ca:	b9d0      	cbnz	r0, 8008702 <_dtoa_r+0x6c2>
 80086cc:	4642      	mov	r2, r8
 80086ce:	464b      	mov	r3, r9
 80086d0:	4630      	mov	r0, r6
 80086d2:	4639      	mov	r1, r7
 80086d4:	f7f8 fa18 	bl	8000b08 <__aeabi_dcmpeq>
 80086d8:	b110      	cbz	r0, 80086e0 <_dtoa_r+0x6a0>
 80086da:	f01a 0f01 	tst.w	sl, #1
 80086de:	d110      	bne.n	8008702 <_dtoa_r+0x6c2>
 80086e0:	4620      	mov	r0, r4
 80086e2:	ee18 1a10 	vmov	r1, s16
 80086e6:	f000 fcff 	bl	80090e8 <_Bfree>
 80086ea:	2300      	movs	r3, #0
 80086ec:	9800      	ldr	r0, [sp, #0]
 80086ee:	702b      	strb	r3, [r5, #0]
 80086f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086f2:	3001      	adds	r0, #1
 80086f4:	6018      	str	r0, [r3, #0]
 80086f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f43f acf1 	beq.w	80080e0 <_dtoa_r+0xa0>
 80086fe:	601d      	str	r5, [r3, #0]
 8008700:	e4ee      	b.n	80080e0 <_dtoa_r+0xa0>
 8008702:	9f00      	ldr	r7, [sp, #0]
 8008704:	462b      	mov	r3, r5
 8008706:	461d      	mov	r5, r3
 8008708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800870c:	2a39      	cmp	r2, #57	; 0x39
 800870e:	d106      	bne.n	800871e <_dtoa_r+0x6de>
 8008710:	9a01      	ldr	r2, [sp, #4]
 8008712:	429a      	cmp	r2, r3
 8008714:	d1f7      	bne.n	8008706 <_dtoa_r+0x6c6>
 8008716:	9901      	ldr	r1, [sp, #4]
 8008718:	2230      	movs	r2, #48	; 0x30
 800871a:	3701      	adds	r7, #1
 800871c:	700a      	strb	r2, [r1, #0]
 800871e:	781a      	ldrb	r2, [r3, #0]
 8008720:	3201      	adds	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
 8008724:	e790      	b.n	8008648 <_dtoa_r+0x608>
 8008726:	4ba6      	ldr	r3, [pc, #664]	; (80089c0 <_dtoa_r+0x980>)
 8008728:	2200      	movs	r2, #0
 800872a:	f7f7 ff85 	bl	8000638 <__aeabi_dmul>
 800872e:	2200      	movs	r2, #0
 8008730:	2300      	movs	r3, #0
 8008732:	4606      	mov	r6, r0
 8008734:	460f      	mov	r7, r1
 8008736:	f7f8 f9e7 	bl	8000b08 <__aeabi_dcmpeq>
 800873a:	2800      	cmp	r0, #0
 800873c:	d09d      	beq.n	800867a <_dtoa_r+0x63a>
 800873e:	e7cf      	b.n	80086e0 <_dtoa_r+0x6a0>
 8008740:	9a08      	ldr	r2, [sp, #32]
 8008742:	2a00      	cmp	r2, #0
 8008744:	f000 80d7 	beq.w	80088f6 <_dtoa_r+0x8b6>
 8008748:	9a06      	ldr	r2, [sp, #24]
 800874a:	2a01      	cmp	r2, #1
 800874c:	f300 80ba 	bgt.w	80088c4 <_dtoa_r+0x884>
 8008750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008752:	2a00      	cmp	r2, #0
 8008754:	f000 80b2 	beq.w	80088bc <_dtoa_r+0x87c>
 8008758:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800875c:	9e07      	ldr	r6, [sp, #28]
 800875e:	9d04      	ldr	r5, [sp, #16]
 8008760:	9a04      	ldr	r2, [sp, #16]
 8008762:	441a      	add	r2, r3
 8008764:	9204      	str	r2, [sp, #16]
 8008766:	9a05      	ldr	r2, [sp, #20]
 8008768:	2101      	movs	r1, #1
 800876a:	441a      	add	r2, r3
 800876c:	4620      	mov	r0, r4
 800876e:	9205      	str	r2, [sp, #20]
 8008770:	f000 fd72 	bl	8009258 <__i2b>
 8008774:	4607      	mov	r7, r0
 8008776:	2d00      	cmp	r5, #0
 8008778:	dd0c      	ble.n	8008794 <_dtoa_r+0x754>
 800877a:	9b05      	ldr	r3, [sp, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	dd09      	ble.n	8008794 <_dtoa_r+0x754>
 8008780:	42ab      	cmp	r3, r5
 8008782:	9a04      	ldr	r2, [sp, #16]
 8008784:	bfa8      	it	ge
 8008786:	462b      	movge	r3, r5
 8008788:	1ad2      	subs	r2, r2, r3
 800878a:	9204      	str	r2, [sp, #16]
 800878c:	9a05      	ldr	r2, [sp, #20]
 800878e:	1aed      	subs	r5, r5, r3
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	9305      	str	r3, [sp, #20]
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	b31b      	cbz	r3, 80087e0 <_dtoa_r+0x7a0>
 8008798:	9b08      	ldr	r3, [sp, #32]
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 80af 	beq.w	80088fe <_dtoa_r+0x8be>
 80087a0:	2e00      	cmp	r6, #0
 80087a2:	dd13      	ble.n	80087cc <_dtoa_r+0x78c>
 80087a4:	4639      	mov	r1, r7
 80087a6:	4632      	mov	r2, r6
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 fe15 	bl	80093d8 <__pow5mult>
 80087ae:	ee18 2a10 	vmov	r2, s16
 80087b2:	4601      	mov	r1, r0
 80087b4:	4607      	mov	r7, r0
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 fd64 	bl	8009284 <__multiply>
 80087bc:	ee18 1a10 	vmov	r1, s16
 80087c0:	4680      	mov	r8, r0
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 fc90 	bl	80090e8 <_Bfree>
 80087c8:	ee08 8a10 	vmov	s16, r8
 80087cc:	9b07      	ldr	r3, [sp, #28]
 80087ce:	1b9a      	subs	r2, r3, r6
 80087d0:	d006      	beq.n	80087e0 <_dtoa_r+0x7a0>
 80087d2:	ee18 1a10 	vmov	r1, s16
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 fdfe 	bl	80093d8 <__pow5mult>
 80087dc:	ee08 0a10 	vmov	s16, r0
 80087e0:	2101      	movs	r1, #1
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fd38 	bl	8009258 <__i2b>
 80087e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	4606      	mov	r6, r0
 80087ee:	f340 8088 	ble.w	8008902 <_dtoa_r+0x8c2>
 80087f2:	461a      	mov	r2, r3
 80087f4:	4601      	mov	r1, r0
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 fdee 	bl	80093d8 <__pow5mult>
 80087fc:	9b06      	ldr	r3, [sp, #24]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	4606      	mov	r6, r0
 8008802:	f340 8081 	ble.w	8008908 <_dtoa_r+0x8c8>
 8008806:	f04f 0800 	mov.w	r8, #0
 800880a:	6933      	ldr	r3, [r6, #16]
 800880c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008810:	6918      	ldr	r0, [r3, #16]
 8008812:	f000 fcd1 	bl	80091b8 <__hi0bits>
 8008816:	f1c0 0020 	rsb	r0, r0, #32
 800881a:	9b05      	ldr	r3, [sp, #20]
 800881c:	4418      	add	r0, r3
 800881e:	f010 001f 	ands.w	r0, r0, #31
 8008822:	f000 8092 	beq.w	800894a <_dtoa_r+0x90a>
 8008826:	f1c0 0320 	rsb	r3, r0, #32
 800882a:	2b04      	cmp	r3, #4
 800882c:	f340 808a 	ble.w	8008944 <_dtoa_r+0x904>
 8008830:	f1c0 001c 	rsb	r0, r0, #28
 8008834:	9b04      	ldr	r3, [sp, #16]
 8008836:	4403      	add	r3, r0
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	9b05      	ldr	r3, [sp, #20]
 800883c:	4403      	add	r3, r0
 800883e:	4405      	add	r5, r0
 8008840:	9305      	str	r3, [sp, #20]
 8008842:	9b04      	ldr	r3, [sp, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	dd07      	ble.n	8008858 <_dtoa_r+0x818>
 8008848:	ee18 1a10 	vmov	r1, s16
 800884c:	461a      	mov	r2, r3
 800884e:	4620      	mov	r0, r4
 8008850:	f000 fe1c 	bl	800948c <__lshift>
 8008854:	ee08 0a10 	vmov	s16, r0
 8008858:	9b05      	ldr	r3, [sp, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	dd05      	ble.n	800886a <_dtoa_r+0x82a>
 800885e:	4631      	mov	r1, r6
 8008860:	461a      	mov	r2, r3
 8008862:	4620      	mov	r0, r4
 8008864:	f000 fe12 	bl	800948c <__lshift>
 8008868:	4606      	mov	r6, r0
 800886a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d06e      	beq.n	800894e <_dtoa_r+0x90e>
 8008870:	ee18 0a10 	vmov	r0, s16
 8008874:	4631      	mov	r1, r6
 8008876:	f000 fe79 	bl	800956c <__mcmp>
 800887a:	2800      	cmp	r0, #0
 800887c:	da67      	bge.n	800894e <_dtoa_r+0x90e>
 800887e:	9b00      	ldr	r3, [sp, #0]
 8008880:	3b01      	subs	r3, #1
 8008882:	ee18 1a10 	vmov	r1, s16
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	220a      	movs	r2, #10
 800888a:	2300      	movs	r3, #0
 800888c:	4620      	mov	r0, r4
 800888e:	f000 fc4d 	bl	800912c <__multadd>
 8008892:	9b08      	ldr	r3, [sp, #32]
 8008894:	ee08 0a10 	vmov	s16, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 81b1 	beq.w	8008c00 <_dtoa_r+0xbc0>
 800889e:	2300      	movs	r3, #0
 80088a0:	4639      	mov	r1, r7
 80088a2:	220a      	movs	r2, #10
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 fc41 	bl	800912c <__multadd>
 80088aa:	9b02      	ldr	r3, [sp, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	4607      	mov	r7, r0
 80088b0:	f300 808e 	bgt.w	80089d0 <_dtoa_r+0x990>
 80088b4:	9b06      	ldr	r3, [sp, #24]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	dc51      	bgt.n	800895e <_dtoa_r+0x91e>
 80088ba:	e089      	b.n	80089d0 <_dtoa_r+0x990>
 80088bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088c2:	e74b      	b.n	800875c <_dtoa_r+0x71c>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	1e5e      	subs	r6, r3, #1
 80088c8:	9b07      	ldr	r3, [sp, #28]
 80088ca:	42b3      	cmp	r3, r6
 80088cc:	bfbf      	itttt	lt
 80088ce:	9b07      	ldrlt	r3, [sp, #28]
 80088d0:	9607      	strlt	r6, [sp, #28]
 80088d2:	1af2      	sublt	r2, r6, r3
 80088d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088d6:	bfb6      	itet	lt
 80088d8:	189b      	addlt	r3, r3, r2
 80088da:	1b9e      	subge	r6, r3, r6
 80088dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	bfb8      	it	lt
 80088e2:	2600      	movlt	r6, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	bfb7      	itett	lt
 80088e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80088ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80088f0:	1a9d      	sublt	r5, r3, r2
 80088f2:	2300      	movlt	r3, #0
 80088f4:	e734      	b.n	8008760 <_dtoa_r+0x720>
 80088f6:	9e07      	ldr	r6, [sp, #28]
 80088f8:	9d04      	ldr	r5, [sp, #16]
 80088fa:	9f08      	ldr	r7, [sp, #32]
 80088fc:	e73b      	b.n	8008776 <_dtoa_r+0x736>
 80088fe:	9a07      	ldr	r2, [sp, #28]
 8008900:	e767      	b.n	80087d2 <_dtoa_r+0x792>
 8008902:	9b06      	ldr	r3, [sp, #24]
 8008904:	2b01      	cmp	r3, #1
 8008906:	dc18      	bgt.n	800893a <_dtoa_r+0x8fa>
 8008908:	f1ba 0f00 	cmp.w	sl, #0
 800890c:	d115      	bne.n	800893a <_dtoa_r+0x8fa>
 800890e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008912:	b993      	cbnz	r3, 800893a <_dtoa_r+0x8fa>
 8008914:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008918:	0d1b      	lsrs	r3, r3, #20
 800891a:	051b      	lsls	r3, r3, #20
 800891c:	b183      	cbz	r3, 8008940 <_dtoa_r+0x900>
 800891e:	9b04      	ldr	r3, [sp, #16]
 8008920:	3301      	adds	r3, #1
 8008922:	9304      	str	r3, [sp, #16]
 8008924:	9b05      	ldr	r3, [sp, #20]
 8008926:	3301      	adds	r3, #1
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	f04f 0801 	mov.w	r8, #1
 800892e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008930:	2b00      	cmp	r3, #0
 8008932:	f47f af6a 	bne.w	800880a <_dtoa_r+0x7ca>
 8008936:	2001      	movs	r0, #1
 8008938:	e76f      	b.n	800881a <_dtoa_r+0x7da>
 800893a:	f04f 0800 	mov.w	r8, #0
 800893e:	e7f6      	b.n	800892e <_dtoa_r+0x8ee>
 8008940:	4698      	mov	r8, r3
 8008942:	e7f4      	b.n	800892e <_dtoa_r+0x8ee>
 8008944:	f43f af7d 	beq.w	8008842 <_dtoa_r+0x802>
 8008948:	4618      	mov	r0, r3
 800894a:	301c      	adds	r0, #28
 800894c:	e772      	b.n	8008834 <_dtoa_r+0x7f4>
 800894e:	9b03      	ldr	r3, [sp, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	dc37      	bgt.n	80089c4 <_dtoa_r+0x984>
 8008954:	9b06      	ldr	r3, [sp, #24]
 8008956:	2b02      	cmp	r3, #2
 8008958:	dd34      	ble.n	80089c4 <_dtoa_r+0x984>
 800895a:	9b03      	ldr	r3, [sp, #12]
 800895c:	9302      	str	r3, [sp, #8]
 800895e:	9b02      	ldr	r3, [sp, #8]
 8008960:	b96b      	cbnz	r3, 800897e <_dtoa_r+0x93e>
 8008962:	4631      	mov	r1, r6
 8008964:	2205      	movs	r2, #5
 8008966:	4620      	mov	r0, r4
 8008968:	f000 fbe0 	bl	800912c <__multadd>
 800896c:	4601      	mov	r1, r0
 800896e:	4606      	mov	r6, r0
 8008970:	ee18 0a10 	vmov	r0, s16
 8008974:	f000 fdfa 	bl	800956c <__mcmp>
 8008978:	2800      	cmp	r0, #0
 800897a:	f73f adbb 	bgt.w	80084f4 <_dtoa_r+0x4b4>
 800897e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008980:	9d01      	ldr	r5, [sp, #4]
 8008982:	43db      	mvns	r3, r3
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	f04f 0800 	mov.w	r8, #0
 800898a:	4631      	mov	r1, r6
 800898c:	4620      	mov	r0, r4
 800898e:	f000 fbab 	bl	80090e8 <_Bfree>
 8008992:	2f00      	cmp	r7, #0
 8008994:	f43f aea4 	beq.w	80086e0 <_dtoa_r+0x6a0>
 8008998:	f1b8 0f00 	cmp.w	r8, #0
 800899c:	d005      	beq.n	80089aa <_dtoa_r+0x96a>
 800899e:	45b8      	cmp	r8, r7
 80089a0:	d003      	beq.n	80089aa <_dtoa_r+0x96a>
 80089a2:	4641      	mov	r1, r8
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fb9f 	bl	80090e8 <_Bfree>
 80089aa:	4639      	mov	r1, r7
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fb9b 	bl	80090e8 <_Bfree>
 80089b2:	e695      	b.n	80086e0 <_dtoa_r+0x6a0>
 80089b4:	2600      	movs	r6, #0
 80089b6:	4637      	mov	r7, r6
 80089b8:	e7e1      	b.n	800897e <_dtoa_r+0x93e>
 80089ba:	9700      	str	r7, [sp, #0]
 80089bc:	4637      	mov	r7, r6
 80089be:	e599      	b.n	80084f4 <_dtoa_r+0x4b4>
 80089c0:	40240000 	.word	0x40240000
 80089c4:	9b08      	ldr	r3, [sp, #32]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 80ca 	beq.w	8008b60 <_dtoa_r+0xb20>
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	9302      	str	r3, [sp, #8]
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	dd05      	ble.n	80089e0 <_dtoa_r+0x9a0>
 80089d4:	4639      	mov	r1, r7
 80089d6:	462a      	mov	r2, r5
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fd57 	bl	800948c <__lshift>
 80089de:	4607      	mov	r7, r0
 80089e0:	f1b8 0f00 	cmp.w	r8, #0
 80089e4:	d05b      	beq.n	8008a9e <_dtoa_r+0xa5e>
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 fb3d 	bl	8009068 <_Balloc>
 80089ee:	4605      	mov	r5, r0
 80089f0:	b928      	cbnz	r0, 80089fe <_dtoa_r+0x9be>
 80089f2:	4b87      	ldr	r3, [pc, #540]	; (8008c10 <_dtoa_r+0xbd0>)
 80089f4:	4602      	mov	r2, r0
 80089f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80089fa:	f7ff bb3b 	b.w	8008074 <_dtoa_r+0x34>
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	3202      	adds	r2, #2
 8008a02:	0092      	lsls	r2, r2, #2
 8008a04:	f107 010c 	add.w	r1, r7, #12
 8008a08:	300c      	adds	r0, #12
 8008a0a:	f7fe fc96 	bl	800733a <memcpy>
 8008a0e:	2201      	movs	r2, #1
 8008a10:	4629      	mov	r1, r5
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 fd3a 	bl	800948c <__lshift>
 8008a18:	9b01      	ldr	r3, [sp, #4]
 8008a1a:	f103 0901 	add.w	r9, r3, #1
 8008a1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	9305      	str	r3, [sp, #20]
 8008a26:	f00a 0301 	and.w	r3, sl, #1
 8008a2a:	46b8      	mov	r8, r7
 8008a2c:	9304      	str	r3, [sp, #16]
 8008a2e:	4607      	mov	r7, r0
 8008a30:	4631      	mov	r1, r6
 8008a32:	ee18 0a10 	vmov	r0, s16
 8008a36:	f7ff fa75 	bl	8007f24 <quorem>
 8008a3a:	4641      	mov	r1, r8
 8008a3c:	9002      	str	r0, [sp, #8]
 8008a3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a42:	ee18 0a10 	vmov	r0, s16
 8008a46:	f000 fd91 	bl	800956c <__mcmp>
 8008a4a:	463a      	mov	r2, r7
 8008a4c:	9003      	str	r0, [sp, #12]
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 fda7 	bl	80095a4 <__mdiff>
 8008a56:	68c2      	ldr	r2, [r0, #12]
 8008a58:	f109 3bff 	add.w	fp, r9, #4294967295
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	bb02      	cbnz	r2, 8008aa2 <_dtoa_r+0xa62>
 8008a60:	4601      	mov	r1, r0
 8008a62:	ee18 0a10 	vmov	r0, s16
 8008a66:	f000 fd81 	bl	800956c <__mcmp>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4620      	mov	r0, r4
 8008a70:	9207      	str	r2, [sp, #28]
 8008a72:	f000 fb39 	bl	80090e8 <_Bfree>
 8008a76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008a7a:	ea43 0102 	orr.w	r1, r3, r2
 8008a7e:	9b04      	ldr	r3, [sp, #16]
 8008a80:	430b      	orrs	r3, r1
 8008a82:	464d      	mov	r5, r9
 8008a84:	d10f      	bne.n	8008aa6 <_dtoa_r+0xa66>
 8008a86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a8a:	d02a      	beq.n	8008ae2 <_dtoa_r+0xaa2>
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	dd02      	ble.n	8008a98 <_dtoa_r+0xa58>
 8008a92:	9b02      	ldr	r3, [sp, #8]
 8008a94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008a98:	f88b a000 	strb.w	sl, [fp]
 8008a9c:	e775      	b.n	800898a <_dtoa_r+0x94a>
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	e7ba      	b.n	8008a18 <_dtoa_r+0x9d8>
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	e7e2      	b.n	8008a6c <_dtoa_r+0xa2c>
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	db04      	blt.n	8008ab6 <_dtoa_r+0xa76>
 8008aac:	9906      	ldr	r1, [sp, #24]
 8008aae:	430b      	orrs	r3, r1
 8008ab0:	9904      	ldr	r1, [sp, #16]
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	d122      	bne.n	8008afc <_dtoa_r+0xabc>
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	ddee      	ble.n	8008a98 <_dtoa_r+0xa58>
 8008aba:	ee18 1a10 	vmov	r1, s16
 8008abe:	2201      	movs	r2, #1
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fce3 	bl	800948c <__lshift>
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	ee08 0a10 	vmov	s16, r0
 8008acc:	f000 fd4e 	bl	800956c <__mcmp>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	dc03      	bgt.n	8008adc <_dtoa_r+0xa9c>
 8008ad4:	d1e0      	bne.n	8008a98 <_dtoa_r+0xa58>
 8008ad6:	f01a 0f01 	tst.w	sl, #1
 8008ada:	d0dd      	beq.n	8008a98 <_dtoa_r+0xa58>
 8008adc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ae0:	d1d7      	bne.n	8008a92 <_dtoa_r+0xa52>
 8008ae2:	2339      	movs	r3, #57	; 0x39
 8008ae4:	f88b 3000 	strb.w	r3, [fp]
 8008ae8:	462b      	mov	r3, r5
 8008aea:	461d      	mov	r5, r3
 8008aec:	3b01      	subs	r3, #1
 8008aee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008af2:	2a39      	cmp	r2, #57	; 0x39
 8008af4:	d071      	beq.n	8008bda <_dtoa_r+0xb9a>
 8008af6:	3201      	adds	r2, #1
 8008af8:	701a      	strb	r2, [r3, #0]
 8008afa:	e746      	b.n	800898a <_dtoa_r+0x94a>
 8008afc:	2a00      	cmp	r2, #0
 8008afe:	dd07      	ble.n	8008b10 <_dtoa_r+0xad0>
 8008b00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b04:	d0ed      	beq.n	8008ae2 <_dtoa_r+0xaa2>
 8008b06:	f10a 0301 	add.w	r3, sl, #1
 8008b0a:	f88b 3000 	strb.w	r3, [fp]
 8008b0e:	e73c      	b.n	800898a <_dtoa_r+0x94a>
 8008b10:	9b05      	ldr	r3, [sp, #20]
 8008b12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b16:	4599      	cmp	r9, r3
 8008b18:	d047      	beq.n	8008baa <_dtoa_r+0xb6a>
 8008b1a:	ee18 1a10 	vmov	r1, s16
 8008b1e:	2300      	movs	r3, #0
 8008b20:	220a      	movs	r2, #10
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 fb02 	bl	800912c <__multadd>
 8008b28:	45b8      	cmp	r8, r7
 8008b2a:	ee08 0a10 	vmov	s16, r0
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	f04f 020a 	mov.w	r2, #10
 8008b36:	4641      	mov	r1, r8
 8008b38:	4620      	mov	r0, r4
 8008b3a:	d106      	bne.n	8008b4a <_dtoa_r+0xb0a>
 8008b3c:	f000 faf6 	bl	800912c <__multadd>
 8008b40:	4680      	mov	r8, r0
 8008b42:	4607      	mov	r7, r0
 8008b44:	f109 0901 	add.w	r9, r9, #1
 8008b48:	e772      	b.n	8008a30 <_dtoa_r+0x9f0>
 8008b4a:	f000 faef 	bl	800912c <__multadd>
 8008b4e:	4639      	mov	r1, r7
 8008b50:	4680      	mov	r8, r0
 8008b52:	2300      	movs	r3, #0
 8008b54:	220a      	movs	r2, #10
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 fae8 	bl	800912c <__multadd>
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	e7f1      	b.n	8008b44 <_dtoa_r+0xb04>
 8008b60:	9b03      	ldr	r3, [sp, #12]
 8008b62:	9302      	str	r3, [sp, #8]
 8008b64:	9d01      	ldr	r5, [sp, #4]
 8008b66:	ee18 0a10 	vmov	r0, s16
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	f7ff f9da 	bl	8007f24 <quorem>
 8008b70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b74:	9b01      	ldr	r3, [sp, #4]
 8008b76:	f805 ab01 	strb.w	sl, [r5], #1
 8008b7a:	1aea      	subs	r2, r5, r3
 8008b7c:	9b02      	ldr	r3, [sp, #8]
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	dd09      	ble.n	8008b96 <_dtoa_r+0xb56>
 8008b82:	ee18 1a10 	vmov	r1, s16
 8008b86:	2300      	movs	r3, #0
 8008b88:	220a      	movs	r2, #10
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f000 face 	bl	800912c <__multadd>
 8008b90:	ee08 0a10 	vmov	s16, r0
 8008b94:	e7e7      	b.n	8008b66 <_dtoa_r+0xb26>
 8008b96:	9b02      	ldr	r3, [sp, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	bfc8      	it	gt
 8008b9c:	461d      	movgt	r5, r3
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	bfd8      	it	le
 8008ba2:	2501      	movle	r5, #1
 8008ba4:	441d      	add	r5, r3
 8008ba6:	f04f 0800 	mov.w	r8, #0
 8008baa:	ee18 1a10 	vmov	r1, s16
 8008bae:	2201      	movs	r2, #1
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 fc6b 	bl	800948c <__lshift>
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	ee08 0a10 	vmov	s16, r0
 8008bbc:	f000 fcd6 	bl	800956c <__mcmp>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	dc91      	bgt.n	8008ae8 <_dtoa_r+0xaa8>
 8008bc4:	d102      	bne.n	8008bcc <_dtoa_r+0xb8c>
 8008bc6:	f01a 0f01 	tst.w	sl, #1
 8008bca:	d18d      	bne.n	8008ae8 <_dtoa_r+0xaa8>
 8008bcc:	462b      	mov	r3, r5
 8008bce:	461d      	mov	r5, r3
 8008bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bd4:	2a30      	cmp	r2, #48	; 0x30
 8008bd6:	d0fa      	beq.n	8008bce <_dtoa_r+0xb8e>
 8008bd8:	e6d7      	b.n	800898a <_dtoa_r+0x94a>
 8008bda:	9a01      	ldr	r2, [sp, #4]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d184      	bne.n	8008aea <_dtoa_r+0xaaa>
 8008be0:	9b00      	ldr	r3, [sp, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	2331      	movs	r3, #49	; 0x31
 8008be8:	7013      	strb	r3, [r2, #0]
 8008bea:	e6ce      	b.n	800898a <_dtoa_r+0x94a>
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <_dtoa_r+0xbd4>)
 8008bee:	f7ff ba95 	b.w	800811c <_dtoa_r+0xdc>
 8008bf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f47f aa6e 	bne.w	80080d6 <_dtoa_r+0x96>
 8008bfa:	4b07      	ldr	r3, [pc, #28]	; (8008c18 <_dtoa_r+0xbd8>)
 8008bfc:	f7ff ba8e 	b.w	800811c <_dtoa_r+0xdc>
 8008c00:	9b02      	ldr	r3, [sp, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dcae      	bgt.n	8008b64 <_dtoa_r+0xb24>
 8008c06:	9b06      	ldr	r3, [sp, #24]
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	f73f aea8 	bgt.w	800895e <_dtoa_r+0x91e>
 8008c0e:	e7a9      	b.n	8008b64 <_dtoa_r+0xb24>
 8008c10:	0800b263 	.word	0x0800b263
 8008c14:	0800b1c0 	.word	0x0800b1c0
 8008c18:	0800b1e4 	.word	0x0800b1e4

08008c1c <print_e>:
 8008c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	ec43 2b10 	vmov	d0, r2, r3
 8008c24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008c26:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8008c2a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008c2c:	ab04      	add	r3, sp, #16
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	ab03      	add	r3, sp, #12
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	1c62      	adds	r2, r4, #1
 8008c36:	ab05      	add	r3, sp, #20
 8008c38:	460f      	mov	r7, r1
 8008c3a:	2102      	movs	r1, #2
 8008c3c:	f7ff fa00 	bl	8008040 <_dtoa_r>
 8008c40:	9a05      	ldr	r2, [sp, #20]
 8008c42:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d105      	bne.n	8008c56 <print_e+0x3a>
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f000 fe21 	bl	8009894 <strcpy>
 8008c52:	b007      	add	sp, #28
 8008c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c56:	463b      	mov	r3, r7
 8008c58:	7801      	ldrb	r1, [r0, #0]
 8008c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c5e:	2c00      	cmp	r4, #0
 8008c60:	bfc8      	it	gt
 8008c62:	2501      	movgt	r5, #1
 8008c64:	212e      	movs	r1, #46	; 0x2e
 8008c66:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8008c6a:	b10f      	cbz	r7, 8008c70 <print_e+0x54>
 8008c6c:	2c00      	cmp	r4, #0
 8008c6e:	dc37      	bgt.n	8008ce0 <print_e+0xc4>
 8008c70:	2e67      	cmp	r6, #103	; 0x67
 8008c72:	d046      	beq.n	8008d02 <print_e+0xe6>
 8008c74:	2e47      	cmp	r6, #71	; 0x47
 8008c76:	d046      	beq.n	8008d06 <print_e+0xea>
 8008c78:	212e      	movs	r1, #46	; 0x2e
 8008c7a:	2030      	movs	r0, #48	; 0x30
 8008c7c:	2c00      	cmp	r4, #0
 8008c7e:	dc38      	bgt.n	8008cf2 <print_e+0xd6>
 8008c80:	1e51      	subs	r1, r2, #1
 8008c82:	2900      	cmp	r1, #0
 8008c84:	bfb8      	it	lt
 8008c86:	f1c2 0201 	rsblt	r2, r2, #1
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	9105      	str	r1, [sp, #20]
 8008c8e:	bfac      	ite	ge
 8008c90:	222b      	movge	r2, #43	; 0x2b
 8008c92:	9205      	strlt	r2, [sp, #20]
 8008c94:	f800 6b02 	strb.w	r6, [r0], #2
 8008c98:	bfa8      	it	ge
 8008c9a:	705a      	strbge	r2, [r3, #1]
 8008c9c:	9a05      	ldr	r2, [sp, #20]
 8008c9e:	bfbc      	itt	lt
 8008ca0:	212d      	movlt	r1, #45	; 0x2d
 8008ca2:	7059      	strblt	r1, [r3, #1]
 8008ca4:	2a63      	cmp	r2, #99	; 0x63
 8008ca6:	dd0b      	ble.n	8008cc0 <print_e+0xa4>
 8008ca8:	2164      	movs	r1, #100	; 0x64
 8008caa:	fb92 f1f1 	sdiv	r1, r2, r1
 8008cae:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8008cb2:	1cd8      	adds	r0, r3, #3
 8008cb4:	709c      	strb	r4, [r3, #2]
 8008cb6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008cba:	fb03 2201 	mla	r2, r3, r1, r2
 8008cbe:	9205      	str	r2, [sp, #20]
 8008cc0:	9b05      	ldr	r3, [sp, #20]
 8008cc2:	220a      	movs	r2, #10
 8008cc4:	fb93 f2f2 	sdiv	r2, r3, r2
 8008cc8:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8008ccc:	7001      	strb	r1, [r0, #0]
 8008cce:	f06f 0109 	mvn.w	r1, #9
 8008cd2:	fb01 3302 	mla	r3, r1, r2, r3
 8008cd6:	3330      	adds	r3, #48	; 0x30
 8008cd8:	7043      	strb	r3, [r0, #1]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	7083      	strb	r3, [r0, #2]
 8008cde:	e7b8      	b.n	8008c52 <print_e+0x36>
 8008ce0:	b10d      	cbz	r5, 8008ce6 <print_e+0xca>
 8008ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce6:	7805      	ldrb	r5, [r0, #0]
 8008ce8:	f803 5b01 	strb.w	r5, [r3], #1
 8008cec:	3c01      	subs	r4, #1
 8008cee:	2500      	movs	r5, #0
 8008cf0:	e7b9      	b.n	8008c66 <print_e+0x4a>
 8008cf2:	b10d      	cbz	r5, 8008cf8 <print_e+0xdc>
 8008cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8008cf8:	f803 0b01 	strb.w	r0, [r3], #1
 8008cfc:	3c01      	subs	r4, #1
 8008cfe:	2500      	movs	r5, #0
 8008d00:	e7bc      	b.n	8008c7c <print_e+0x60>
 8008d02:	2665      	movs	r6, #101	; 0x65
 8008d04:	e7bc      	b.n	8008c80 <print_e+0x64>
 8008d06:	2645      	movs	r6, #69	; 0x45
 8008d08:	e7ba      	b.n	8008c80 <print_e+0x64>
 8008d0a:	0000      	movs	r0, r0
 8008d0c:	0000      	movs	r0, r0
	...

08008d10 <_gcvt>:
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	ec55 4b10 	vmov	r4, r5, d0
 8008d18:	b088      	sub	sp, #32
 8008d1a:	4681      	mov	r9, r0
 8008d1c:	4688      	mov	r8, r1
 8008d1e:	4616      	mov	r6, r2
 8008d20:	469a      	mov	sl, r3
 8008d22:	ee10 0a10 	vmov	r0, s0
 8008d26:	2200      	movs	r2, #0
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008d2e:	f7f7 fef5 	bl	8000b1c <__aeabi_dcmplt>
 8008d32:	b110      	cbz	r0, 8008d3a <_gcvt+0x2a>
 8008d34:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008d38:	461d      	mov	r5, r3
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4620      	mov	r0, r4
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7f7 fee1 	bl	8000b08 <__aeabi_dcmpeq>
 8008d46:	b138      	cbz	r0, 8008d58 <_gcvt+0x48>
 8008d48:	2330      	movs	r3, #48	; 0x30
 8008d4a:	7033      	strb	r3, [r6, #0]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	7073      	strb	r3, [r6, #1]
 8008d50:	4630      	mov	r0, r6
 8008d52:	b008      	add	sp, #32
 8008d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d58:	a34b      	add	r3, pc, #300	; (adr r3, 8008e88 <_gcvt+0x178>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	4620      	mov	r0, r4
 8008d60:	4629      	mov	r1, r5
 8008d62:	f7f7 fee5 	bl	8000b30 <__aeabi_dcmple>
 8008d66:	b158      	cbz	r0, 8008d80 <_gcvt+0x70>
 8008d68:	f108 31ff 	add.w	r1, r8, #4294967295
 8008d6c:	9100      	str	r1, [sp, #0]
 8008d6e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8008d72:	4622      	mov	r2, r4
 8008d74:	462b      	mov	r3, r5
 8008d76:	4631      	mov	r1, r6
 8008d78:	4648      	mov	r0, r9
 8008d7a:	f7ff ff4f 	bl	8008c1c <print_e>
 8008d7e:	e7e7      	b.n	8008d50 <_gcvt+0x40>
 8008d80:	4640      	mov	r0, r8
 8008d82:	f000 fcf5 	bl	8009770 <_mprec_log10>
 8008d86:	4622      	mov	r2, r4
 8008d88:	ec51 0b10 	vmov	r0, r1, d0
 8008d8c:	462b      	mov	r3, r5
 8008d8e:	f7f7 fecf 	bl	8000b30 <__aeabi_dcmple>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d1e8      	bne.n	8008d68 <_gcvt+0x58>
 8008d96:	ab07      	add	r3, sp, #28
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	ab06      	add	r3, sp, #24
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	4642      	mov	r2, r8
 8008da0:	ab05      	add	r3, sp, #20
 8008da2:	ec45 4b10 	vmov	d0, r4, r5
 8008da6:	2102      	movs	r1, #2
 8008da8:	4648      	mov	r0, r9
 8008daa:	f7ff f949 	bl	8008040 <_dtoa_r>
 8008dae:	9a05      	ldr	r2, [sp, #20]
 8008db0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d00e      	beq.n	8008dd6 <_gcvt+0xc6>
 8008db8:	4633      	mov	r3, r6
 8008dba:	44b0      	add	r8, r6
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008dc2:	9c05      	ldr	r4, [sp, #20]
 8008dc4:	eba8 0203 	sub.w	r2, r8, r3
 8008dc8:	b109      	cbz	r1, 8008dce <_gcvt+0xbe>
 8008dca:	2c00      	cmp	r4, #0
 8008dcc:	dc08      	bgt.n	8008de0 <_gcvt+0xd0>
 8008dce:	2100      	movs	r1, #0
 8008dd0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008dd4:	e00d      	b.n	8008df2 <_gcvt+0xe2>
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f000 fd5b 	bl	8009894 <strcpy>
 8008dde:	e7b7      	b.n	8008d50 <_gcvt+0x40>
 8008de0:	3c01      	subs	r4, #1
 8008de2:	f803 1b01 	strb.w	r1, [r3], #1
 8008de6:	9405      	str	r4, [sp, #20]
 8008de8:	e7e8      	b.n	8008dbc <_gcvt+0xac>
 8008dea:	f803 cb01 	strb.w	ip, [r3], #1
 8008dee:	3a01      	subs	r2, #1
 8008df0:	2101      	movs	r1, #1
 8008df2:	2c00      	cmp	r4, #0
 8008df4:	4620      	mov	r0, r4
 8008df6:	dc2a      	bgt.n	8008e4e <_gcvt+0x13e>
 8008df8:	b101      	cbz	r1, 8008dfc <_gcvt+0xec>
 8008dfa:	9405      	str	r4, [sp, #20]
 8008dfc:	b90f      	cbnz	r7, 8008e02 <_gcvt+0xf2>
 8008dfe:	7829      	ldrb	r1, [r5, #0]
 8008e00:	b311      	cbz	r1, 8008e48 <_gcvt+0x138>
 8008e02:	42b3      	cmp	r3, r6
 8008e04:	bf04      	itt	eq
 8008e06:	2130      	moveq	r1, #48	; 0x30
 8008e08:	f803 1b01 	strbeq.w	r1, [r3], #1
 8008e0c:	212e      	movs	r1, #46	; 0x2e
 8008e0e:	7019      	strb	r1, [r3, #0]
 8008e10:	9905      	ldr	r1, [sp, #20]
 8008e12:	4618      	mov	r0, r3
 8008e14:	2400      	movs	r4, #0
 8008e16:	eba1 0c03 	sub.w	ip, r1, r3
 8008e1a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008e1e:	eb1c 0f00 	cmn.w	ip, r0
 8008e22:	d41c      	bmi.n	8008e5e <_gcvt+0x14e>
 8008e24:	2900      	cmp	r1, #0
 8008e26:	f1c1 0000 	rsb	r0, r1, #0
 8008e2a:	bfc8      	it	gt
 8008e2c:	2000      	movgt	r0, #0
 8008e2e:	f100 0c01 	add.w	ip, r0, #1
 8008e32:	4463      	add	r3, ip
 8008e34:	4401      	add	r1, r0
 8008e36:	b104      	cbz	r4, 8008e3a <_gcvt+0x12a>
 8008e38:	9105      	str	r1, [sp, #20]
 8008e3a:	1e69      	subs	r1, r5, #1
 8008e3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e40:	b108      	cbz	r0, 8008e46 <_gcvt+0x136>
 8008e42:	2a00      	cmp	r2, #0
 8008e44:	dc0f      	bgt.n	8008e66 <_gcvt+0x156>
 8008e46:	b9df      	cbnz	r7, 8008e80 <_gcvt+0x170>
 8008e48:	2200      	movs	r2, #0
 8008e4a:	701a      	strb	r2, [r3, #0]
 8008e4c:	e780      	b.n	8008d50 <_gcvt+0x40>
 8008e4e:	2a00      	cmp	r2, #0
 8008e50:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e54:	dcc9      	bgt.n	8008dea <_gcvt+0xda>
 8008e56:	2900      	cmp	r1, #0
 8008e58:	d0d0      	beq.n	8008dfc <_gcvt+0xec>
 8008e5a:	9005      	str	r0, [sp, #20]
 8008e5c:	e7ce      	b.n	8008dfc <_gcvt+0xec>
 8008e5e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8008e62:	2401      	movs	r4, #1
 8008e64:	e7db      	b.n	8008e1e <_gcvt+0x10e>
 8008e66:	f803 0b01 	strb.w	r0, [r3], #1
 8008e6a:	3a01      	subs	r2, #1
 8008e6c:	e7e6      	b.n	8008e3c <_gcvt+0x12c>
 8008e6e:	f801 5b01 	strb.w	r5, [r1], #1
 8008e72:	1a60      	subs	r0, r4, r1
 8008e74:	2800      	cmp	r0, #0
 8008e76:	dcfa      	bgt.n	8008e6e <_gcvt+0x15e>
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	bfa8      	it	ge
 8008e7c:	189b      	addge	r3, r3, r2
 8008e7e:	e7e3      	b.n	8008e48 <_gcvt+0x138>
 8008e80:	4619      	mov	r1, r3
 8008e82:	189c      	adds	r4, r3, r2
 8008e84:	2530      	movs	r5, #48	; 0x30
 8008e86:	e7f4      	b.n	8008e72 <_gcvt+0x162>
 8008e88:	eb1c432d 	.word	0xeb1c432d
 8008e8c:	3f1a36e2 	.word	0x3f1a36e2

08008e90 <__sflush_r>:
 8008e90:	898a      	ldrh	r2, [r1, #12]
 8008e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e96:	4605      	mov	r5, r0
 8008e98:	0710      	lsls	r0, r2, #28
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	d458      	bmi.n	8008f50 <__sflush_r+0xc0>
 8008e9e:	684b      	ldr	r3, [r1, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dc05      	bgt.n	8008eb0 <__sflush_r+0x20>
 8008ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	dc02      	bgt.n	8008eb0 <__sflush_r+0x20>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	d0f9      	beq.n	8008eaa <__sflush_r+0x1a>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ebc:	682f      	ldr	r7, [r5, #0]
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	d032      	beq.n	8008f28 <__sflush_r+0x98>
 8008ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	075a      	lsls	r2, r3, #29
 8008ec8:	d505      	bpl.n	8008ed6 <__sflush_r+0x46>
 8008eca:	6863      	ldr	r3, [r4, #4]
 8008ecc:	1ac0      	subs	r0, r0, r3
 8008ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ed0:	b10b      	cbz	r3, 8008ed6 <__sflush_r+0x46>
 8008ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ed4:	1ac0      	subs	r0, r0, r3
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008edc:	6a21      	ldr	r1, [r4, #32]
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b0      	blx	r6
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	d106      	bne.n	8008ef6 <__sflush_r+0x66>
 8008ee8:	6829      	ldr	r1, [r5, #0]
 8008eea:	291d      	cmp	r1, #29
 8008eec:	d82c      	bhi.n	8008f48 <__sflush_r+0xb8>
 8008eee:	4a2a      	ldr	r2, [pc, #168]	; (8008f98 <__sflush_r+0x108>)
 8008ef0:	40ca      	lsrs	r2, r1
 8008ef2:	07d6      	lsls	r6, r2, #31
 8008ef4:	d528      	bpl.n	8008f48 <__sflush_r+0xb8>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	6062      	str	r2, [r4, #4]
 8008efa:	04d9      	lsls	r1, r3, #19
 8008efc:	6922      	ldr	r2, [r4, #16]
 8008efe:	6022      	str	r2, [r4, #0]
 8008f00:	d504      	bpl.n	8008f0c <__sflush_r+0x7c>
 8008f02:	1c42      	adds	r2, r0, #1
 8008f04:	d101      	bne.n	8008f0a <__sflush_r+0x7a>
 8008f06:	682b      	ldr	r3, [r5, #0]
 8008f08:	b903      	cbnz	r3, 8008f0c <__sflush_r+0x7c>
 8008f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f0e:	602f      	str	r7, [r5, #0]
 8008f10:	2900      	cmp	r1, #0
 8008f12:	d0ca      	beq.n	8008eaa <__sflush_r+0x1a>
 8008f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	d002      	beq.n	8008f22 <__sflush_r+0x92>
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f000 fc5b 	bl	80097d8 <_free_r>
 8008f22:	2000      	movs	r0, #0
 8008f24:	6360      	str	r0, [r4, #52]	; 0x34
 8008f26:	e7c1      	b.n	8008eac <__sflush_r+0x1c>
 8008f28:	6a21      	ldr	r1, [r4, #32]
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b0      	blx	r6
 8008f30:	1c41      	adds	r1, r0, #1
 8008f32:	d1c7      	bne.n	8008ec4 <__sflush_r+0x34>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0c4      	beq.n	8008ec4 <__sflush_r+0x34>
 8008f3a:	2b1d      	cmp	r3, #29
 8008f3c:	d001      	beq.n	8008f42 <__sflush_r+0xb2>
 8008f3e:	2b16      	cmp	r3, #22
 8008f40:	d101      	bne.n	8008f46 <__sflush_r+0xb6>
 8008f42:	602f      	str	r7, [r5, #0]
 8008f44:	e7b1      	b.n	8008eaa <__sflush_r+0x1a>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	e7ad      	b.n	8008eac <__sflush_r+0x1c>
 8008f50:	690f      	ldr	r7, [r1, #16]
 8008f52:	2f00      	cmp	r7, #0
 8008f54:	d0a9      	beq.n	8008eaa <__sflush_r+0x1a>
 8008f56:	0793      	lsls	r3, r2, #30
 8008f58:	680e      	ldr	r6, [r1, #0]
 8008f5a:	bf08      	it	eq
 8008f5c:	694b      	ldreq	r3, [r1, #20]
 8008f5e:	600f      	str	r7, [r1, #0]
 8008f60:	bf18      	it	ne
 8008f62:	2300      	movne	r3, #0
 8008f64:	eba6 0807 	sub.w	r8, r6, r7
 8008f68:	608b      	str	r3, [r1, #8]
 8008f6a:	f1b8 0f00 	cmp.w	r8, #0
 8008f6e:	dd9c      	ble.n	8008eaa <__sflush_r+0x1a>
 8008f70:	6a21      	ldr	r1, [r4, #32]
 8008f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f74:	4643      	mov	r3, r8
 8008f76:	463a      	mov	r2, r7
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b0      	blx	r6
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	dc06      	bgt.n	8008f8e <__sflush_r+0xfe>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f86:	81a3      	strh	r3, [r4, #12]
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	e78e      	b.n	8008eac <__sflush_r+0x1c>
 8008f8e:	4407      	add	r7, r0
 8008f90:	eba8 0800 	sub.w	r8, r8, r0
 8008f94:	e7e9      	b.n	8008f6a <__sflush_r+0xda>
 8008f96:	bf00      	nop
 8008f98:	20400001 	.word	0x20400001

08008f9c <_fflush_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	690b      	ldr	r3, [r1, #16]
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	b913      	cbnz	r3, 8008fac <_fflush_r+0x10>
 8008fa6:	2500      	movs	r5, #0
 8008fa8:	4628      	mov	r0, r5
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	b118      	cbz	r0, 8008fb6 <_fflush_r+0x1a>
 8008fae:	6983      	ldr	r3, [r0, #24]
 8008fb0:	b90b      	cbnz	r3, 8008fb6 <_fflush_r+0x1a>
 8008fb2:	f7fe f8fd 	bl	80071b0 <__sinit>
 8008fb6:	4b14      	ldr	r3, [pc, #80]	; (8009008 <_fflush_r+0x6c>)
 8008fb8:	429c      	cmp	r4, r3
 8008fba:	d11b      	bne.n	8008ff4 <_fflush_r+0x58>
 8008fbc:	686c      	ldr	r4, [r5, #4]
 8008fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0ef      	beq.n	8008fa6 <_fflush_r+0xa>
 8008fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fc8:	07d0      	lsls	r0, r2, #31
 8008fca:	d404      	bmi.n	8008fd6 <_fflush_r+0x3a>
 8008fcc:	0599      	lsls	r1, r3, #22
 8008fce:	d402      	bmi.n	8008fd6 <_fflush_r+0x3a>
 8008fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fd2:	f7fe f9b0 	bl	8007336 <__retarget_lock_acquire_recursive>
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	4621      	mov	r1, r4
 8008fda:	f7ff ff59 	bl	8008e90 <__sflush_r>
 8008fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fe0:	07da      	lsls	r2, r3, #31
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	d4e0      	bmi.n	8008fa8 <_fflush_r+0xc>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	059b      	lsls	r3, r3, #22
 8008fea:	d4dd      	bmi.n	8008fa8 <_fflush_r+0xc>
 8008fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fee:	f7fe f9a3 	bl	8007338 <__retarget_lock_release_recursive>
 8008ff2:	e7d9      	b.n	8008fa8 <_fflush_r+0xc>
 8008ff4:	4b05      	ldr	r3, [pc, #20]	; (800900c <_fflush_r+0x70>)
 8008ff6:	429c      	cmp	r4, r3
 8008ff8:	d101      	bne.n	8008ffe <_fflush_r+0x62>
 8008ffa:	68ac      	ldr	r4, [r5, #8]
 8008ffc:	e7df      	b.n	8008fbe <_fflush_r+0x22>
 8008ffe:	4b04      	ldr	r3, [pc, #16]	; (8009010 <_fflush_r+0x74>)
 8009000:	429c      	cmp	r4, r3
 8009002:	bf08      	it	eq
 8009004:	68ec      	ldreq	r4, [r5, #12]
 8009006:	e7da      	b.n	8008fbe <_fflush_r+0x22>
 8009008:	0800b16c 	.word	0x0800b16c
 800900c:	0800b18c 	.word	0x0800b18c
 8009010:	0800b14c 	.word	0x0800b14c

08009014 <_localeconv_r>:
 8009014:	4800      	ldr	r0, [pc, #0]	; (8009018 <_localeconv_r+0x4>)
 8009016:	4770      	bx	lr
 8009018:	20000168 	.word	0x20000168

0800901c <_lseek_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d07      	ldr	r5, [pc, #28]	; (800903c <_lseek_r+0x20>)
 8009020:	4604      	mov	r4, r0
 8009022:	4608      	mov	r0, r1
 8009024:	4611      	mov	r1, r2
 8009026:	2200      	movs	r2, #0
 8009028:	602a      	str	r2, [r5, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	f7f8 fddc 	bl	8001be8 <_lseek>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_lseek_r+0x1e>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_lseek_r+0x1e>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	20004d5c 	.word	0x20004d5c

08009040 <malloc>:
 8009040:	4b02      	ldr	r3, [pc, #8]	; (800904c <malloc+0xc>)
 8009042:	4601      	mov	r1, r0
 8009044:	6818      	ldr	r0, [r3, #0]
 8009046:	f7fe b9af 	b.w	80073a8 <_malloc_r>
 800904a:	bf00      	nop
 800904c:	20000014 	.word	0x20000014

08009050 <__malloc_lock>:
 8009050:	4801      	ldr	r0, [pc, #4]	; (8009058 <__malloc_lock+0x8>)
 8009052:	f7fe b970 	b.w	8007336 <__retarget_lock_acquire_recursive>
 8009056:	bf00      	nop
 8009058:	20004d50 	.word	0x20004d50

0800905c <__malloc_unlock>:
 800905c:	4801      	ldr	r0, [pc, #4]	; (8009064 <__malloc_unlock+0x8>)
 800905e:	f7fe b96b 	b.w	8007338 <__retarget_lock_release_recursive>
 8009062:	bf00      	nop
 8009064:	20004d50 	.word	0x20004d50

08009068 <_Balloc>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800906c:	4604      	mov	r4, r0
 800906e:	460d      	mov	r5, r1
 8009070:	b976      	cbnz	r6, 8009090 <_Balloc+0x28>
 8009072:	2010      	movs	r0, #16
 8009074:	f7ff ffe4 	bl	8009040 <malloc>
 8009078:	4602      	mov	r2, r0
 800907a:	6260      	str	r0, [r4, #36]	; 0x24
 800907c:	b920      	cbnz	r0, 8009088 <_Balloc+0x20>
 800907e:	4b18      	ldr	r3, [pc, #96]	; (80090e0 <_Balloc+0x78>)
 8009080:	4818      	ldr	r0, [pc, #96]	; (80090e4 <_Balloc+0x7c>)
 8009082:	2166      	movs	r1, #102	; 0x66
 8009084:	f000 fc0e 	bl	80098a4 <__assert_func>
 8009088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800908c:	6006      	str	r6, [r0, #0]
 800908e:	60c6      	str	r6, [r0, #12]
 8009090:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009092:	68f3      	ldr	r3, [r6, #12]
 8009094:	b183      	cbz	r3, 80090b8 <_Balloc+0x50>
 8009096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800909e:	b9b8      	cbnz	r0, 80090d0 <_Balloc+0x68>
 80090a0:	2101      	movs	r1, #1
 80090a2:	fa01 f605 	lsl.w	r6, r1, r5
 80090a6:	1d72      	adds	r2, r6, #5
 80090a8:	0092      	lsls	r2, r2, #2
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 fb7e 	bl	80097ac <_calloc_r>
 80090b0:	b160      	cbz	r0, 80090cc <_Balloc+0x64>
 80090b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090b6:	e00e      	b.n	80090d6 <_Balloc+0x6e>
 80090b8:	2221      	movs	r2, #33	; 0x21
 80090ba:	2104      	movs	r1, #4
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 fb75 	bl	80097ac <_calloc_r>
 80090c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090c4:	60f0      	str	r0, [r6, #12]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e4      	bne.n	8009096 <_Balloc+0x2e>
 80090cc:	2000      	movs	r0, #0
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	6802      	ldr	r2, [r0, #0]
 80090d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090d6:	2300      	movs	r3, #0
 80090d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090dc:	e7f7      	b.n	80090ce <_Balloc+0x66>
 80090de:	bf00      	nop
 80090e0:	0800b1f1 	.word	0x0800b1f1
 80090e4:	0800b274 	.word	0x0800b274

080090e8 <_Bfree>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090ec:	4605      	mov	r5, r0
 80090ee:	460c      	mov	r4, r1
 80090f0:	b976      	cbnz	r6, 8009110 <_Bfree+0x28>
 80090f2:	2010      	movs	r0, #16
 80090f4:	f7ff ffa4 	bl	8009040 <malloc>
 80090f8:	4602      	mov	r2, r0
 80090fa:	6268      	str	r0, [r5, #36]	; 0x24
 80090fc:	b920      	cbnz	r0, 8009108 <_Bfree+0x20>
 80090fe:	4b09      	ldr	r3, [pc, #36]	; (8009124 <_Bfree+0x3c>)
 8009100:	4809      	ldr	r0, [pc, #36]	; (8009128 <_Bfree+0x40>)
 8009102:	218a      	movs	r1, #138	; 0x8a
 8009104:	f000 fbce 	bl	80098a4 <__assert_func>
 8009108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800910c:	6006      	str	r6, [r0, #0]
 800910e:	60c6      	str	r6, [r0, #12]
 8009110:	b13c      	cbz	r4, 8009122 <_Bfree+0x3a>
 8009112:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009114:	6862      	ldr	r2, [r4, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800911c:	6021      	str	r1, [r4, #0]
 800911e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009122:	bd70      	pop	{r4, r5, r6, pc}
 8009124:	0800b1f1 	.word	0x0800b1f1
 8009128:	0800b274 	.word	0x0800b274

0800912c <__multadd>:
 800912c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009130:	690d      	ldr	r5, [r1, #16]
 8009132:	4607      	mov	r7, r0
 8009134:	460c      	mov	r4, r1
 8009136:	461e      	mov	r6, r3
 8009138:	f101 0c14 	add.w	ip, r1, #20
 800913c:	2000      	movs	r0, #0
 800913e:	f8dc 3000 	ldr.w	r3, [ip]
 8009142:	b299      	uxth	r1, r3
 8009144:	fb02 6101 	mla	r1, r2, r1, r6
 8009148:	0c1e      	lsrs	r6, r3, #16
 800914a:	0c0b      	lsrs	r3, r1, #16
 800914c:	fb02 3306 	mla	r3, r2, r6, r3
 8009150:	b289      	uxth	r1, r1
 8009152:	3001      	adds	r0, #1
 8009154:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009158:	4285      	cmp	r5, r0
 800915a:	f84c 1b04 	str.w	r1, [ip], #4
 800915e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009162:	dcec      	bgt.n	800913e <__multadd+0x12>
 8009164:	b30e      	cbz	r6, 80091aa <__multadd+0x7e>
 8009166:	68a3      	ldr	r3, [r4, #8]
 8009168:	42ab      	cmp	r3, r5
 800916a:	dc19      	bgt.n	80091a0 <__multadd+0x74>
 800916c:	6861      	ldr	r1, [r4, #4]
 800916e:	4638      	mov	r0, r7
 8009170:	3101      	adds	r1, #1
 8009172:	f7ff ff79 	bl	8009068 <_Balloc>
 8009176:	4680      	mov	r8, r0
 8009178:	b928      	cbnz	r0, 8009186 <__multadd+0x5a>
 800917a:	4602      	mov	r2, r0
 800917c:	4b0c      	ldr	r3, [pc, #48]	; (80091b0 <__multadd+0x84>)
 800917e:	480d      	ldr	r0, [pc, #52]	; (80091b4 <__multadd+0x88>)
 8009180:	21b5      	movs	r1, #181	; 0xb5
 8009182:	f000 fb8f 	bl	80098a4 <__assert_func>
 8009186:	6922      	ldr	r2, [r4, #16]
 8009188:	3202      	adds	r2, #2
 800918a:	f104 010c 	add.w	r1, r4, #12
 800918e:	0092      	lsls	r2, r2, #2
 8009190:	300c      	adds	r0, #12
 8009192:	f7fe f8d2 	bl	800733a <memcpy>
 8009196:	4621      	mov	r1, r4
 8009198:	4638      	mov	r0, r7
 800919a:	f7ff ffa5 	bl	80090e8 <_Bfree>
 800919e:	4644      	mov	r4, r8
 80091a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091a4:	3501      	adds	r5, #1
 80091a6:	615e      	str	r6, [r3, #20]
 80091a8:	6125      	str	r5, [r4, #16]
 80091aa:	4620      	mov	r0, r4
 80091ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b0:	0800b263 	.word	0x0800b263
 80091b4:	0800b274 	.word	0x0800b274

080091b8 <__hi0bits>:
 80091b8:	0c03      	lsrs	r3, r0, #16
 80091ba:	041b      	lsls	r3, r3, #16
 80091bc:	b9d3      	cbnz	r3, 80091f4 <__hi0bits+0x3c>
 80091be:	0400      	lsls	r0, r0, #16
 80091c0:	2310      	movs	r3, #16
 80091c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091c6:	bf04      	itt	eq
 80091c8:	0200      	lsleq	r0, r0, #8
 80091ca:	3308      	addeq	r3, #8
 80091cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091d0:	bf04      	itt	eq
 80091d2:	0100      	lsleq	r0, r0, #4
 80091d4:	3304      	addeq	r3, #4
 80091d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091da:	bf04      	itt	eq
 80091dc:	0080      	lsleq	r0, r0, #2
 80091de:	3302      	addeq	r3, #2
 80091e0:	2800      	cmp	r0, #0
 80091e2:	db05      	blt.n	80091f0 <__hi0bits+0x38>
 80091e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091e8:	f103 0301 	add.w	r3, r3, #1
 80091ec:	bf08      	it	eq
 80091ee:	2320      	moveq	r3, #32
 80091f0:	4618      	mov	r0, r3
 80091f2:	4770      	bx	lr
 80091f4:	2300      	movs	r3, #0
 80091f6:	e7e4      	b.n	80091c2 <__hi0bits+0xa>

080091f8 <__lo0bits>:
 80091f8:	6803      	ldr	r3, [r0, #0]
 80091fa:	f013 0207 	ands.w	r2, r3, #7
 80091fe:	4601      	mov	r1, r0
 8009200:	d00b      	beq.n	800921a <__lo0bits+0x22>
 8009202:	07da      	lsls	r2, r3, #31
 8009204:	d423      	bmi.n	800924e <__lo0bits+0x56>
 8009206:	0798      	lsls	r0, r3, #30
 8009208:	bf49      	itett	mi
 800920a:	085b      	lsrmi	r3, r3, #1
 800920c:	089b      	lsrpl	r3, r3, #2
 800920e:	2001      	movmi	r0, #1
 8009210:	600b      	strmi	r3, [r1, #0]
 8009212:	bf5c      	itt	pl
 8009214:	600b      	strpl	r3, [r1, #0]
 8009216:	2002      	movpl	r0, #2
 8009218:	4770      	bx	lr
 800921a:	b298      	uxth	r0, r3
 800921c:	b9a8      	cbnz	r0, 800924a <__lo0bits+0x52>
 800921e:	0c1b      	lsrs	r3, r3, #16
 8009220:	2010      	movs	r0, #16
 8009222:	b2da      	uxtb	r2, r3
 8009224:	b90a      	cbnz	r2, 800922a <__lo0bits+0x32>
 8009226:	3008      	adds	r0, #8
 8009228:	0a1b      	lsrs	r3, r3, #8
 800922a:	071a      	lsls	r2, r3, #28
 800922c:	bf04      	itt	eq
 800922e:	091b      	lsreq	r3, r3, #4
 8009230:	3004      	addeq	r0, #4
 8009232:	079a      	lsls	r2, r3, #30
 8009234:	bf04      	itt	eq
 8009236:	089b      	lsreq	r3, r3, #2
 8009238:	3002      	addeq	r0, #2
 800923a:	07da      	lsls	r2, r3, #31
 800923c:	d403      	bmi.n	8009246 <__lo0bits+0x4e>
 800923e:	085b      	lsrs	r3, r3, #1
 8009240:	f100 0001 	add.w	r0, r0, #1
 8009244:	d005      	beq.n	8009252 <__lo0bits+0x5a>
 8009246:	600b      	str	r3, [r1, #0]
 8009248:	4770      	bx	lr
 800924a:	4610      	mov	r0, r2
 800924c:	e7e9      	b.n	8009222 <__lo0bits+0x2a>
 800924e:	2000      	movs	r0, #0
 8009250:	4770      	bx	lr
 8009252:	2020      	movs	r0, #32
 8009254:	4770      	bx	lr
	...

08009258 <__i2b>:
 8009258:	b510      	push	{r4, lr}
 800925a:	460c      	mov	r4, r1
 800925c:	2101      	movs	r1, #1
 800925e:	f7ff ff03 	bl	8009068 <_Balloc>
 8009262:	4602      	mov	r2, r0
 8009264:	b928      	cbnz	r0, 8009272 <__i2b+0x1a>
 8009266:	4b05      	ldr	r3, [pc, #20]	; (800927c <__i2b+0x24>)
 8009268:	4805      	ldr	r0, [pc, #20]	; (8009280 <__i2b+0x28>)
 800926a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800926e:	f000 fb19 	bl	80098a4 <__assert_func>
 8009272:	2301      	movs	r3, #1
 8009274:	6144      	str	r4, [r0, #20]
 8009276:	6103      	str	r3, [r0, #16]
 8009278:	bd10      	pop	{r4, pc}
 800927a:	bf00      	nop
 800927c:	0800b263 	.word	0x0800b263
 8009280:	0800b274 	.word	0x0800b274

08009284 <__multiply>:
 8009284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009288:	4691      	mov	r9, r2
 800928a:	690a      	ldr	r2, [r1, #16]
 800928c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009290:	429a      	cmp	r2, r3
 8009292:	bfb8      	it	lt
 8009294:	460b      	movlt	r3, r1
 8009296:	460c      	mov	r4, r1
 8009298:	bfbc      	itt	lt
 800929a:	464c      	movlt	r4, r9
 800929c:	4699      	movlt	r9, r3
 800929e:	6927      	ldr	r7, [r4, #16]
 80092a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092a4:	68a3      	ldr	r3, [r4, #8]
 80092a6:	6861      	ldr	r1, [r4, #4]
 80092a8:	eb07 060a 	add.w	r6, r7, sl
 80092ac:	42b3      	cmp	r3, r6
 80092ae:	b085      	sub	sp, #20
 80092b0:	bfb8      	it	lt
 80092b2:	3101      	addlt	r1, #1
 80092b4:	f7ff fed8 	bl	8009068 <_Balloc>
 80092b8:	b930      	cbnz	r0, 80092c8 <__multiply+0x44>
 80092ba:	4602      	mov	r2, r0
 80092bc:	4b44      	ldr	r3, [pc, #272]	; (80093d0 <__multiply+0x14c>)
 80092be:	4845      	ldr	r0, [pc, #276]	; (80093d4 <__multiply+0x150>)
 80092c0:	f240 115d 	movw	r1, #349	; 0x15d
 80092c4:	f000 faee 	bl	80098a4 <__assert_func>
 80092c8:	f100 0514 	add.w	r5, r0, #20
 80092cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092d0:	462b      	mov	r3, r5
 80092d2:	2200      	movs	r2, #0
 80092d4:	4543      	cmp	r3, r8
 80092d6:	d321      	bcc.n	800931c <__multiply+0x98>
 80092d8:	f104 0314 	add.w	r3, r4, #20
 80092dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092e0:	f109 0314 	add.w	r3, r9, #20
 80092e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092e8:	9202      	str	r2, [sp, #8]
 80092ea:	1b3a      	subs	r2, r7, r4
 80092ec:	3a15      	subs	r2, #21
 80092ee:	f022 0203 	bic.w	r2, r2, #3
 80092f2:	3204      	adds	r2, #4
 80092f4:	f104 0115 	add.w	r1, r4, #21
 80092f8:	428f      	cmp	r7, r1
 80092fa:	bf38      	it	cc
 80092fc:	2204      	movcc	r2, #4
 80092fe:	9201      	str	r2, [sp, #4]
 8009300:	9a02      	ldr	r2, [sp, #8]
 8009302:	9303      	str	r3, [sp, #12]
 8009304:	429a      	cmp	r2, r3
 8009306:	d80c      	bhi.n	8009322 <__multiply+0x9e>
 8009308:	2e00      	cmp	r6, #0
 800930a:	dd03      	ble.n	8009314 <__multiply+0x90>
 800930c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009310:	2b00      	cmp	r3, #0
 8009312:	d05a      	beq.n	80093ca <__multiply+0x146>
 8009314:	6106      	str	r6, [r0, #16]
 8009316:	b005      	add	sp, #20
 8009318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931c:	f843 2b04 	str.w	r2, [r3], #4
 8009320:	e7d8      	b.n	80092d4 <__multiply+0x50>
 8009322:	f8b3 a000 	ldrh.w	sl, [r3]
 8009326:	f1ba 0f00 	cmp.w	sl, #0
 800932a:	d024      	beq.n	8009376 <__multiply+0xf2>
 800932c:	f104 0e14 	add.w	lr, r4, #20
 8009330:	46a9      	mov	r9, r5
 8009332:	f04f 0c00 	mov.w	ip, #0
 8009336:	f85e 2b04 	ldr.w	r2, [lr], #4
 800933a:	f8d9 1000 	ldr.w	r1, [r9]
 800933e:	fa1f fb82 	uxth.w	fp, r2
 8009342:	b289      	uxth	r1, r1
 8009344:	fb0a 110b 	mla	r1, sl, fp, r1
 8009348:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800934c:	f8d9 2000 	ldr.w	r2, [r9]
 8009350:	4461      	add	r1, ip
 8009352:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009356:	fb0a c20b 	mla	r2, sl, fp, ip
 800935a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800935e:	b289      	uxth	r1, r1
 8009360:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009364:	4577      	cmp	r7, lr
 8009366:	f849 1b04 	str.w	r1, [r9], #4
 800936a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800936e:	d8e2      	bhi.n	8009336 <__multiply+0xb2>
 8009370:	9a01      	ldr	r2, [sp, #4]
 8009372:	f845 c002 	str.w	ip, [r5, r2]
 8009376:	9a03      	ldr	r2, [sp, #12]
 8009378:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800937c:	3304      	adds	r3, #4
 800937e:	f1b9 0f00 	cmp.w	r9, #0
 8009382:	d020      	beq.n	80093c6 <__multiply+0x142>
 8009384:	6829      	ldr	r1, [r5, #0]
 8009386:	f104 0c14 	add.w	ip, r4, #20
 800938a:	46ae      	mov	lr, r5
 800938c:	f04f 0a00 	mov.w	sl, #0
 8009390:	f8bc b000 	ldrh.w	fp, [ip]
 8009394:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009398:	fb09 220b 	mla	r2, r9, fp, r2
 800939c:	4492      	add	sl, r2
 800939e:	b289      	uxth	r1, r1
 80093a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093a4:	f84e 1b04 	str.w	r1, [lr], #4
 80093a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093ac:	f8be 1000 	ldrh.w	r1, [lr]
 80093b0:	0c12      	lsrs	r2, r2, #16
 80093b2:	fb09 1102 	mla	r1, r9, r2, r1
 80093b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80093ba:	4567      	cmp	r7, ip
 80093bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093c0:	d8e6      	bhi.n	8009390 <__multiply+0x10c>
 80093c2:	9a01      	ldr	r2, [sp, #4]
 80093c4:	50a9      	str	r1, [r5, r2]
 80093c6:	3504      	adds	r5, #4
 80093c8:	e79a      	b.n	8009300 <__multiply+0x7c>
 80093ca:	3e01      	subs	r6, #1
 80093cc:	e79c      	b.n	8009308 <__multiply+0x84>
 80093ce:	bf00      	nop
 80093d0:	0800b263 	.word	0x0800b263
 80093d4:	0800b274 	.word	0x0800b274

080093d8 <__pow5mult>:
 80093d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093dc:	4615      	mov	r5, r2
 80093de:	f012 0203 	ands.w	r2, r2, #3
 80093e2:	4606      	mov	r6, r0
 80093e4:	460f      	mov	r7, r1
 80093e6:	d007      	beq.n	80093f8 <__pow5mult+0x20>
 80093e8:	4c25      	ldr	r4, [pc, #148]	; (8009480 <__pow5mult+0xa8>)
 80093ea:	3a01      	subs	r2, #1
 80093ec:	2300      	movs	r3, #0
 80093ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093f2:	f7ff fe9b 	bl	800912c <__multadd>
 80093f6:	4607      	mov	r7, r0
 80093f8:	10ad      	asrs	r5, r5, #2
 80093fa:	d03d      	beq.n	8009478 <__pow5mult+0xa0>
 80093fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093fe:	b97c      	cbnz	r4, 8009420 <__pow5mult+0x48>
 8009400:	2010      	movs	r0, #16
 8009402:	f7ff fe1d 	bl	8009040 <malloc>
 8009406:	4602      	mov	r2, r0
 8009408:	6270      	str	r0, [r6, #36]	; 0x24
 800940a:	b928      	cbnz	r0, 8009418 <__pow5mult+0x40>
 800940c:	4b1d      	ldr	r3, [pc, #116]	; (8009484 <__pow5mult+0xac>)
 800940e:	481e      	ldr	r0, [pc, #120]	; (8009488 <__pow5mult+0xb0>)
 8009410:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009414:	f000 fa46 	bl	80098a4 <__assert_func>
 8009418:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800941c:	6004      	str	r4, [r0, #0]
 800941e:	60c4      	str	r4, [r0, #12]
 8009420:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009424:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009428:	b94c      	cbnz	r4, 800943e <__pow5mult+0x66>
 800942a:	f240 2171 	movw	r1, #625	; 0x271
 800942e:	4630      	mov	r0, r6
 8009430:	f7ff ff12 	bl	8009258 <__i2b>
 8009434:	2300      	movs	r3, #0
 8009436:	f8c8 0008 	str.w	r0, [r8, #8]
 800943a:	4604      	mov	r4, r0
 800943c:	6003      	str	r3, [r0, #0]
 800943e:	f04f 0900 	mov.w	r9, #0
 8009442:	07eb      	lsls	r3, r5, #31
 8009444:	d50a      	bpl.n	800945c <__pow5mult+0x84>
 8009446:	4639      	mov	r1, r7
 8009448:	4622      	mov	r2, r4
 800944a:	4630      	mov	r0, r6
 800944c:	f7ff ff1a 	bl	8009284 <__multiply>
 8009450:	4639      	mov	r1, r7
 8009452:	4680      	mov	r8, r0
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff fe47 	bl	80090e8 <_Bfree>
 800945a:	4647      	mov	r7, r8
 800945c:	106d      	asrs	r5, r5, #1
 800945e:	d00b      	beq.n	8009478 <__pow5mult+0xa0>
 8009460:	6820      	ldr	r0, [r4, #0]
 8009462:	b938      	cbnz	r0, 8009474 <__pow5mult+0x9c>
 8009464:	4622      	mov	r2, r4
 8009466:	4621      	mov	r1, r4
 8009468:	4630      	mov	r0, r6
 800946a:	f7ff ff0b 	bl	8009284 <__multiply>
 800946e:	6020      	str	r0, [r4, #0]
 8009470:	f8c0 9000 	str.w	r9, [r0]
 8009474:	4604      	mov	r4, r0
 8009476:	e7e4      	b.n	8009442 <__pow5mult+0x6a>
 8009478:	4638      	mov	r0, r7
 800947a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800947e:	bf00      	nop
 8009480:	0800b3c0 	.word	0x0800b3c0
 8009484:	0800b1f1 	.word	0x0800b1f1
 8009488:	0800b274 	.word	0x0800b274

0800948c <__lshift>:
 800948c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009490:	460c      	mov	r4, r1
 8009492:	6849      	ldr	r1, [r1, #4]
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	4607      	mov	r7, r0
 800949e:	4691      	mov	r9, r2
 80094a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094a4:	f108 0601 	add.w	r6, r8, #1
 80094a8:	42b3      	cmp	r3, r6
 80094aa:	db0b      	blt.n	80094c4 <__lshift+0x38>
 80094ac:	4638      	mov	r0, r7
 80094ae:	f7ff fddb 	bl	8009068 <_Balloc>
 80094b2:	4605      	mov	r5, r0
 80094b4:	b948      	cbnz	r0, 80094ca <__lshift+0x3e>
 80094b6:	4602      	mov	r2, r0
 80094b8:	4b2a      	ldr	r3, [pc, #168]	; (8009564 <__lshift+0xd8>)
 80094ba:	482b      	ldr	r0, [pc, #172]	; (8009568 <__lshift+0xdc>)
 80094bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094c0:	f000 f9f0 	bl	80098a4 <__assert_func>
 80094c4:	3101      	adds	r1, #1
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	e7ee      	b.n	80094a8 <__lshift+0x1c>
 80094ca:	2300      	movs	r3, #0
 80094cc:	f100 0114 	add.w	r1, r0, #20
 80094d0:	f100 0210 	add.w	r2, r0, #16
 80094d4:	4618      	mov	r0, r3
 80094d6:	4553      	cmp	r3, sl
 80094d8:	db37      	blt.n	800954a <__lshift+0xbe>
 80094da:	6920      	ldr	r0, [r4, #16]
 80094dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094e0:	f104 0314 	add.w	r3, r4, #20
 80094e4:	f019 091f 	ands.w	r9, r9, #31
 80094e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80094f0:	d02f      	beq.n	8009552 <__lshift+0xc6>
 80094f2:	f1c9 0e20 	rsb	lr, r9, #32
 80094f6:	468a      	mov	sl, r1
 80094f8:	f04f 0c00 	mov.w	ip, #0
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	fa02 f209 	lsl.w	r2, r2, r9
 8009502:	ea42 020c 	orr.w	r2, r2, ip
 8009506:	f84a 2b04 	str.w	r2, [sl], #4
 800950a:	f853 2b04 	ldr.w	r2, [r3], #4
 800950e:	4298      	cmp	r0, r3
 8009510:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009514:	d8f2      	bhi.n	80094fc <__lshift+0x70>
 8009516:	1b03      	subs	r3, r0, r4
 8009518:	3b15      	subs	r3, #21
 800951a:	f023 0303 	bic.w	r3, r3, #3
 800951e:	3304      	adds	r3, #4
 8009520:	f104 0215 	add.w	r2, r4, #21
 8009524:	4290      	cmp	r0, r2
 8009526:	bf38      	it	cc
 8009528:	2304      	movcc	r3, #4
 800952a:	f841 c003 	str.w	ip, [r1, r3]
 800952e:	f1bc 0f00 	cmp.w	ip, #0
 8009532:	d001      	beq.n	8009538 <__lshift+0xac>
 8009534:	f108 0602 	add.w	r6, r8, #2
 8009538:	3e01      	subs	r6, #1
 800953a:	4638      	mov	r0, r7
 800953c:	612e      	str	r6, [r5, #16]
 800953e:	4621      	mov	r1, r4
 8009540:	f7ff fdd2 	bl	80090e8 <_Bfree>
 8009544:	4628      	mov	r0, r5
 8009546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954a:	f842 0f04 	str.w	r0, [r2, #4]!
 800954e:	3301      	adds	r3, #1
 8009550:	e7c1      	b.n	80094d6 <__lshift+0x4a>
 8009552:	3904      	subs	r1, #4
 8009554:	f853 2b04 	ldr.w	r2, [r3], #4
 8009558:	f841 2f04 	str.w	r2, [r1, #4]!
 800955c:	4298      	cmp	r0, r3
 800955e:	d8f9      	bhi.n	8009554 <__lshift+0xc8>
 8009560:	e7ea      	b.n	8009538 <__lshift+0xac>
 8009562:	bf00      	nop
 8009564:	0800b263 	.word	0x0800b263
 8009568:	0800b274 	.word	0x0800b274

0800956c <__mcmp>:
 800956c:	b530      	push	{r4, r5, lr}
 800956e:	6902      	ldr	r2, [r0, #16]
 8009570:	690c      	ldr	r4, [r1, #16]
 8009572:	1b12      	subs	r2, r2, r4
 8009574:	d10e      	bne.n	8009594 <__mcmp+0x28>
 8009576:	f100 0314 	add.w	r3, r0, #20
 800957a:	3114      	adds	r1, #20
 800957c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009584:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009588:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800958c:	42a5      	cmp	r5, r4
 800958e:	d003      	beq.n	8009598 <__mcmp+0x2c>
 8009590:	d305      	bcc.n	800959e <__mcmp+0x32>
 8009592:	2201      	movs	r2, #1
 8009594:	4610      	mov	r0, r2
 8009596:	bd30      	pop	{r4, r5, pc}
 8009598:	4283      	cmp	r3, r0
 800959a:	d3f3      	bcc.n	8009584 <__mcmp+0x18>
 800959c:	e7fa      	b.n	8009594 <__mcmp+0x28>
 800959e:	f04f 32ff 	mov.w	r2, #4294967295
 80095a2:	e7f7      	b.n	8009594 <__mcmp+0x28>

080095a4 <__mdiff>:
 80095a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	460c      	mov	r4, r1
 80095aa:	4606      	mov	r6, r0
 80095ac:	4611      	mov	r1, r2
 80095ae:	4620      	mov	r0, r4
 80095b0:	4690      	mov	r8, r2
 80095b2:	f7ff ffdb 	bl	800956c <__mcmp>
 80095b6:	1e05      	subs	r5, r0, #0
 80095b8:	d110      	bne.n	80095dc <__mdiff+0x38>
 80095ba:	4629      	mov	r1, r5
 80095bc:	4630      	mov	r0, r6
 80095be:	f7ff fd53 	bl	8009068 <_Balloc>
 80095c2:	b930      	cbnz	r0, 80095d2 <__mdiff+0x2e>
 80095c4:	4b3a      	ldr	r3, [pc, #232]	; (80096b0 <__mdiff+0x10c>)
 80095c6:	4602      	mov	r2, r0
 80095c8:	f240 2132 	movw	r1, #562	; 0x232
 80095cc:	4839      	ldr	r0, [pc, #228]	; (80096b4 <__mdiff+0x110>)
 80095ce:	f000 f969 	bl	80098a4 <__assert_func>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095dc:	bfa4      	itt	ge
 80095de:	4643      	movge	r3, r8
 80095e0:	46a0      	movge	r8, r4
 80095e2:	4630      	mov	r0, r6
 80095e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095e8:	bfa6      	itte	ge
 80095ea:	461c      	movge	r4, r3
 80095ec:	2500      	movge	r5, #0
 80095ee:	2501      	movlt	r5, #1
 80095f0:	f7ff fd3a 	bl	8009068 <_Balloc>
 80095f4:	b920      	cbnz	r0, 8009600 <__mdiff+0x5c>
 80095f6:	4b2e      	ldr	r3, [pc, #184]	; (80096b0 <__mdiff+0x10c>)
 80095f8:	4602      	mov	r2, r0
 80095fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095fe:	e7e5      	b.n	80095cc <__mdiff+0x28>
 8009600:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009604:	6926      	ldr	r6, [r4, #16]
 8009606:	60c5      	str	r5, [r0, #12]
 8009608:	f104 0914 	add.w	r9, r4, #20
 800960c:	f108 0514 	add.w	r5, r8, #20
 8009610:	f100 0e14 	add.w	lr, r0, #20
 8009614:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009618:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800961c:	f108 0210 	add.w	r2, r8, #16
 8009620:	46f2      	mov	sl, lr
 8009622:	2100      	movs	r1, #0
 8009624:	f859 3b04 	ldr.w	r3, [r9], #4
 8009628:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800962c:	fa1f f883 	uxth.w	r8, r3
 8009630:	fa11 f18b 	uxtah	r1, r1, fp
 8009634:	0c1b      	lsrs	r3, r3, #16
 8009636:	eba1 0808 	sub.w	r8, r1, r8
 800963a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800963e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009642:	fa1f f888 	uxth.w	r8, r8
 8009646:	1419      	asrs	r1, r3, #16
 8009648:	454e      	cmp	r6, r9
 800964a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800964e:	f84a 3b04 	str.w	r3, [sl], #4
 8009652:	d8e7      	bhi.n	8009624 <__mdiff+0x80>
 8009654:	1b33      	subs	r3, r6, r4
 8009656:	3b15      	subs	r3, #21
 8009658:	f023 0303 	bic.w	r3, r3, #3
 800965c:	3304      	adds	r3, #4
 800965e:	3415      	adds	r4, #21
 8009660:	42a6      	cmp	r6, r4
 8009662:	bf38      	it	cc
 8009664:	2304      	movcc	r3, #4
 8009666:	441d      	add	r5, r3
 8009668:	4473      	add	r3, lr
 800966a:	469e      	mov	lr, r3
 800966c:	462e      	mov	r6, r5
 800966e:	4566      	cmp	r6, ip
 8009670:	d30e      	bcc.n	8009690 <__mdiff+0xec>
 8009672:	f10c 0203 	add.w	r2, ip, #3
 8009676:	1b52      	subs	r2, r2, r5
 8009678:	f022 0203 	bic.w	r2, r2, #3
 800967c:	3d03      	subs	r5, #3
 800967e:	45ac      	cmp	ip, r5
 8009680:	bf38      	it	cc
 8009682:	2200      	movcc	r2, #0
 8009684:	441a      	add	r2, r3
 8009686:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800968a:	b17b      	cbz	r3, 80096ac <__mdiff+0x108>
 800968c:	6107      	str	r7, [r0, #16]
 800968e:	e7a3      	b.n	80095d8 <__mdiff+0x34>
 8009690:	f856 8b04 	ldr.w	r8, [r6], #4
 8009694:	fa11 f288 	uxtah	r2, r1, r8
 8009698:	1414      	asrs	r4, r2, #16
 800969a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800969e:	b292      	uxth	r2, r2
 80096a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096a4:	f84e 2b04 	str.w	r2, [lr], #4
 80096a8:	1421      	asrs	r1, r4, #16
 80096aa:	e7e0      	b.n	800966e <__mdiff+0xca>
 80096ac:	3f01      	subs	r7, #1
 80096ae:	e7ea      	b.n	8009686 <__mdiff+0xe2>
 80096b0:	0800b263 	.word	0x0800b263
 80096b4:	0800b274 	.word	0x0800b274

080096b8 <__d2b>:
 80096b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096bc:	4689      	mov	r9, r1
 80096be:	2101      	movs	r1, #1
 80096c0:	ec57 6b10 	vmov	r6, r7, d0
 80096c4:	4690      	mov	r8, r2
 80096c6:	f7ff fccf 	bl	8009068 <_Balloc>
 80096ca:	4604      	mov	r4, r0
 80096cc:	b930      	cbnz	r0, 80096dc <__d2b+0x24>
 80096ce:	4602      	mov	r2, r0
 80096d0:	4b25      	ldr	r3, [pc, #148]	; (8009768 <__d2b+0xb0>)
 80096d2:	4826      	ldr	r0, [pc, #152]	; (800976c <__d2b+0xb4>)
 80096d4:	f240 310a 	movw	r1, #778	; 0x30a
 80096d8:	f000 f8e4 	bl	80098a4 <__assert_func>
 80096dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80096e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096e4:	bb35      	cbnz	r5, 8009734 <__d2b+0x7c>
 80096e6:	2e00      	cmp	r6, #0
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	d028      	beq.n	800973e <__d2b+0x86>
 80096ec:	4668      	mov	r0, sp
 80096ee:	9600      	str	r6, [sp, #0]
 80096f0:	f7ff fd82 	bl	80091f8 <__lo0bits>
 80096f4:	9900      	ldr	r1, [sp, #0]
 80096f6:	b300      	cbz	r0, 800973a <__d2b+0x82>
 80096f8:	9a01      	ldr	r2, [sp, #4]
 80096fa:	f1c0 0320 	rsb	r3, r0, #32
 80096fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009702:	430b      	orrs	r3, r1
 8009704:	40c2      	lsrs	r2, r0
 8009706:	6163      	str	r3, [r4, #20]
 8009708:	9201      	str	r2, [sp, #4]
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	61a3      	str	r3, [r4, #24]
 800970e:	2b00      	cmp	r3, #0
 8009710:	bf14      	ite	ne
 8009712:	2202      	movne	r2, #2
 8009714:	2201      	moveq	r2, #1
 8009716:	6122      	str	r2, [r4, #16]
 8009718:	b1d5      	cbz	r5, 8009750 <__d2b+0x98>
 800971a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800971e:	4405      	add	r5, r0
 8009720:	f8c9 5000 	str.w	r5, [r9]
 8009724:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009728:	f8c8 0000 	str.w	r0, [r8]
 800972c:	4620      	mov	r0, r4
 800972e:	b003      	add	sp, #12
 8009730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009738:	e7d5      	b.n	80096e6 <__d2b+0x2e>
 800973a:	6161      	str	r1, [r4, #20]
 800973c:	e7e5      	b.n	800970a <__d2b+0x52>
 800973e:	a801      	add	r0, sp, #4
 8009740:	f7ff fd5a 	bl	80091f8 <__lo0bits>
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	6163      	str	r3, [r4, #20]
 8009748:	2201      	movs	r2, #1
 800974a:	6122      	str	r2, [r4, #16]
 800974c:	3020      	adds	r0, #32
 800974e:	e7e3      	b.n	8009718 <__d2b+0x60>
 8009750:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009754:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009758:	f8c9 0000 	str.w	r0, [r9]
 800975c:	6918      	ldr	r0, [r3, #16]
 800975e:	f7ff fd2b 	bl	80091b8 <__hi0bits>
 8009762:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009766:	e7df      	b.n	8009728 <__d2b+0x70>
 8009768:	0800b263 	.word	0x0800b263
 800976c:	0800b274 	.word	0x0800b274

08009770 <_mprec_log10>:
 8009770:	2817      	cmp	r0, #23
 8009772:	b5d0      	push	{r4, r6, r7, lr}
 8009774:	4604      	mov	r4, r0
 8009776:	dc07      	bgt.n	8009788 <_mprec_log10+0x18>
 8009778:	4809      	ldr	r0, [pc, #36]	; (80097a0 <_mprec_log10+0x30>)
 800977a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800977e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009782:	ec41 0b10 	vmov	d0, r0, r1
 8009786:	bdd0      	pop	{r4, r6, r7, pc}
 8009788:	4906      	ldr	r1, [pc, #24]	; (80097a4 <_mprec_log10+0x34>)
 800978a:	4f07      	ldr	r7, [pc, #28]	; (80097a8 <_mprec_log10+0x38>)
 800978c:	2000      	movs	r0, #0
 800978e:	2600      	movs	r6, #0
 8009790:	4632      	mov	r2, r6
 8009792:	463b      	mov	r3, r7
 8009794:	f7f6 ff50 	bl	8000638 <__aeabi_dmul>
 8009798:	3c01      	subs	r4, #1
 800979a:	d1f9      	bne.n	8009790 <_mprec_log10+0x20>
 800979c:	e7f1      	b.n	8009782 <_mprec_log10+0x12>
 800979e:	bf00      	nop
 80097a0:	0800b2f8 	.word	0x0800b2f8
 80097a4:	3ff00000 	.word	0x3ff00000
 80097a8:	40240000 	.word	0x40240000

080097ac <_calloc_r>:
 80097ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ae:	fba1 2402 	umull	r2, r4, r1, r2
 80097b2:	b94c      	cbnz	r4, 80097c8 <_calloc_r+0x1c>
 80097b4:	4611      	mov	r1, r2
 80097b6:	9201      	str	r2, [sp, #4]
 80097b8:	f7fd fdf6 	bl	80073a8 <_malloc_r>
 80097bc:	9a01      	ldr	r2, [sp, #4]
 80097be:	4605      	mov	r5, r0
 80097c0:	b930      	cbnz	r0, 80097d0 <_calloc_r+0x24>
 80097c2:	4628      	mov	r0, r5
 80097c4:	b003      	add	sp, #12
 80097c6:	bd30      	pop	{r4, r5, pc}
 80097c8:	220c      	movs	r2, #12
 80097ca:	6002      	str	r2, [r0, #0]
 80097cc:	2500      	movs	r5, #0
 80097ce:	e7f8      	b.n	80097c2 <_calloc_r+0x16>
 80097d0:	4621      	mov	r1, r4
 80097d2:	f7fd fdc0 	bl	8007356 <memset>
 80097d6:	e7f4      	b.n	80097c2 <_calloc_r+0x16>

080097d8 <_free_r>:
 80097d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097da:	2900      	cmp	r1, #0
 80097dc:	d044      	beq.n	8009868 <_free_r+0x90>
 80097de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097e2:	9001      	str	r0, [sp, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f1a1 0404 	sub.w	r4, r1, #4
 80097ea:	bfb8      	it	lt
 80097ec:	18e4      	addlt	r4, r4, r3
 80097ee:	f7ff fc2f 	bl	8009050 <__malloc_lock>
 80097f2:	4a1e      	ldr	r2, [pc, #120]	; (800986c <_free_r+0x94>)
 80097f4:	9801      	ldr	r0, [sp, #4]
 80097f6:	6813      	ldr	r3, [r2, #0]
 80097f8:	b933      	cbnz	r3, 8009808 <_free_r+0x30>
 80097fa:	6063      	str	r3, [r4, #4]
 80097fc:	6014      	str	r4, [r2, #0]
 80097fe:	b003      	add	sp, #12
 8009800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009804:	f7ff bc2a 	b.w	800905c <__malloc_unlock>
 8009808:	42a3      	cmp	r3, r4
 800980a:	d908      	bls.n	800981e <_free_r+0x46>
 800980c:	6825      	ldr	r5, [r4, #0]
 800980e:	1961      	adds	r1, r4, r5
 8009810:	428b      	cmp	r3, r1
 8009812:	bf01      	itttt	eq
 8009814:	6819      	ldreq	r1, [r3, #0]
 8009816:	685b      	ldreq	r3, [r3, #4]
 8009818:	1949      	addeq	r1, r1, r5
 800981a:	6021      	streq	r1, [r4, #0]
 800981c:	e7ed      	b.n	80097fa <_free_r+0x22>
 800981e:	461a      	mov	r2, r3
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	b10b      	cbz	r3, 8009828 <_free_r+0x50>
 8009824:	42a3      	cmp	r3, r4
 8009826:	d9fa      	bls.n	800981e <_free_r+0x46>
 8009828:	6811      	ldr	r1, [r2, #0]
 800982a:	1855      	adds	r5, r2, r1
 800982c:	42a5      	cmp	r5, r4
 800982e:	d10b      	bne.n	8009848 <_free_r+0x70>
 8009830:	6824      	ldr	r4, [r4, #0]
 8009832:	4421      	add	r1, r4
 8009834:	1854      	adds	r4, r2, r1
 8009836:	42a3      	cmp	r3, r4
 8009838:	6011      	str	r1, [r2, #0]
 800983a:	d1e0      	bne.n	80097fe <_free_r+0x26>
 800983c:	681c      	ldr	r4, [r3, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	6053      	str	r3, [r2, #4]
 8009842:	4421      	add	r1, r4
 8009844:	6011      	str	r1, [r2, #0]
 8009846:	e7da      	b.n	80097fe <_free_r+0x26>
 8009848:	d902      	bls.n	8009850 <_free_r+0x78>
 800984a:	230c      	movs	r3, #12
 800984c:	6003      	str	r3, [r0, #0]
 800984e:	e7d6      	b.n	80097fe <_free_r+0x26>
 8009850:	6825      	ldr	r5, [r4, #0]
 8009852:	1961      	adds	r1, r4, r5
 8009854:	428b      	cmp	r3, r1
 8009856:	bf04      	itt	eq
 8009858:	6819      	ldreq	r1, [r3, #0]
 800985a:	685b      	ldreq	r3, [r3, #4]
 800985c:	6063      	str	r3, [r4, #4]
 800985e:	bf04      	itt	eq
 8009860:	1949      	addeq	r1, r1, r5
 8009862:	6021      	streq	r1, [r4, #0]
 8009864:	6054      	str	r4, [r2, #4]
 8009866:	e7ca      	b.n	80097fe <_free_r+0x26>
 8009868:	b003      	add	sp, #12
 800986a:	bd30      	pop	{r4, r5, pc}
 800986c:	20004d54 	.word	0x20004d54

08009870 <_read_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4d07      	ldr	r5, [pc, #28]	; (8009890 <_read_r+0x20>)
 8009874:	4604      	mov	r4, r0
 8009876:	4608      	mov	r0, r1
 8009878:	4611      	mov	r1, r2
 800987a:	2200      	movs	r2, #0
 800987c:	602a      	str	r2, [r5, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	f7f8 f952 	bl	8001b28 <_read>
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	d102      	bne.n	800988e <_read_r+0x1e>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	b103      	cbz	r3, 800988e <_read_r+0x1e>
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	20004d5c 	.word	0x20004d5c

08009894 <strcpy>:
 8009894:	4603      	mov	r3, r0
 8009896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800989a:	f803 2b01 	strb.w	r2, [r3], #1
 800989e:	2a00      	cmp	r2, #0
 80098a0:	d1f9      	bne.n	8009896 <strcpy+0x2>
 80098a2:	4770      	bx	lr

080098a4 <__assert_func>:
 80098a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098a6:	4614      	mov	r4, r2
 80098a8:	461a      	mov	r2, r3
 80098aa:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <__assert_func+0x2c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4605      	mov	r5, r0
 80098b0:	68d8      	ldr	r0, [r3, #12]
 80098b2:	b14c      	cbz	r4, 80098c8 <__assert_func+0x24>
 80098b4:	4b07      	ldr	r3, [pc, #28]	; (80098d4 <__assert_func+0x30>)
 80098b6:	9100      	str	r1, [sp, #0]
 80098b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098bc:	4906      	ldr	r1, [pc, #24]	; (80098d8 <__assert_func+0x34>)
 80098be:	462b      	mov	r3, r5
 80098c0:	f000 f80e 	bl	80098e0 <fiprintf>
 80098c4:	f000 fa58 	bl	8009d78 <abort>
 80098c8:	4b04      	ldr	r3, [pc, #16]	; (80098dc <__assert_func+0x38>)
 80098ca:	461c      	mov	r4, r3
 80098cc:	e7f3      	b.n	80098b6 <__assert_func+0x12>
 80098ce:	bf00      	nop
 80098d0:	20000014 	.word	0x20000014
 80098d4:	0800b3cc 	.word	0x0800b3cc
 80098d8:	0800b3d9 	.word	0x0800b3d9
 80098dc:	0800b407 	.word	0x0800b407

080098e0 <fiprintf>:
 80098e0:	b40e      	push	{r1, r2, r3}
 80098e2:	b503      	push	{r0, r1, lr}
 80098e4:	4601      	mov	r1, r0
 80098e6:	ab03      	add	r3, sp, #12
 80098e8:	4805      	ldr	r0, [pc, #20]	; (8009900 <fiprintf+0x20>)
 80098ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ee:	6800      	ldr	r0, [r0, #0]
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	f000 f843 	bl	800997c <_vfiprintf_r>
 80098f6:	b002      	add	sp, #8
 80098f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098fc:	b003      	add	sp, #12
 80098fe:	4770      	bx	lr
 8009900:	20000014 	.word	0x20000014

08009904 <__ascii_mbtowc>:
 8009904:	b082      	sub	sp, #8
 8009906:	b901      	cbnz	r1, 800990a <__ascii_mbtowc+0x6>
 8009908:	a901      	add	r1, sp, #4
 800990a:	b142      	cbz	r2, 800991e <__ascii_mbtowc+0x1a>
 800990c:	b14b      	cbz	r3, 8009922 <__ascii_mbtowc+0x1e>
 800990e:	7813      	ldrb	r3, [r2, #0]
 8009910:	600b      	str	r3, [r1, #0]
 8009912:	7812      	ldrb	r2, [r2, #0]
 8009914:	1e10      	subs	r0, r2, #0
 8009916:	bf18      	it	ne
 8009918:	2001      	movne	r0, #1
 800991a:	b002      	add	sp, #8
 800991c:	4770      	bx	lr
 800991e:	4610      	mov	r0, r2
 8009920:	e7fb      	b.n	800991a <__ascii_mbtowc+0x16>
 8009922:	f06f 0001 	mvn.w	r0, #1
 8009926:	e7f8      	b.n	800991a <__ascii_mbtowc+0x16>

08009928 <__sfputc_r>:
 8009928:	6893      	ldr	r3, [r2, #8]
 800992a:	3b01      	subs	r3, #1
 800992c:	2b00      	cmp	r3, #0
 800992e:	b410      	push	{r4}
 8009930:	6093      	str	r3, [r2, #8]
 8009932:	da08      	bge.n	8009946 <__sfputc_r+0x1e>
 8009934:	6994      	ldr	r4, [r2, #24]
 8009936:	42a3      	cmp	r3, r4
 8009938:	db01      	blt.n	800993e <__sfputc_r+0x16>
 800993a:	290a      	cmp	r1, #10
 800993c:	d103      	bne.n	8009946 <__sfputc_r+0x1e>
 800993e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009942:	f000 b94b 	b.w	8009bdc <__swbuf_r>
 8009946:	6813      	ldr	r3, [r2, #0]
 8009948:	1c58      	adds	r0, r3, #1
 800994a:	6010      	str	r0, [r2, #0]
 800994c:	7019      	strb	r1, [r3, #0]
 800994e:	4608      	mov	r0, r1
 8009950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009954:	4770      	bx	lr

08009956 <__sfputs_r>:
 8009956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009958:	4606      	mov	r6, r0
 800995a:	460f      	mov	r7, r1
 800995c:	4614      	mov	r4, r2
 800995e:	18d5      	adds	r5, r2, r3
 8009960:	42ac      	cmp	r4, r5
 8009962:	d101      	bne.n	8009968 <__sfputs_r+0x12>
 8009964:	2000      	movs	r0, #0
 8009966:	e007      	b.n	8009978 <__sfputs_r+0x22>
 8009968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996c:	463a      	mov	r2, r7
 800996e:	4630      	mov	r0, r6
 8009970:	f7ff ffda 	bl	8009928 <__sfputc_r>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d1f3      	bne.n	8009960 <__sfputs_r+0xa>
 8009978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800997c <_vfiprintf_r>:
 800997c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009980:	460d      	mov	r5, r1
 8009982:	b09d      	sub	sp, #116	; 0x74
 8009984:	4614      	mov	r4, r2
 8009986:	4698      	mov	r8, r3
 8009988:	4606      	mov	r6, r0
 800998a:	b118      	cbz	r0, 8009994 <_vfiprintf_r+0x18>
 800998c:	6983      	ldr	r3, [r0, #24]
 800998e:	b90b      	cbnz	r3, 8009994 <_vfiprintf_r+0x18>
 8009990:	f7fd fc0e 	bl	80071b0 <__sinit>
 8009994:	4b89      	ldr	r3, [pc, #548]	; (8009bbc <_vfiprintf_r+0x240>)
 8009996:	429d      	cmp	r5, r3
 8009998:	d11b      	bne.n	80099d2 <_vfiprintf_r+0x56>
 800999a:	6875      	ldr	r5, [r6, #4]
 800999c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800999e:	07d9      	lsls	r1, r3, #31
 80099a0:	d405      	bmi.n	80099ae <_vfiprintf_r+0x32>
 80099a2:	89ab      	ldrh	r3, [r5, #12]
 80099a4:	059a      	lsls	r2, r3, #22
 80099a6:	d402      	bmi.n	80099ae <_vfiprintf_r+0x32>
 80099a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099aa:	f7fd fcc4 	bl	8007336 <__retarget_lock_acquire_recursive>
 80099ae:	89ab      	ldrh	r3, [r5, #12]
 80099b0:	071b      	lsls	r3, r3, #28
 80099b2:	d501      	bpl.n	80099b8 <_vfiprintf_r+0x3c>
 80099b4:	692b      	ldr	r3, [r5, #16]
 80099b6:	b9eb      	cbnz	r3, 80099f4 <_vfiprintf_r+0x78>
 80099b8:	4629      	mov	r1, r5
 80099ba:	4630      	mov	r0, r6
 80099bc:	f000 f96e 	bl	8009c9c <__swsetup_r>
 80099c0:	b1c0      	cbz	r0, 80099f4 <_vfiprintf_r+0x78>
 80099c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c4:	07dc      	lsls	r4, r3, #31
 80099c6:	d50e      	bpl.n	80099e6 <_vfiprintf_r+0x6a>
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	b01d      	add	sp, #116	; 0x74
 80099ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d2:	4b7b      	ldr	r3, [pc, #492]	; (8009bc0 <_vfiprintf_r+0x244>)
 80099d4:	429d      	cmp	r5, r3
 80099d6:	d101      	bne.n	80099dc <_vfiprintf_r+0x60>
 80099d8:	68b5      	ldr	r5, [r6, #8]
 80099da:	e7df      	b.n	800999c <_vfiprintf_r+0x20>
 80099dc:	4b79      	ldr	r3, [pc, #484]	; (8009bc4 <_vfiprintf_r+0x248>)
 80099de:	429d      	cmp	r5, r3
 80099e0:	bf08      	it	eq
 80099e2:	68f5      	ldreq	r5, [r6, #12]
 80099e4:	e7da      	b.n	800999c <_vfiprintf_r+0x20>
 80099e6:	89ab      	ldrh	r3, [r5, #12]
 80099e8:	0598      	lsls	r0, r3, #22
 80099ea:	d4ed      	bmi.n	80099c8 <_vfiprintf_r+0x4c>
 80099ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ee:	f7fd fca3 	bl	8007338 <__retarget_lock_release_recursive>
 80099f2:	e7e9      	b.n	80099c8 <_vfiprintf_r+0x4c>
 80099f4:	2300      	movs	r3, #0
 80099f6:	9309      	str	r3, [sp, #36]	; 0x24
 80099f8:	2320      	movs	r3, #32
 80099fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a02:	2330      	movs	r3, #48	; 0x30
 8009a04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bc8 <_vfiprintf_r+0x24c>
 8009a08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a0c:	f04f 0901 	mov.w	r9, #1
 8009a10:	4623      	mov	r3, r4
 8009a12:	469a      	mov	sl, r3
 8009a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a18:	b10a      	cbz	r2, 8009a1e <_vfiprintf_r+0xa2>
 8009a1a:	2a25      	cmp	r2, #37	; 0x25
 8009a1c:	d1f9      	bne.n	8009a12 <_vfiprintf_r+0x96>
 8009a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a22:	d00b      	beq.n	8009a3c <_vfiprintf_r+0xc0>
 8009a24:	465b      	mov	r3, fp
 8009a26:	4622      	mov	r2, r4
 8009a28:	4629      	mov	r1, r5
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f7ff ff93 	bl	8009956 <__sfputs_r>
 8009a30:	3001      	adds	r0, #1
 8009a32:	f000 80aa 	beq.w	8009b8a <_vfiprintf_r+0x20e>
 8009a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a38:	445a      	add	r2, fp
 8009a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 80a2 	beq.w	8009b8a <_vfiprintf_r+0x20e>
 8009a46:	2300      	movs	r3, #0
 8009a48:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a50:	f10a 0a01 	add.w	sl, sl, #1
 8009a54:	9304      	str	r3, [sp, #16]
 8009a56:	9307      	str	r3, [sp, #28]
 8009a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a5e:	4654      	mov	r4, sl
 8009a60:	2205      	movs	r2, #5
 8009a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a66:	4858      	ldr	r0, [pc, #352]	; (8009bc8 <_vfiprintf_r+0x24c>)
 8009a68:	f7f6 fbda 	bl	8000220 <memchr>
 8009a6c:	9a04      	ldr	r2, [sp, #16]
 8009a6e:	b9d8      	cbnz	r0, 8009aa8 <_vfiprintf_r+0x12c>
 8009a70:	06d1      	lsls	r1, r2, #27
 8009a72:	bf44      	itt	mi
 8009a74:	2320      	movmi	r3, #32
 8009a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a7a:	0713      	lsls	r3, r2, #28
 8009a7c:	bf44      	itt	mi
 8009a7e:	232b      	movmi	r3, #43	; 0x2b
 8009a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a84:	f89a 3000 	ldrb.w	r3, [sl]
 8009a88:	2b2a      	cmp	r3, #42	; 0x2a
 8009a8a:	d015      	beq.n	8009ab8 <_vfiprintf_r+0x13c>
 8009a8c:	9a07      	ldr	r2, [sp, #28]
 8009a8e:	4654      	mov	r4, sl
 8009a90:	2000      	movs	r0, #0
 8009a92:	f04f 0c0a 	mov.w	ip, #10
 8009a96:	4621      	mov	r1, r4
 8009a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a9c:	3b30      	subs	r3, #48	; 0x30
 8009a9e:	2b09      	cmp	r3, #9
 8009aa0:	d94e      	bls.n	8009b40 <_vfiprintf_r+0x1c4>
 8009aa2:	b1b0      	cbz	r0, 8009ad2 <_vfiprintf_r+0x156>
 8009aa4:	9207      	str	r2, [sp, #28]
 8009aa6:	e014      	b.n	8009ad2 <_vfiprintf_r+0x156>
 8009aa8:	eba0 0308 	sub.w	r3, r0, r8
 8009aac:	fa09 f303 	lsl.w	r3, r9, r3
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	46a2      	mov	sl, r4
 8009ab6:	e7d2      	b.n	8009a5e <_vfiprintf_r+0xe2>
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	1d19      	adds	r1, r3, #4
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	9103      	str	r1, [sp, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	bfbb      	ittet	lt
 8009ac4:	425b      	neglt	r3, r3
 8009ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8009aca:	9307      	strge	r3, [sp, #28]
 8009acc:	9307      	strlt	r3, [sp, #28]
 8009ace:	bfb8      	it	lt
 8009ad0:	9204      	strlt	r2, [sp, #16]
 8009ad2:	7823      	ldrb	r3, [r4, #0]
 8009ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ad6:	d10c      	bne.n	8009af2 <_vfiprintf_r+0x176>
 8009ad8:	7863      	ldrb	r3, [r4, #1]
 8009ada:	2b2a      	cmp	r3, #42	; 0x2a
 8009adc:	d135      	bne.n	8009b4a <_vfiprintf_r+0x1ce>
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	1d1a      	adds	r2, r3, #4
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	9203      	str	r2, [sp, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	bfb8      	it	lt
 8009aea:	f04f 33ff 	movlt.w	r3, #4294967295
 8009aee:	3402      	adds	r4, #2
 8009af0:	9305      	str	r3, [sp, #20]
 8009af2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009bd8 <_vfiprintf_r+0x25c>
 8009af6:	7821      	ldrb	r1, [r4, #0]
 8009af8:	2203      	movs	r2, #3
 8009afa:	4650      	mov	r0, sl
 8009afc:	f7f6 fb90 	bl	8000220 <memchr>
 8009b00:	b140      	cbz	r0, 8009b14 <_vfiprintf_r+0x198>
 8009b02:	2340      	movs	r3, #64	; 0x40
 8009b04:	eba0 000a 	sub.w	r0, r0, sl
 8009b08:	fa03 f000 	lsl.w	r0, r3, r0
 8009b0c:	9b04      	ldr	r3, [sp, #16]
 8009b0e:	4303      	orrs	r3, r0
 8009b10:	3401      	adds	r4, #1
 8009b12:	9304      	str	r3, [sp, #16]
 8009b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b18:	482c      	ldr	r0, [pc, #176]	; (8009bcc <_vfiprintf_r+0x250>)
 8009b1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b1e:	2206      	movs	r2, #6
 8009b20:	f7f6 fb7e 	bl	8000220 <memchr>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d03f      	beq.n	8009ba8 <_vfiprintf_r+0x22c>
 8009b28:	4b29      	ldr	r3, [pc, #164]	; (8009bd0 <_vfiprintf_r+0x254>)
 8009b2a:	bb1b      	cbnz	r3, 8009b74 <_vfiprintf_r+0x1f8>
 8009b2c:	9b03      	ldr	r3, [sp, #12]
 8009b2e:	3307      	adds	r3, #7
 8009b30:	f023 0307 	bic.w	r3, r3, #7
 8009b34:	3308      	adds	r3, #8
 8009b36:	9303      	str	r3, [sp, #12]
 8009b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3a:	443b      	add	r3, r7
 8009b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3e:	e767      	b.n	8009a10 <_vfiprintf_r+0x94>
 8009b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b44:	460c      	mov	r4, r1
 8009b46:	2001      	movs	r0, #1
 8009b48:	e7a5      	b.n	8009a96 <_vfiprintf_r+0x11a>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	3401      	adds	r4, #1
 8009b4e:	9305      	str	r3, [sp, #20]
 8009b50:	4619      	mov	r1, r3
 8009b52:	f04f 0c0a 	mov.w	ip, #10
 8009b56:	4620      	mov	r0, r4
 8009b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b5c:	3a30      	subs	r2, #48	; 0x30
 8009b5e:	2a09      	cmp	r2, #9
 8009b60:	d903      	bls.n	8009b6a <_vfiprintf_r+0x1ee>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0c5      	beq.n	8009af2 <_vfiprintf_r+0x176>
 8009b66:	9105      	str	r1, [sp, #20]
 8009b68:	e7c3      	b.n	8009af2 <_vfiprintf_r+0x176>
 8009b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b6e:	4604      	mov	r4, r0
 8009b70:	2301      	movs	r3, #1
 8009b72:	e7f0      	b.n	8009b56 <_vfiprintf_r+0x1da>
 8009b74:	ab03      	add	r3, sp, #12
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	462a      	mov	r2, r5
 8009b7a:	4b16      	ldr	r3, [pc, #88]	; (8009bd4 <_vfiprintf_r+0x258>)
 8009b7c:	a904      	add	r1, sp, #16
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f7fd fd26 	bl	80075d0 <_printf_float>
 8009b84:	4607      	mov	r7, r0
 8009b86:	1c78      	adds	r0, r7, #1
 8009b88:	d1d6      	bne.n	8009b38 <_vfiprintf_r+0x1bc>
 8009b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b8c:	07d9      	lsls	r1, r3, #31
 8009b8e:	d405      	bmi.n	8009b9c <_vfiprintf_r+0x220>
 8009b90:	89ab      	ldrh	r3, [r5, #12]
 8009b92:	059a      	lsls	r2, r3, #22
 8009b94:	d402      	bmi.n	8009b9c <_vfiprintf_r+0x220>
 8009b96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b98:	f7fd fbce 	bl	8007338 <__retarget_lock_release_recursive>
 8009b9c:	89ab      	ldrh	r3, [r5, #12]
 8009b9e:	065b      	lsls	r3, r3, #25
 8009ba0:	f53f af12 	bmi.w	80099c8 <_vfiprintf_r+0x4c>
 8009ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ba6:	e711      	b.n	80099cc <_vfiprintf_r+0x50>
 8009ba8:	ab03      	add	r3, sp, #12
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	462a      	mov	r2, r5
 8009bae:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <_vfiprintf_r+0x258>)
 8009bb0:	a904      	add	r1, sp, #16
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7fd ffb0 	bl	8007b18 <_printf_i>
 8009bb8:	e7e4      	b.n	8009b84 <_vfiprintf_r+0x208>
 8009bba:	bf00      	nop
 8009bbc:	0800b16c 	.word	0x0800b16c
 8009bc0:	0800b18c 	.word	0x0800b18c
 8009bc4:	0800b14c 	.word	0x0800b14c
 8009bc8:	0800b412 	.word	0x0800b412
 8009bcc:	0800b41c 	.word	0x0800b41c
 8009bd0:	080075d1 	.word	0x080075d1
 8009bd4:	08009957 	.word	0x08009957
 8009bd8:	0800b418 	.word	0x0800b418

08009bdc <__swbuf_r>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	460e      	mov	r6, r1
 8009be0:	4614      	mov	r4, r2
 8009be2:	4605      	mov	r5, r0
 8009be4:	b118      	cbz	r0, 8009bee <__swbuf_r+0x12>
 8009be6:	6983      	ldr	r3, [r0, #24]
 8009be8:	b90b      	cbnz	r3, 8009bee <__swbuf_r+0x12>
 8009bea:	f7fd fae1 	bl	80071b0 <__sinit>
 8009bee:	4b21      	ldr	r3, [pc, #132]	; (8009c74 <__swbuf_r+0x98>)
 8009bf0:	429c      	cmp	r4, r3
 8009bf2:	d12b      	bne.n	8009c4c <__swbuf_r+0x70>
 8009bf4:	686c      	ldr	r4, [r5, #4]
 8009bf6:	69a3      	ldr	r3, [r4, #24]
 8009bf8:	60a3      	str	r3, [r4, #8]
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	071a      	lsls	r2, r3, #28
 8009bfe:	d52f      	bpl.n	8009c60 <__swbuf_r+0x84>
 8009c00:	6923      	ldr	r3, [r4, #16]
 8009c02:	b36b      	cbz	r3, 8009c60 <__swbuf_r+0x84>
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	6820      	ldr	r0, [r4, #0]
 8009c08:	1ac0      	subs	r0, r0, r3
 8009c0a:	6963      	ldr	r3, [r4, #20]
 8009c0c:	b2f6      	uxtb	r6, r6
 8009c0e:	4283      	cmp	r3, r0
 8009c10:	4637      	mov	r7, r6
 8009c12:	dc04      	bgt.n	8009c1e <__swbuf_r+0x42>
 8009c14:	4621      	mov	r1, r4
 8009c16:	4628      	mov	r0, r5
 8009c18:	f7ff f9c0 	bl	8008f9c <_fflush_r>
 8009c1c:	bb30      	cbnz	r0, 8009c6c <__swbuf_r+0x90>
 8009c1e:	68a3      	ldr	r3, [r4, #8]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	60a3      	str	r3, [r4, #8]
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	6022      	str	r2, [r4, #0]
 8009c2a:	701e      	strb	r6, [r3, #0]
 8009c2c:	6963      	ldr	r3, [r4, #20]
 8009c2e:	3001      	adds	r0, #1
 8009c30:	4283      	cmp	r3, r0
 8009c32:	d004      	beq.n	8009c3e <__swbuf_r+0x62>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	07db      	lsls	r3, r3, #31
 8009c38:	d506      	bpl.n	8009c48 <__swbuf_r+0x6c>
 8009c3a:	2e0a      	cmp	r6, #10
 8009c3c:	d104      	bne.n	8009c48 <__swbuf_r+0x6c>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4628      	mov	r0, r5
 8009c42:	f7ff f9ab 	bl	8008f9c <_fflush_r>
 8009c46:	b988      	cbnz	r0, 8009c6c <__swbuf_r+0x90>
 8009c48:	4638      	mov	r0, r7
 8009c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <__swbuf_r+0x9c>)
 8009c4e:	429c      	cmp	r4, r3
 8009c50:	d101      	bne.n	8009c56 <__swbuf_r+0x7a>
 8009c52:	68ac      	ldr	r4, [r5, #8]
 8009c54:	e7cf      	b.n	8009bf6 <__swbuf_r+0x1a>
 8009c56:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <__swbuf_r+0xa0>)
 8009c58:	429c      	cmp	r4, r3
 8009c5a:	bf08      	it	eq
 8009c5c:	68ec      	ldreq	r4, [r5, #12]
 8009c5e:	e7ca      	b.n	8009bf6 <__swbuf_r+0x1a>
 8009c60:	4621      	mov	r1, r4
 8009c62:	4628      	mov	r0, r5
 8009c64:	f000 f81a 	bl	8009c9c <__swsetup_r>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d0cb      	beq.n	8009c04 <__swbuf_r+0x28>
 8009c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8009c70:	e7ea      	b.n	8009c48 <__swbuf_r+0x6c>
 8009c72:	bf00      	nop
 8009c74:	0800b16c 	.word	0x0800b16c
 8009c78:	0800b18c 	.word	0x0800b18c
 8009c7c:	0800b14c 	.word	0x0800b14c

08009c80 <__ascii_wctomb>:
 8009c80:	b149      	cbz	r1, 8009c96 <__ascii_wctomb+0x16>
 8009c82:	2aff      	cmp	r2, #255	; 0xff
 8009c84:	bf85      	ittet	hi
 8009c86:	238a      	movhi	r3, #138	; 0x8a
 8009c88:	6003      	strhi	r3, [r0, #0]
 8009c8a:	700a      	strbls	r2, [r1, #0]
 8009c8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c90:	bf98      	it	ls
 8009c92:	2001      	movls	r0, #1
 8009c94:	4770      	bx	lr
 8009c96:	4608      	mov	r0, r1
 8009c98:	4770      	bx	lr
	...

08009c9c <__swsetup_r>:
 8009c9c:	4b32      	ldr	r3, [pc, #200]	; (8009d68 <__swsetup_r+0xcc>)
 8009c9e:	b570      	push	{r4, r5, r6, lr}
 8009ca0:	681d      	ldr	r5, [r3, #0]
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	460c      	mov	r4, r1
 8009ca6:	b125      	cbz	r5, 8009cb2 <__swsetup_r+0x16>
 8009ca8:	69ab      	ldr	r3, [r5, #24]
 8009caa:	b913      	cbnz	r3, 8009cb2 <__swsetup_r+0x16>
 8009cac:	4628      	mov	r0, r5
 8009cae:	f7fd fa7f 	bl	80071b0 <__sinit>
 8009cb2:	4b2e      	ldr	r3, [pc, #184]	; (8009d6c <__swsetup_r+0xd0>)
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	d10f      	bne.n	8009cd8 <__swsetup_r+0x3c>
 8009cb8:	686c      	ldr	r4, [r5, #4]
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cc0:	0719      	lsls	r1, r3, #28
 8009cc2:	d42c      	bmi.n	8009d1e <__swsetup_r+0x82>
 8009cc4:	06dd      	lsls	r5, r3, #27
 8009cc6:	d411      	bmi.n	8009cec <__swsetup_r+0x50>
 8009cc8:	2309      	movs	r3, #9
 8009cca:	6033      	str	r3, [r6, #0]
 8009ccc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd6:	e03e      	b.n	8009d56 <__swsetup_r+0xba>
 8009cd8:	4b25      	ldr	r3, [pc, #148]	; (8009d70 <__swsetup_r+0xd4>)
 8009cda:	429c      	cmp	r4, r3
 8009cdc:	d101      	bne.n	8009ce2 <__swsetup_r+0x46>
 8009cde:	68ac      	ldr	r4, [r5, #8]
 8009ce0:	e7eb      	b.n	8009cba <__swsetup_r+0x1e>
 8009ce2:	4b24      	ldr	r3, [pc, #144]	; (8009d74 <__swsetup_r+0xd8>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	bf08      	it	eq
 8009ce8:	68ec      	ldreq	r4, [r5, #12]
 8009cea:	e7e6      	b.n	8009cba <__swsetup_r+0x1e>
 8009cec:	0758      	lsls	r0, r3, #29
 8009cee:	d512      	bpl.n	8009d16 <__swsetup_r+0x7a>
 8009cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cf2:	b141      	cbz	r1, 8009d06 <__swsetup_r+0x6a>
 8009cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cf8:	4299      	cmp	r1, r3
 8009cfa:	d002      	beq.n	8009d02 <__swsetup_r+0x66>
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f7ff fd6b 	bl	80097d8 <_free_r>
 8009d02:	2300      	movs	r3, #0
 8009d04:	6363      	str	r3, [r4, #52]	; 0x34
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d0c:	81a3      	strh	r3, [r4, #12]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6063      	str	r3, [r4, #4]
 8009d12:	6923      	ldr	r3, [r4, #16]
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	f043 0308 	orr.w	r3, r3, #8
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	b94b      	cbnz	r3, 8009d36 <__swsetup_r+0x9a>
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d2c:	d003      	beq.n	8009d36 <__swsetup_r+0x9a>
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4630      	mov	r0, r6
 8009d32:	f000 f84d 	bl	8009dd0 <__smakebuf_r>
 8009d36:	89a0      	ldrh	r0, [r4, #12]
 8009d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d3c:	f010 0301 	ands.w	r3, r0, #1
 8009d40:	d00a      	beq.n	8009d58 <__swsetup_r+0xbc>
 8009d42:	2300      	movs	r3, #0
 8009d44:	60a3      	str	r3, [r4, #8]
 8009d46:	6963      	ldr	r3, [r4, #20]
 8009d48:	425b      	negs	r3, r3
 8009d4a:	61a3      	str	r3, [r4, #24]
 8009d4c:	6923      	ldr	r3, [r4, #16]
 8009d4e:	b943      	cbnz	r3, 8009d62 <__swsetup_r+0xc6>
 8009d50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d54:	d1ba      	bne.n	8009ccc <__swsetup_r+0x30>
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	0781      	lsls	r1, r0, #30
 8009d5a:	bf58      	it	pl
 8009d5c:	6963      	ldrpl	r3, [r4, #20]
 8009d5e:	60a3      	str	r3, [r4, #8]
 8009d60:	e7f4      	b.n	8009d4c <__swsetup_r+0xb0>
 8009d62:	2000      	movs	r0, #0
 8009d64:	e7f7      	b.n	8009d56 <__swsetup_r+0xba>
 8009d66:	bf00      	nop
 8009d68:	20000014 	.word	0x20000014
 8009d6c:	0800b16c 	.word	0x0800b16c
 8009d70:	0800b18c 	.word	0x0800b18c
 8009d74:	0800b14c 	.word	0x0800b14c

08009d78 <abort>:
 8009d78:	b508      	push	{r3, lr}
 8009d7a:	2006      	movs	r0, #6
 8009d7c:	f000 f890 	bl	8009ea0 <raise>
 8009d80:	2001      	movs	r0, #1
 8009d82:	f7f7 fec7 	bl	8001b14 <_exit>

08009d86 <__swhatbuf_r>:
 8009d86:	b570      	push	{r4, r5, r6, lr}
 8009d88:	460e      	mov	r6, r1
 8009d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	b096      	sub	sp, #88	; 0x58
 8009d92:	4614      	mov	r4, r2
 8009d94:	461d      	mov	r5, r3
 8009d96:	da08      	bge.n	8009daa <__swhatbuf_r+0x24>
 8009d98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	602a      	str	r2, [r5, #0]
 8009da0:	061a      	lsls	r2, r3, #24
 8009da2:	d410      	bmi.n	8009dc6 <__swhatbuf_r+0x40>
 8009da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da8:	e00e      	b.n	8009dc8 <__swhatbuf_r+0x42>
 8009daa:	466a      	mov	r2, sp
 8009dac:	f000 f894 	bl	8009ed8 <_fstat_r>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	dbf1      	blt.n	8009d98 <__swhatbuf_r+0x12>
 8009db4:	9a01      	ldr	r2, [sp, #4]
 8009db6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dbe:	425a      	negs	r2, r3
 8009dc0:	415a      	adcs	r2, r3
 8009dc2:	602a      	str	r2, [r5, #0]
 8009dc4:	e7ee      	b.n	8009da4 <__swhatbuf_r+0x1e>
 8009dc6:	2340      	movs	r3, #64	; 0x40
 8009dc8:	2000      	movs	r0, #0
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	b016      	add	sp, #88	; 0x58
 8009dce:	bd70      	pop	{r4, r5, r6, pc}

08009dd0 <__smakebuf_r>:
 8009dd0:	898b      	ldrh	r3, [r1, #12]
 8009dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dd4:	079d      	lsls	r5, r3, #30
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	460c      	mov	r4, r1
 8009dda:	d507      	bpl.n	8009dec <__smakebuf_r+0x1c>
 8009ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	6123      	str	r3, [r4, #16]
 8009de4:	2301      	movs	r3, #1
 8009de6:	6163      	str	r3, [r4, #20]
 8009de8:	b002      	add	sp, #8
 8009dea:	bd70      	pop	{r4, r5, r6, pc}
 8009dec:	ab01      	add	r3, sp, #4
 8009dee:	466a      	mov	r2, sp
 8009df0:	f7ff ffc9 	bl	8009d86 <__swhatbuf_r>
 8009df4:	9900      	ldr	r1, [sp, #0]
 8009df6:	4605      	mov	r5, r0
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7fd fad5 	bl	80073a8 <_malloc_r>
 8009dfe:	b948      	cbnz	r0, 8009e14 <__smakebuf_r+0x44>
 8009e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e04:	059a      	lsls	r2, r3, #22
 8009e06:	d4ef      	bmi.n	8009de8 <__smakebuf_r+0x18>
 8009e08:	f023 0303 	bic.w	r3, r3, #3
 8009e0c:	f043 0302 	orr.w	r3, r3, #2
 8009e10:	81a3      	strh	r3, [r4, #12]
 8009e12:	e7e3      	b.n	8009ddc <__smakebuf_r+0xc>
 8009e14:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <__smakebuf_r+0x7c>)
 8009e16:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	6020      	str	r0, [r4, #0]
 8009e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e20:	81a3      	strh	r3, [r4, #12]
 8009e22:	9b00      	ldr	r3, [sp, #0]
 8009e24:	6163      	str	r3, [r4, #20]
 8009e26:	9b01      	ldr	r3, [sp, #4]
 8009e28:	6120      	str	r0, [r4, #16]
 8009e2a:	b15b      	cbz	r3, 8009e44 <__smakebuf_r+0x74>
 8009e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e30:	4630      	mov	r0, r6
 8009e32:	f000 f863 	bl	8009efc <_isatty_r>
 8009e36:	b128      	cbz	r0, 8009e44 <__smakebuf_r+0x74>
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	f023 0303 	bic.w	r3, r3, #3
 8009e3e:	f043 0301 	orr.w	r3, r3, #1
 8009e42:	81a3      	strh	r3, [r4, #12]
 8009e44:	89a0      	ldrh	r0, [r4, #12]
 8009e46:	4305      	orrs	r5, r0
 8009e48:	81a5      	strh	r5, [r4, #12]
 8009e4a:	e7cd      	b.n	8009de8 <__smakebuf_r+0x18>
 8009e4c:	08007149 	.word	0x08007149

08009e50 <_raise_r>:
 8009e50:	291f      	cmp	r1, #31
 8009e52:	b538      	push	{r3, r4, r5, lr}
 8009e54:	4604      	mov	r4, r0
 8009e56:	460d      	mov	r5, r1
 8009e58:	d904      	bls.n	8009e64 <_raise_r+0x14>
 8009e5a:	2316      	movs	r3, #22
 8009e5c:	6003      	str	r3, [r0, #0]
 8009e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e66:	b112      	cbz	r2, 8009e6e <_raise_r+0x1e>
 8009e68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e6c:	b94b      	cbnz	r3, 8009e82 <_raise_r+0x32>
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 f830 	bl	8009ed4 <_getpid_r>
 8009e74:	462a      	mov	r2, r5
 8009e76:	4601      	mov	r1, r0
 8009e78:	4620      	mov	r0, r4
 8009e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e7e:	f000 b817 	b.w	8009eb0 <_kill_r>
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d00a      	beq.n	8009e9c <_raise_r+0x4c>
 8009e86:	1c59      	adds	r1, r3, #1
 8009e88:	d103      	bne.n	8009e92 <_raise_r+0x42>
 8009e8a:	2316      	movs	r3, #22
 8009e8c:	6003      	str	r3, [r0, #0]
 8009e8e:	2001      	movs	r0, #1
 8009e90:	e7e7      	b.n	8009e62 <_raise_r+0x12>
 8009e92:	2400      	movs	r4, #0
 8009e94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e98:	4628      	mov	r0, r5
 8009e9a:	4798      	blx	r3
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	e7e0      	b.n	8009e62 <_raise_r+0x12>

08009ea0 <raise>:
 8009ea0:	4b02      	ldr	r3, [pc, #8]	; (8009eac <raise+0xc>)
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	6818      	ldr	r0, [r3, #0]
 8009ea6:	f7ff bfd3 	b.w	8009e50 <_raise_r>
 8009eaa:	bf00      	nop
 8009eac:	20000014 	.word	0x20000014

08009eb0 <_kill_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4d07      	ldr	r5, [pc, #28]	; (8009ed0 <_kill_r+0x20>)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	4608      	mov	r0, r1
 8009eba:	4611      	mov	r1, r2
 8009ebc:	602b      	str	r3, [r5, #0]
 8009ebe:	f7f7 fe19 	bl	8001af4 <_kill>
 8009ec2:	1c43      	adds	r3, r0, #1
 8009ec4:	d102      	bne.n	8009ecc <_kill_r+0x1c>
 8009ec6:	682b      	ldr	r3, [r5, #0]
 8009ec8:	b103      	cbz	r3, 8009ecc <_kill_r+0x1c>
 8009eca:	6023      	str	r3, [r4, #0]
 8009ecc:	bd38      	pop	{r3, r4, r5, pc}
 8009ece:	bf00      	nop
 8009ed0:	20004d5c 	.word	0x20004d5c

08009ed4 <_getpid_r>:
 8009ed4:	f7f7 be06 	b.w	8001ae4 <_getpid>

08009ed8 <_fstat_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	; (8009ef8 <_fstat_r+0x20>)
 8009edc:	2300      	movs	r3, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	f7f7 fe64 	bl	8001bb2 <_fstat>
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	d102      	bne.n	8009ef4 <_fstat_r+0x1c>
 8009eee:	682b      	ldr	r3, [r5, #0]
 8009ef0:	b103      	cbz	r3, 8009ef4 <_fstat_r+0x1c>
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	bd38      	pop	{r3, r4, r5, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20004d5c 	.word	0x20004d5c

08009efc <_isatty_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4d06      	ldr	r5, [pc, #24]	; (8009f18 <_isatty_r+0x1c>)
 8009f00:	2300      	movs	r3, #0
 8009f02:	4604      	mov	r4, r0
 8009f04:	4608      	mov	r0, r1
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	f7f7 fe63 	bl	8001bd2 <_isatty>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_isatty_r+0x1a>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_isatty_r+0x1a>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	20004d5c 	.word	0x20004d5c
 8009f1c:	00000000 	.word	0x00000000

08009f20 <cos>:
 8009f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f22:	ec53 2b10 	vmov	r2, r3, d0
 8009f26:	4826      	ldr	r0, [pc, #152]	; (8009fc0 <cos+0xa0>)
 8009f28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f2c:	4281      	cmp	r1, r0
 8009f2e:	dc06      	bgt.n	8009f3e <cos+0x1e>
 8009f30:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009fb8 <cos+0x98>
 8009f34:	b005      	add	sp, #20
 8009f36:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f3a:	f000 baa9 	b.w	800a490 <__kernel_cos>
 8009f3e:	4821      	ldr	r0, [pc, #132]	; (8009fc4 <cos+0xa4>)
 8009f40:	4281      	cmp	r1, r0
 8009f42:	dd09      	ble.n	8009f58 <cos+0x38>
 8009f44:	ee10 0a10 	vmov	r0, s0
 8009f48:	4619      	mov	r1, r3
 8009f4a:	f7f6 f9bd 	bl	80002c8 <__aeabi_dsub>
 8009f4e:	ec41 0b10 	vmov	d0, r0, r1
 8009f52:	b005      	add	sp, #20
 8009f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f58:	4668      	mov	r0, sp
 8009f5a:	f000 f88d 	bl	800a078 <__ieee754_rem_pio2>
 8009f5e:	f000 0003 	and.w	r0, r0, #3
 8009f62:	2801      	cmp	r0, #1
 8009f64:	d00b      	beq.n	8009f7e <cos+0x5e>
 8009f66:	2802      	cmp	r0, #2
 8009f68:	d016      	beq.n	8009f98 <cos+0x78>
 8009f6a:	b9e0      	cbnz	r0, 8009fa6 <cos+0x86>
 8009f6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f70:	ed9d 0b00 	vldr	d0, [sp]
 8009f74:	f000 fa8c 	bl	800a490 <__kernel_cos>
 8009f78:	ec51 0b10 	vmov	r0, r1, d0
 8009f7c:	e7e7      	b.n	8009f4e <cos+0x2e>
 8009f7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f82:	ed9d 0b00 	vldr	d0, [sp]
 8009f86:	f000 fe9b 	bl	800acc0 <__kernel_sin>
 8009f8a:	ec53 2b10 	vmov	r2, r3, d0
 8009f8e:	ee10 0a10 	vmov	r0, s0
 8009f92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f96:	e7da      	b.n	8009f4e <cos+0x2e>
 8009f98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f9c:	ed9d 0b00 	vldr	d0, [sp]
 8009fa0:	f000 fa76 	bl	800a490 <__kernel_cos>
 8009fa4:	e7f1      	b.n	8009f8a <cos+0x6a>
 8009fa6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009faa:	ed9d 0b00 	vldr	d0, [sp]
 8009fae:	2001      	movs	r0, #1
 8009fb0:	f000 fe86 	bl	800acc0 <__kernel_sin>
 8009fb4:	e7e0      	b.n	8009f78 <cos+0x58>
 8009fb6:	bf00      	nop
	...
 8009fc0:	3fe921fb 	.word	0x3fe921fb
 8009fc4:	7fefffff 	.word	0x7fefffff

08009fc8 <sin>:
 8009fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fca:	ec53 2b10 	vmov	r2, r3, d0
 8009fce:	4828      	ldr	r0, [pc, #160]	; (800a070 <sin+0xa8>)
 8009fd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009fd4:	4281      	cmp	r1, r0
 8009fd6:	dc07      	bgt.n	8009fe8 <sin+0x20>
 8009fd8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a068 <sin+0xa0>
 8009fdc:	2000      	movs	r0, #0
 8009fde:	b005      	add	sp, #20
 8009fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fe4:	f000 be6c 	b.w	800acc0 <__kernel_sin>
 8009fe8:	4822      	ldr	r0, [pc, #136]	; (800a074 <sin+0xac>)
 8009fea:	4281      	cmp	r1, r0
 8009fec:	dd09      	ble.n	800a002 <sin+0x3a>
 8009fee:	ee10 0a10 	vmov	r0, s0
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	f7f6 f968 	bl	80002c8 <__aeabi_dsub>
 8009ff8:	ec41 0b10 	vmov	d0, r0, r1
 8009ffc:	b005      	add	sp, #20
 8009ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 800a002:	4668      	mov	r0, sp
 800a004:	f000 f838 	bl	800a078 <__ieee754_rem_pio2>
 800a008:	f000 0003 	and.w	r0, r0, #3
 800a00c:	2801      	cmp	r0, #1
 800a00e:	d00c      	beq.n	800a02a <sin+0x62>
 800a010:	2802      	cmp	r0, #2
 800a012:	d011      	beq.n	800a038 <sin+0x70>
 800a014:	b9f0      	cbnz	r0, 800a054 <sin+0x8c>
 800a016:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a01a:	ed9d 0b00 	vldr	d0, [sp]
 800a01e:	2001      	movs	r0, #1
 800a020:	f000 fe4e 	bl	800acc0 <__kernel_sin>
 800a024:	ec51 0b10 	vmov	r0, r1, d0
 800a028:	e7e6      	b.n	8009ff8 <sin+0x30>
 800a02a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a02e:	ed9d 0b00 	vldr	d0, [sp]
 800a032:	f000 fa2d 	bl	800a490 <__kernel_cos>
 800a036:	e7f5      	b.n	800a024 <sin+0x5c>
 800a038:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a03c:	ed9d 0b00 	vldr	d0, [sp]
 800a040:	2001      	movs	r0, #1
 800a042:	f000 fe3d 	bl	800acc0 <__kernel_sin>
 800a046:	ec53 2b10 	vmov	r2, r3, d0
 800a04a:	ee10 0a10 	vmov	r0, s0
 800a04e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a052:	e7d1      	b.n	8009ff8 <sin+0x30>
 800a054:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a058:	ed9d 0b00 	vldr	d0, [sp]
 800a05c:	f000 fa18 	bl	800a490 <__kernel_cos>
 800a060:	e7f1      	b.n	800a046 <sin+0x7e>
 800a062:	bf00      	nop
 800a064:	f3af 8000 	nop.w
	...
 800a070:	3fe921fb 	.word	0x3fe921fb
 800a074:	7fefffff 	.word	0x7fefffff

0800a078 <__ieee754_rem_pio2>:
 800a078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	ed2d 8b02 	vpush	{d8}
 800a080:	ec55 4b10 	vmov	r4, r5, d0
 800a084:	4bca      	ldr	r3, [pc, #808]	; (800a3b0 <__ieee754_rem_pio2+0x338>)
 800a086:	b08b      	sub	sp, #44	; 0x2c
 800a088:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a08c:	4598      	cmp	r8, r3
 800a08e:	4682      	mov	sl, r0
 800a090:	9502      	str	r5, [sp, #8]
 800a092:	dc08      	bgt.n	800a0a6 <__ieee754_rem_pio2+0x2e>
 800a094:	2200      	movs	r2, #0
 800a096:	2300      	movs	r3, #0
 800a098:	ed80 0b00 	vstr	d0, [r0]
 800a09c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a0a0:	f04f 0b00 	mov.w	fp, #0
 800a0a4:	e028      	b.n	800a0f8 <__ieee754_rem_pio2+0x80>
 800a0a6:	4bc3      	ldr	r3, [pc, #780]	; (800a3b4 <__ieee754_rem_pio2+0x33c>)
 800a0a8:	4598      	cmp	r8, r3
 800a0aa:	dc78      	bgt.n	800a19e <__ieee754_rem_pio2+0x126>
 800a0ac:	9b02      	ldr	r3, [sp, #8]
 800a0ae:	4ec2      	ldr	r6, [pc, #776]	; (800a3b8 <__ieee754_rem_pio2+0x340>)
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	ee10 0a10 	vmov	r0, s0
 800a0b6:	a3b0      	add	r3, pc, #704	; (adr r3, 800a378 <__ieee754_rem_pio2+0x300>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	4629      	mov	r1, r5
 800a0be:	dd39      	ble.n	800a134 <__ieee754_rem_pio2+0xbc>
 800a0c0:	f7f6 f902 	bl	80002c8 <__aeabi_dsub>
 800a0c4:	45b0      	cmp	r8, r6
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	d01b      	beq.n	800a104 <__ieee754_rem_pio2+0x8c>
 800a0cc:	a3ac      	add	r3, pc, #688	; (adr r3, 800a380 <__ieee754_rem_pio2+0x308>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f7f6 f8f9 	bl	80002c8 <__aeabi_dsub>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	e9ca 2300 	strd	r2, r3, [sl]
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f7f6 f8f1 	bl	80002c8 <__aeabi_dsub>
 800a0e6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a380 <__ieee754_rem_pio2+0x308>)
 800a0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ec:	f7f6 f8ec 	bl	80002c8 <__aeabi_dsub>
 800a0f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a0f4:	f04f 0b01 	mov.w	fp, #1
 800a0f8:	4658      	mov	r0, fp
 800a0fa:	b00b      	add	sp, #44	; 0x2c
 800a0fc:	ecbd 8b02 	vpop	{d8}
 800a100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a104:	a3a0      	add	r3, pc, #640	; (adr r3, 800a388 <__ieee754_rem_pio2+0x310>)
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f7f6 f8dd 	bl	80002c8 <__aeabi_dsub>
 800a10e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a390 <__ieee754_rem_pio2+0x318>)
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	4604      	mov	r4, r0
 800a116:	460d      	mov	r5, r1
 800a118:	f7f6 f8d6 	bl	80002c8 <__aeabi_dsub>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	e9ca 2300 	strd	r2, r3, [sl]
 800a124:	4620      	mov	r0, r4
 800a126:	4629      	mov	r1, r5
 800a128:	f7f6 f8ce 	bl	80002c8 <__aeabi_dsub>
 800a12c:	a398      	add	r3, pc, #608	; (adr r3, 800a390 <__ieee754_rem_pio2+0x318>)
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	e7db      	b.n	800a0ec <__ieee754_rem_pio2+0x74>
 800a134:	f7f6 f8ca 	bl	80002cc <__adddf3>
 800a138:	45b0      	cmp	r8, r6
 800a13a:	4604      	mov	r4, r0
 800a13c:	460d      	mov	r5, r1
 800a13e:	d016      	beq.n	800a16e <__ieee754_rem_pio2+0xf6>
 800a140:	a38f      	add	r3, pc, #572	; (adr r3, 800a380 <__ieee754_rem_pio2+0x308>)
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	f7f6 f8c1 	bl	80002cc <__adddf3>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	e9ca 2300 	strd	r2, r3, [sl]
 800a152:	4620      	mov	r0, r4
 800a154:	4629      	mov	r1, r5
 800a156:	f7f6 f8b7 	bl	80002c8 <__aeabi_dsub>
 800a15a:	a389      	add	r3, pc, #548	; (adr r3, 800a380 <__ieee754_rem_pio2+0x308>)
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	f7f6 f8b4 	bl	80002cc <__adddf3>
 800a164:	f04f 3bff 	mov.w	fp, #4294967295
 800a168:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a16c:	e7c4      	b.n	800a0f8 <__ieee754_rem_pio2+0x80>
 800a16e:	a386      	add	r3, pc, #536	; (adr r3, 800a388 <__ieee754_rem_pio2+0x310>)
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f7f6 f8aa 	bl	80002cc <__adddf3>
 800a178:	a385      	add	r3, pc, #532	; (adr r3, 800a390 <__ieee754_rem_pio2+0x318>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	4604      	mov	r4, r0
 800a180:	460d      	mov	r5, r1
 800a182:	f7f6 f8a3 	bl	80002cc <__adddf3>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	e9ca 2300 	strd	r2, r3, [sl]
 800a18e:	4620      	mov	r0, r4
 800a190:	4629      	mov	r1, r5
 800a192:	f7f6 f899 	bl	80002c8 <__aeabi_dsub>
 800a196:	a37e      	add	r3, pc, #504	; (adr r3, 800a390 <__ieee754_rem_pio2+0x318>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	e7e0      	b.n	800a160 <__ieee754_rem_pio2+0xe8>
 800a19e:	4b87      	ldr	r3, [pc, #540]	; (800a3bc <__ieee754_rem_pio2+0x344>)
 800a1a0:	4598      	cmp	r8, r3
 800a1a2:	f300 80d9 	bgt.w	800a358 <__ieee754_rem_pio2+0x2e0>
 800a1a6:	f000 fe49 	bl	800ae3c <fabs>
 800a1aa:	ec55 4b10 	vmov	r4, r5, d0
 800a1ae:	ee10 0a10 	vmov	r0, s0
 800a1b2:	a379      	add	r3, pc, #484	; (adr r3, 800a398 <__ieee754_rem_pio2+0x320>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7f6 fa3d 	bl	8000638 <__aeabi_dmul>
 800a1be:	4b80      	ldr	r3, [pc, #512]	; (800a3c0 <__ieee754_rem_pio2+0x348>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f7f6 f883 	bl	80002cc <__adddf3>
 800a1c6:	f7f6 fce7 	bl	8000b98 <__aeabi_d2iz>
 800a1ca:	4683      	mov	fp, r0
 800a1cc:	f7f6 f9ca 	bl	8000564 <__aeabi_i2d>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	ec43 2b18 	vmov	d8, r2, r3
 800a1d8:	a367      	add	r3, pc, #412	; (adr r3, 800a378 <__ieee754_rem_pio2+0x300>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f7f6 fa2b 	bl	8000638 <__aeabi_dmul>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7f6 f86d 	bl	80002c8 <__aeabi_dsub>
 800a1ee:	a364      	add	r3, pc, #400	; (adr r3, 800a380 <__ieee754_rem_pio2+0x308>)
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	460f      	mov	r7, r1
 800a1f8:	ec51 0b18 	vmov	r0, r1, d8
 800a1fc:	f7f6 fa1c 	bl	8000638 <__aeabi_dmul>
 800a200:	f1bb 0f1f 	cmp.w	fp, #31
 800a204:	4604      	mov	r4, r0
 800a206:	460d      	mov	r5, r1
 800a208:	dc0d      	bgt.n	800a226 <__ieee754_rem_pio2+0x1ae>
 800a20a:	4b6e      	ldr	r3, [pc, #440]	; (800a3c4 <__ieee754_rem_pio2+0x34c>)
 800a20c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a214:	4543      	cmp	r3, r8
 800a216:	d006      	beq.n	800a226 <__ieee754_rem_pio2+0x1ae>
 800a218:	4622      	mov	r2, r4
 800a21a:	462b      	mov	r3, r5
 800a21c:	4630      	mov	r0, r6
 800a21e:	4639      	mov	r1, r7
 800a220:	f7f6 f852 	bl	80002c8 <__aeabi_dsub>
 800a224:	e00f      	b.n	800a246 <__ieee754_rem_pio2+0x1ce>
 800a226:	462b      	mov	r3, r5
 800a228:	4622      	mov	r2, r4
 800a22a:	4630      	mov	r0, r6
 800a22c:	4639      	mov	r1, r7
 800a22e:	f7f6 f84b 	bl	80002c8 <__aeabi_dsub>
 800a232:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a236:	9303      	str	r3, [sp, #12]
 800a238:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a23c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a240:	f1b8 0f10 	cmp.w	r8, #16
 800a244:	dc02      	bgt.n	800a24c <__ieee754_rem_pio2+0x1d4>
 800a246:	e9ca 0100 	strd	r0, r1, [sl]
 800a24a:	e039      	b.n	800a2c0 <__ieee754_rem_pio2+0x248>
 800a24c:	a34e      	add	r3, pc, #312	; (adr r3, 800a388 <__ieee754_rem_pio2+0x310>)
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	ec51 0b18 	vmov	r0, r1, d8
 800a256:	f7f6 f9ef 	bl	8000638 <__aeabi_dmul>
 800a25a:	4604      	mov	r4, r0
 800a25c:	460d      	mov	r5, r1
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4630      	mov	r0, r6
 800a264:	4639      	mov	r1, r7
 800a266:	f7f6 f82f 	bl	80002c8 <__aeabi_dsub>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4680      	mov	r8, r0
 800a270:	4689      	mov	r9, r1
 800a272:	4630      	mov	r0, r6
 800a274:	4639      	mov	r1, r7
 800a276:	f7f6 f827 	bl	80002c8 <__aeabi_dsub>
 800a27a:	4622      	mov	r2, r4
 800a27c:	462b      	mov	r3, r5
 800a27e:	f7f6 f823 	bl	80002c8 <__aeabi_dsub>
 800a282:	a343      	add	r3, pc, #268	; (adr r3, 800a390 <__ieee754_rem_pio2+0x318>)
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	4604      	mov	r4, r0
 800a28a:	460d      	mov	r5, r1
 800a28c:	ec51 0b18 	vmov	r0, r1, d8
 800a290:	f7f6 f9d2 	bl	8000638 <__aeabi_dmul>
 800a294:	4622      	mov	r2, r4
 800a296:	462b      	mov	r3, r5
 800a298:	f7f6 f816 	bl	80002c8 <__aeabi_dsub>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	460d      	mov	r5, r1
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	f7f6 f80e 	bl	80002c8 <__aeabi_dsub>
 800a2ac:	9a03      	ldr	r2, [sp, #12]
 800a2ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	2b31      	cmp	r3, #49	; 0x31
 800a2b6:	dc24      	bgt.n	800a302 <__ieee754_rem_pio2+0x28a>
 800a2b8:	e9ca 0100 	strd	r0, r1, [sl]
 800a2bc:	4646      	mov	r6, r8
 800a2be:	464f      	mov	r7, r9
 800a2c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	4642      	mov	r2, r8
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	f7f5 fffc 	bl	80002c8 <__aeabi_dsub>
 800a2d0:	462b      	mov	r3, r5
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	f7f5 fff8 	bl	80002c8 <__aeabi_dsub>
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a2e0:	f6bf af0a 	bge.w	800a0f8 <__ieee754_rem_pio2+0x80>
 800a2e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a2e8:	f8ca 3004 	str.w	r3, [sl, #4]
 800a2ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2f0:	f8ca 8000 	str.w	r8, [sl]
 800a2f4:	f8ca 0008 	str.w	r0, [sl, #8]
 800a2f8:	f8ca 300c 	str.w	r3, [sl, #12]
 800a2fc:	f1cb 0b00 	rsb	fp, fp, #0
 800a300:	e6fa      	b.n	800a0f8 <__ieee754_rem_pio2+0x80>
 800a302:	a327      	add	r3, pc, #156	; (adr r3, 800a3a0 <__ieee754_rem_pio2+0x328>)
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	ec51 0b18 	vmov	r0, r1, d8
 800a30c:	f7f6 f994 	bl	8000638 <__aeabi_dmul>
 800a310:	4604      	mov	r4, r0
 800a312:	460d      	mov	r5, r1
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4640      	mov	r0, r8
 800a31a:	4649      	mov	r1, r9
 800a31c:	f7f5 ffd4 	bl	80002c8 <__aeabi_dsub>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4606      	mov	r6, r0
 800a326:	460f      	mov	r7, r1
 800a328:	4640      	mov	r0, r8
 800a32a:	4649      	mov	r1, r9
 800a32c:	f7f5 ffcc 	bl	80002c8 <__aeabi_dsub>
 800a330:	4622      	mov	r2, r4
 800a332:	462b      	mov	r3, r5
 800a334:	f7f5 ffc8 	bl	80002c8 <__aeabi_dsub>
 800a338:	a31b      	add	r3, pc, #108	; (adr r3, 800a3a8 <__ieee754_rem_pio2+0x330>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	4604      	mov	r4, r0
 800a340:	460d      	mov	r5, r1
 800a342:	ec51 0b18 	vmov	r0, r1, d8
 800a346:	f7f6 f977 	bl	8000638 <__aeabi_dmul>
 800a34a:	4622      	mov	r2, r4
 800a34c:	462b      	mov	r3, r5
 800a34e:	f7f5 ffbb 	bl	80002c8 <__aeabi_dsub>
 800a352:	4604      	mov	r4, r0
 800a354:	460d      	mov	r5, r1
 800a356:	e75f      	b.n	800a218 <__ieee754_rem_pio2+0x1a0>
 800a358:	4b1b      	ldr	r3, [pc, #108]	; (800a3c8 <__ieee754_rem_pio2+0x350>)
 800a35a:	4598      	cmp	r8, r3
 800a35c:	dd36      	ble.n	800a3cc <__ieee754_rem_pio2+0x354>
 800a35e:	ee10 2a10 	vmov	r2, s0
 800a362:	462b      	mov	r3, r5
 800a364:	4620      	mov	r0, r4
 800a366:	4629      	mov	r1, r5
 800a368:	f7f5 ffae 	bl	80002c8 <__aeabi_dsub>
 800a36c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a370:	e9ca 0100 	strd	r0, r1, [sl]
 800a374:	e694      	b.n	800a0a0 <__ieee754_rem_pio2+0x28>
 800a376:	bf00      	nop
 800a378:	54400000 	.word	0x54400000
 800a37c:	3ff921fb 	.word	0x3ff921fb
 800a380:	1a626331 	.word	0x1a626331
 800a384:	3dd0b461 	.word	0x3dd0b461
 800a388:	1a600000 	.word	0x1a600000
 800a38c:	3dd0b461 	.word	0x3dd0b461
 800a390:	2e037073 	.word	0x2e037073
 800a394:	3ba3198a 	.word	0x3ba3198a
 800a398:	6dc9c883 	.word	0x6dc9c883
 800a39c:	3fe45f30 	.word	0x3fe45f30
 800a3a0:	2e000000 	.word	0x2e000000
 800a3a4:	3ba3198a 	.word	0x3ba3198a
 800a3a8:	252049c1 	.word	0x252049c1
 800a3ac:	397b839a 	.word	0x397b839a
 800a3b0:	3fe921fb 	.word	0x3fe921fb
 800a3b4:	4002d97b 	.word	0x4002d97b
 800a3b8:	3ff921fb 	.word	0x3ff921fb
 800a3bc:	413921fb 	.word	0x413921fb
 800a3c0:	3fe00000 	.word	0x3fe00000
 800a3c4:	0800b524 	.word	0x0800b524
 800a3c8:	7fefffff 	.word	0x7fefffff
 800a3cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a3d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a3d4:	ee10 0a10 	vmov	r0, s0
 800a3d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a3dc:	ee10 6a10 	vmov	r6, s0
 800a3e0:	460f      	mov	r7, r1
 800a3e2:	f7f6 fbd9 	bl	8000b98 <__aeabi_d2iz>
 800a3e6:	f7f6 f8bd 	bl	8000564 <__aeabi_i2d>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	4639      	mov	r1, r7
 800a3f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3f6:	f7f5 ff67 	bl	80002c8 <__aeabi_dsub>
 800a3fa:	4b23      	ldr	r3, [pc, #140]	; (800a488 <__ieee754_rem_pio2+0x410>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f7f6 f91b 	bl	8000638 <__aeabi_dmul>
 800a402:	460f      	mov	r7, r1
 800a404:	4606      	mov	r6, r0
 800a406:	f7f6 fbc7 	bl	8000b98 <__aeabi_d2iz>
 800a40a:	f7f6 f8ab 	bl	8000564 <__aeabi_i2d>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4630      	mov	r0, r6
 800a414:	4639      	mov	r1, r7
 800a416:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a41a:	f7f5 ff55 	bl	80002c8 <__aeabi_dsub>
 800a41e:	4b1a      	ldr	r3, [pc, #104]	; (800a488 <__ieee754_rem_pio2+0x410>)
 800a420:	2200      	movs	r2, #0
 800a422:	f7f6 f909 	bl	8000638 <__aeabi_dmul>
 800a426:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a42a:	ad04      	add	r5, sp, #16
 800a42c:	f04f 0803 	mov.w	r8, #3
 800a430:	46a9      	mov	r9, r5
 800a432:	2600      	movs	r6, #0
 800a434:	2700      	movs	r7, #0
 800a436:	4632      	mov	r2, r6
 800a438:	463b      	mov	r3, r7
 800a43a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a43e:	46c3      	mov	fp, r8
 800a440:	3d08      	subs	r5, #8
 800a442:	f108 38ff 	add.w	r8, r8, #4294967295
 800a446:	f7f6 fb5f 	bl	8000b08 <__aeabi_dcmpeq>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d1f3      	bne.n	800a436 <__ieee754_rem_pio2+0x3be>
 800a44e:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <__ieee754_rem_pio2+0x414>)
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	2302      	movs	r3, #2
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	4622      	mov	r2, r4
 800a458:	465b      	mov	r3, fp
 800a45a:	4651      	mov	r1, sl
 800a45c:	4648      	mov	r0, r9
 800a45e:	f000 f8df 	bl	800a620 <__kernel_rem_pio2>
 800a462:	9b02      	ldr	r3, [sp, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	4683      	mov	fp, r0
 800a468:	f6bf ae46 	bge.w	800a0f8 <__ieee754_rem_pio2+0x80>
 800a46c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a470:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a474:	e9ca 2300 	strd	r2, r3, [sl]
 800a478:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a47c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a480:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a484:	e73a      	b.n	800a2fc <__ieee754_rem_pio2+0x284>
 800a486:	bf00      	nop
 800a488:	41700000 	.word	0x41700000
 800a48c:	0800b5a4 	.word	0x0800b5a4

0800a490 <__kernel_cos>:
 800a490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	ec57 6b10 	vmov	r6, r7, d0
 800a498:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a49c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a4a0:	ed8d 1b00 	vstr	d1, [sp]
 800a4a4:	da07      	bge.n	800a4b6 <__kernel_cos+0x26>
 800a4a6:	ee10 0a10 	vmov	r0, s0
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	f7f6 fb74 	bl	8000b98 <__aeabi_d2iz>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	f000 8088 	beq.w	800a5c6 <__kernel_cos+0x136>
 800a4b6:	4632      	mov	r2, r6
 800a4b8:	463b      	mov	r3, r7
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	4639      	mov	r1, r7
 800a4be:	f7f6 f8bb 	bl	8000638 <__aeabi_dmul>
 800a4c2:	4b51      	ldr	r3, [pc, #324]	; (800a608 <__kernel_cos+0x178>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	f7f6 f8b5 	bl	8000638 <__aeabi_dmul>
 800a4ce:	a340      	add	r3, pc, #256	; (adr r3, 800a5d0 <__kernel_cos+0x140>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	4682      	mov	sl, r0
 800a4d6:	468b      	mov	fp, r1
 800a4d8:	4620      	mov	r0, r4
 800a4da:	4629      	mov	r1, r5
 800a4dc:	f7f6 f8ac 	bl	8000638 <__aeabi_dmul>
 800a4e0:	a33d      	add	r3, pc, #244	; (adr r3, 800a5d8 <__kernel_cos+0x148>)
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	f7f5 fef1 	bl	80002cc <__adddf3>
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	f7f6 f8a3 	bl	8000638 <__aeabi_dmul>
 800a4f2:	a33b      	add	r3, pc, #236	; (adr r3, 800a5e0 <__kernel_cos+0x150>)
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	f7f5 fee6 	bl	80002c8 <__aeabi_dsub>
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	462b      	mov	r3, r5
 800a500:	f7f6 f89a 	bl	8000638 <__aeabi_dmul>
 800a504:	a338      	add	r3, pc, #224	; (adr r3, 800a5e8 <__kernel_cos+0x158>)
 800a506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50a:	f7f5 fedf 	bl	80002cc <__adddf3>
 800a50e:	4622      	mov	r2, r4
 800a510:	462b      	mov	r3, r5
 800a512:	f7f6 f891 	bl	8000638 <__aeabi_dmul>
 800a516:	a336      	add	r3, pc, #216	; (adr r3, 800a5f0 <__kernel_cos+0x160>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f7f5 fed4 	bl	80002c8 <__aeabi_dsub>
 800a520:	4622      	mov	r2, r4
 800a522:	462b      	mov	r3, r5
 800a524:	f7f6 f888 	bl	8000638 <__aeabi_dmul>
 800a528:	a333      	add	r3, pc, #204	; (adr r3, 800a5f8 <__kernel_cos+0x168>)
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	f7f5 fecd 	bl	80002cc <__adddf3>
 800a532:	4622      	mov	r2, r4
 800a534:	462b      	mov	r3, r5
 800a536:	f7f6 f87f 	bl	8000638 <__aeabi_dmul>
 800a53a:	4622      	mov	r2, r4
 800a53c:	462b      	mov	r3, r5
 800a53e:	f7f6 f87b 	bl	8000638 <__aeabi_dmul>
 800a542:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a546:	4604      	mov	r4, r0
 800a548:	460d      	mov	r5, r1
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f6 f873 	bl	8000638 <__aeabi_dmul>
 800a552:	460b      	mov	r3, r1
 800a554:	4602      	mov	r2, r0
 800a556:	4629      	mov	r1, r5
 800a558:	4620      	mov	r0, r4
 800a55a:	f7f5 feb5 	bl	80002c8 <__aeabi_dsub>
 800a55e:	4b2b      	ldr	r3, [pc, #172]	; (800a60c <__kernel_cos+0x17c>)
 800a560:	4598      	cmp	r8, r3
 800a562:	4606      	mov	r6, r0
 800a564:	460f      	mov	r7, r1
 800a566:	dc10      	bgt.n	800a58a <__kernel_cos+0xfa>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	4650      	mov	r0, sl
 800a56e:	4659      	mov	r1, fp
 800a570:	f7f5 feaa 	bl	80002c8 <__aeabi_dsub>
 800a574:	460b      	mov	r3, r1
 800a576:	4926      	ldr	r1, [pc, #152]	; (800a610 <__kernel_cos+0x180>)
 800a578:	4602      	mov	r2, r0
 800a57a:	2000      	movs	r0, #0
 800a57c:	f7f5 fea4 	bl	80002c8 <__aeabi_dsub>
 800a580:	ec41 0b10 	vmov	d0, r0, r1
 800a584:	b003      	add	sp, #12
 800a586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58a:	4b22      	ldr	r3, [pc, #136]	; (800a614 <__kernel_cos+0x184>)
 800a58c:	4920      	ldr	r1, [pc, #128]	; (800a610 <__kernel_cos+0x180>)
 800a58e:	4598      	cmp	r8, r3
 800a590:	bfcc      	ite	gt
 800a592:	4d21      	ldrgt	r5, [pc, #132]	; (800a618 <__kernel_cos+0x188>)
 800a594:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a598:	2400      	movs	r4, #0
 800a59a:	4622      	mov	r2, r4
 800a59c:	462b      	mov	r3, r5
 800a59e:	2000      	movs	r0, #0
 800a5a0:	f7f5 fe92 	bl	80002c8 <__aeabi_dsub>
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	4680      	mov	r8, r0
 800a5a8:	4689      	mov	r9, r1
 800a5aa:	462b      	mov	r3, r5
 800a5ac:	4650      	mov	r0, sl
 800a5ae:	4659      	mov	r1, fp
 800a5b0:	f7f5 fe8a 	bl	80002c8 <__aeabi_dsub>
 800a5b4:	4632      	mov	r2, r6
 800a5b6:	463b      	mov	r3, r7
 800a5b8:	f7f5 fe86 	bl	80002c8 <__aeabi_dsub>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	e7da      	b.n	800a57c <__kernel_cos+0xec>
 800a5c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a600 <__kernel_cos+0x170>
 800a5ca:	e7db      	b.n	800a584 <__kernel_cos+0xf4>
 800a5cc:	f3af 8000 	nop.w
 800a5d0:	be8838d4 	.word	0xbe8838d4
 800a5d4:	bda8fae9 	.word	0xbda8fae9
 800a5d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a5dc:	3e21ee9e 	.word	0x3e21ee9e
 800a5e0:	809c52ad 	.word	0x809c52ad
 800a5e4:	3e927e4f 	.word	0x3e927e4f
 800a5e8:	19cb1590 	.word	0x19cb1590
 800a5ec:	3efa01a0 	.word	0x3efa01a0
 800a5f0:	16c15177 	.word	0x16c15177
 800a5f4:	3f56c16c 	.word	0x3f56c16c
 800a5f8:	5555554c 	.word	0x5555554c
 800a5fc:	3fa55555 	.word	0x3fa55555
 800a600:	00000000 	.word	0x00000000
 800a604:	3ff00000 	.word	0x3ff00000
 800a608:	3fe00000 	.word	0x3fe00000
 800a60c:	3fd33332 	.word	0x3fd33332
 800a610:	3ff00000 	.word	0x3ff00000
 800a614:	3fe90000 	.word	0x3fe90000
 800a618:	3fd20000 	.word	0x3fd20000
 800a61c:	00000000 	.word	0x00000000

0800a620 <__kernel_rem_pio2>:
 800a620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a624:	ed2d 8b02 	vpush	{d8}
 800a628:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a62c:	f112 0f14 	cmn.w	r2, #20
 800a630:	9308      	str	r3, [sp, #32]
 800a632:	9101      	str	r1, [sp, #4]
 800a634:	4bc4      	ldr	r3, [pc, #784]	; (800a948 <__kernel_rem_pio2+0x328>)
 800a636:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a638:	900b      	str	r0, [sp, #44]	; 0x2c
 800a63a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a63e:	9302      	str	r3, [sp, #8]
 800a640:	9b08      	ldr	r3, [sp, #32]
 800a642:	f103 33ff 	add.w	r3, r3, #4294967295
 800a646:	bfa8      	it	ge
 800a648:	1ed4      	subge	r4, r2, #3
 800a64a:	9306      	str	r3, [sp, #24]
 800a64c:	bfb2      	itee	lt
 800a64e:	2400      	movlt	r4, #0
 800a650:	2318      	movge	r3, #24
 800a652:	fb94 f4f3 	sdivge	r4, r4, r3
 800a656:	f06f 0317 	mvn.w	r3, #23
 800a65a:	fb04 3303 	mla	r3, r4, r3, r3
 800a65e:	eb03 0a02 	add.w	sl, r3, r2
 800a662:	9b02      	ldr	r3, [sp, #8]
 800a664:	9a06      	ldr	r2, [sp, #24]
 800a666:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a938 <__kernel_rem_pio2+0x318>
 800a66a:	eb03 0802 	add.w	r8, r3, r2
 800a66e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a670:	1aa7      	subs	r7, r4, r2
 800a672:	ae22      	add	r6, sp, #136	; 0x88
 800a674:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a678:	2500      	movs	r5, #0
 800a67a:	4545      	cmp	r5, r8
 800a67c:	dd13      	ble.n	800a6a6 <__kernel_rem_pio2+0x86>
 800a67e:	9b08      	ldr	r3, [sp, #32]
 800a680:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a938 <__kernel_rem_pio2+0x318>
 800a684:	aa22      	add	r2, sp, #136	; 0x88
 800a686:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a68a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a68e:	f04f 0800 	mov.w	r8, #0
 800a692:	9b02      	ldr	r3, [sp, #8]
 800a694:	4598      	cmp	r8, r3
 800a696:	dc2f      	bgt.n	800a6f8 <__kernel_rem_pio2+0xd8>
 800a698:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a69c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a6a0:	462f      	mov	r7, r5
 800a6a2:	2600      	movs	r6, #0
 800a6a4:	e01b      	b.n	800a6de <__kernel_rem_pio2+0xbe>
 800a6a6:	42ef      	cmn	r7, r5
 800a6a8:	d407      	bmi.n	800a6ba <__kernel_rem_pio2+0x9a>
 800a6aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a6ae:	f7f5 ff59 	bl	8000564 <__aeabi_i2d>
 800a6b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a6b6:	3501      	adds	r5, #1
 800a6b8:	e7df      	b.n	800a67a <__kernel_rem_pio2+0x5a>
 800a6ba:	ec51 0b18 	vmov	r0, r1, d8
 800a6be:	e7f8      	b.n	800a6b2 <__kernel_rem_pio2+0x92>
 800a6c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a6c8:	f7f5 ffb6 	bl	8000638 <__aeabi_dmul>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6d4:	f7f5 fdfa 	bl	80002cc <__adddf3>
 800a6d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6dc:	3601      	adds	r6, #1
 800a6de:	9b06      	ldr	r3, [sp, #24]
 800a6e0:	429e      	cmp	r6, r3
 800a6e2:	f1a7 0708 	sub.w	r7, r7, #8
 800a6e6:	ddeb      	ble.n	800a6c0 <__kernel_rem_pio2+0xa0>
 800a6e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a6ec:	f108 0801 	add.w	r8, r8, #1
 800a6f0:	ecab 7b02 	vstmia	fp!, {d7}
 800a6f4:	3508      	adds	r5, #8
 800a6f6:	e7cc      	b.n	800a692 <__kernel_rem_pio2+0x72>
 800a6f8:	9b02      	ldr	r3, [sp, #8]
 800a6fa:	aa0e      	add	r2, sp, #56	; 0x38
 800a6fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a700:	930d      	str	r3, [sp, #52]	; 0x34
 800a702:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a704:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a708:	9c02      	ldr	r4, [sp, #8]
 800a70a:	930c      	str	r3, [sp, #48]	; 0x30
 800a70c:	00e3      	lsls	r3, r4, #3
 800a70e:	930a      	str	r3, [sp, #40]	; 0x28
 800a710:	ab9a      	add	r3, sp, #616	; 0x268
 800a712:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a716:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a71a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a71e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a720:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a724:	46c3      	mov	fp, r8
 800a726:	46a1      	mov	r9, r4
 800a728:	f1b9 0f00 	cmp.w	r9, #0
 800a72c:	f1a5 0508 	sub.w	r5, r5, #8
 800a730:	dc77      	bgt.n	800a822 <__kernel_rem_pio2+0x202>
 800a732:	ec47 6b10 	vmov	d0, r6, r7
 800a736:	4650      	mov	r0, sl
 800a738:	f000 fc0a 	bl	800af50 <scalbn>
 800a73c:	ec57 6b10 	vmov	r6, r7, d0
 800a740:	2200      	movs	r2, #0
 800a742:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a746:	ee10 0a10 	vmov	r0, s0
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f5 ff74 	bl	8000638 <__aeabi_dmul>
 800a750:	ec41 0b10 	vmov	d0, r0, r1
 800a754:	f000 fb7c 	bl	800ae50 <floor>
 800a758:	4b7c      	ldr	r3, [pc, #496]	; (800a94c <__kernel_rem_pio2+0x32c>)
 800a75a:	ec51 0b10 	vmov	r0, r1, d0
 800a75e:	2200      	movs	r2, #0
 800a760:	f7f5 ff6a 	bl	8000638 <__aeabi_dmul>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	f7f5 fdac 	bl	80002c8 <__aeabi_dsub>
 800a770:	460f      	mov	r7, r1
 800a772:	4606      	mov	r6, r0
 800a774:	f7f6 fa10 	bl	8000b98 <__aeabi_d2iz>
 800a778:	9004      	str	r0, [sp, #16]
 800a77a:	f7f5 fef3 	bl	8000564 <__aeabi_i2d>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4630      	mov	r0, r6
 800a784:	4639      	mov	r1, r7
 800a786:	f7f5 fd9f 	bl	80002c8 <__aeabi_dsub>
 800a78a:	f1ba 0f00 	cmp.w	sl, #0
 800a78e:	4606      	mov	r6, r0
 800a790:	460f      	mov	r7, r1
 800a792:	dd6d      	ble.n	800a870 <__kernel_rem_pio2+0x250>
 800a794:	1e62      	subs	r2, r4, #1
 800a796:	ab0e      	add	r3, sp, #56	; 0x38
 800a798:	9d04      	ldr	r5, [sp, #16]
 800a79a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a79e:	f1ca 0118 	rsb	r1, sl, #24
 800a7a2:	fa40 f301 	asr.w	r3, r0, r1
 800a7a6:	441d      	add	r5, r3
 800a7a8:	408b      	lsls	r3, r1
 800a7aa:	1ac0      	subs	r0, r0, r3
 800a7ac:	ab0e      	add	r3, sp, #56	; 0x38
 800a7ae:	9504      	str	r5, [sp, #16]
 800a7b0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a7b4:	f1ca 0317 	rsb	r3, sl, #23
 800a7b8:	fa40 fb03 	asr.w	fp, r0, r3
 800a7bc:	f1bb 0f00 	cmp.w	fp, #0
 800a7c0:	dd65      	ble.n	800a88e <__kernel_rem_pio2+0x26e>
 800a7c2:	9b04      	ldr	r3, [sp, #16]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	9304      	str	r3, [sp, #16]
 800a7ca:	4615      	mov	r5, r2
 800a7cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a7d0:	4294      	cmp	r4, r2
 800a7d2:	f300 809c 	bgt.w	800a90e <__kernel_rem_pio2+0x2ee>
 800a7d6:	f1ba 0f00 	cmp.w	sl, #0
 800a7da:	dd07      	ble.n	800a7ec <__kernel_rem_pio2+0x1cc>
 800a7dc:	f1ba 0f01 	cmp.w	sl, #1
 800a7e0:	f000 80c0 	beq.w	800a964 <__kernel_rem_pio2+0x344>
 800a7e4:	f1ba 0f02 	cmp.w	sl, #2
 800a7e8:	f000 80c6 	beq.w	800a978 <__kernel_rem_pio2+0x358>
 800a7ec:	f1bb 0f02 	cmp.w	fp, #2
 800a7f0:	d14d      	bne.n	800a88e <__kernel_rem_pio2+0x26e>
 800a7f2:	4632      	mov	r2, r6
 800a7f4:	463b      	mov	r3, r7
 800a7f6:	4956      	ldr	r1, [pc, #344]	; (800a950 <__kernel_rem_pio2+0x330>)
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	f7f5 fd65 	bl	80002c8 <__aeabi_dsub>
 800a7fe:	4606      	mov	r6, r0
 800a800:	460f      	mov	r7, r1
 800a802:	2d00      	cmp	r5, #0
 800a804:	d043      	beq.n	800a88e <__kernel_rem_pio2+0x26e>
 800a806:	4650      	mov	r0, sl
 800a808:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a940 <__kernel_rem_pio2+0x320>
 800a80c:	f000 fba0 	bl	800af50 <scalbn>
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	ec53 2b10 	vmov	r2, r3, d0
 800a818:	f7f5 fd56 	bl	80002c8 <__aeabi_dsub>
 800a81c:	4606      	mov	r6, r0
 800a81e:	460f      	mov	r7, r1
 800a820:	e035      	b.n	800a88e <__kernel_rem_pio2+0x26e>
 800a822:	4b4c      	ldr	r3, [pc, #304]	; (800a954 <__kernel_rem_pio2+0x334>)
 800a824:	2200      	movs	r2, #0
 800a826:	4630      	mov	r0, r6
 800a828:	4639      	mov	r1, r7
 800a82a:	f7f5 ff05 	bl	8000638 <__aeabi_dmul>
 800a82e:	f7f6 f9b3 	bl	8000b98 <__aeabi_d2iz>
 800a832:	f7f5 fe97 	bl	8000564 <__aeabi_i2d>
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	ec43 2b18 	vmov	d8, r2, r3
 800a83e:	4b46      	ldr	r3, [pc, #280]	; (800a958 <__kernel_rem_pio2+0x338>)
 800a840:	2200      	movs	r2, #0
 800a842:	f7f5 fef9 	bl	8000638 <__aeabi_dmul>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f5 fd3b 	bl	80002c8 <__aeabi_dsub>
 800a852:	f7f6 f9a1 	bl	8000b98 <__aeabi_d2iz>
 800a856:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a85a:	f84b 0b04 	str.w	r0, [fp], #4
 800a85e:	ec51 0b18 	vmov	r0, r1, d8
 800a862:	f7f5 fd33 	bl	80002cc <__adddf3>
 800a866:	f109 39ff 	add.w	r9, r9, #4294967295
 800a86a:	4606      	mov	r6, r0
 800a86c:	460f      	mov	r7, r1
 800a86e:	e75b      	b.n	800a728 <__kernel_rem_pio2+0x108>
 800a870:	d106      	bne.n	800a880 <__kernel_rem_pio2+0x260>
 800a872:	1e63      	subs	r3, r4, #1
 800a874:	aa0e      	add	r2, sp, #56	; 0x38
 800a876:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a87a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a87e:	e79d      	b.n	800a7bc <__kernel_rem_pio2+0x19c>
 800a880:	4b36      	ldr	r3, [pc, #216]	; (800a95c <__kernel_rem_pio2+0x33c>)
 800a882:	2200      	movs	r2, #0
 800a884:	f7f6 f95e 	bl	8000b44 <__aeabi_dcmpge>
 800a888:	2800      	cmp	r0, #0
 800a88a:	d13d      	bne.n	800a908 <__kernel_rem_pio2+0x2e8>
 800a88c:	4683      	mov	fp, r0
 800a88e:	2200      	movs	r2, #0
 800a890:	2300      	movs	r3, #0
 800a892:	4630      	mov	r0, r6
 800a894:	4639      	mov	r1, r7
 800a896:	f7f6 f937 	bl	8000b08 <__aeabi_dcmpeq>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	f000 80c0 	beq.w	800aa20 <__kernel_rem_pio2+0x400>
 800a8a0:	1e65      	subs	r5, r4, #1
 800a8a2:	462b      	mov	r3, r5
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	9902      	ldr	r1, [sp, #8]
 800a8a8:	428b      	cmp	r3, r1
 800a8aa:	da6c      	bge.n	800a986 <__kernel_rem_pio2+0x366>
 800a8ac:	2a00      	cmp	r2, #0
 800a8ae:	f000 8089 	beq.w	800a9c4 <__kernel_rem_pio2+0x3a4>
 800a8b2:	ab0e      	add	r3, sp, #56	; 0x38
 800a8b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a8b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 80ad 	beq.w	800aa1c <__kernel_rem_pio2+0x3fc>
 800a8c2:	4650      	mov	r0, sl
 800a8c4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a940 <__kernel_rem_pio2+0x320>
 800a8c8:	f000 fb42 	bl	800af50 <scalbn>
 800a8cc:	ab9a      	add	r3, sp, #616	; 0x268
 800a8ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a8d2:	ec57 6b10 	vmov	r6, r7, d0
 800a8d6:	00ec      	lsls	r4, r5, #3
 800a8d8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a8dc:	46aa      	mov	sl, r5
 800a8de:	f1ba 0f00 	cmp.w	sl, #0
 800a8e2:	f280 80d6 	bge.w	800aa92 <__kernel_rem_pio2+0x472>
 800a8e6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a938 <__kernel_rem_pio2+0x318>
 800a8ea:	462e      	mov	r6, r5
 800a8ec:	2e00      	cmp	r6, #0
 800a8ee:	f2c0 8104 	blt.w	800aafa <__kernel_rem_pio2+0x4da>
 800a8f2:	ab72      	add	r3, sp, #456	; 0x1c8
 800a8f4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a8f8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a960 <__kernel_rem_pio2+0x340>
 800a8fc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a900:	f04f 0800 	mov.w	r8, #0
 800a904:	1baf      	subs	r7, r5, r6
 800a906:	e0ea      	b.n	800aade <__kernel_rem_pio2+0x4be>
 800a908:	f04f 0b02 	mov.w	fp, #2
 800a90c:	e759      	b.n	800a7c2 <__kernel_rem_pio2+0x1a2>
 800a90e:	f8d8 3000 	ldr.w	r3, [r8]
 800a912:	b955      	cbnz	r5, 800a92a <__kernel_rem_pio2+0x30a>
 800a914:	b123      	cbz	r3, 800a920 <__kernel_rem_pio2+0x300>
 800a916:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a91a:	f8c8 3000 	str.w	r3, [r8]
 800a91e:	2301      	movs	r3, #1
 800a920:	3201      	adds	r2, #1
 800a922:	f108 0804 	add.w	r8, r8, #4
 800a926:	461d      	mov	r5, r3
 800a928:	e752      	b.n	800a7d0 <__kernel_rem_pio2+0x1b0>
 800a92a:	1acb      	subs	r3, r1, r3
 800a92c:	f8c8 3000 	str.w	r3, [r8]
 800a930:	462b      	mov	r3, r5
 800a932:	e7f5      	b.n	800a920 <__kernel_rem_pio2+0x300>
 800a934:	f3af 8000 	nop.w
	...
 800a944:	3ff00000 	.word	0x3ff00000
 800a948:	0800b6f0 	.word	0x0800b6f0
 800a94c:	40200000 	.word	0x40200000
 800a950:	3ff00000 	.word	0x3ff00000
 800a954:	3e700000 	.word	0x3e700000
 800a958:	41700000 	.word	0x41700000
 800a95c:	3fe00000 	.word	0x3fe00000
 800a960:	0800b6b0 	.word	0x0800b6b0
 800a964:	1e62      	subs	r2, r4, #1
 800a966:	ab0e      	add	r3, sp, #56	; 0x38
 800a968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a96c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a970:	a90e      	add	r1, sp, #56	; 0x38
 800a972:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a976:	e739      	b.n	800a7ec <__kernel_rem_pio2+0x1cc>
 800a978:	1e62      	subs	r2, r4, #1
 800a97a:	ab0e      	add	r3, sp, #56	; 0x38
 800a97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a980:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a984:	e7f4      	b.n	800a970 <__kernel_rem_pio2+0x350>
 800a986:	a90e      	add	r1, sp, #56	; 0x38
 800a988:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	430a      	orrs	r2, r1
 800a990:	e789      	b.n	800a8a6 <__kernel_rem_pio2+0x286>
 800a992:	3301      	adds	r3, #1
 800a994:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a998:	2900      	cmp	r1, #0
 800a99a:	d0fa      	beq.n	800a992 <__kernel_rem_pio2+0x372>
 800a99c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a99e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a9a2:	446a      	add	r2, sp
 800a9a4:	3a98      	subs	r2, #152	; 0x98
 800a9a6:	920a      	str	r2, [sp, #40]	; 0x28
 800a9a8:	9a08      	ldr	r2, [sp, #32]
 800a9aa:	18e3      	adds	r3, r4, r3
 800a9ac:	18a5      	adds	r5, r4, r2
 800a9ae:	aa22      	add	r2, sp, #136	; 0x88
 800a9b0:	f104 0801 	add.w	r8, r4, #1
 800a9b4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a9b8:	9304      	str	r3, [sp, #16]
 800a9ba:	9b04      	ldr	r3, [sp, #16]
 800a9bc:	4543      	cmp	r3, r8
 800a9be:	da04      	bge.n	800a9ca <__kernel_rem_pio2+0x3aa>
 800a9c0:	461c      	mov	r4, r3
 800a9c2:	e6a3      	b.n	800a70c <__kernel_rem_pio2+0xec>
 800a9c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e7e4      	b.n	800a994 <__kernel_rem_pio2+0x374>
 800a9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a9d0:	f7f5 fdc8 	bl	8000564 <__aeabi_i2d>
 800a9d4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9da:	46ab      	mov	fp, r5
 800a9dc:	461c      	mov	r4, r3
 800a9de:	f04f 0900 	mov.w	r9, #0
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	2700      	movs	r7, #0
 800a9e6:	9b06      	ldr	r3, [sp, #24]
 800a9e8:	4599      	cmp	r9, r3
 800a9ea:	dd06      	ble.n	800a9fa <__kernel_rem_pio2+0x3da>
 800a9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ee:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a9f2:	f108 0801 	add.w	r8, r8, #1
 800a9f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9f8:	e7df      	b.n	800a9ba <__kernel_rem_pio2+0x39a>
 800a9fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a9fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800aa02:	f7f5 fe19 	bl	8000638 <__aeabi_dmul>
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	f7f5 fc5d 	bl	80002cc <__adddf3>
 800aa12:	f109 0901 	add.w	r9, r9, #1
 800aa16:	4606      	mov	r6, r0
 800aa18:	460f      	mov	r7, r1
 800aa1a:	e7e4      	b.n	800a9e6 <__kernel_rem_pio2+0x3c6>
 800aa1c:	3d01      	subs	r5, #1
 800aa1e:	e748      	b.n	800a8b2 <__kernel_rem_pio2+0x292>
 800aa20:	ec47 6b10 	vmov	d0, r6, r7
 800aa24:	f1ca 0000 	rsb	r0, sl, #0
 800aa28:	f000 fa92 	bl	800af50 <scalbn>
 800aa2c:	ec57 6b10 	vmov	r6, r7, d0
 800aa30:	4ba0      	ldr	r3, [pc, #640]	; (800acb4 <__kernel_rem_pio2+0x694>)
 800aa32:	ee10 0a10 	vmov	r0, s0
 800aa36:	2200      	movs	r2, #0
 800aa38:	4639      	mov	r1, r7
 800aa3a:	f7f6 f883 	bl	8000b44 <__aeabi_dcmpge>
 800aa3e:	b1f8      	cbz	r0, 800aa80 <__kernel_rem_pio2+0x460>
 800aa40:	4b9d      	ldr	r3, [pc, #628]	; (800acb8 <__kernel_rem_pio2+0x698>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	4630      	mov	r0, r6
 800aa46:	4639      	mov	r1, r7
 800aa48:	f7f5 fdf6 	bl	8000638 <__aeabi_dmul>
 800aa4c:	f7f6 f8a4 	bl	8000b98 <__aeabi_d2iz>
 800aa50:	4680      	mov	r8, r0
 800aa52:	f7f5 fd87 	bl	8000564 <__aeabi_i2d>
 800aa56:	4b97      	ldr	r3, [pc, #604]	; (800acb4 <__kernel_rem_pio2+0x694>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f7f5 fded 	bl	8000638 <__aeabi_dmul>
 800aa5e:	460b      	mov	r3, r1
 800aa60:	4602      	mov	r2, r0
 800aa62:	4639      	mov	r1, r7
 800aa64:	4630      	mov	r0, r6
 800aa66:	f7f5 fc2f 	bl	80002c8 <__aeabi_dsub>
 800aa6a:	f7f6 f895 	bl	8000b98 <__aeabi_d2iz>
 800aa6e:	1c65      	adds	r5, r4, #1
 800aa70:	ab0e      	add	r3, sp, #56	; 0x38
 800aa72:	f10a 0a18 	add.w	sl, sl, #24
 800aa76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aa7a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800aa7e:	e720      	b.n	800a8c2 <__kernel_rem_pio2+0x2a2>
 800aa80:	4630      	mov	r0, r6
 800aa82:	4639      	mov	r1, r7
 800aa84:	f7f6 f888 	bl	8000b98 <__aeabi_d2iz>
 800aa88:	ab0e      	add	r3, sp, #56	; 0x38
 800aa8a:	4625      	mov	r5, r4
 800aa8c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aa90:	e717      	b.n	800a8c2 <__kernel_rem_pio2+0x2a2>
 800aa92:	ab0e      	add	r3, sp, #56	; 0x38
 800aa94:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800aa98:	f7f5 fd64 	bl	8000564 <__aeabi_i2d>
 800aa9c:	4632      	mov	r2, r6
 800aa9e:	463b      	mov	r3, r7
 800aaa0:	f7f5 fdca 	bl	8000638 <__aeabi_dmul>
 800aaa4:	4b84      	ldr	r3, [pc, #528]	; (800acb8 <__kernel_rem_pio2+0x698>)
 800aaa6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4630      	mov	r0, r6
 800aaae:	4639      	mov	r1, r7
 800aab0:	f7f5 fdc2 	bl	8000638 <__aeabi_dmul>
 800aab4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aab8:	4606      	mov	r6, r0
 800aaba:	460f      	mov	r7, r1
 800aabc:	e70f      	b.n	800a8de <__kernel_rem_pio2+0x2be>
 800aabe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800aac2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800aac6:	f7f5 fdb7 	bl	8000638 <__aeabi_dmul>
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aad2:	f7f5 fbfb 	bl	80002cc <__adddf3>
 800aad6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aada:	f108 0801 	add.w	r8, r8, #1
 800aade:	9b02      	ldr	r3, [sp, #8]
 800aae0:	4598      	cmp	r8, r3
 800aae2:	dc01      	bgt.n	800aae8 <__kernel_rem_pio2+0x4c8>
 800aae4:	45b8      	cmp	r8, r7
 800aae6:	ddea      	ble.n	800aabe <__kernel_rem_pio2+0x49e>
 800aae8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800aaec:	ab4a      	add	r3, sp, #296	; 0x128
 800aaee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aaf2:	ed87 7b00 	vstr	d7, [r7]
 800aaf6:	3e01      	subs	r6, #1
 800aaf8:	e6f8      	b.n	800a8ec <__kernel_rem_pio2+0x2cc>
 800aafa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	dc0b      	bgt.n	800ab18 <__kernel_rem_pio2+0x4f8>
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	dc35      	bgt.n	800ab70 <__kernel_rem_pio2+0x550>
 800ab04:	d059      	beq.n	800abba <__kernel_rem_pio2+0x59a>
 800ab06:	9b04      	ldr	r3, [sp, #16]
 800ab08:	f003 0007 	and.w	r0, r3, #7
 800ab0c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ab10:	ecbd 8b02 	vpop	{d8}
 800ab14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab18:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d1f3      	bne.n	800ab06 <__kernel_rem_pio2+0x4e6>
 800ab1e:	ab4a      	add	r3, sp, #296	; 0x128
 800ab20:	4423      	add	r3, r4
 800ab22:	9306      	str	r3, [sp, #24]
 800ab24:	461c      	mov	r4, r3
 800ab26:	469a      	mov	sl, r3
 800ab28:	9502      	str	r5, [sp, #8]
 800ab2a:	9b02      	ldr	r3, [sp, #8]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f1aa 0a08 	sub.w	sl, sl, #8
 800ab32:	dc6b      	bgt.n	800ac0c <__kernel_rem_pio2+0x5ec>
 800ab34:	46aa      	mov	sl, r5
 800ab36:	f1ba 0f01 	cmp.w	sl, #1
 800ab3a:	f1a4 0408 	sub.w	r4, r4, #8
 800ab3e:	f300 8085 	bgt.w	800ac4c <__kernel_rem_pio2+0x62c>
 800ab42:	9c06      	ldr	r4, [sp, #24]
 800ab44:	2000      	movs	r0, #0
 800ab46:	3408      	adds	r4, #8
 800ab48:	2100      	movs	r1, #0
 800ab4a:	2d01      	cmp	r5, #1
 800ab4c:	f300 809d 	bgt.w	800ac8a <__kernel_rem_pio2+0x66a>
 800ab50:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ab54:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ab58:	f1bb 0f00 	cmp.w	fp, #0
 800ab5c:	f040 809b 	bne.w	800ac96 <__kernel_rem_pio2+0x676>
 800ab60:	9b01      	ldr	r3, [sp, #4]
 800ab62:	e9c3 5600 	strd	r5, r6, [r3]
 800ab66:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ab6a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ab6e:	e7ca      	b.n	800ab06 <__kernel_rem_pio2+0x4e6>
 800ab70:	3408      	adds	r4, #8
 800ab72:	ab4a      	add	r3, sp, #296	; 0x128
 800ab74:	441c      	add	r4, r3
 800ab76:	462e      	mov	r6, r5
 800ab78:	2000      	movs	r0, #0
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	2e00      	cmp	r6, #0
 800ab7e:	da36      	bge.n	800abee <__kernel_rem_pio2+0x5ce>
 800ab80:	f1bb 0f00 	cmp.w	fp, #0
 800ab84:	d039      	beq.n	800abfa <__kernel_rem_pio2+0x5da>
 800ab86:	4602      	mov	r2, r0
 800ab88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab8c:	9c01      	ldr	r4, [sp, #4]
 800ab8e:	e9c4 2300 	strd	r2, r3, [r4]
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ab9a:	f7f5 fb95 	bl	80002c8 <__aeabi_dsub>
 800ab9e:	ae4c      	add	r6, sp, #304	; 0x130
 800aba0:	2401      	movs	r4, #1
 800aba2:	42a5      	cmp	r5, r4
 800aba4:	da2c      	bge.n	800ac00 <__kernel_rem_pio2+0x5e0>
 800aba6:	f1bb 0f00 	cmp.w	fp, #0
 800abaa:	d002      	beq.n	800abb2 <__kernel_rem_pio2+0x592>
 800abac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abb0:	4619      	mov	r1, r3
 800abb2:	9b01      	ldr	r3, [sp, #4]
 800abb4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800abb8:	e7a5      	b.n	800ab06 <__kernel_rem_pio2+0x4e6>
 800abba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800abbe:	eb0d 0403 	add.w	r4, sp, r3
 800abc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800abc6:	2000      	movs	r0, #0
 800abc8:	2100      	movs	r1, #0
 800abca:	2d00      	cmp	r5, #0
 800abcc:	da09      	bge.n	800abe2 <__kernel_rem_pio2+0x5c2>
 800abce:	f1bb 0f00 	cmp.w	fp, #0
 800abd2:	d002      	beq.n	800abda <__kernel_rem_pio2+0x5ba>
 800abd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abd8:	4619      	mov	r1, r3
 800abda:	9b01      	ldr	r3, [sp, #4]
 800abdc:	e9c3 0100 	strd	r0, r1, [r3]
 800abe0:	e791      	b.n	800ab06 <__kernel_rem_pio2+0x4e6>
 800abe2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800abe6:	f7f5 fb71 	bl	80002cc <__adddf3>
 800abea:	3d01      	subs	r5, #1
 800abec:	e7ed      	b.n	800abca <__kernel_rem_pio2+0x5aa>
 800abee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800abf2:	f7f5 fb6b 	bl	80002cc <__adddf3>
 800abf6:	3e01      	subs	r6, #1
 800abf8:	e7c0      	b.n	800ab7c <__kernel_rem_pio2+0x55c>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	e7c5      	b.n	800ab8c <__kernel_rem_pio2+0x56c>
 800ac00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ac04:	f7f5 fb62 	bl	80002cc <__adddf3>
 800ac08:	3401      	adds	r4, #1
 800ac0a:	e7ca      	b.n	800aba2 <__kernel_rem_pio2+0x582>
 800ac0c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac10:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ac14:	9b02      	ldr	r3, [sp, #8]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	9302      	str	r3, [sp, #8]
 800ac1a:	4632      	mov	r2, r6
 800ac1c:	463b      	mov	r3, r7
 800ac1e:	4640      	mov	r0, r8
 800ac20:	4649      	mov	r1, r9
 800ac22:	f7f5 fb53 	bl	80002cc <__adddf3>
 800ac26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4640      	mov	r0, r8
 800ac30:	4649      	mov	r1, r9
 800ac32:	f7f5 fb49 	bl	80002c8 <__aeabi_dsub>
 800ac36:	4632      	mov	r2, r6
 800ac38:	463b      	mov	r3, r7
 800ac3a:	f7f5 fb47 	bl	80002cc <__adddf3>
 800ac3e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ac42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac46:	ed8a 7b00 	vstr	d7, [sl]
 800ac4a:	e76e      	b.n	800ab2a <__kernel_rem_pio2+0x50a>
 800ac4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ac50:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ac54:	4640      	mov	r0, r8
 800ac56:	4632      	mov	r2, r6
 800ac58:	463b      	mov	r3, r7
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	f7f5 fb36 	bl	80002cc <__adddf3>
 800ac60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4640      	mov	r0, r8
 800ac6a:	4649      	mov	r1, r9
 800ac6c:	f7f5 fb2c 	bl	80002c8 <__aeabi_dsub>
 800ac70:	4632      	mov	r2, r6
 800ac72:	463b      	mov	r3, r7
 800ac74:	f7f5 fb2a 	bl	80002cc <__adddf3>
 800ac78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac80:	ed84 7b00 	vstr	d7, [r4]
 800ac84:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac88:	e755      	b.n	800ab36 <__kernel_rem_pio2+0x516>
 800ac8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ac8e:	f7f5 fb1d 	bl	80002cc <__adddf3>
 800ac92:	3d01      	subs	r5, #1
 800ac94:	e759      	b.n	800ab4a <__kernel_rem_pio2+0x52a>
 800ac96:	9b01      	ldr	r3, [sp, #4]
 800ac98:	9a01      	ldr	r2, [sp, #4]
 800ac9a:	601d      	str	r5, [r3, #0]
 800ac9c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aca0:	605c      	str	r4, [r3, #4]
 800aca2:	609f      	str	r7, [r3, #8]
 800aca4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800aca8:	60d3      	str	r3, [r2, #12]
 800acaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acae:	6110      	str	r0, [r2, #16]
 800acb0:	6153      	str	r3, [r2, #20]
 800acb2:	e728      	b.n	800ab06 <__kernel_rem_pio2+0x4e6>
 800acb4:	41700000 	.word	0x41700000
 800acb8:	3e700000 	.word	0x3e700000
 800acbc:	00000000 	.word	0x00000000

0800acc0 <__kernel_sin>:
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	ed2d 8b04 	vpush	{d8-d9}
 800acc8:	eeb0 8a41 	vmov.f32	s16, s2
 800accc:	eef0 8a61 	vmov.f32	s17, s3
 800acd0:	ec55 4b10 	vmov	r4, r5, d0
 800acd4:	b083      	sub	sp, #12
 800acd6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800acda:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800acde:	9001      	str	r0, [sp, #4]
 800ace0:	da06      	bge.n	800acf0 <__kernel_sin+0x30>
 800ace2:	ee10 0a10 	vmov	r0, s0
 800ace6:	4629      	mov	r1, r5
 800ace8:	f7f5 ff56 	bl	8000b98 <__aeabi_d2iz>
 800acec:	2800      	cmp	r0, #0
 800acee:	d051      	beq.n	800ad94 <__kernel_sin+0xd4>
 800acf0:	4622      	mov	r2, r4
 800acf2:	462b      	mov	r3, r5
 800acf4:	4620      	mov	r0, r4
 800acf6:	4629      	mov	r1, r5
 800acf8:	f7f5 fc9e 	bl	8000638 <__aeabi_dmul>
 800acfc:	4682      	mov	sl, r0
 800acfe:	468b      	mov	fp, r1
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4620      	mov	r0, r4
 800ad06:	4629      	mov	r1, r5
 800ad08:	f7f5 fc96 	bl	8000638 <__aeabi_dmul>
 800ad0c:	a341      	add	r3, pc, #260	; (adr r3, 800ae14 <__kernel_sin+0x154>)
 800ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad12:	4680      	mov	r8, r0
 800ad14:	4689      	mov	r9, r1
 800ad16:	4650      	mov	r0, sl
 800ad18:	4659      	mov	r1, fp
 800ad1a:	f7f5 fc8d 	bl	8000638 <__aeabi_dmul>
 800ad1e:	a33f      	add	r3, pc, #252	; (adr r3, 800ae1c <__kernel_sin+0x15c>)
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f7f5 fad0 	bl	80002c8 <__aeabi_dsub>
 800ad28:	4652      	mov	r2, sl
 800ad2a:	465b      	mov	r3, fp
 800ad2c:	f7f5 fc84 	bl	8000638 <__aeabi_dmul>
 800ad30:	a33c      	add	r3, pc, #240	; (adr r3, 800ae24 <__kernel_sin+0x164>)
 800ad32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad36:	f7f5 fac9 	bl	80002cc <__adddf3>
 800ad3a:	4652      	mov	r2, sl
 800ad3c:	465b      	mov	r3, fp
 800ad3e:	f7f5 fc7b 	bl	8000638 <__aeabi_dmul>
 800ad42:	a33a      	add	r3, pc, #232	; (adr r3, 800ae2c <__kernel_sin+0x16c>)
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	f7f5 fabe 	bl	80002c8 <__aeabi_dsub>
 800ad4c:	4652      	mov	r2, sl
 800ad4e:	465b      	mov	r3, fp
 800ad50:	f7f5 fc72 	bl	8000638 <__aeabi_dmul>
 800ad54:	a337      	add	r3, pc, #220	; (adr r3, 800ae34 <__kernel_sin+0x174>)
 800ad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5a:	f7f5 fab7 	bl	80002cc <__adddf3>
 800ad5e:	9b01      	ldr	r3, [sp, #4]
 800ad60:	4606      	mov	r6, r0
 800ad62:	460f      	mov	r7, r1
 800ad64:	b9eb      	cbnz	r3, 800ada2 <__kernel_sin+0xe2>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	4659      	mov	r1, fp
 800ad6e:	f7f5 fc63 	bl	8000638 <__aeabi_dmul>
 800ad72:	a325      	add	r3, pc, #148	; (adr r3, 800ae08 <__kernel_sin+0x148>)
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	f7f5 faa6 	bl	80002c8 <__aeabi_dsub>
 800ad7c:	4642      	mov	r2, r8
 800ad7e:	464b      	mov	r3, r9
 800ad80:	f7f5 fc5a 	bl	8000638 <__aeabi_dmul>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	4620      	mov	r0, r4
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	f7f5 fa9e 	bl	80002cc <__adddf3>
 800ad90:	4604      	mov	r4, r0
 800ad92:	460d      	mov	r5, r1
 800ad94:	ec45 4b10 	vmov	d0, r4, r5
 800ad98:	b003      	add	sp, #12
 800ad9a:	ecbd 8b04 	vpop	{d8-d9}
 800ad9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada2:	4b1b      	ldr	r3, [pc, #108]	; (800ae10 <__kernel_sin+0x150>)
 800ada4:	ec51 0b18 	vmov	r0, r1, d8
 800ada8:	2200      	movs	r2, #0
 800adaa:	f7f5 fc45 	bl	8000638 <__aeabi_dmul>
 800adae:	4632      	mov	r2, r6
 800adb0:	ec41 0b19 	vmov	d9, r0, r1
 800adb4:	463b      	mov	r3, r7
 800adb6:	4640      	mov	r0, r8
 800adb8:	4649      	mov	r1, r9
 800adba:	f7f5 fc3d 	bl	8000638 <__aeabi_dmul>
 800adbe:	4602      	mov	r2, r0
 800adc0:	460b      	mov	r3, r1
 800adc2:	ec51 0b19 	vmov	r0, r1, d9
 800adc6:	f7f5 fa7f 	bl	80002c8 <__aeabi_dsub>
 800adca:	4652      	mov	r2, sl
 800adcc:	465b      	mov	r3, fp
 800adce:	f7f5 fc33 	bl	8000638 <__aeabi_dmul>
 800add2:	ec53 2b18 	vmov	r2, r3, d8
 800add6:	f7f5 fa77 	bl	80002c8 <__aeabi_dsub>
 800adda:	a30b      	add	r3, pc, #44	; (adr r3, 800ae08 <__kernel_sin+0x148>)
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	4606      	mov	r6, r0
 800ade2:	460f      	mov	r7, r1
 800ade4:	4640      	mov	r0, r8
 800ade6:	4649      	mov	r1, r9
 800ade8:	f7f5 fc26 	bl	8000638 <__aeabi_dmul>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7f5 fa6a 	bl	80002cc <__adddf3>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4620      	mov	r0, r4
 800adfe:	4629      	mov	r1, r5
 800ae00:	f7f5 fa62 	bl	80002c8 <__aeabi_dsub>
 800ae04:	e7c4      	b.n	800ad90 <__kernel_sin+0xd0>
 800ae06:	bf00      	nop
 800ae08:	55555549 	.word	0x55555549
 800ae0c:	3fc55555 	.word	0x3fc55555
 800ae10:	3fe00000 	.word	0x3fe00000
 800ae14:	5acfd57c 	.word	0x5acfd57c
 800ae18:	3de5d93a 	.word	0x3de5d93a
 800ae1c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ae20:	3e5ae5e6 	.word	0x3e5ae5e6
 800ae24:	57b1fe7d 	.word	0x57b1fe7d
 800ae28:	3ec71de3 	.word	0x3ec71de3
 800ae2c:	19c161d5 	.word	0x19c161d5
 800ae30:	3f2a01a0 	.word	0x3f2a01a0
 800ae34:	1110f8a6 	.word	0x1110f8a6
 800ae38:	3f811111 	.word	0x3f811111

0800ae3c <fabs>:
 800ae3c:	ec51 0b10 	vmov	r0, r1, d0
 800ae40:	ee10 2a10 	vmov	r2, s0
 800ae44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae48:	ec43 2b10 	vmov	d0, r2, r3
 800ae4c:	4770      	bx	lr
	...

0800ae50 <floor>:
 800ae50:	ec51 0b10 	vmov	r0, r1, d0
 800ae54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ae5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ae60:	2e13      	cmp	r6, #19
 800ae62:	ee10 5a10 	vmov	r5, s0
 800ae66:	ee10 8a10 	vmov	r8, s0
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	dc32      	bgt.n	800aed4 <floor+0x84>
 800ae6e:	2e00      	cmp	r6, #0
 800ae70:	da14      	bge.n	800ae9c <floor+0x4c>
 800ae72:	a333      	add	r3, pc, #204	; (adr r3, 800af40 <floor+0xf0>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	f7f5 fa28 	bl	80002cc <__adddf3>
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	2300      	movs	r3, #0
 800ae80:	f7f5 fe6a 	bl	8000b58 <__aeabi_dcmpgt>
 800ae84:	b138      	cbz	r0, 800ae96 <floor+0x46>
 800ae86:	2c00      	cmp	r4, #0
 800ae88:	da57      	bge.n	800af3a <floor+0xea>
 800ae8a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ae8e:	431d      	orrs	r5, r3
 800ae90:	d001      	beq.n	800ae96 <floor+0x46>
 800ae92:	4c2d      	ldr	r4, [pc, #180]	; (800af48 <floor+0xf8>)
 800ae94:	2500      	movs	r5, #0
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	e025      	b.n	800aee8 <floor+0x98>
 800ae9c:	4f2b      	ldr	r7, [pc, #172]	; (800af4c <floor+0xfc>)
 800ae9e:	4137      	asrs	r7, r6
 800aea0:	ea01 0307 	and.w	r3, r1, r7
 800aea4:	4303      	orrs	r3, r0
 800aea6:	d01f      	beq.n	800aee8 <floor+0x98>
 800aea8:	a325      	add	r3, pc, #148	; (adr r3, 800af40 <floor+0xf0>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	f7f5 fa0d 	bl	80002cc <__adddf3>
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f7f5 fe4f 	bl	8000b58 <__aeabi_dcmpgt>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d0eb      	beq.n	800ae96 <floor+0x46>
 800aebe:	2c00      	cmp	r4, #0
 800aec0:	bfbe      	ittt	lt
 800aec2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aec6:	fa43 f606 	asrlt.w	r6, r3, r6
 800aeca:	19a4      	addlt	r4, r4, r6
 800aecc:	ea24 0407 	bic.w	r4, r4, r7
 800aed0:	2500      	movs	r5, #0
 800aed2:	e7e0      	b.n	800ae96 <floor+0x46>
 800aed4:	2e33      	cmp	r6, #51	; 0x33
 800aed6:	dd0b      	ble.n	800aef0 <floor+0xa0>
 800aed8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aedc:	d104      	bne.n	800aee8 <floor+0x98>
 800aede:	ee10 2a10 	vmov	r2, s0
 800aee2:	460b      	mov	r3, r1
 800aee4:	f7f5 f9f2 	bl	80002cc <__adddf3>
 800aee8:	ec41 0b10 	vmov	d0, r0, r1
 800aeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800aef4:	f04f 33ff 	mov.w	r3, #4294967295
 800aef8:	fa23 f707 	lsr.w	r7, r3, r7
 800aefc:	4207      	tst	r7, r0
 800aefe:	d0f3      	beq.n	800aee8 <floor+0x98>
 800af00:	a30f      	add	r3, pc, #60	; (adr r3, 800af40 <floor+0xf0>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	f7f5 f9e1 	bl	80002cc <__adddf3>
 800af0a:	2200      	movs	r2, #0
 800af0c:	2300      	movs	r3, #0
 800af0e:	f7f5 fe23 	bl	8000b58 <__aeabi_dcmpgt>
 800af12:	2800      	cmp	r0, #0
 800af14:	d0bf      	beq.n	800ae96 <floor+0x46>
 800af16:	2c00      	cmp	r4, #0
 800af18:	da02      	bge.n	800af20 <floor+0xd0>
 800af1a:	2e14      	cmp	r6, #20
 800af1c:	d103      	bne.n	800af26 <floor+0xd6>
 800af1e:	3401      	adds	r4, #1
 800af20:	ea25 0507 	bic.w	r5, r5, r7
 800af24:	e7b7      	b.n	800ae96 <floor+0x46>
 800af26:	2301      	movs	r3, #1
 800af28:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800af2c:	fa03 f606 	lsl.w	r6, r3, r6
 800af30:	4435      	add	r5, r6
 800af32:	4545      	cmp	r5, r8
 800af34:	bf38      	it	cc
 800af36:	18e4      	addcc	r4, r4, r3
 800af38:	e7f2      	b.n	800af20 <floor+0xd0>
 800af3a:	2500      	movs	r5, #0
 800af3c:	462c      	mov	r4, r5
 800af3e:	e7aa      	b.n	800ae96 <floor+0x46>
 800af40:	8800759c 	.word	0x8800759c
 800af44:	7e37e43c 	.word	0x7e37e43c
 800af48:	bff00000 	.word	0xbff00000
 800af4c:	000fffff 	.word	0x000fffff

0800af50 <scalbn>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	ec55 4b10 	vmov	r4, r5, d0
 800af56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800af5a:	4606      	mov	r6, r0
 800af5c:	462b      	mov	r3, r5
 800af5e:	b99a      	cbnz	r2, 800af88 <scalbn+0x38>
 800af60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af64:	4323      	orrs	r3, r4
 800af66:	d036      	beq.n	800afd6 <scalbn+0x86>
 800af68:	4b39      	ldr	r3, [pc, #228]	; (800b050 <scalbn+0x100>)
 800af6a:	4629      	mov	r1, r5
 800af6c:	ee10 0a10 	vmov	r0, s0
 800af70:	2200      	movs	r2, #0
 800af72:	f7f5 fb61 	bl	8000638 <__aeabi_dmul>
 800af76:	4b37      	ldr	r3, [pc, #220]	; (800b054 <scalbn+0x104>)
 800af78:	429e      	cmp	r6, r3
 800af7a:	4604      	mov	r4, r0
 800af7c:	460d      	mov	r5, r1
 800af7e:	da10      	bge.n	800afa2 <scalbn+0x52>
 800af80:	a32b      	add	r3, pc, #172	; (adr r3, 800b030 <scalbn+0xe0>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	e03a      	b.n	800affe <scalbn+0xae>
 800af88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800af8c:	428a      	cmp	r2, r1
 800af8e:	d10c      	bne.n	800afaa <scalbn+0x5a>
 800af90:	ee10 2a10 	vmov	r2, s0
 800af94:	4620      	mov	r0, r4
 800af96:	4629      	mov	r1, r5
 800af98:	f7f5 f998 	bl	80002cc <__adddf3>
 800af9c:	4604      	mov	r4, r0
 800af9e:	460d      	mov	r5, r1
 800afa0:	e019      	b.n	800afd6 <scalbn+0x86>
 800afa2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800afa6:	460b      	mov	r3, r1
 800afa8:	3a36      	subs	r2, #54	; 0x36
 800afaa:	4432      	add	r2, r6
 800afac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800afb0:	428a      	cmp	r2, r1
 800afb2:	dd08      	ble.n	800afc6 <scalbn+0x76>
 800afb4:	2d00      	cmp	r5, #0
 800afb6:	a120      	add	r1, pc, #128	; (adr r1, 800b038 <scalbn+0xe8>)
 800afb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afbc:	da1c      	bge.n	800aff8 <scalbn+0xa8>
 800afbe:	a120      	add	r1, pc, #128	; (adr r1, 800b040 <scalbn+0xf0>)
 800afc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afc4:	e018      	b.n	800aff8 <scalbn+0xa8>
 800afc6:	2a00      	cmp	r2, #0
 800afc8:	dd08      	ble.n	800afdc <scalbn+0x8c>
 800afca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800afd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800afd6:	ec45 4b10 	vmov	d0, r4, r5
 800afda:	bd70      	pop	{r4, r5, r6, pc}
 800afdc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800afe0:	da19      	bge.n	800b016 <scalbn+0xc6>
 800afe2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800afe6:	429e      	cmp	r6, r3
 800afe8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800afec:	dd0a      	ble.n	800b004 <scalbn+0xb4>
 800afee:	a112      	add	r1, pc, #72	; (adr r1, 800b038 <scalbn+0xe8>)
 800aff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1e2      	bne.n	800afbe <scalbn+0x6e>
 800aff8:	a30f      	add	r3, pc, #60	; (adr r3, 800b038 <scalbn+0xe8>)
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f7f5 fb1b 	bl	8000638 <__aeabi_dmul>
 800b002:	e7cb      	b.n	800af9c <scalbn+0x4c>
 800b004:	a10a      	add	r1, pc, #40	; (adr r1, 800b030 <scalbn+0xe0>)
 800b006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0b8      	beq.n	800af80 <scalbn+0x30>
 800b00e:	a10e      	add	r1, pc, #56	; (adr r1, 800b048 <scalbn+0xf8>)
 800b010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b014:	e7b4      	b.n	800af80 <scalbn+0x30>
 800b016:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b01a:	3236      	adds	r2, #54	; 0x36
 800b01c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b020:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b024:	4620      	mov	r0, r4
 800b026:	4b0c      	ldr	r3, [pc, #48]	; (800b058 <scalbn+0x108>)
 800b028:	2200      	movs	r2, #0
 800b02a:	e7e8      	b.n	800affe <scalbn+0xae>
 800b02c:	f3af 8000 	nop.w
 800b030:	c2f8f359 	.word	0xc2f8f359
 800b034:	01a56e1f 	.word	0x01a56e1f
 800b038:	8800759c 	.word	0x8800759c
 800b03c:	7e37e43c 	.word	0x7e37e43c
 800b040:	8800759c 	.word	0x8800759c
 800b044:	fe37e43c 	.word	0xfe37e43c
 800b048:	c2f8f359 	.word	0xc2f8f359
 800b04c:	81a56e1f 	.word	0x81a56e1f
 800b050:	43500000 	.word	0x43500000
 800b054:	ffff3cb0 	.word	0xffff3cb0
 800b058:	3c900000 	.word	0x3c900000

0800b05c <_init>:
 800b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05e:	bf00      	nop
 800b060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b062:	bc08      	pop	{r3}
 800b064:	469e      	mov	lr, r3
 800b066:	4770      	bx	lr

0800b068 <_fini>:
 800b068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06a:	bf00      	nop
 800b06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06e:	bc08      	pop	{r3}
 800b070:	469e      	mov	lr, r3
 800b072:	4770      	bx	lr
