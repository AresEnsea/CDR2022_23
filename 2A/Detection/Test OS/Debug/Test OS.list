
Test OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0800b388  0800b388  0001b388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba70  0800ba70  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba70  0800ba70  0001ba70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba78  0800ba78  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba78  0800ba78  0001ba78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba7c  0800ba7c  0001ba7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ba80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b80  200001e4  0800bc64  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d64  0800bc64  00024d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afa6  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d5  00000000  00000000  0003b1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  000401a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005973  00000000  00000000  00041648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017efe  00000000  00000000  00046fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd6f  00000000  00000000  0005eeb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eac28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007074  00000000  00000000  000eac78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b36c 	.word	0x0800b36c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800b36c 	.word	0x0800b36c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0000      	movs	r0, r0
	...

08000f90 <positionRelative>:
#define pasDistance 64/(10.*4.)
#define rayonCapteurs 4.8
#define deltaAngle (13/360.)*2*pi


float * positionRelative(int number, int pseudoDistance, float * angleDeg){
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b092      	sub	sp, #72	; 0x48
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	float pas = pasDistance;				//Pas entre 2 incréments de distance mesuree
 8000f9c:	4bc0      	ldr	r3, [pc, #768]	; (80012a0 <positionRelative+0x310>)
 8000f9e:	647b      	str	r3, [r7, #68]	; 0x44
	float distance = pas*pseudoDistance;	//Distance reelle de l'obstacle
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000faa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float rayon = rayonCapteurs;			//Rayon de la tourelle
 8000fb6:	4bbb      	ldr	r3, [pc, #748]	; (80012a4 <positionRelative+0x314>)
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	float angleRob = 2*(float)pi*(*angleDeg)/360.;		//Angle relatif du robot
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 80012a8 <positionRelative+0x318>
 8000fc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fc8:	eddf 6ab8 	vldr	s13, [pc, #736]	; 80012ac <positionRelative+0x31c>
 8000fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float angleCapt = (float)number*pasAngulaire;	//Anlgle du capteur par rapport a l'avant du robot
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fde:	ee17 0a90 	vmov	r0, s15
 8000fe2:	f7ff fad1 	bl	8000588 <__aeabi_f2d>
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4bb1      	ldr	r3, [pc, #708]	; (80012b0 <positionRelative+0x320>)
 8000fec:	f7ff fb24 	bl	8000638 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	f7ff f966 	bl	80002cc <__adddf3>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	a39f      	add	r3, pc, #636	; (adr r3, 8001288 <positionRelative+0x2f8>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fb13 	bl	8000638 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f7ff fde5 	bl	8000be8 <__aeabi_d2f>
 800101e:	4603      	mov	r3, r0
 8001020:	637b      	str	r3, [r7, #52]	; 0x34

	
	static float  sortie[4];	//

	//Calcul du point P
	OP[0] = (rayon + distance)*cos(angleRob + angleCapt);
 8001022:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001026:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800102a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102e:	ee17 0a90 	vmov	r0, s15
 8001032:	f7ff faa9 	bl	8000588 <__aeabi_f2d>
 8001036:	4604      	mov	r4, r0
 8001038:	460d      	mov	r5, r1
 800103a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800103e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001046:	ee17 0a90 	vmov	r0, s15
 800104a:	f7ff fa9d 	bl	8000588 <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	ec43 2b10 	vmov	d0, r2, r3
 8001056:	f009 f8eb 	bl	800a230 <cos>
 800105a:	ec53 2b10 	vmov	r2, r3, d0
 800105e:	4620      	mov	r0, r4
 8001060:	4629      	mov	r1, r5
 8001062:	f7ff fae9 	bl	8000638 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fdbb 	bl	8000be8 <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
	OP[1] = (rayon + distance)*sin(angleRob + angleCapt);
 8001076:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800107a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001082:	ee17 0a90 	vmov	r0, s15
 8001086:	f7ff fa7f 	bl	8000588 <__aeabi_f2d>
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001092:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109a:	ee17 0a90 	vmov	r0, s15
 800109e:	f7ff fa73 	bl	8000588 <__aeabi_f2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	ec43 2b10 	vmov	d0, r2, r3
 80010aa:	f009 f915 	bl	800a2d8 <sin>
 80010ae:	ec53 2b10 	vmov	r2, r3, d0
 80010b2:	4620      	mov	r0, r4
 80010b4:	4629      	mov	r1, r5
 80010b6:	f7ff fabf 	bl	8000638 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fd91 	bl	8000be8 <__aeabi_d2f>
 80010c6:	4603      	mov	r3, r0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30

	//Creation de gamma
	gamma[0] = cos(angleRob + angleCapt + pi/2.);
 80010ca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80010ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	ee17 0a90 	vmov	r0, s15
 80010da:	f7ff fa55 	bl	8000588 <__aeabi_f2d>
 80010de:	a36c      	add	r3, pc, #432	; (adr r3, 8001290 <positionRelative+0x300>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff f8f2 	bl	80002cc <__adddf3>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	ec43 2b17 	vmov	d7, r2, r3
 80010f0:	eeb0 0a47 	vmov.f32	s0, s14
 80010f4:	eef0 0a67 	vmov.f32	s1, s15
 80010f8:	f009 f89a 	bl	800a230 <cos>
 80010fc:	ec53 2b10 	vmov	r2, r3, d0
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fd70 	bl	8000be8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
	gamma[1] = sin(angleRob + angleCapt + pi/2.);
 800110c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001110:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	ee17 0a90 	vmov	r0, s15
 800111c:	f7ff fa34 	bl	8000588 <__aeabi_f2d>
 8001120:	a35b      	add	r3, pc, #364	; (adr r3, 8001290 <positionRelative+0x300>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff f8d1 	bl	80002cc <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	ec43 2b17 	vmov	d7, r2, r3
 8001132:	eeb0 0a47 	vmov.f32	s0, s14
 8001136:	eef0 0a67 	vmov.f32	s1, s15
 800113a:	f009 f8cd 	bl	800a2d8 <sin>
 800113e:	ec53 2b10 	vmov	r2, r3, d0
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fd4f 	bl	8000be8 <__aeabi_d2f>
 800114a:	4603      	mov	r3, r0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28

	//Calcul des points maximaux
	//OA = OP - gamma*distance*tan(deltaAngle);
	OA[0] = OP[0] - gamma[0]*distance*tan(deltaAngle);
 800114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa19 	bl	8000588 <__aeabi_f2d>
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800115e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	ee17 0a90 	vmov	r0, s15
 800116a:	f7ff fa0d 	bl	8000588 <__aeabi_f2d>
 800116e:	a34a      	add	r3, pc, #296	; (adr r3, 8001298 <positionRelative+0x308>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fa60 	bl	8000638 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff f8a2 	bl	80002c8 <__aeabi_dsub>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fd2c 	bl	8000be8 <__aeabi_d2f>
 8001190:	4603      	mov	r3, r0
 8001192:	61fb      	str	r3, [r7, #28]
	OA[1] = OP[1] - gamma[1]*distance*tan(deltaAngle);
 8001194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9f6 	bl	8000588 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011a4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	ee17 0a90 	vmov	r0, s15
 80011b0:	f7ff f9ea 	bl	8000588 <__aeabi_f2d>
 80011b4:	a338      	add	r3, pc, #224	; (adr r3, 8001298 <positionRelative+0x308>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fa3d 	bl	8000638 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4620      	mov	r0, r4
 80011c4:	4629      	mov	r1, r5
 80011c6:	f7ff f87f 	bl	80002c8 <__aeabi_dsub>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fd09 	bl	8000be8 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	623b      	str	r3, [r7, #32]

	//OB = OP + gamma*distance*tan(deltaAngle);
	OB[0] = OP[0] + gamma[0]*distance*tan(deltaAngle);
 80011da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f9d3 	bl	8000588 <__aeabi_f2d>
 80011e2:	4604      	mov	r4, r0
 80011e4:	460d      	mov	r5, r1
 80011e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80011ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f2:	ee17 0a90 	vmov	r0, s15
 80011f6:	f7ff f9c7 	bl	8000588 <__aeabi_f2d>
 80011fa:	a327      	add	r3, pc, #156	; (adr r3, 8001298 <positionRelative+0x308>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f7ff fa1a 	bl	8000638 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4620      	mov	r0, r4
 800120a:	4629      	mov	r1, r5
 800120c:	f7ff f85e 	bl	80002cc <__adddf3>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fce6 	bl	8000be8 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	617b      	str	r3, [r7, #20]
	OB[1] = OP[1] + gamma[1]*distance*tan(deltaAngle);
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f9b0 	bl	8000588 <__aeabi_f2d>
 8001228:	4604      	mov	r4, r0
 800122a:	460d      	mov	r5, r1
 800122c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001230:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001238:	ee17 0a90 	vmov	r0, s15
 800123c:	f7ff f9a4 	bl	8000588 <__aeabi_f2d>
 8001240:	a315      	add	r3, pc, #84	; (adr r3, 8001298 <positionRelative+0x308>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	f7ff f9f7 	bl	8000638 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff f83b 	bl	80002cc <__adddf3>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fcc3 	bl	8000be8 <__aeabi_d2f>
 8001262:	4603      	mov	r3, r0
 8001264:	61bb      	str	r3, [r7, #24]

	sortie[0] = OA[0];
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <positionRelative+0x324>)
 800126a:	6013      	str	r3, [r2, #0]
	sortie[1] = OA[1];
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <positionRelative+0x324>)
 8001270:	6053      	str	r3, [r2, #4]

	sortie[2] = OB[0];
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <positionRelative+0x324>)
 8001276:	6093      	str	r3, [r2, #8]
	sortie[3] = OB[1];
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <positionRelative+0x324>)
 800127c:	60d3      	str	r3, [r2, #12]

	return sortie;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <positionRelative+0x324>)
}
 8001280:	4618      	mov	r0, r3
 8001282:	3748      	adds	r7, #72	; 0x48
 8001284:	46bd      	mov	sp, r7
 8001286:	bdb0      	pop	{r4, r5, r7, pc}
 8001288:	2e48e8a7 	.word	0x2e48e8a7
 800128c:	400921ff 	.word	0x400921ff
 8001290:	2e48e8a7 	.word	0x2e48e8a7
 8001294:	3ff921ff 	.word	0x3ff921ff
 8001298:	716a35f3 	.word	0x716a35f3
 800129c:	3fcd8d1b 	.word	0x3fcd8d1b
 80012a0:	3fcccccd 	.word	0x3fcccccd
 80012a4:	4099999a 	.word	0x4099999a
 80012a8:	40c90ff9 	.word	0x40c90ff9
 80012ac:	43b40000 	.word	0x43b40000
 80012b0:	3fb00000 	.word	0x3fb00000
 80012b4:	20000200 	.word	0x20000200

080012b8 <send_deftask>:





void send_deftask(float x){
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t value[12];
	gcvt(x, 8, value);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff f960 	bl	8000588 <__aeabi_f2d>
 80012c8:	4604      	mov	r4, r0
 80012ca:	460d      	mov	r5, r1
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	2008      	movs	r0, #8
 80012d4:	ec45 4b10 	vmov	d0, r4, r5
 80012d8:	f006 f870 	bl	80073bc <gcvt>
	value[8] = ' ';
 80012dc:	2320      	movs	r3, #32
 80012de:	753b      	strb	r3, [r7, #20]
	value[9] = '\r';
 80012e0:	230d      	movs	r3, #13
 80012e2:	757b      	strb	r3, [r7, #21]
	value[10] = '\n';
 80012e4:	230a      	movs	r3, #10
 80012e6:	75bb      	strb	r3, [r7, #22]
	value[11]= '\0';
 80012e8:	2300      	movs	r3, #0
 80012ea:	75fb      	strb	r3, [r7, #23]

	//int size = snprintf((char*)value, 20, "%d\r\n",(int)(x*1000));
	//HAL_UART_Transmit(&huart2, value, 8+3, 500);
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bdb0      	pop	{r4, r5, r7, pc}

080012f4 <print_point>:

void print_point(float * OP){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	float x = OP[0];
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	617b      	str	r3, [r7, #20]
	float y = OP[1];
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	613b      	str	r3, [r7, #16]

	uint8_t data[]= " - ";
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <print_point+0x40>)
 800130a:	60fb      	str	r3, [r7, #12]
	send_deftask(x);
 800130c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001310:	f7ff ffd2 	bl	80012b8 <send_deftask>
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 8001314:	f107 010c 	add.w	r1, r7, #12
 8001318:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800131c:	2204      	movs	r2, #4
 800131e:	4806      	ldr	r0, [pc, #24]	; (8001338 <print_point+0x44>)
 8001320:	f002 f9b5 	bl	800368e <HAL_UART_Transmit>
	send_deftask(y);
 8001324:	ed97 0a04 	vldr	s0, [r7, #16]
 8001328:	f7ff ffc6 	bl	80012b8 <send_deftask>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	00202d20 	.word	0x00202d20
 8001338:	2000029c 	.word	0x2000029c

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f000 fd50 	bl	8001de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f848 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f000 f946 	bl	80015d8 <MX_GPIO_Init>
  MX_TIM5_Init();
 800134c:	f000 f8a2 	bl	8001494 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001350:	f000 f8ee 	bl	8001530 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001354:	f000 f916 	bl	8001584 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int true;
  tests();
 8001358:	f000 fd12 	bl	8001d80 <tests>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800135c:	f003 fab2 	bl	80048c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of checkDistance */
  checkDistanceHandle = osThreadNew(StartDefaultTask, NULL, &checkDistance_attributes);
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <main+0x6c>)
 8001362:	2100      	movs	r1, #0
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <main+0x70>)
 8001366:	f003 faf7 	bl	8004958 <osThreadNew>
 800136a:	4603      	mov	r3, r0
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <main+0x74>)
 800136e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001370:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <main+0x78>)
 8001372:	2100      	movs	r1, #0
 8001374:	4810      	ldr	r0, [pc, #64]	; (80013b8 <main+0x7c>)
 8001376:	f003 faef 	bl	8004958 <osThreadNew>
 800137a:	4603      	mov	r3, r0
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <main+0x80>)
 800137e:	6013      	str	r3, [r2, #0]

  /* creation of checkUserButton */
  checkUserButtonHandle = osThreadNew(button, NULL, &checkUserButton_attributes);
 8001380:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <main+0x84>)
 8001382:	2100      	movs	r1, #0
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <main+0x88>)
 8001386:	f003 fae7 	bl	8004958 <osThreadNew>
 800138a:	4603      	mov	r3, r0
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <main+0x8c>)
 800138e:	6013      	str	r3, [r2, #0]

  /* creation of serialdetection */
  serialdetectionHandle = osThreadNew(StartSerialDetection, NULL, &serialdetection_attributes);
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <main+0x90>)
 8001392:	2100      	movs	r1, #0
 8001394:	480e      	ldr	r0, [pc, #56]	; (80013d0 <main+0x94>)
 8001396:	f003 fadf 	bl	8004958 <osThreadNew>
 800139a:	4603      	mov	r3, r0
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <main+0x98>)
 800139e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013a0:	f003 fab4 	bl	800490c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <main+0x68>
 80013a6:	bf00      	nop
 80013a8:	0800b414 	.word	0x0800b414
 80013ac:	0800167d 	.word	0x0800167d
 80013b0:	200002e0 	.word	0x200002e0
 80013b4:	0800b438 	.word	0x0800b438
 80013b8:	080016ad 	.word	0x080016ad
 80013bc:	200002e4 	.word	0x200002e4
 80013c0:	0800b45c 	.word	0x0800b45c
 80013c4:	0800176d 	.word	0x0800176d
 80013c8:	200002e8 	.word	0x200002e8
 80013cc:	0800b480 	.word	0x0800b480
 80013d0:	080017b1 	.word	0x080017b1
 80013d4:	200002ec 	.word	0x200002ec

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	; 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	2234      	movs	r2, #52	; 0x34
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f006 f93d 	bl	8007666 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <SystemClock_Config+0xb4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a21      	ldr	r2, [pc, #132]	; (800148c <SystemClock_Config+0xb4>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <SystemClock_Config+0xb4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <SystemClock_Config+0xb8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <SystemClock_Config+0xb8>)
 8001422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <SystemClock_Config+0xb8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2310      	movs	r3, #16
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4618      	mov	r0, r3
 800144a:	f001 fa53 	bl	80028f4 <HAL_RCC_OscConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001454:	f000 fa18 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001458:	230f      	movs	r3, #15
 800145a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f001 f82c 	bl	80024d0 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800147e:	f000 fa03 	bl	8001888 <Error_Handler>
  }
}
 8001482:	bf00      	nop
 8001484:	3750      	adds	r7, #80	; 0x50
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_TIM5_Init+0x94>)
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <MX_TIM5_Init+0x98>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_TIM5_Init+0x94>)
 80014b8:	22f9      	movs	r2, #249	; 0xf9
 80014ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_TIM5_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_TIM5_Init+0x94>)
 80014c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_TIM5_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_TIM5_Init+0x94>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <MX_TIM5_Init+0x94>)
 80014d8:	f001 fc90 	bl	8002dfc <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80014e2:	f000 f9d1 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_TIM5_Init+0x94>)
 80014f4:	f001 fe28 	bl	8003148 <HAL_TIM_ConfigClockSource>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80014fe:	f000 f9c3 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_TIM5_Init+0x94>)
 8001510:	f002 f802 	bl	8003518 <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800151a:	f000 f9b5 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000210 	.word	0x20000210
 800152c:	40000c00 	.word	0x40000c00

08001530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_USART1_UART_Init+0x50>)
 8001538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_USART1_UART_Init+0x4c>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_USART1_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_USART1_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_USART1_UART_Init+0x4c>)
 8001568:	f002 f844 	bl	80035f4 <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001572:	f000 f989 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000258 	.word	0x20000258
 8001580:	40011000 	.word	0x40011000

08001584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART2_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_USART2_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015bc:	f002 f81a 	bl	80035f4 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 f95f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000029c 	.word	0x2000029c
 80015d4:	40004400 	.word	0x40004400

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_GPIO_Init+0x98>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <MX_GPIO_Init+0x98>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_GPIO_Init+0x98>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_GPIO_Init+0x98>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a17      	ldr	r2, [pc, #92]	; (8001670 <MX_GPIO_Init+0x98>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_GPIO_Init+0x98>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2120      	movs	r1, #32
 800162a:	4812      	ldr	r0, [pc, #72]	; (8001674 <MX_GPIO_Init+0x9c>)
 800162c:	f000 ff1c 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4619      	mov	r1, r3
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <MX_GPIO_Init+0xa0>)
 8001646:	f000 fd83 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800164a:	2320      	movs	r3, #32
 800164c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4619      	mov	r1, r3
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <MX_GPIO_Init+0x9c>)
 8001662:	f000 fd75 	bl	8002150 <HAL_GPIO_Init>

}
 8001666:	bf00      	nop
 8001668:	3720      	adds	r7, #32
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020800 	.word	0x40020800

0800167c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t n = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	75fb      	strb	r3, [r7, #23]
	int dist = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	613b      	str	r3, [r7, #16]
	float angle = 90;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <StartDefaultTask+0x2c>)
 800168e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  n+= 10;
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	330a      	adds	r3, #10
 8001694:	75fb      	strb	r3, [r7, #23]
	  //double * distance = positionRelative(n, dist, angle);
	  if(n > 100) //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2b64      	cmp	r3, #100	; 0x64
 800169a:	d9f9      	bls.n	8001690 <StartDefaultTask+0x14>
	  osDelay(500);
 800169c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a0:	f003 f9ec 	bl	8004a7c <osDelay>
	  n+= 10;
 80016a4:	e7f4      	b.n	8001690 <StartDefaultTask+0x14>
 80016a6:	bf00      	nop
 80016a8:	42b40000 	.word	0x42b40000

080016ac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  float * sortie;
	  float ag = (float)buttonCount;
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <StartTask02+0xb0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  sortie = positionRelative((int)i,3,&ag);
 80016c4:	4b26      	ldr	r3, [pc, #152]	; (8001760 <StartTask02+0xb4>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d2:	461a      	mov	r2, r3
 80016d4:	2103      	movs	r1, #3
 80016d6:	ee17 0a90 	vmov	r0, s15
 80016da:	f7ff fc59 	bl	8000f90 <positionRelative>
 80016de:	4603      	mov	r3, r0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  //sortie[0] = 12.4;
	  float OA[2]; float OB[2];
	  OA[0] = sortie[0]; OA[1] = sortie[1];
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
	  OB[0] = sortie[2]; OB[1] = sortie[3];
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61fb      	str	r3, [r7, #28]
	  print_point(OA);
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fdf8 	bl	80012f4 <print_point>
	  print_point(OB);
 8001704:	f107 0318 	add.w	r3, r7, #24
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fdf3 	bl	80012f4 <print_point>

	  uint8_t data[] = "###### \r\n";
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <StartTask02+0xb8>)
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	ca07      	ldmia	r2, {r0, r1, r2}
 8001716:	c303      	stmia	r3!, {r0, r1}
 8001718:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 800171a:	f107 010c 	add.w	r1, r7, #12
 800171e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001722:	220a      	movs	r2, #10
 8001724:	4810      	ldr	r0, [pc, #64]	; (8001768 <StartTask02+0xbc>)
 8001726:	f001 ffb2 	bl	800368e <HAL_UART_Transmit>
	  send_deftask(buttonCount);
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <StartTask02+0xb0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	f7ff fdbd 	bl	80012b8 <send_deftask>

	  i+=1;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <StartTask02+0xb4>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001748:	ee77 7a87 	vadd.f32	s15, s15, s14
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <StartTask02+0xb4>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
    osDelay(500);
 8001752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001756:	f003 f991 	bl	8004a7c <osDelay>
  {
 800175a:	e7ab      	b.n	80016b4 <StartTask02+0x8>
 800175c:	200002f0 	.word	0x200002f0
 8001760:	20000000 	.word	0x20000000
 8001764:	0800b3c4 	.word	0x0800b3c4
 8001768:	2000029c 	.word	0x2000029c

0800176c <button>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_button */
void button(void *argument)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  {
/*
	  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, 13)){
		  buttonCount++;
	  }*/
	  buttonCount = 1- (int)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <button+0x3c>)
 800177a:	f000 fe5d 	bl	8002438 <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	f1c3 0301 	rsb	r3, r3, #1
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <button+0x40>)
 8001786:	6013      	str	r3, [r2, #0]
	  send_deftask(buttonCount);
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <button+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	f7ff fd8e 	bl	80012b8 <send_deftask>
    osDelay(500);
 800179c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a0:	f003 f96c 	bl	8004a7c <osDelay>
	  buttonCount = 1- (int)HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80017a4:	e7e6      	b.n	8001774 <button+0x8>
 80017a6:	bf00      	nop
 80017a8:	40020800 	.word	0x40020800
 80017ac:	200002f0 	.word	0x200002f0

080017b0 <StartSerialDetection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialDetection */
void StartSerialDetection(void *argument)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b08b      	sub	sp, #44	; 0x2c
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialDetection */
	uint8_t data[2];
	uint8_t chiffres[16] ={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <StartSerialDetection+0x98>)
 80017ba:	f107 040c 	add.w	r4, r7, #12
 80017be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Infinite loop */
  for(;;)
  {
	data[0] = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	773b      	strb	r3, [r7, #28]
	HAL_UART_Receive(&huart1, data, 1, 1000);
 80017c8:	f107 011c 	add.w	r1, r7, #28
 80017cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d0:	2201      	movs	r2, #1
 80017d2:	481e      	ldr	r0, [pc, #120]	; (800184c <StartSerialDetection+0x9c>)
 80017d4:	f001 ffed 	bl	80037b2 <HAL_UART_Receive>
	if(data[0] != 0){
 80017d8:	7f3b      	ldrb	r3, [r7, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d02f      	beq.n	800183e <StartSerialDetection+0x8e>
		int i = data[0]>>4;
 80017de:	7f3b      	ldrb	r3, [r7, #28]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
		int j = data[0]&0xF;
 80017e6:	7f3b      	ldrb	r3, [r7, #28]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	623b      	str	r3, [r7, #32]
		HAL_UART_Transmit(&huart2, &" Capteur : ", 11, 100);
 80017ee:	2364      	movs	r3, #100	; 0x64
 80017f0:	220b      	movs	r2, #11
 80017f2:	4917      	ldr	r1, [pc, #92]	; (8001850 <StartSerialDetection+0xa0>)
 80017f4:	4817      	ldr	r0, [pc, #92]	; (8001854 <StartSerialDetection+0xa4>)
 80017f6:	f001 ff4a 	bl	800368e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &chiffres[i], 1, 100);
 80017fa:	f107 020c 	add.w	r2, r7, #12
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	18d1      	adds	r1, r2, r3
 8001802:	2364      	movs	r3, #100	; 0x64
 8001804:	2201      	movs	r2, #1
 8001806:	4813      	ldr	r0, [pc, #76]	; (8001854 <StartSerialDetection+0xa4>)
 8001808:	f001 ff41 	bl	800368e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &", mesure : ", 11, 100);
 800180c:	2364      	movs	r3, #100	; 0x64
 800180e:	220b      	movs	r2, #11
 8001810:	4911      	ldr	r1, [pc, #68]	; (8001858 <StartSerialDetection+0xa8>)
 8001812:	4810      	ldr	r0, [pc, #64]	; (8001854 <StartSerialDetection+0xa4>)
 8001814:	f001 ff3b 	bl	800368e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &chiffres[j], 1, 100);
 8001818:	f107 020c 	add.w	r2, r7, #12
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	18d1      	adds	r1, r2, r3
 8001820:	2364      	movs	r3, #100	; 0x64
 8001822:	2201      	movs	r2, #1
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <StartSerialDetection+0xa4>)
 8001826:	f001 ff32 	bl	800368e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &"\n\r", 2, 100);
 800182a:	2364      	movs	r3, #100	; 0x64
 800182c:	2202      	movs	r2, #2
 800182e:	490b      	ldr	r1, [pc, #44]	; (800185c <StartSerialDetection+0xac>)
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <StartSerialDetection+0xa4>)
 8001832:	f001 ff2c 	bl	800368e <HAL_UART_Transmit>

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001836:	2120      	movs	r1, #32
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <StartSerialDetection+0xb0>)
 800183a:	f000 fe2e 	bl	800249a <HAL_GPIO_TogglePin>
	}
    osDelay(100);
 800183e:	2064      	movs	r0, #100	; 0x64
 8001840:	f003 f91c 	bl	8004a7c <osDelay>
	data[0] = 0;
 8001844:	e7be      	b.n	80017c4 <StartSerialDetection+0x14>
 8001846:	bf00      	nop
 8001848:	0800b3ec 	.word	0x0800b3ec
 800184c:	20000258 	.word	0x20000258
 8001850:	0800b3d0 	.word	0x0800b3d0
 8001854:	2000029c 	.word	0x2000029c
 8001858:	0800b3dc 	.word	0x0800b3dc
 800185c:	0800b3e8 	.word	0x0800b3e8
 8001860:	40020000 	.word	0x40020000

08001864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001876:	f000 fad7 	bl	8001e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40010000 	.word	0x40010000

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	e7fe      	b.n	8001890 <Error_Handler+0x8>
	...

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_MspInit+0x54>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_MspInit+0x54>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_MspInit+0x54>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_MspInit+0x54>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_MspInit+0x54>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_MspInit+0x54>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	210f      	movs	r1, #15
 80018d6:	f06f 0001 	mvn.w	r0, #1
 80018da:	f000 fb7d 	bl	8001fd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <HAL_TIM_Base_MspInit+0x3c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d10d      	bne.n	800191a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_TIM_Base_MspInit+0x40>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_TIM_Base_MspInit+0x40>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_TIM_Base_MspInit+0x40>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40000c00 	.word	0x40000c00
 800192c:	40023800 	.word	0x40023800

08001930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a3a      	ldr	r2, [pc, #232]	; (8001a38 <HAL_UART_MspInit+0x108>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d135      	bne.n	80019be <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a38      	ldr	r2, [pc, #224]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800198a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800199c:	2307      	movs	r3, #7
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4826      	ldr	r0, [pc, #152]	; (8001a40 <HAL_UART_MspInit+0x110>)
 80019a8:	f000 fbd2 	bl	8002150 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2105      	movs	r1, #5
 80019b0:	2025      	movs	r0, #37	; 0x25
 80019b2:	f000 fb11 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b6:	2025      	movs	r0, #37	; 0x25
 80019b8:	f000 fb2a 	bl	8002010 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019bc:	e038      	b.n	8001a30 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <HAL_UART_MspInit+0x114>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d133      	bne.n	8001a30 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d6:	6413      	str	r3, [r2, #64]	; 0x40
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6313      	str	r3, [r2, #48]	; 0x30
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_UART_MspInit+0x10c>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a00:	230c      	movs	r3, #12
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a10:	2307      	movs	r3, #7
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_UART_MspInit+0x110>)
 8001a1c:	f000 fb98 	bl	8002150 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2105      	movs	r1, #5
 8001a24:	2026      	movs	r0, #38	; 0x26
 8001a26:	f000 fad7 	bl	8001fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a2a:	2026      	movs	r0, #38	; 0x26
 8001a2c:	f000 faf0 	bl	8002010 <HAL_NVIC_EnableIRQ>
}
 8001a30:	bf00      	nop
 8001a32:	3730      	adds	r7, #48	; 0x30
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40004400 	.word	0x40004400

08001a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_InitTick+0xd0>)
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <HAL_InitTick+0xd0>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6453      	str	r3, [r2, #68]	; 0x44
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <HAL_InitTick+0xd0>)
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 ff06 	bl	8002890 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a84:	f000 fef0 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8001a88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <HAL_InitTick+0xd4>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	3b01      	subs	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_InitTick+0xd8>)
 8001a9a:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <HAL_InitTick+0xdc>)
 8001a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_InitTick+0xd8>)
 8001aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001aa6:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_InitTick+0xd8>)
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_InitTick+0xd8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_InitTick+0xd8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_InitTick+0xd8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001abe:	4818      	ldr	r0, [pc, #96]	; (8001b20 <HAL_InitTick+0xd8>)
 8001ac0:	f001 f99c 	bl	8002dfc <HAL_TIM_Base_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d11b      	bne.n	8001b0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001ad2:	4813      	ldr	r0, [pc, #76]	; (8001b20 <HAL_InitTick+0xd8>)
 8001ad4:	f001 f9e2 	bl	8002e9c <HAL_TIM_Base_Start_IT>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d111      	bne.n	8001b0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ae6:	2019      	movs	r0, #25
 8001ae8:	f000 fa92 	bl	8002010 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	d808      	bhi.n	8001b04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001af2:	2200      	movs	r2, #0
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	2019      	movs	r0, #25
 8001af8:	f000 fa6e 	bl	8001fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_InitTick+0xe0>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e002      	b.n	8001b0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3730      	adds	r7, #48	; 0x30
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	431bde83 	.word	0x431bde83
 8001b20:	200002f4 	.word	0x200002f4
 8001b24:	40010000 	.word	0x40010000
 8001b28:	20000008 	.word	0x20000008

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <NMI_Handler+0x4>

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <MemManage_Handler+0x4>

08001b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <TIM1_UP_IRQHandler+0x10>)
 8001b5e:	f001 f9eb 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200002f4 	.word	0x200002f4

08001b6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint8_t data[2];
	HAL_UART_Receive_IT(&huart1, data, 1);
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2201      	movs	r2, #1
 8001b76:	4619      	mov	r1, r3
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <USART1_IRQHandler+0x38>)
 8001b7a:	f001 febc 	bl	80038f6 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, data, 1, 500);
 8001b7e:	1d39      	adds	r1, r7, #4
 8001b80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b84:	2201      	movs	r2, #1
 8001b86:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <USART1_IRQHandler+0x3c>)
 8001b88:	f001 fd81 	bl	800368e <HAL_UART_Transmit>

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	4807      	ldr	r0, [pc, #28]	; (8001bac <USART1_IRQHandler+0x40>)
 8001b90:	f000 fc83 	bl	800249a <HAL_GPIO_TogglePin>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <USART1_IRQHandler+0x38>)
 8001b96:	f001 fedf 	bl	8003958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000258 	.word	0x20000258
 8001ba8:	2000029c 	.word	0x2000029c
 8001bac:	40020000 	.word	0x40020000

08001bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <USART2_IRQHandler+0x18>)
 8001bb8:	f000 fc6f 	bl	800249a <HAL_GPIO_TogglePin>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <USART2_IRQHandler+0x1c>)
 8001bbe:	f001 fecb 	bl	8003958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	2000029c 	.word	0x2000029c

08001bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
	return 1;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_kill>:

int _kill(int pid, int sig)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bea:	f005 fc0b 	bl	8007404 <__errno>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2216      	movs	r2, #22
 8001bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_exit>:

void _exit (int status)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe7 	bl	8001be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c12:	e7fe      	b.n	8001c12 <_exit+0x12>

08001c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e00a      	b.n	8001c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c26:	f3af 8000 	nop.w
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf0      	blt.n	8001c26 <_read+0x12>
	}

return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e009      	b.n	8001c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dbf1      	blt.n	8001c60 <_write+0x12>
	}
	return len;
 8001c7c:	687b      	ldr	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_close>:

int _close(int file)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cae:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_isatty>:

int _isatty(int file)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f005 fb70 	bl	8007404 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20008000 	.word	0x20008000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	2000033c 	.word	0x2000033c
 8001d58:	20004d68 	.word	0x20004d68

08001d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <SystemInit+0x20>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <SystemInit+0x20>)
 8001d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <tests>:
 *      Author: Victor Lesne
 */
#include "tests.h"


void tests(void){
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	//test_fcts_annexes_calcSeg();
	//test_masque();
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d94:	480d      	ldr	r0, [pc, #52]	; (8001dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d96:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dac:	4c0b      	ldr	r4, [pc, #44]	; (8001ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dba:	f7ff ffcf 	bl	8001d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f005 fc1d 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc2:	f7ff fabb 	bl	800133c <main>
  bx  lr    
 8001dc6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001dd4:	0800ba80 	.word	0x0800ba80
  ldr r2, =_sbss
 8001dd8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ddc:	20004d64 	.word	0x20004d64

08001de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC_IRQHandler>
	...

08001de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_Init+0x40>)
 8001dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <HAL_Init+0x40>)
 8001dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_Init+0x40>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 f8d8 	bl	8001fc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e12:	200f      	movs	r0, #15
 8001e14:	f7ff fe18 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e18:	f7ff fd3c 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023c00 	.word	0x40023c00

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x20>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x24>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_IncTick+0x24>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	2000000c 	.word	0x2000000c
 8001e4c:	20000340 	.word	0x20000340

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000340 	.word	0x20000340

08001e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e84:	4013      	ands	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9a:	4a04      	ldr	r2, [pc, #16]	; (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	60d3      	str	r3, [r2, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f003 0307 	and.w	r3, r3, #7
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	db0b      	blt.n	8001ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	4907      	ldr	r1, [pc, #28]	; (8001f04 <__NVIC_EnableIRQ+0x38>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	2001      	movs	r0, #1
 8001eee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000e100 	.word	0xe000e100

08001f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	6039      	str	r1, [r7, #0]
 8001f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db0a      	blt.n	8001f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	490c      	ldr	r1, [pc, #48]	; (8001f54 <__NVIC_SetPriority+0x4c>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	0112      	lsls	r2, r2, #4
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f30:	e00a      	b.n	8001f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4908      	ldr	r1, [pc, #32]	; (8001f58 <__NVIC_SetPriority+0x50>)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	3b04      	subs	r3, #4
 8001f40:	0112      	lsls	r2, r2, #4
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	440b      	add	r3, r1
 8001f46:	761a      	strb	r2, [r3, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000e100 	.word	0xe000e100
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f1c3 0307 	rsb	r3, r3, #7
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	bf28      	it	cs
 8001f7a:	2304      	movcs	r3, #4
 8001f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d902      	bls.n	8001f8c <NVIC_EncodePriority+0x30>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3b03      	subs	r3, #3
 8001f8a:	e000      	b.n	8001f8e <NVIC_EncodePriority+0x32>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43d9      	mvns	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	4313      	orrs	r3, r2
         );
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff4c 	bl	8001e68 <__NVIC_SetPriorityGrouping>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fea:	f7ff ff61 	bl	8001eb0 <__NVIC_GetPriorityGrouping>
 8001fee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	6978      	ldr	r0, [r7, #20]
 8001ff6:	f7ff ffb1 	bl	8001f5c <NVIC_EncodePriority>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff80 	bl	8001f08 <__NVIC_SetPriority>
}
 8002008:	bf00      	nop
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff54 	bl	8001ecc <__NVIC_EnableIRQ>
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800203a:	f7ff ff09 	bl	8001e50 <HAL_GetTick>
 800203e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d008      	beq.n	800205e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e052      	b.n	8002104 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0216 	bic.w	r2, r2, #22
 800206c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800207c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <HAL_DMA_Abort+0x62>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0208 	bic.w	r2, r2, #8
 800209c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ae:	e013      	b.n	80020d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020b0:	f7ff fece 	bl	8001e50 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d90c      	bls.n	80020d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2203      	movs	r2, #3
 80020c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e015      	b.n	8002104 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1e4      	bne.n	80020b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	223f      	movs	r2, #63	; 0x3f
 80020ec:	409a      	lsls	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d004      	beq.n	800212a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e00c      	b.n	8002144 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2205      	movs	r2, #5
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0201 	bic.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e14d      	b.n	8002408 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 813c 	bne.w	8002402 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d005      	beq.n	80021a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d130      	bne.n	8002204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0201 	and.w	r2, r3, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b03      	cmp	r3, #3
 800220e:	d017      	beq.n	8002240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8096 	beq.w	8002402 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b51      	ldr	r3, [pc, #324]	; (8002420 <HAL_GPIO_Init+0x2d0>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a50      	ldr	r2, [pc, #320]	; (8002420 <HAL_GPIO_Init+0x2d0>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b4e      	ldr	r3, [pc, #312]	; (8002420 <HAL_GPIO_Init+0x2d0>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f2:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <HAL_GPIO_Init+0x2d4>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a43      	ldr	r2, [pc, #268]	; (8002428 <HAL_GPIO_Init+0x2d8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x1ea>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a42      	ldr	r2, [pc, #264]	; (800242c <HAL_GPIO_Init+0x2dc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x1e6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a41      	ldr	r2, [pc, #260]	; (8002430 <HAL_GPIO_Init+0x2e0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x1e2>
 800232e:	2302      	movs	r3, #2
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x1ec>
 8002332:	2307      	movs	r3, #7
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x1ec>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x1ec>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	; (8002424 <HAL_GPIO_Init+0x2d4>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_GPIO_Init+0x2e4>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237e:	4a2d      	ldr	r2, [pc, #180]	; (8002434 <HAL_GPIO_Init+0x2e4>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_GPIO_Init+0x2e4>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a8:	4a22      	ldr	r2, [pc, #136]	; (8002434 <HAL_GPIO_Init+0x2e4>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_GPIO_Init+0x2e4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_GPIO_Init+0x2e4>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_GPIO_Init+0x2e4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_GPIO_Init+0x2e4>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f aeae 	bls.w	800216c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40013c00 	.word	0x40013c00

08002438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e001      	b.n	800245a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
 8002474:	4613      	mov	r3, r2
 8002476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002478:	787b      	ldrb	r3, [r7, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002484:	e003      	b.n	800248e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002486:	887b      	ldrh	r3, [r7, #2]
 8002488:	041a      	lsls	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	619a      	str	r2, [r3, #24]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ac:	887a      	ldrh	r2, [r7, #2]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	041a      	lsls	r2, r3, #16
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	400b      	ands	r3, r1
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	619a      	str	r2, [r3, #24]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0cc      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d90c      	bls.n	800250c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b65      	ldr	r3, [pc, #404]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0b8      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800252e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	494d      	ldr	r1, [pc, #308]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d044      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d119      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d003      	beq.n	800258e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258a:	2b03      	cmp	r3, #3
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e067      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 0203 	bic.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4934      	ldr	r1, [pc, #208]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c0:	f7ff fc46 	bl	8001e50 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7ff fc42 	bl	8001e50 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e04f      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 020c 	and.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1eb      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d20c      	bcs.n	8002618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e032      	b.n	800267e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4916      	ldr	r1, [pc, #88]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002656:	f000 f821 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800265a:	4602      	mov	r2, r0
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	490a      	ldr	r1, [pc, #40]	; (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	5ccb      	ldrb	r3, [r1, r3]
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff f9e6 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00
 800268c:	40023800 	.word	0x40023800
 8002690:	0800b4a4 	.word	0x0800b4a4
 8002694:	20000004 	.word	0x20000004
 8002698:	20000008 	.word	0x20000008

0800269c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a0:	b090      	sub	sp, #64	; 0x40
 80026a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
 80026a8:	2300      	movs	r3, #0
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ac:	2300      	movs	r3, #0
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b4:	4b59      	ldr	r3, [pc, #356]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d00d      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0x40>
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	f200 80a1 	bhi.w	8002808 <HAL_RCC_GetSysClockFreq+0x16c>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x34>
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d003      	beq.n	80026d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ce:	e09b      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_GetSysClockFreq+0x184>)
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80026d4:	e09b      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026d6:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_RCC_GetSysClockFreq+0x188>)
 80026d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026da:	e098      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026dc:	4b4f      	ldr	r3, [pc, #316]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026e6:	4b4d      	ldr	r3, [pc, #308]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d028      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f2:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	099b      	lsrs	r3, r3, #6
 80026f8:	2200      	movs	r2, #0
 80026fa:	623b      	str	r3, [r7, #32]
 80026fc:	627a      	str	r2, [r7, #36]	; 0x24
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002704:	2100      	movs	r1, #0
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_GetSysClockFreq+0x188>)
 8002708:	fb03 f201 	mul.w	r2, r3, r1
 800270c:	2300      	movs	r3, #0
 800270e:	fb00 f303 	mul.w	r3, r0, r3
 8002712:	4413      	add	r3, r2
 8002714:	4a43      	ldr	r2, [pc, #268]	; (8002824 <HAL_RCC_GetSysClockFreq+0x188>)
 8002716:	fba0 1202 	umull	r1, r2, r0, r2
 800271a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800271c:	460a      	mov	r2, r1
 800271e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002722:	4413      	add	r3, r2
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002728:	2200      	movs	r2, #0
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	61fa      	str	r2, [r7, #28]
 800272e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002732:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002736:	f7fe faa7 	bl	8000c88 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4613      	mov	r3, r2
 8002740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002742:	e053      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002744:	4b35      	ldr	r3, [pc, #212]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	2200      	movs	r2, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	617a      	str	r2, [r7, #20]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002756:	f04f 0b00 	mov.w	fp, #0
 800275a:	4652      	mov	r2, sl
 800275c:	465b      	mov	r3, fp
 800275e:	f04f 0000 	mov.w	r0, #0
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	0159      	lsls	r1, r3, #5
 8002768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276c:	0150      	lsls	r0, r2, #5
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	ebb2 080a 	subs.w	r8, r2, sl
 8002776:	eb63 090b 	sbc.w	r9, r3, fp
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002786:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800278a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800278e:	ebb2 0408 	subs.w	r4, r2, r8
 8002792:	eb63 0509 	sbc.w	r5, r3, r9
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	00eb      	lsls	r3, r5, #3
 80027a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a4:	00e2      	lsls	r2, r4, #3
 80027a6:	4614      	mov	r4, r2
 80027a8:	461d      	mov	r5, r3
 80027aa:	eb14 030a 	adds.w	r3, r4, sl
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	eb45 030b 	adc.w	r3, r5, fp
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c2:	4629      	mov	r1, r5
 80027c4:	028b      	lsls	r3, r1, #10
 80027c6:	4621      	mov	r1, r4
 80027c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027cc:	4621      	mov	r1, r4
 80027ce:	028a      	lsls	r2, r1, #10
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	2200      	movs	r2, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	60fa      	str	r2, [r7, #12]
 80027dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027e0:	f7fe fa52 	bl	8000c88 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_GetSysClockFreq+0x180>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	3301      	adds	r3, #1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80027fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002806:	e002      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetSysClockFreq+0x184>)
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800280c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002810:	4618      	mov	r0, r3
 8002812:	3740      	adds	r7, #64	; 0x40
 8002814:	46bd      	mov	sp, r7
 8002816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	00f42400 	.word	0x00f42400
 8002824:	017d7840 	.word	0x017d7840

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_GetHCLKFreq+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002844:	f7ff fff0 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0a9b      	lsrs	r3, r3, #10
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	0800b4b4 	.word	0x0800b4b4

08002868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800286c:	f7ff ffdc 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0b5b      	lsrs	r3, r3, #13
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCC_GetPCLK2Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	0800b4b4 	.word	0x0800b4b4

08002890 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	220f      	movs	r2, #15
 800289e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_RCC_GetClockConfig+0x5c>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0203 	and.w	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_RCC_GetClockConfig+0x5c>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_RCC_GetClockConfig+0x5c>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_RCC_GetClockConfig+0x5c>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	08db      	lsrs	r3, r3, #3
 80028ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_RCC_GetClockConfig+0x60>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0207 	and.w	r2, r3, #7
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	601a      	str	r2, [r3, #0]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e273      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d075      	beq.n	80029fe <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002912:	4b88      	ldr	r3, [pc, #544]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d00c      	beq.n	8002938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291e:	4b85      	ldr	r3, [pc, #532]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002926:	2b08      	cmp	r3, #8
 8002928:	d112      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292a:	4b82      	ldr	r3, [pc, #520]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002936:	d10b      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	4b7e      	ldr	r3, [pc, #504]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05b      	beq.n	80029fc <HAL_RCC_OscConfig+0x108>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d157      	bne.n	80029fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e24e      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002958:	d106      	bne.n	8002968 <HAL_RCC_OscConfig+0x74>
 800295a:	4b76      	ldr	r3, [pc, #472]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a75      	ldr	r2, [pc, #468]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e01d      	b.n	80029a4 <HAL_RCC_OscConfig+0xb0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x98>
 8002972:	4b70      	ldr	r3, [pc, #448]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6f      	ldr	r2, [pc, #444]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	4b6d      	ldr	r3, [pc, #436]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a6c      	ldr	r2, [pc, #432]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0xb0>
 800298c:	4b69      	ldr	r3, [pc, #420]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a68      	ldr	r2, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4b66      	ldr	r3, [pc, #408]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a65      	ldr	r2, [pc, #404]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 800299e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7ff fa50 	bl	8001e50 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b4:	f7ff fa4c 	bl	8001e50 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e213      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b5b      	ldr	r3, [pc, #364]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0xc0>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7ff fa3c 	bl	8001e50 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029dc:	f7ff fa38 	bl	8001e50 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1ff      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	4b51      	ldr	r3, [pc, #324]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0xe8>
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d063      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a16:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d11c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a22:	4b44      	ldr	r3, [pc, #272]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d116      	bne.n	8002a5c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_RCC_OscConfig+0x152>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e1d3      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a46:	4b3b      	ldr	r3, [pc, #236]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4937      	ldr	r1, [pc, #220]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5a:	e03a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a64:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCC_OscConfig+0x244>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7ff f9f1 	bl	8001e50 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a72:	f7ff f9ed 	bl	8001e50 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e1b4      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4925      	ldr	r1, [pc, #148]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
 8002aa4:	e015      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa6:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_RCC_OscConfig+0x244>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff f9d0 	bl	8001e50 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7ff f9cc 	bl	8001e50 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e193      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d036      	beq.n	8002b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_RCC_OscConfig+0x248>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7ff f9b0 	bl	8001e50 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af4:	f7ff f9ac 	bl	8001e50 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e173      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_OscConfig+0x240>)
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x200>
 8002b12:	e01b      	b.n	8002b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_OscConfig+0x248>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7ff f999 	bl	8001e50 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	e00e      	b.n	8002b40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b22:	f7ff f995 	bl	8001e50 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d907      	bls.n	8002b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e15c      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470000 	.word	0x42470000
 8002b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	4b8a      	ldr	r3, [pc, #552]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ea      	bne.n	8002b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8097 	beq.w	8002c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5e:	4b83      	ldr	r3, [pc, #524]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	4b7f      	ldr	r3, [pc, #508]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a7e      	ldr	r2, [pc, #504]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b7c      	ldr	r3, [pc, #496]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <HAL_RCC_OscConfig+0x47c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d118      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x47c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a75      	ldr	r2, [pc, #468]	; (8002d70 <HAL_RCC_OscConfig+0x47c>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7ff f955 	bl	8001e50 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7ff f951 	bl	8001e50 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e118      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b6c      	ldr	r3, [pc, #432]	; (8002d70 <HAL_RCC_OscConfig+0x47c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x2ea>
 8002bd0:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	4a65      	ldr	r2, [pc, #404]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6713      	str	r3, [r2, #112]	; 0x70
 8002bdc:	e01c      	b.n	8002c18 <HAL_RCC_OscConfig+0x324>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x30c>
 8002be6:	4b61      	ldr	r3, [pc, #388]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a60      	ldr	r2, [pc, #384]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf2:	4b5e      	ldr	r3, [pc, #376]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a5d      	ldr	r2, [pc, #372]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0x324>
 8002c00:	4b5a      	ldr	r3, [pc, #360]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a59      	ldr	r2, [pc, #356]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a56      	ldr	r2, [pc, #344]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d015      	beq.n	8002c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7ff f916 	bl	8001e50 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7ff f912 	bl	8001e50 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0d7      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3e:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0ee      	beq.n	8002c28 <HAL_RCC_OscConfig+0x334>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7ff f900 	bl	8001e50 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7ff f8fc 	bl	8001e50 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0c1      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6a:	4b40      	ldr	r3, [pc, #256]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1ee      	bne.n	8002c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80ad 	beq.w	8002dec <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c92:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d060      	beq.n	8002d60 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d145      	bne.n	8002d32 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca6:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <HAL_RCC_OscConfig+0x480>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7ff f8d0 	bl	8001e50 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7ff f8cc 	bl	8001e50 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e093      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	019b      	lsls	r3, r3, #6
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	3b01      	subs	r3, #1
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	071b      	lsls	r3, r3, #28
 8002cfe:	491b      	ldr	r1, [pc, #108]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <HAL_RCC_OscConfig+0x480>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7ff f8a1 	bl	8001e50 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d12:	f7ff f89d 	bl	8001e50 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e064      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x41e>
 8002d30:	e05c      	b.n	8002dec <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_RCC_OscConfig+0x480>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7ff f88a 	bl	8001e50 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d40:	f7ff f886 	bl	8001e50 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04d      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_OscConfig+0x478>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x44c>
 8002d5e:	e045      	b.n	8002dec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e040      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40007000 	.word	0x40007000
 8002d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d030      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d129      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d122      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d119      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d10f      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800

08002dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e041      	b.n	8002e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fd62 	bl	80018ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f000 fa74 	bl	8003328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d001      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e035      	b.n	8002f20 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <HAL_TIM_Base_Start_IT+0x90>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_TIM_Base_Start_IT+0x4e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_TIM_Base_Start_IT+0x94>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_TIM_Base_Start_IT+0x4e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_TIM_Base_Start_IT+0x98>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d111      	bne.n	8002f0e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b06      	cmp	r3, #6
 8002efa:	d010      	beq.n	8002f1e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0c:	e007      	b.n	8002f1e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	40000c00 	.word	0x40000c00
 8002f34:	40014000 	.word	0x40014000

08002f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d122      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d11b      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0202 	mvn.w	r2, #2
 8002f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9b5 	bl	80032ea <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9a7 	bl	80032d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f9b8 	bl	80032fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0204 	mvn.w	r2, #4
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f98b 	bl	80032ea <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f97d 	bl	80032d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f98e 	bl	80032fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b08      	cmp	r3, #8
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0208 	mvn.w	r2, #8
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2204      	movs	r2, #4
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f961 	bl	80032ea <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f953 	bl	80032d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f964 	bl	80032fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b10      	cmp	r3, #16
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b10      	cmp	r3, #16
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0210 	mvn.w	r2, #16
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2208      	movs	r2, #8
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f937 	bl	80032ea <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f929 	bl	80032d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f93a 	bl	80032fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0201 	mvn.w	r2, #1
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe fbd4 	bl	8001864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d10e      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d107      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fa7c 	bl	80035e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b40      	cmp	r3, #64	; 0x40
 80030f4:	d10e      	bne.n	8003114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d107      	bne.n	8003114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f8ff 	bl	8003312 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b20      	cmp	r3, #32
 8003120:	d10e      	bne.n	8003140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b20      	cmp	r3, #32
 800312e:	d107      	bne.n	8003140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0220 	mvn.w	r2, #32
 8003138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fa46 	bl	80035cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_TIM_ConfigClockSource+0x1c>
 8003160:	2302      	movs	r3, #2
 8003162:	e0b4      	b.n	80032ce <HAL_TIM_ConfigClockSource+0x186>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800318a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319c:	d03e      	beq.n	800321c <HAL_TIM_ConfigClockSource+0xd4>
 800319e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a2:	f200 8087 	bhi.w	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	f000 8086 	beq.w	80032ba <HAL_TIM_ConfigClockSource+0x172>
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b2:	d87f      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b70      	cmp	r3, #112	; 0x70
 80031b6:	d01a      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0xa6>
 80031b8:	2b70      	cmp	r3, #112	; 0x70
 80031ba:	d87b      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b60      	cmp	r3, #96	; 0x60
 80031be:	d050      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x11a>
 80031c0:	2b60      	cmp	r3, #96	; 0x60
 80031c2:	d877      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b50      	cmp	r3, #80	; 0x50
 80031c6:	d03c      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0xfa>
 80031c8:	2b50      	cmp	r3, #80	; 0x50
 80031ca:	d873      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	d058      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x13a>
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d86f      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b30      	cmp	r3, #48	; 0x30
 80031d6:	d064      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15a>
 80031d8:	2b30      	cmp	r3, #48	; 0x30
 80031da:	d86b      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d060      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15a>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d867      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d05c      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15a>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d05a      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x15a>
 80031ec:	e062      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6899      	ldr	r1, [r3, #8]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f000 f96b 	bl	80034d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	609a      	str	r2, [r3, #8]
      break;
 800321a:	e04f      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6899      	ldr	r1, [r3, #8]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f000 f954 	bl	80034d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800323e:	609a      	str	r2, [r3, #8]
      break;
 8003240:	e03c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	461a      	mov	r2, r3
 8003250:	f000 f8c8 	bl	80033e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2150      	movs	r1, #80	; 0x50
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f921 	bl	80034a2 <TIM_ITRx_SetConfig>
      break;
 8003260:	e02c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	461a      	mov	r2, r3
 8003270:	f000 f8e7 	bl	8003442 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2160      	movs	r1, #96	; 0x60
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f911 	bl	80034a2 <TIM_ITRx_SetConfig>
      break;
 8003280:	e01c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	461a      	mov	r2, r3
 8003290:	f000 f8a8 	bl	80033e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2140      	movs	r1, #64	; 0x40
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f901 	bl	80034a2 <TIM_ITRx_SetConfig>
      break;
 80032a0:	e00c      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f000 f8f8 	bl	80034a2 <TIM_ITRx_SetConfig>
      break;
 80032b2:	e003      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
      break;
 80032b8:	e000      	b.n	80032bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a26      	ldr	r2, [pc, #152]	; (80033d4 <TIM_Base_SetConfig+0xac>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x20>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a25      	ldr	r2, [pc, #148]	; (80033d8 <TIM_Base_SetConfig+0xb0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d108      	bne.n	800335a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <TIM_Base_SetConfig+0xac>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00b      	beq.n	800337a <TIM_Base_SetConfig+0x52>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <TIM_Base_SetConfig+0xb0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <TIM_Base_SetConfig+0x52>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <TIM_Base_SetConfig+0xb4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <TIM_Base_SetConfig+0x52>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <TIM_Base_SetConfig+0xb8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d108      	bne.n	800338c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <TIM_Base_SetConfig+0xac>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d103      	bne.n	80033c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	615a      	str	r2, [r3, #20]
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40000c00 	.word	0x40000c00
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014800 	.word	0x40014800

080033e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f023 0201 	bic.w	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800340e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 030a 	bic.w	r3, r3, #10
 8003420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003442:	b480      	push	{r7}
 8003444:	b087      	sub	sp, #28
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f023 0210 	bic.w	r2, r3, #16
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800346c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	031b      	lsls	r3, r3, #12
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800347e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b085      	sub	sp, #20
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	f043 0307 	orr.w	r3, r3, #7
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	609a      	str	r2, [r3, #8]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	021a      	lsls	r2, r3, #8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	609a      	str	r2, [r3, #8]
}
 800350c:	bf00      	nop
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800352c:	2302      	movs	r3, #2
 800352e:	e041      	b.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a11      	ldr	r2, [pc, #68]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d10c      	bne.n	80035a2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	4313      	orrs	r3, r2
 8003598:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40000c00 	.word	0x40000c00
 80035c8:	40014000 	.word	0x40014000

080035cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e03f      	b.n	8003686 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fe f988 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2224      	movs	r2, #36	; 0x24
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fe8b 	bl	8004354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800364c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800365c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800366c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b08a      	sub	sp, #40	; 0x28
 8003692:	af02      	add	r7, sp, #8
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d17c      	bne.n	80037a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_UART_Transmit+0x2c>
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e075      	b.n	80037aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_UART_Transmit+0x3e>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e06e      	b.n	80037aa <HAL_UART_Transmit+0x11c>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2221      	movs	r2, #33	; 0x21
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e2:	f7fe fbb5 	bl	8001e50 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fc:	d108      	bne.n	8003710 <HAL_UART_Transmit+0x82>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d104      	bne.n	8003710 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	e003      	b.n	8003718 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003714:	2300      	movs	r3, #0
 8003716:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003720:	e02a      	b.n	8003778 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2200      	movs	r2, #0
 800372a:	2180      	movs	r1, #128	; 0x80
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fbcb 	bl	8003ec8 <UART_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e036      	b.n	80037aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10b      	bne.n	800375a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	3302      	adds	r3, #2
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	e007      	b.n	800376a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3301      	adds	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1cf      	bne.n	8003722 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2200      	movs	r2, #0
 800378a:	2140      	movs	r1, #64	; 0x40
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fb9b 	bl	8003ec8 <UART_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e006      	b.n	80037aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b08a      	sub	sp, #40	; 0x28
 80037b6:	af02      	add	r7, sp, #8
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	f040 808c 	bne.w	80038ec <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_UART_Receive+0x2e>
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e084      	b.n	80038ee <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Receive+0x40>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e07d      	b.n	80038ee <HAL_UART_Receive+0x13c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2222      	movs	r2, #34	; 0x22
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800380e:	f7fe fb1f 	bl	8001e50 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003828:	d108      	bne.n	800383c <HAL_UART_Receive+0x8a>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	e003      	b.n	8003844 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800384c:	e043      	b.n	80038d6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2200      	movs	r2, #0
 8003856:	2120      	movs	r1, #32
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fb35 	bl	8003ec8 <UART_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e042      	b.n	80038ee <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10c      	bne.n	8003888 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387a:	b29a      	uxth	r2, r3
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	3302      	adds	r3, #2
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	e01f      	b.n	80038c8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003890:	d007      	beq.n	80038a2 <HAL_UART_Receive+0xf0>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_UART_Receive+0xfe>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e008      	b.n	80038c2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3301      	adds	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1b6      	bne.n	800384e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	4613      	mov	r3, r2
 8003902:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b20      	cmp	r3, #32
 800390e:	d11d      	bne.n	800394c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Receive_IT+0x26>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e016      	b.n	800394e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_UART_Receive_IT+0x38>
 800392a:	2302      	movs	r3, #2
 800392c:	e00f      	b.n	800394e <HAL_UART_Receive_IT+0x58>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	461a      	mov	r2, r3
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fb2e 	bl	8003fa4 <UART_Start_Receive_IT>
 8003948:	4603      	mov	r3, r0
 800394a:	e000      	b.n	800394e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b0ba      	sub	sp, #232	; 0xe8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_UART_IRQHandler+0x66>
 80039aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fc11 	bl	80041de <UART_Receive_IT>
      return;
 80039bc:	e256      	b.n	8003e6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80de 	beq.w	8003b84 <HAL_UART_IRQHandler+0x22c>
 80039c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80d1 	beq.w	8003b84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_UART_IRQHandler+0xae>
 80039ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_UART_IRQHandler+0xd2>
 8003a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f043 0202 	orr.w	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_UART_IRQHandler+0xf6>
 8003a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f043 0204 	orr.w	r2, r3, #4
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d011      	beq.n	8003a7e <HAL_UART_IRQHandler+0x126>
 8003a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0208 	orr.w	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 81ed 	beq.w	8003e62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x14e>
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fb9c 	bl	80041de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x17a>
 8003aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d04f      	beq.n	8003b72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 faa4 	bl	8004020 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b40      	cmp	r3, #64	; 0x40
 8003ae4:	d141      	bne.n	8003b6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3314      	adds	r3, #20
 8003aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3314      	adds	r3, #20
 8003b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1d9      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d013      	beq.n	8003b62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	4a7d      	ldr	r2, [pc, #500]	; (8003d34 <HAL_UART_IRQHandler+0x3dc>)
 8003b40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fe fae0 	bl	800210c <HAL_DMA_Abort_IT>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	e00e      	b.n	8003b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f99a 	bl	8003e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b68:	e00a      	b.n	8003b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f996 	bl	8003e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	e006      	b.n	8003b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f992 	bl	8003e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b7e:	e170      	b.n	8003e62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b80:	bf00      	nop
    return;
 8003b82:	e16e      	b.n	8003e62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 814a 	bne.w	8003e22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8143 	beq.w	8003e22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 813c 	beq.w	8003e22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	f040 80b4 	bne.w	8003d38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8140 	beq.w	8003e66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	f080 8139 	bcs.w	8003e66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c06:	f000 8088 	beq.w	8003d1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1d9      	bne.n	8003c0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e1      	bne.n	8003c56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e3      	bne.n	8003c92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cea:	f023 0310 	bic.w	r3, r3, #16
 8003cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e3      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe f989 	bl	800202c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8c0 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d30:	e099      	b.n	8003e66 <HAL_UART_IRQHandler+0x50e>
 8003d32:	bf00      	nop
 8003d34:	080040e7 	.word	0x080040e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 808b 	beq.w	8003e6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8086 	beq.w	8003e6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d82:	647a      	str	r2, [r7, #68]	; 0x44
 8003d84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e3      	bne.n	8003d5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	623b      	str	r3, [r7, #32]
   return(result);
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dba:	633a      	str	r2, [r7, #48]	; 0x30
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e3      	bne.n	8003d96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0310 	bic.w	r3, r3, #16
 8003df2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e00:	61fa      	str	r2, [r7, #28]
 8003e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	69b9      	ldr	r1, [r7, #24]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e3      	bne.n	8003ddc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f848 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e20:	e023      	b.n	8003e6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_UART_IRQHandler+0x4ea>
 8003e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f967 	bl	800410e <UART_Transmit_IT>
    return;
 8003e40:	e014      	b.n	8003e6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00e      	beq.n	8003e6c <HAL_UART_IRQHandler+0x514>
 8003e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9a7 	bl	80041ae <UART_EndTransmit_IT>
    return;
 8003e60:	e004      	b.n	8003e6c <HAL_UART_IRQHandler+0x514>
    return;
 8003e62:	bf00      	nop
 8003e64:	e002      	b.n	8003e6c <HAL_UART_IRQHandler+0x514>
      return;
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <HAL_UART_IRQHandler+0x514>
      return;
 8003e6a:	bf00      	nop
  }
}
 8003e6c:	37e8      	adds	r7, #232	; 0xe8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop

08003e74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b090      	sub	sp, #64	; 0x40
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed8:	e050      	b.n	8003f7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d04c      	beq.n	8003f7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ee8:	f7fd ffb2 	bl	8001e50 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d241      	bcs.n	8003f7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	330c      	adds	r3, #12
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f18:	637a      	str	r2, [r7, #52]	; 0x34
 8003f1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e5      	bne.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3314      	adds	r3, #20
 8003f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3314      	adds	r3, #20
 8003f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f4c:	623a      	str	r2, [r7, #32]
 8003f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	69f9      	ldr	r1, [r7, #28]
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e5      	bne.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e00f      	b.n	8003f9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4013      	ands	r3, r2
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	2300      	movne	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d09f      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3740      	adds	r7, #64	; 0x40
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	88fa      	ldrh	r2, [r7, #6]
 8003fbc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2222      	movs	r2, #34	; 0x22
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0220 	orr.w	r2, r2, #32
 8004010:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b095      	sub	sp, #84	; 0x54
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004048:	643a      	str	r2, [r7, #64]	; 0x40
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800404e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e5      	bne.n	8004028 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3314      	adds	r3, #20
 8004062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	61fb      	str	r3, [r7, #28]
   return(result);
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3314      	adds	r3, #20
 800407a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e5      	bne.n	800405c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	2b01      	cmp	r3, #1
 8004096:	d119      	bne.n	80040cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f023 0310 	bic.w	r3, r3, #16
 80040ae:	647b      	str	r3, [r7, #68]	; 0x44
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040b8:	61ba      	str	r2, [r7, #24]
 80040ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6979      	ldr	r1, [r7, #20]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	613b      	str	r3, [r7, #16]
   return(result);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040da:	bf00      	nop
 80040dc:	3754      	adds	r7, #84	; 0x54
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff fecb 	bl	8003e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b21      	cmp	r3, #33	; 0x21
 8004120:	d13e      	bne.n	80041a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412a:	d114      	bne.n	8004156 <UART_Transmit_IT+0x48>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d110      	bne.n	8004156 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004148:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	1c9a      	adds	r2, r3, #2
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	621a      	str	r2, [r3, #32]
 8004154:	e008      	b.n	8004168 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	1c59      	adds	r1, r3, #1
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6211      	str	r1, [r2, #32]
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29b      	uxth	r3, r3
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4619      	mov	r1, r3
 8004176:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10f      	bne.n	800419c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800418a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff fe50 	bl	8003e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b08c      	sub	sp, #48	; 0x30
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b22      	cmp	r3, #34	; 0x22
 80041f0:	f040 80ab 	bne.w	800434a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fc:	d117      	bne.n	800422e <UART_Receive_IT+0x50>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d113      	bne.n	800422e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	b29b      	uxth	r3, r3
 8004218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421c:	b29a      	uxth	r2, r3
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	1c9a      	adds	r2, r3, #2
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	; 0x28
 800422c:	e026      	b.n	800427c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004240:	d007      	beq.n	8004252 <UART_Receive_IT+0x74>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <UART_Receive_IT+0x82>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e008      	b.n	8004272 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426c:	b2da      	uxtb	r2, r3
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29b      	uxth	r3, r3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4619      	mov	r1, r3
 800428a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800428c:	2b00      	cmp	r3, #0
 800428e:	d15a      	bne.n	8004346 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0220 	bic.w	r2, r2, #32
 800429e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d135      	bne.n	800433c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	613b      	str	r3, [r7, #16]
   return(result);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f023 0310 	bic.w	r3, r3, #16
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	623a      	str	r2, [r7, #32]
 80042f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	69f9      	ldr	r1, [r7, #28]
 80042fc:	6a3a      	ldr	r2, [r7, #32]
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	61bb      	str	r3, [r7, #24]
   return(result);
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e5      	bne.n	80042d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b10      	cmp	r3, #16
 8004316:	d10a      	bne.n	800432e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fdbb 	bl	8003eb0 <HAL_UARTEx_RxEventCallback>
 800433a:	e002      	b.n	8004342 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff fda3 	bl	8003e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	e002      	b.n	800434c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e000      	b.n	800434c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
  }
}
 800434c:	4618      	mov	r0, r3
 800434e:	3730      	adds	r7, #48	; 0x30
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004358:	b0c0      	sub	sp, #256	; 0x100
 800435a:	af00      	add	r7, sp, #0
 800435c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	68d9      	ldr	r1, [r3, #12]
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	ea40 0301 	orr.w	r3, r0, r1
 800437c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	431a      	orrs	r2, r3
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	431a      	orrs	r2, r3
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043ac:	f021 010c 	bic.w	r1, r1, #12
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043ba:	430b      	orrs	r3, r1
 80043bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ce:	6999      	ldr	r1, [r3, #24]
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	ea40 0301 	orr.w	r3, r0, r1
 80043da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b8f      	ldr	r3, [pc, #572]	; (8004620 <UART_SetConfig+0x2cc>)
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d005      	beq.n	80043f4 <UART_SetConfig+0xa0>
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b8d      	ldr	r3, [pc, #564]	; (8004624 <UART_SetConfig+0x2d0>)
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d104      	bne.n	80043fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043f4:	f7fe fa38 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 80043f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043fc:	e003      	b.n	8004406 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043fe:	f7fe fa1f 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8004402:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004410:	f040 810c 	bne.w	800462c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004418:	2200      	movs	r2, #0
 800441a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800441e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004422:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004426:	4622      	mov	r2, r4
 8004428:	462b      	mov	r3, r5
 800442a:	1891      	adds	r1, r2, r2
 800442c:	65b9      	str	r1, [r7, #88]	; 0x58
 800442e:	415b      	adcs	r3, r3
 8004430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004432:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004436:	4621      	mov	r1, r4
 8004438:	eb12 0801 	adds.w	r8, r2, r1
 800443c:	4629      	mov	r1, r5
 800443e:	eb43 0901 	adc.w	r9, r3, r1
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800444e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004456:	4690      	mov	r8, r2
 8004458:	4699      	mov	r9, r3
 800445a:	4623      	mov	r3, r4
 800445c:	eb18 0303 	adds.w	r3, r8, r3
 8004460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004464:	462b      	mov	r3, r5
 8004466:	eb49 0303 	adc.w	r3, r9, r3
 800446a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800447a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800447e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004482:	460b      	mov	r3, r1
 8004484:	18db      	adds	r3, r3, r3
 8004486:	653b      	str	r3, [r7, #80]	; 0x50
 8004488:	4613      	mov	r3, r2
 800448a:	eb42 0303 	adc.w	r3, r2, r3
 800448e:	657b      	str	r3, [r7, #84]	; 0x54
 8004490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004494:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004498:	f7fc fbf6 	bl	8000c88 <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4b61      	ldr	r3, [pc, #388]	; (8004628 <UART_SetConfig+0x2d4>)
 80044a2:	fba3 2302 	umull	r2, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	011c      	lsls	r4, r3, #4
 80044aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044bc:	4642      	mov	r2, r8
 80044be:	464b      	mov	r3, r9
 80044c0:	1891      	adds	r1, r2, r2
 80044c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80044c4:	415b      	adcs	r3, r3
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044cc:	4641      	mov	r1, r8
 80044ce:	eb12 0a01 	adds.w	sl, r2, r1
 80044d2:	4649      	mov	r1, r9
 80044d4:	eb43 0b01 	adc.w	fp, r3, r1
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ec:	4692      	mov	sl, r2
 80044ee:	469b      	mov	fp, r3
 80044f0:	4643      	mov	r3, r8
 80044f2:	eb1a 0303 	adds.w	r3, sl, r3
 80044f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044fa:	464b      	mov	r3, r9
 80044fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004500:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004510:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004514:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004518:	460b      	mov	r3, r1
 800451a:	18db      	adds	r3, r3, r3
 800451c:	643b      	str	r3, [r7, #64]	; 0x40
 800451e:	4613      	mov	r3, r2
 8004520:	eb42 0303 	adc.w	r3, r2, r3
 8004524:	647b      	str	r3, [r7, #68]	; 0x44
 8004526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800452a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800452e:	f7fc fbab 	bl	8000c88 <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4611      	mov	r1, r2
 8004538:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <UART_SetConfig+0x2d4>)
 800453a:	fba3 2301 	umull	r2, r3, r3, r1
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2264      	movs	r2, #100	; 0x64
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	1acb      	subs	r3, r1, r3
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800454e:	4b36      	ldr	r3, [pc, #216]	; (8004628 <UART_SetConfig+0x2d4>)
 8004550:	fba3 2302 	umull	r2, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800455c:	441c      	add	r4, r3
 800455e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004568:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800456c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	1891      	adds	r1, r2, r2
 8004576:	63b9      	str	r1, [r7, #56]	; 0x38
 8004578:	415b      	adcs	r3, r3
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004580:	4641      	mov	r1, r8
 8004582:	1851      	adds	r1, r2, r1
 8004584:	6339      	str	r1, [r7, #48]	; 0x30
 8004586:	4649      	mov	r1, r9
 8004588:	414b      	adcs	r3, r1
 800458a:	637b      	str	r3, [r7, #52]	; 0x34
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004598:	4659      	mov	r1, fp
 800459a:	00cb      	lsls	r3, r1, #3
 800459c:	4651      	mov	r1, sl
 800459e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a2:	4651      	mov	r1, sl
 80045a4:	00ca      	lsls	r2, r1, #3
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	4642      	mov	r2, r8
 80045ae:	189b      	adds	r3, r3, r2
 80045b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045b4:	464b      	mov	r3, r9
 80045b6:	460a      	mov	r2, r1
 80045b8:	eb42 0303 	adc.w	r3, r2, r3
 80045bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045d4:	460b      	mov	r3, r1
 80045d6:	18db      	adds	r3, r3, r3
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045da:	4613      	mov	r3, r2
 80045dc:	eb42 0303 	adc.w	r3, r2, r3
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045ea:	f7fc fb4d 	bl	8000c88 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <UART_SetConfig+0x2d4>)
 80045f4:	fba3 1302 	umull	r1, r3, r3, r2
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	2164      	movs	r1, #100	; 0x64
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	3332      	adds	r3, #50	; 0x32
 8004606:	4a08      	ldr	r2, [pc, #32]	; (8004628 <UART_SetConfig+0x2d4>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	f003 0207 	and.w	r2, r3, #7
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4422      	add	r2, r4
 800461a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800461c:	e105      	b.n	800482a <UART_SetConfig+0x4d6>
 800461e:	bf00      	nop
 8004620:	40011000 	.word	0x40011000
 8004624:	40011400 	.word	0x40011400
 8004628:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800462c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004630:	2200      	movs	r2, #0
 8004632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004636:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800463a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800463e:	4642      	mov	r2, r8
 8004640:	464b      	mov	r3, r9
 8004642:	1891      	adds	r1, r2, r2
 8004644:	6239      	str	r1, [r7, #32]
 8004646:	415b      	adcs	r3, r3
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800464e:	4641      	mov	r1, r8
 8004650:	1854      	adds	r4, r2, r1
 8004652:	4649      	mov	r1, r9
 8004654:	eb43 0501 	adc.w	r5, r3, r1
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	00eb      	lsls	r3, r5, #3
 8004662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004666:	00e2      	lsls	r2, r4, #3
 8004668:	4614      	mov	r4, r2
 800466a:	461d      	mov	r5, r3
 800466c:	4643      	mov	r3, r8
 800466e:	18e3      	adds	r3, r4, r3
 8004670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004674:	464b      	mov	r3, r9
 8004676:	eb45 0303 	adc.w	r3, r5, r3
 800467a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800468a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800469a:	4629      	mov	r1, r5
 800469c:	008b      	lsls	r3, r1, #2
 800469e:	4621      	mov	r1, r4
 80046a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a4:	4621      	mov	r1, r4
 80046a6:	008a      	lsls	r2, r1, #2
 80046a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046ac:	f7fc faec 	bl	8000c88 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4b60      	ldr	r3, [pc, #384]	; (8004838 <UART_SetConfig+0x4e4>)
 80046b6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	011c      	lsls	r4, r3, #4
 80046be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	1891      	adds	r1, r2, r2
 80046d6:	61b9      	str	r1, [r7, #24]
 80046d8:	415b      	adcs	r3, r3
 80046da:	61fb      	str	r3, [r7, #28]
 80046dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e0:	4641      	mov	r1, r8
 80046e2:	1851      	adds	r1, r2, r1
 80046e4:	6139      	str	r1, [r7, #16]
 80046e6:	4649      	mov	r1, r9
 80046e8:	414b      	adcs	r3, r1
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046f8:	4659      	mov	r1, fp
 80046fa:	00cb      	lsls	r3, r1, #3
 80046fc:	4651      	mov	r1, sl
 80046fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004702:	4651      	mov	r1, sl
 8004704:	00ca      	lsls	r2, r1, #3
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	4603      	mov	r3, r0
 800470c:	4642      	mov	r2, r8
 800470e:	189b      	adds	r3, r3, r2
 8004710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004714:	464b      	mov	r3, r9
 8004716:	460a      	mov	r2, r1
 8004718:	eb42 0303 	adc.w	r3, r2, r3
 800471c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	67bb      	str	r3, [r7, #120]	; 0x78
 800472a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004738:	4649      	mov	r1, r9
 800473a:	008b      	lsls	r3, r1, #2
 800473c:	4641      	mov	r1, r8
 800473e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004742:	4641      	mov	r1, r8
 8004744:	008a      	lsls	r2, r1, #2
 8004746:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800474a:	f7fc fa9d 	bl	8000c88 <__aeabi_uldivmod>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4b39      	ldr	r3, [pc, #228]	; (8004838 <UART_SetConfig+0x4e4>)
 8004754:	fba3 1302 	umull	r1, r3, r3, r2
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	2164      	movs	r1, #100	; 0x64
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	3332      	adds	r3, #50	; 0x32
 8004766:	4a34      	ldr	r2, [pc, #208]	; (8004838 <UART_SetConfig+0x4e4>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004772:	441c      	add	r4, r3
 8004774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004778:	2200      	movs	r2, #0
 800477a:	673b      	str	r3, [r7, #112]	; 0x70
 800477c:	677a      	str	r2, [r7, #116]	; 0x74
 800477e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004782:	4642      	mov	r2, r8
 8004784:	464b      	mov	r3, r9
 8004786:	1891      	adds	r1, r2, r2
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	415b      	adcs	r3, r3
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004792:	4641      	mov	r1, r8
 8004794:	1851      	adds	r1, r2, r1
 8004796:	6039      	str	r1, [r7, #0]
 8004798:	4649      	mov	r1, r9
 800479a:	414b      	adcs	r3, r1
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047aa:	4659      	mov	r1, fp
 80047ac:	00cb      	lsls	r3, r1, #3
 80047ae:	4651      	mov	r1, sl
 80047b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b4:	4651      	mov	r1, sl
 80047b6:	00ca      	lsls	r2, r1, #3
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	4603      	mov	r3, r0
 80047be:	4642      	mov	r2, r8
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c4:	464b      	mov	r3, r9
 80047c6:	460a      	mov	r2, r1
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	663b      	str	r3, [r7, #96]	; 0x60
 80047d8:	667a      	str	r2, [r7, #100]	; 0x64
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047e6:	4649      	mov	r1, r9
 80047e8:	008b      	lsls	r3, r1, #2
 80047ea:	4641      	mov	r1, r8
 80047ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f0:	4641      	mov	r1, r8
 80047f2:	008a      	lsls	r2, r1, #2
 80047f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047f8:	f7fc fa46 	bl	8000c88 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <UART_SetConfig+0x4e4>)
 8004802:	fba3 1302 	umull	r1, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2164      	movs	r1, #100	; 0x64
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	3332      	adds	r3, #50	; 0x32
 8004814:	4a08      	ldr	r2, [pc, #32]	; (8004838 <UART_SetConfig+0x4e4>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	f003 020f 	and.w	r2, r3, #15
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4422      	add	r2, r4
 8004828:	609a      	str	r2, [r3, #8]
}
 800482a:	bf00      	nop
 800482c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004830:	46bd      	mov	sp, r7
 8004832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004836:	bf00      	nop
 8004838:	51eb851f 	.word	0x51eb851f

0800483c <__NVIC_SetPriority>:
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	6039      	str	r1, [r7, #0]
 8004846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484c:	2b00      	cmp	r3, #0
 800484e:	db0a      	blt.n	8004866 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	b2da      	uxtb	r2, r3
 8004854:	490c      	ldr	r1, [pc, #48]	; (8004888 <__NVIC_SetPriority+0x4c>)
 8004856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485a:	0112      	lsls	r2, r2, #4
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	440b      	add	r3, r1
 8004860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004864:	e00a      	b.n	800487c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	b2da      	uxtb	r2, r3
 800486a:	4908      	ldr	r1, [pc, #32]	; (800488c <__NVIC_SetPriority+0x50>)
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	3b04      	subs	r3, #4
 8004874:	0112      	lsls	r2, r2, #4
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	440b      	add	r3, r1
 800487a:	761a      	strb	r2, [r3, #24]
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	e000e100 	.word	0xe000e100
 800488c:	e000ed00 	.word	0xe000ed00

08004890 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <SysTick_Handler+0x1c>)
 8004896:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004898:	f001 fd28 	bl	80062ec <xTaskGetSchedulerState>
 800489c:	4603      	mov	r3, r0
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d001      	beq.n	80048a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80048a2:	f002 fb11 	bl	8006ec8 <xPortSysTickHandler>
  }
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	e000e010 	.word	0xe000e010

080048b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048b4:	2100      	movs	r1, #0
 80048b6:	f06f 0004 	mvn.w	r0, #4
 80048ba:	f7ff ffbf 	bl	800483c <__NVIC_SetPriority>
#endif
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ca:	f3ef 8305 	mrs	r3, IPSR
 80048ce:	603b      	str	r3, [r7, #0]
  return(result);
 80048d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048d6:	f06f 0305 	mvn.w	r3, #5
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	e00c      	b.n	80048f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048de:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <osKernelInitialize+0x44>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d105      	bne.n	80048f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048e6:	4b08      	ldr	r3, [pc, #32]	; (8004908 <osKernelInitialize+0x44>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	e002      	b.n	80048f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295
 80048f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048f8:	687b      	ldr	r3, [r7, #4]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000344 	.word	0x20000344

0800490c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004912:	f3ef 8305 	mrs	r3, IPSR
 8004916:	603b      	str	r3, [r7, #0]
  return(result);
 8004918:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <osKernelStart+0x1a>
    stat = osErrorISR;
 800491e:	f06f 0305 	mvn.w	r3, #5
 8004922:	607b      	str	r3, [r7, #4]
 8004924:	e010      	b.n	8004948 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <osKernelStart+0x48>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d109      	bne.n	8004942 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800492e:	f7ff ffbf 	bl	80048b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <osKernelStart+0x48>)
 8004934:	2202      	movs	r2, #2
 8004936:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004938:	f001 f87c 	bl	8005a34 <vTaskStartScheduler>
      stat = osOK;
 800493c:	2300      	movs	r3, #0
 800493e:	607b      	str	r3, [r7, #4]
 8004940:	e002      	b.n	8004948 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295
 8004946:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004948:	687b      	ldr	r3, [r7, #4]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000344 	.word	0x20000344

08004958 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b08e      	sub	sp, #56	; 0x38
 800495c:	af04      	add	r7, sp, #16
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004968:	f3ef 8305 	mrs	r3, IPSR
 800496c:	617b      	str	r3, [r7, #20]
  return(result);
 800496e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004970:	2b00      	cmp	r3, #0
 8004972:	d17e      	bne.n	8004a72 <osThreadNew+0x11a>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d07b      	beq.n	8004a72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800497e:	2318      	movs	r3, #24
 8004980:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d045      	beq.n	8004a1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <osThreadNew+0x48>
        name = attr->name;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <osThreadNew+0x6e>
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b38      	cmp	r3, #56	; 0x38
 80049b8:	d805      	bhi.n	80049c6 <osThreadNew+0x6e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <osThreadNew+0x72>
        return (NULL);
 80049c6:	2300      	movs	r3, #0
 80049c8:	e054      	b.n	8004a74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00e      	beq.n	8004a00 <osThreadNew+0xa8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2bbb      	cmp	r3, #187	; 0xbb
 80049e8:	d90a      	bls.n	8004a00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d006      	beq.n	8004a00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <osThreadNew+0xa8>
        mem = 1;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e010      	b.n	8004a22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10c      	bne.n	8004a22 <osThreadNew+0xca>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d108      	bne.n	8004a22 <osThreadNew+0xca>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <osThreadNew+0xca>
          mem = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61bb      	str	r3, [r7, #24]
 8004a1c:	e001      	b.n	8004a22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d110      	bne.n	8004a4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a30:	9202      	str	r2, [sp, #8]
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6a3a      	ldr	r2, [r7, #32]
 8004a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fe0c 	bl	800565c <xTaskCreateStatic>
 8004a44:	4603      	mov	r3, r0
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	e013      	b.n	8004a72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d110      	bne.n	8004a72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	f107 0310 	add.w	r3, r7, #16
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fe57 	bl	8005716 <xTaskCreate>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d001      	beq.n	8004a72 <osThreadNew+0x11a>
            hTask = NULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a72:	693b      	ldr	r3, [r7, #16]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3728      	adds	r7, #40	; 0x28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a84:	f3ef 8305 	mrs	r3, IPSR
 8004a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <osDelay+0x1c>
    stat = osErrorISR;
 8004a90:	f06f 0305 	mvn.w	r3, #5
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	e007      	b.n	8004aa8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 ff92 	bl	80059cc <vTaskDelay>
    }
  }

  return (stat);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4a06      	ldr	r2, [pc, #24]	; (8004ae4 <vApplicationGetIdleTaskMemory+0x30>)
 8004aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2280      	movs	r2, #128	; 0x80
 8004ad0:	601a      	str	r2, [r3, #0]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000348 	.word	0x20000348
 8004ae4:	20000404 	.word	0x20000404

08004ae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8004af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <vApplicationGetTimerTaskMemory+0x30>)
 8004afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b06:	601a      	str	r2, [r3, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	20000604 	.word	0x20000604
 8004b18:	200006c0 	.word	0x200006c0

08004b1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f103 0208 	add.w	r2, r3, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f04f 32ff 	mov.w	r2, #4294967295
 8004b34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f103 0208 	add.w	r2, r3, #8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f103 0208 	add.w	r2, r3, #8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d103      	bne.n	8004bde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e00c      	b.n	8004bf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3308      	adds	r3, #8
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e002      	b.n	8004bec <vListInsert+0x2e>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d2f6      	bcs.n	8004be6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	601a      	str	r2, [r3, #0]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6892      	ldr	r2, [r2, #8]
 8004c46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6852      	ldr	r2, [r2, #4]
 8004c50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d103      	bne.n	8004c64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cae:	f002 f879 	bl	8006da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	441a      	add	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	441a      	add	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	22ff      	movs	r2, #255	; 0xff
 8004cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	22ff      	movs	r2, #255	; 0xff
 8004cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d114      	bne.n	8004d2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01a      	beq.n	8004d42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3310      	adds	r3, #16
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 f929 	bl	8005f68 <xTaskRemoveFromEventList>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d012      	beq.n	8004d42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <xQueueGenericReset+0xcc>)
 8004d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	e009      	b.n	8004d42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3310      	adds	r3, #16
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fef2 	bl	8004b1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3324      	adds	r3, #36	; 0x24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff feed 	bl	8004b1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d42:	f002 f85f 	bl	8006e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d46:	2301      	movs	r3, #1
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	e000ed04 	.word	0xe000ed04

08004d54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08e      	sub	sp, #56	; 0x38
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <xQueueGenericCreateStatic+0x52>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <xQueueGenericCreateStatic+0x56>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <xQueueGenericCreateStatic+0x58>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	623b      	str	r3, [r7, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <xQueueGenericCreateStatic+0x7e>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <xQueueGenericCreateStatic+0x82>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueGenericCreateStatic+0x84>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	61fb      	str	r3, [r7, #28]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004df2:	2350      	movs	r3, #80	; 0x50
 8004df4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d00a      	beq.n	8004e12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	61bb      	str	r3, [r7, #24]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f805 	bl	8004e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3730      	adds	r7, #48	; 0x30
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d103      	bne.n	8004e60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	e002      	b.n	8004e66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e72:	2101      	movs	r1, #1
 8004e74:	69b8      	ldr	r0, [r7, #24]
 8004e76:	f7ff ff05 	bl	8004c84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08e      	sub	sp, #56	; 0x38
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <xQueueGenericSend+0x32>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <xQueueGenericSend+0x40>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <xQueueGenericSend+0x44>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <xQueueGenericSend+0x46>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <xQueueGenericSend+0x60>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d103      	bne.n	8004efa <xQueueGenericSend+0x6e>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <xQueueGenericSend+0x72>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <xQueueGenericSend+0x74>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xQueueGenericSend+0x8e>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	623b      	str	r3, [r7, #32]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f1a:	f001 f9e7 	bl	80062ec <xTaskGetSchedulerState>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <xQueueGenericSend+0x9e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <xQueueGenericSend+0xa2>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <xQueueGenericSend+0xa4>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <xQueueGenericSend+0xbe>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	61fb      	str	r3, [r7, #28]
}
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f4a:	f001 ff2b 	bl	8006da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <xQueueGenericSend+0xd4>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d129      	bne.n	8004fb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f66:	f000 fa0b 	bl	8005380 <prvCopyDataToQueue>
 8004f6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d010      	beq.n	8004f96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	3324      	adds	r3, #36	; 0x24
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fff5 	bl	8005f68 <xTaskRemoveFromEventList>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d013      	beq.n	8004fac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f84:	4b3f      	ldr	r3, [pc, #252]	; (8005084 <xQueueGenericSend+0x1f8>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	e00a      	b.n	8004fac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f9c:	4b39      	ldr	r3, [pc, #228]	; (8005084 <xQueueGenericSend+0x1f8>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fac:	f001 ff2a 	bl	8006e04 <vPortExitCritical>
				return pdPASS;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e063      	b.n	800507c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fba:	f001 ff23 	bl	8006e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e05c      	b.n	800507c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fc8:	f107 0314 	add.w	r3, r7, #20
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 f82f 	bl	8006030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fd6:	f001 ff15 	bl	8006e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fda:	f000 fd9b 	bl	8005b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fde:	f001 fee1 	bl	8006da4 <vPortEnterCritical>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d103      	bne.n	8004ff8 <xQueueGenericSend+0x16c>
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d103      	bne.n	800500e <xQueueGenericSend+0x182>
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800500e:	f001 fef9 	bl	8006e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005012:	1d3a      	adds	r2, r7, #4
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f001 f81e 	bl	800605c <xTaskCheckForTimeOut>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d124      	bne.n	8005070 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005028:	f000 faa2 	bl	8005570 <prvIsQueueFull>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d018      	beq.n	8005064 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	3310      	adds	r3, #16
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4611      	mov	r1, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f000 ff44 	bl	8005ec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005042:	f000 fa2d 	bl	80054a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005046:	f000 fd73 	bl	8005b30 <xTaskResumeAll>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	f47f af7c 	bne.w	8004f4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <xQueueGenericSend+0x1f8>)
 8005054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	e772      	b.n	8004f4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005066:	f000 fa1b 	bl	80054a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800506a:	f000 fd61 	bl	8005b30 <xTaskResumeAll>
 800506e:	e76c      	b.n	8004f4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005072:	f000 fa15 	bl	80054a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005076:	f000 fd5b 	bl	8005b30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800507a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800507c:	4618      	mov	r0, r3
 800507e:	3738      	adds	r7, #56	; 0x38
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b090      	sub	sp, #64	; 0x40
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <xQueueGenericSendFromISR+0x3c>
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <xQueueGenericSendFromISR+0x40>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <xQueueGenericSendFromISR+0x42>
 80050c8:	2300      	movs	r3, #0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d103      	bne.n	80050f2 <xQueueGenericSendFromISR+0x6a>
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <xQueueGenericSendFromISR+0x6e>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <xQueueGenericSendFromISR+0x70>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	623b      	str	r3, [r7, #32]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005112:	f001 ff29 	bl	8006f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005116:	f3ef 8211 	mrs	r2, BASEPRI
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	61fa      	str	r2, [r7, #28]
 800512c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800512e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <xQueueGenericSendFromISR+0xbc>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d12f      	bne.n	80051a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800515a:	f000 f911 	bl	8005380 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800515e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d112      	bne.n	800518e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	d016      	beq.n	800519e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	3324      	adds	r3, #36	; 0x24
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fef7 	bl	8005f68 <xTaskRemoveFromEventList>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00e      	beq.n	800519e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e007      	b.n	800519e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800518e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005192:	3301      	adds	r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	b25a      	sxtb	r2, r3
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800519e:	2301      	movs	r3, #1
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80051a2:	e001      	b.n	80051a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3740      	adds	r7, #64	; 0x40
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08c      	sub	sp, #48	; 0x30
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10a      	bne.n	80051f0 <xQueueReceive+0x30>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	623b      	str	r3, [r7, #32]
}
 80051ec:	bf00      	nop
 80051ee:	e7fe      	b.n	80051ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <xQueueReceive+0x3e>
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <xQueueReceive+0x42>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <xQueueReceive+0x44>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <xQueueReceive+0x5e>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	61fb      	str	r3, [r7, #28]
}
 800521a:	bf00      	nop
 800521c:	e7fe      	b.n	800521c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800521e:	f001 f865 	bl	80062ec <xTaskGetSchedulerState>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <xQueueReceive+0x6e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <xQueueReceive+0x72>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <xQueueReceive+0x74>
 8005232:	2300      	movs	r3, #0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <xQueueReceive+0x8e>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	61bb      	str	r3, [r7, #24]
}
 800524a:	bf00      	nop
 800524c:	e7fe      	b.n	800524c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800524e:	f001 fda9 	bl	8006da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01f      	beq.n	800529e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005262:	f000 f8f7 	bl	8005454 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00f      	beq.n	8005296 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	3310      	adds	r3, #16
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fe74 	bl	8005f68 <xTaskRemoveFromEventList>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005286:	4b3d      	ldr	r3, [pc, #244]	; (800537c <xQueueReceive+0x1bc>)
 8005288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005296:	f001 fdb5 	bl	8006e04 <vPortExitCritical>
				return pdPASS;
 800529a:	2301      	movs	r3, #1
 800529c:	e069      	b.n	8005372 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052a4:	f001 fdae 	bl	8006e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e062      	b.n	8005372 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052b2:	f107 0310 	add.w	r3, r7, #16
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 feba 	bl	8006030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052bc:	2301      	movs	r3, #1
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052c0:	f001 fda0 	bl	8006e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052c4:	f000 fc26 	bl	8005b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052c8:	f001 fd6c 	bl	8006da4 <vPortEnterCritical>
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052d2:	b25b      	sxtb	r3, r3
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d103      	bne.n	80052e2 <xQueueReceive+0x122>
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d103      	bne.n	80052f8 <xQueueReceive+0x138>
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f8:	f001 fd84 	bl	8006e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052fc:	1d3a      	adds	r2, r7, #4
 80052fe:	f107 0310 	add.w	r3, r7, #16
 8005302:	4611      	mov	r1, r2
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fea9 	bl	800605c <xTaskCheckForTimeOut>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d123      	bne.n	8005358 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005312:	f000 f917 	bl	8005544 <prvIsQueueEmpty>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	3324      	adds	r3, #36	; 0x24
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fdcf 	bl	8005ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800532a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800532c:	f000 f8b8 	bl	80054a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005330:	f000 fbfe 	bl	8005b30 <xTaskResumeAll>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d189      	bne.n	800524e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800533a:	4b10      	ldr	r3, [pc, #64]	; (800537c <xQueueReceive+0x1bc>)
 800533c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	e780      	b.n	800524e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800534c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534e:	f000 f8a7 	bl	80054a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005352:	f000 fbed 	bl	8005b30 <xTaskResumeAll>
 8005356:	e77a      	b.n	800524e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800535a:	f000 f8a1 	bl	80054a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800535e:	f000 fbe7 	bl	8005b30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005364:	f000 f8ee 	bl	8005544 <prvIsQueueEmpty>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	f43f af6f 	beq.w	800524e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005370:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005372:	4618      	mov	r0, r3
 8005374:	3730      	adds	r7, #48	; 0x30
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10d      	bne.n	80053ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d14d      	bne.n	8005442 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 ffbc 	bl	8006328 <xTaskPriorityDisinherit>
 80053b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	609a      	str	r2, [r3, #8]
 80053b8:	e043      	b.n	8005442 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d119      	bne.n	80053f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6858      	ldr	r0, [r3, #4]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	461a      	mov	r2, r3
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	f002 f93d 	bl	800764a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	441a      	add	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d32b      	bcc.n	8005442 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	e026      	b.n	8005442 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68d8      	ldr	r0, [r3, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	461a      	mov	r2, r3
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	f002 f923 	bl	800764a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	425b      	negs	r3, r3
 800540e:	441a      	add	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d207      	bcs.n	8005430 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	425b      	negs	r3, r3
 800542a:	441a      	add	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d105      	bne.n	8005442 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	3b01      	subs	r3, #1
 8005440:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800544a:	697b      	ldr	r3, [r7, #20]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d018      	beq.n	8005498 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	441a      	add	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	d303      	bcc.n	8005488 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68d9      	ldr	r1, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	461a      	mov	r2, r3
 8005492:	6838      	ldr	r0, [r7, #0]
 8005494:	f002 f8d9 	bl	800764a <memcpy>
	}
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054a8:	f001 fc7c 	bl	8006da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054b4:	e011      	b.n	80054da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d012      	beq.n	80054e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3324      	adds	r3, #36	; 0x24
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fd50 	bl	8005f68 <xTaskRemoveFromEventList>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054ce:	f000 fe27 	bl	8006120 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	dce9      	bgt.n	80054b6 <prvUnlockQueue+0x16>
 80054e2:	e000      	b.n	80054e6 <prvUnlockQueue+0x46>
					break;
 80054e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	22ff      	movs	r2, #255	; 0xff
 80054ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054ee:	f001 fc89 	bl	8006e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054f2:	f001 fc57 	bl	8006da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054fe:	e011      	b.n	8005524 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d012      	beq.n	800552e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3310      	adds	r3, #16
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fd2b 	bl	8005f68 <xTaskRemoveFromEventList>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005518:	f000 fe02 	bl	8006120 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	3b01      	subs	r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005528:	2b00      	cmp	r3, #0
 800552a:	dce9      	bgt.n	8005500 <prvUnlockQueue+0x60>
 800552c:	e000      	b.n	8005530 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800552e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	22ff      	movs	r2, #255	; 0xff
 8005534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005538:	f001 fc64 	bl	8006e04 <vPortExitCritical>
}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800554c:	f001 fc2a 	bl	8006da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005558:	2301      	movs	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	e001      	b.n	8005562 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005562:	f001 fc4f 	bl	8006e04 <vPortExitCritical>

	return xReturn;
 8005566:	68fb      	ldr	r3, [r7, #12]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005578:	f001 fc14 	bl	8006da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005584:	429a      	cmp	r2, r3
 8005586:	d102      	bne.n	800558e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005588:	2301      	movs	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e001      	b.n	8005592 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005592:	f001 fc37 	bl	8006e04 <vPortExitCritical>

	return xReturn;
 8005596:	68fb      	ldr	r3, [r7, #12]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	e014      	b.n	80055da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055b0:	4a0f      	ldr	r2, [pc, #60]	; (80055f0 <vQueueAddToRegistry+0x50>)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055bc:	490c      	ldr	r1, [pc, #48]	; (80055f0 <vQueueAddToRegistry+0x50>)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055c6:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <vQueueAddToRegistry+0x50>)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4413      	add	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055d2:	e006      	b.n	80055e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b07      	cmp	r3, #7
 80055de:	d9e7      	bls.n	80055b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000ac0 	.word	0x20000ac0

080055f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005604:	f001 fbce 	bl	8006da4 <vPortEnterCritical>
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800560e:	b25b      	sxtb	r3, r3
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d103      	bne.n	800561e <vQueueWaitForMessageRestricted+0x2a>
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005624:	b25b      	sxtb	r3, r3
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d103      	bne.n	8005634 <vQueueWaitForMessageRestricted+0x40>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005634:	f001 fbe6 	bl	8006e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	3324      	adds	r3, #36	; 0x24
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fc61 	bl	8005f10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800564e:	6978      	ldr	r0, [r7, #20]
 8005650:	f7ff ff26 	bl	80054a0 <prvUnlockQueue>
	}
 8005654:	bf00      	nop
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08e      	sub	sp, #56	; 0x38
 8005660:	af04      	add	r7, sp, #16
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	623b      	str	r3, [r7, #32]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	61fb      	str	r3, [r7, #28]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056a2:	23bc      	movs	r3, #188	; 0xbc
 80056a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2bbc      	cmp	r3, #188	; 0xbc
 80056aa:	d00a      	beq.n	80056c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	61bb      	str	r3, [r7, #24]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01e      	beq.n	8005708 <xTaskCreateStatic+0xac>
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056e2:	2300      	movs	r3, #0
 80056e4:	9303      	str	r3, [sp, #12]
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	9302      	str	r3, [sp, #8]
 80056ea:	f107 0314 	add.w	r3, r7, #20
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f850 	bl	80057a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005702:	f000 f8f3 	bl	80058ec <prvAddNewTaskToReadyList>
 8005706:	e001      	b.n	800570c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800570c:	697b      	ldr	r3, [r7, #20]
	}
 800570e:	4618      	mov	r0, r3
 8005710:	3728      	adds	r7, #40	; 0x28
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005716:	b580      	push	{r7, lr}
 8005718:	b08c      	sub	sp, #48	; 0x30
 800571a:	af04      	add	r7, sp, #16
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4618      	mov	r0, r3
 800572c:	f001 fc5c 	bl	8006fe8 <pvPortMalloc>
 8005730:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00e      	beq.n	8005756 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005738:	20bc      	movs	r0, #188	; 0xbc
 800573a:	f001 fc55 	bl	8006fe8 <pvPortMalloc>
 800573e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
 800574c:	e005      	b.n	800575a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800574e:	6978      	ldr	r0, [r7, #20]
 8005750:	f001 fd16 	bl	8007180 <vPortFree>
 8005754:	e001      	b.n	800575a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d017      	beq.n	8005790 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005768:	88fa      	ldrh	r2, [r7, #6]
 800576a:	2300      	movs	r3, #0
 800576c:	9303      	str	r3, [sp, #12]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	9302      	str	r3, [sp, #8]
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f80e 	bl	80057a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005784:	69f8      	ldr	r0, [r7, #28]
 8005786:	f000 f8b1 	bl	80058ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800578a:	2301      	movs	r3, #1
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	e002      	b.n	8005796 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005790:	f04f 33ff 	mov.w	r3, #4294967295
 8005794:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005796:	69bb      	ldr	r3, [r7, #24]
	}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	461a      	mov	r2, r3
 80057b8:	21a5      	movs	r1, #165	; 0xa5
 80057ba:	f001 ff54 	bl	8007666 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057c8:	3b01      	subs	r3, #1
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	617b      	str	r3, [r7, #20]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01f      	beq.n	800583e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	e012      	b.n	800582a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	7819      	ldrb	r1, [r3, #0]
 800580c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	3334      	adds	r3, #52	; 0x34
 8005814:	460a      	mov	r2, r1
 8005816:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d006      	beq.n	8005832 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	3301      	adds	r3, #1
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	2b0f      	cmp	r3, #15
 800582e:	d9e9      	bls.n	8005804 <prvInitialiseNewTask+0x64>
 8005830:	e000      	b.n	8005834 <prvInitialiseNewTask+0x94>
			{
				break;
 8005832:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800583c:	e003      	b.n	8005846 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	2b37      	cmp	r3, #55	; 0x37
 800584a:	d901      	bls.n	8005850 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800584c:	2337      	movs	r3, #55	; 0x37
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005854:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800585a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	2200      	movs	r2, #0
 8005860:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	3304      	adds	r3, #4
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff f978 	bl	8004b5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	3318      	adds	r3, #24
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff f973 	bl	8004b5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	2200      	movs	r2, #0
 8005890:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	2200      	movs	r2, #0
 8005898:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	3354      	adds	r3, #84	; 0x54
 80058a0:	2260      	movs	r2, #96	; 0x60
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 fede 	bl	8007666 <memset>
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	4a0c      	ldr	r2, [pc, #48]	; (80058e0 <prvInitialiseNewTask+0x140>)
 80058ae:	659a      	str	r2, [r3, #88]	; 0x58
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	4a0c      	ldr	r2, [pc, #48]	; (80058e4 <prvInitialiseNewTask+0x144>)
 80058b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	4a0b      	ldr	r2, [pc, #44]	; (80058e8 <prvInitialiseNewTask+0x148>)
 80058ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	69b8      	ldr	r0, [r7, #24]
 80058c2:	f001 f941 	bl	8006b48 <pxPortInitialiseStack>
 80058c6:	4602      	mov	r2, r0
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058d8:	bf00      	nop
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	0800b4dc 	.word	0x0800b4dc
 80058e4:	0800b4fc 	.word	0x0800b4fc
 80058e8:	0800b4bc 	.word	0x0800b4bc

080058ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058f4:	f001 fa56 	bl	8006da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058f8:	4b2d      	ldr	r3, [pc, #180]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	4a2c      	ldr	r2, [pc, #176]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 8005900:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005902:	4b2c      	ldr	r3, [pc, #176]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800590a:	4a2a      	ldr	r2, [pc, #168]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005910:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d110      	bne.n	800593a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005918:	f000 fc26 	bl	8006168 <prvInitialiseTaskLists>
 800591c:	e00d      	b.n	800593a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800591e:	4b26      	ldr	r3, [pc, #152]	; (80059b8 <prvAddNewTaskToReadyList+0xcc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005926:	4b23      	ldr	r3, [pc, #140]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	429a      	cmp	r2, r3
 8005932:	d802      	bhi.n	800593a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005934:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800593a:	4b20      	ldr	r3, [pc, #128]	; (80059bc <prvAddNewTaskToReadyList+0xd0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3301      	adds	r3, #1
 8005940:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <prvAddNewTaskToReadyList+0xd0>)
 8005942:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005944:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <prvAddNewTaskToReadyList+0xd0>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <prvAddNewTaskToReadyList+0xd4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d903      	bls.n	8005960 <prvAddNewTaskToReadyList+0x74>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <prvAddNewTaskToReadyList+0xd4>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <prvAddNewTaskToReadyList+0xd8>)
 800596e:	441a      	add	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7ff f8fd 	bl	8004b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800597c:	f001 fa42 	bl	8006e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005980:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <prvAddNewTaskToReadyList+0xcc>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	429a      	cmp	r2, r3
 8005994:	d207      	bcs.n	80059a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <prvAddNewTaskToReadyList+0xdc>)
 8005998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000fd4 	.word	0x20000fd4
 80059b4:	20000b00 	.word	0x20000b00
 80059b8:	20000fe0 	.word	0x20000fe0
 80059bc:	20000ff0 	.word	0x20000ff0
 80059c0:	20000fdc 	.word	0x20000fdc
 80059c4:	20000b04 	.word	0x20000b04
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d017      	beq.n	8005a0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059de:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <vTaskDelay+0x60>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <vTaskDelay+0x30>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	60bb      	str	r3, [r7, #8]
}
 80059f8:	bf00      	nop
 80059fa:	e7fe      	b.n	80059fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059fc:	f000 f88a 	bl	8005b14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a00:	2100      	movs	r1, #0
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fcfe 	bl	8006404 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a08:	f000 f892 	bl	8005b30 <xTaskResumeAll>
 8005a0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d107      	bne.n	8005a24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a14:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <vTaskDelay+0x64>)
 8005a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000ffc 	.word	0x20000ffc
 8005a30:	e000ed04 	.word	0xe000ed04

08005a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a42:	463a      	mov	r2, r7
 8005a44:	1d39      	adds	r1, r7, #4
 8005a46:	f107 0308 	add.w	r3, r7, #8
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff f832 	bl	8004ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	9202      	str	r2, [sp, #8]
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	460a      	mov	r2, r1
 8005a62:	4924      	ldr	r1, [pc, #144]	; (8005af4 <vTaskStartScheduler+0xc0>)
 8005a64:	4824      	ldr	r0, [pc, #144]	; (8005af8 <vTaskStartScheduler+0xc4>)
 8005a66:	f7ff fdf9 	bl	800565c <xTaskCreateStatic>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4a23      	ldr	r2, [pc, #140]	; (8005afc <vTaskStartScheduler+0xc8>)
 8005a6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a70:	4b22      	ldr	r3, [pc, #136]	; (8005afc <vTaskStartScheduler+0xc8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e001      	b.n	8005a82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d102      	bne.n	8005a8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a88:	f000 fd10 	bl	80064ac <xTimerCreateTimerTask>
 8005a8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d11b      	bne.n	8005acc <vTaskStartScheduler+0x98>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	613b      	str	r3, [r7, #16]
}
 8005aa6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <vTaskStartScheduler+0xcc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3354      	adds	r3, #84	; 0x54
 8005aae:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <vTaskStartScheduler+0xd0>)
 8005ab0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ab2:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <vTaskStartScheduler+0xd4>)
 8005ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <vTaskStartScheduler+0xd8>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <vTaskStartScheduler+0xdc>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ac6:	f001 f8cb 	bl	8006c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005aca:	e00e      	b.n	8005aea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d10a      	bne.n	8005aea <vTaskStartScheduler+0xb6>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60fb      	str	r3, [r7, #12]
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <vTaskStartScheduler+0xb4>
}
 8005aea:	bf00      	nop
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	0800b3fc 	.word	0x0800b3fc
 8005af8:	08006139 	.word	0x08006139
 8005afc:	20000ff8 	.word	0x20000ff8
 8005b00:	20000b00 	.word	0x20000b00
 8005b04:	20000014 	.word	0x20000014
 8005b08:	20000ff4 	.word	0x20000ff4
 8005b0c:	20000fe0 	.word	0x20000fe0
 8005b10:	20000fd8 	.word	0x20000fd8

08005b14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b18:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <vTaskSuspendAll+0x18>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	4a03      	ldr	r2, [pc, #12]	; (8005b2c <vTaskSuspendAll+0x18>)
 8005b20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b22:	bf00      	nop
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000ffc 	.word	0x20000ffc

08005b30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b3e:	4b42      	ldr	r3, [pc, #264]	; (8005c48 <xTaskResumeAll+0x118>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10a      	bne.n	8005b5c <xTaskResumeAll+0x2c>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	603b      	str	r3, [r7, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	e7fe      	b.n	8005b5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b5c:	f001 f922 	bl	8006da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b60:	4b39      	ldr	r3, [pc, #228]	; (8005c48 <xTaskResumeAll+0x118>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	4a38      	ldr	r2, [pc, #224]	; (8005c48 <xTaskResumeAll+0x118>)
 8005b68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b6a:	4b37      	ldr	r3, [pc, #220]	; (8005c48 <xTaskResumeAll+0x118>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d162      	bne.n	8005c38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b72:	4b36      	ldr	r3, [pc, #216]	; (8005c4c <xTaskResumeAll+0x11c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d05e      	beq.n	8005c38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b7a:	e02f      	b.n	8005bdc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7c:	4b34      	ldr	r3, [pc, #208]	; (8005c50 <xTaskResumeAll+0x120>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3318      	adds	r3, #24
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff f851 	bl	8004c30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff f84c 	bl	8004c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9c:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <xTaskResumeAll+0x124>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d903      	bls.n	8005bac <xTaskResumeAll+0x7c>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	4a2a      	ldr	r2, [pc, #168]	; (8005c54 <xTaskResumeAll+0x124>)
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4a27      	ldr	r2, [pc, #156]	; (8005c58 <xTaskResumeAll+0x128>)
 8005bba:	441a      	add	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	f7fe ffd7 	bl	8004b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	4b23      	ldr	r3, [pc, #140]	; (8005c5c <xTaskResumeAll+0x12c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d302      	bcc.n	8005bdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bd6:	4b22      	ldr	r3, [pc, #136]	; (8005c60 <xTaskResumeAll+0x130>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bdc:	4b1c      	ldr	r3, [pc, #112]	; (8005c50 <xTaskResumeAll+0x120>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1cb      	bne.n	8005b7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bea:	f000 fb5f 	bl	80062ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bee:	4b1d      	ldr	r3, [pc, #116]	; (8005c64 <xTaskResumeAll+0x134>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d010      	beq.n	8005c1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bfa:	f000 f847 	bl	8005c8c <xTaskIncrementTick>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c04:	4b16      	ldr	r3, [pc, #88]	; (8005c60 <xTaskResumeAll+0x130>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f1      	bne.n	8005bfa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c16:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <xTaskResumeAll+0x134>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c1c:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <xTaskResumeAll+0x130>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d009      	beq.n	8005c38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c24:	2301      	movs	r3, #1
 8005c26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c28:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <xTaskResumeAll+0x138>)
 8005c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c38:	f001 f8e4 	bl	8006e04 <vPortExitCritical>

	return xAlreadyYielded;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000ffc 	.word	0x20000ffc
 8005c4c:	20000fd4 	.word	0x20000fd4
 8005c50:	20000f94 	.word	0x20000f94
 8005c54:	20000fdc 	.word	0x20000fdc
 8005c58:	20000b04 	.word	0x20000b04
 8005c5c:	20000b00 	.word	0x20000b00
 8005c60:	20000fe8 	.word	0x20000fe8
 8005c64:	20000fe4 	.word	0x20000fe4
 8005c68:	e000ed04 	.word	0xe000ed04

08005c6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c72:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <xTaskGetTickCount+0x1c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c78:	687b      	ldr	r3, [r7, #4]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	20000fd8 	.word	0x20000fd8

08005c8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c96:	4b4f      	ldr	r3, [pc, #316]	; (8005dd4 <xTaskIncrementTick+0x148>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f040 808f 	bne.w	8005dbe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ca0:	4b4d      	ldr	r3, [pc, #308]	; (8005dd8 <xTaskIncrementTick+0x14c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ca8:	4a4b      	ldr	r2, [pc, #300]	; (8005dd8 <xTaskIncrementTick+0x14c>)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d120      	bne.n	8005cf6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cb4:	4b49      	ldr	r3, [pc, #292]	; (8005ddc <xTaskIncrementTick+0x150>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	603b      	str	r3, [r7, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <xTaskIncrementTick+0x46>
 8005cd4:	4b41      	ldr	r3, [pc, #260]	; (8005ddc <xTaskIncrementTick+0x150>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <xTaskIncrementTick+0x154>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a3f      	ldr	r2, [pc, #252]	; (8005ddc <xTaskIncrementTick+0x150>)
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	4a3f      	ldr	r2, [pc, #252]	; (8005de0 <xTaskIncrementTick+0x154>)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	4b3e      	ldr	r3, [pc, #248]	; (8005de4 <xTaskIncrementTick+0x158>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	4a3d      	ldr	r2, [pc, #244]	; (8005de4 <xTaskIncrementTick+0x158>)
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	f000 fadb 	bl	80062ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cf6:	4b3c      	ldr	r3, [pc, #240]	; (8005de8 <xTaskIncrementTick+0x15c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d349      	bcc.n	8005d94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d00:	4b36      	ldr	r3, [pc, #216]	; (8005ddc <xTaskIncrementTick+0x150>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d0a:	4b37      	ldr	r3, [pc, #220]	; (8005de8 <xTaskIncrementTick+0x15c>)
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	601a      	str	r2, [r3, #0]
					break;
 8005d12:	e03f      	b.n	8005d94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d14:	4b31      	ldr	r3, [pc, #196]	; (8005ddc <xTaskIncrementTick+0x150>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d203      	bcs.n	8005d34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d2c:	4a2e      	ldr	r2, [pc, #184]	; (8005de8 <xTaskIncrementTick+0x15c>)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d32:	e02f      	b.n	8005d94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe ff79 	bl	8004c30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	3318      	adds	r3, #24
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe ff70 	bl	8004c30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	4b25      	ldr	r3, [pc, #148]	; (8005dec <xTaskIncrementTick+0x160>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d903      	bls.n	8005d64 <xTaskIncrementTick+0xd8>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	4a22      	ldr	r2, [pc, #136]	; (8005dec <xTaskIncrementTick+0x160>)
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4a1f      	ldr	r2, [pc, #124]	; (8005df0 <xTaskIncrementTick+0x164>)
 8005d72:	441a      	add	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f7fe fefb 	bl	8004b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <xTaskIncrementTick+0x168>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d3b8      	bcc.n	8005d00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d92:	e7b5      	b.n	8005d00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d94:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <xTaskIncrementTick+0x168>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9a:	4915      	ldr	r1, [pc, #84]	; (8005df0 <xTaskIncrementTick+0x164>)
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d901      	bls.n	8005db0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005db0:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <xTaskIncrementTick+0x16c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e004      	b.n	8005dc8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dbe:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <xTaskIncrementTick+0x170>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	4a0d      	ldr	r2, [pc, #52]	; (8005dfc <xTaskIncrementTick+0x170>)
 8005dc6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005dc8:	697b      	ldr	r3, [r7, #20]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000ffc 	.word	0x20000ffc
 8005dd8:	20000fd8 	.word	0x20000fd8
 8005ddc:	20000f8c 	.word	0x20000f8c
 8005de0:	20000f90 	.word	0x20000f90
 8005de4:	20000fec 	.word	0x20000fec
 8005de8:	20000ff4 	.word	0x20000ff4
 8005dec:	20000fdc 	.word	0x20000fdc
 8005df0:	20000b04 	.word	0x20000b04
 8005df4:	20000b00 	.word	0x20000b00
 8005df8:	20000fe8 	.word	0x20000fe8
 8005dfc:	20000fe4 	.word	0x20000fe4

08005e00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e06:	4b2a      	ldr	r3, [pc, #168]	; (8005eb0 <vTaskSwitchContext+0xb0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e0e:	4b29      	ldr	r3, [pc, #164]	; (8005eb4 <vTaskSwitchContext+0xb4>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e14:	e046      	b.n	8005ea4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005e16:	4b27      	ldr	r3, [pc, #156]	; (8005eb4 <vTaskSwitchContext+0xb4>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e1c:	4b26      	ldr	r3, [pc, #152]	; (8005eb8 <vTaskSwitchContext+0xb8>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e010      	b.n	8005e46 <vTaskSwitchContext+0x46>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <vTaskSwitchContext+0x40>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	607b      	str	r3, [r7, #4]
}
 8005e3c:	bf00      	nop
 8005e3e:	e7fe      	b.n	8005e3e <vTaskSwitchContext+0x3e>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	491d      	ldr	r1, [pc, #116]	; (8005ebc <vTaskSwitchContext+0xbc>)
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0e4      	beq.n	8005e24 <vTaskSwitchContext+0x24>
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4a15      	ldr	r2, [pc, #84]	; (8005ebc <vTaskSwitchContext+0xbc>)
 8005e66:	4413      	add	r3, r2
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	605a      	str	r2, [r3, #4]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d104      	bne.n	8005e8a <vTaskSwitchContext+0x8a>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <vTaskSwitchContext+0xc0>)
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <vTaskSwitchContext+0xb8>)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e9a:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <vTaskSwitchContext+0xc0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3354      	adds	r3, #84	; 0x54
 8005ea0:	4a08      	ldr	r2, [pc, #32]	; (8005ec4 <vTaskSwitchContext+0xc4>)
 8005ea2:	6013      	str	r3, [r2, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	20000ffc 	.word	0x20000ffc
 8005eb4:	20000fe8 	.word	0x20000fe8
 8005eb8:	20000fdc 	.word	0x20000fdc
 8005ebc:	20000b04 	.word	0x20000b04
 8005ec0:	20000b00 	.word	0x20000b00
 8005ec4:	20000014 	.word	0x20000014

08005ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	60fb      	str	r3, [r7, #12]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <vTaskPlaceOnEventList+0x44>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3318      	adds	r3, #24
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fe fe61 	bl	8004bbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005efc:	2101      	movs	r1, #1
 8005efe:	6838      	ldr	r0, [r7, #0]
 8005f00:	f000 fa80 	bl	8006404 <prvAddCurrentTaskToDelayedList>
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000b00 	.word	0x20000b00

08005f10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	617b      	str	r3, [r7, #20]
}
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3318      	adds	r3, #24
 8005f3e:	4619      	mov	r1, r3
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7fe fe18 	bl	8004b76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	68b8      	ldr	r0, [r7, #8]
 8005f56:	f000 fa55 	bl	8006404 <prvAddCurrentTaskToDelayedList>
	}
 8005f5a:	bf00      	nop
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000b00 	.word	0x20000b00

08005f68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	60fb      	str	r3, [r7, #12]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	3318      	adds	r3, #24
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fe49 	bl	8004c30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f9e:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <xTaskRemoveFromEventList+0xb0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d11d      	bne.n	8005fe2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fe40 	bl	8004c30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb4:	4b19      	ldr	r3, [pc, #100]	; (800601c <xTaskRemoveFromEventList+0xb4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d903      	bls.n	8005fc4 <xTaskRemoveFromEventList+0x5c>
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	4a16      	ldr	r2, [pc, #88]	; (800601c <xTaskRemoveFromEventList+0xb4>)
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4a13      	ldr	r2, [pc, #76]	; (8006020 <xTaskRemoveFromEventList+0xb8>)
 8005fd2:	441a      	add	r2, r3
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f7fe fdcb 	bl	8004b76 <vListInsertEnd>
 8005fe0:	e005      	b.n	8005fee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	3318      	adds	r3, #24
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	480e      	ldr	r0, [pc, #56]	; (8006024 <xTaskRemoveFromEventList+0xbc>)
 8005fea:	f7fe fdc4 	bl	8004b76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <xTaskRemoveFromEventList+0xc0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d905      	bls.n	8006008 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <xTaskRemoveFromEventList+0xc4>)
 8006002:	2201      	movs	r2, #1
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	e001      	b.n	800600c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800600c:	697b      	ldr	r3, [r7, #20]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	20000ffc 	.word	0x20000ffc
 800601c:	20000fdc 	.word	0x20000fdc
 8006020:	20000b04 	.word	0x20000b04
 8006024:	20000f94 	.word	0x20000f94
 8006028:	20000b00 	.word	0x20000b00
 800602c:	20000fe8 	.word	0x20000fe8

08006030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006038:	4b06      	ldr	r3, [pc, #24]	; (8006054 <vTaskInternalSetTimeOutState+0x24>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006040:	4b05      	ldr	r3, [pc, #20]	; (8006058 <vTaskInternalSetTimeOutState+0x28>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	605a      	str	r2, [r3, #4]
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	20000fec 	.word	0x20000fec
 8006058:	20000fd8 	.word	0x20000fd8

0800605c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	613b      	str	r3, [r7, #16]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	60fb      	str	r3, [r7, #12]
}
 800609a:	bf00      	nop
 800609c:	e7fe      	b.n	800609c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800609e:	f000 fe81 	bl	8006da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060a2:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <xTaskCheckForTimeOut+0xbc>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ba:	d102      	bne.n	80060c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	e023      	b.n	800610a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	4b15      	ldr	r3, [pc, #84]	; (800611c <xTaskCheckForTimeOut+0xc0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d007      	beq.n	80060de <xTaskCheckForTimeOut+0x82>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d302      	bcc.n	80060de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060d8:	2301      	movs	r3, #1
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	e015      	b.n	800610a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d20b      	bcs.n	8006100 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	1ad2      	subs	r2, r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ff9b 	bl	8006030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
 80060fe:	e004      	b.n	800610a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006106:	2301      	movs	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800610a:	f000 fe7b 	bl	8006e04 <vPortExitCritical>

	return xReturn;
 800610e:	69fb      	ldr	r3, [r7, #28]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3720      	adds	r7, #32
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20000fd8 	.word	0x20000fd8
 800611c:	20000fec 	.word	0x20000fec

08006120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006124:	4b03      	ldr	r3, [pc, #12]	; (8006134 <vTaskMissedYield+0x14>)
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]
}
 800612a:	bf00      	nop
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	20000fe8 	.word	0x20000fe8

08006138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006140:	f000 f852 	bl	80061e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <prvIdleTask+0x28>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d9f9      	bls.n	8006140 <prvIdleTask+0x8>
			{
				taskYIELD();
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <prvIdleTask+0x2c>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800615c:	e7f0      	b.n	8006140 <prvIdleTask+0x8>
 800615e:	bf00      	nop
 8006160:	20000b04 	.word	0x20000b04
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]
 8006172:	e00c      	b.n	800618e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4a12      	ldr	r2, [pc, #72]	; (80061c8 <prvInitialiseTaskLists+0x60>)
 8006180:	4413      	add	r3, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fcca 	bl	8004b1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3301      	adds	r3, #1
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b37      	cmp	r3, #55	; 0x37
 8006192:	d9ef      	bls.n	8006174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006194:	480d      	ldr	r0, [pc, #52]	; (80061cc <prvInitialiseTaskLists+0x64>)
 8006196:	f7fe fcc1 	bl	8004b1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800619a:	480d      	ldr	r0, [pc, #52]	; (80061d0 <prvInitialiseTaskLists+0x68>)
 800619c:	f7fe fcbe 	bl	8004b1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061a0:	480c      	ldr	r0, [pc, #48]	; (80061d4 <prvInitialiseTaskLists+0x6c>)
 80061a2:	f7fe fcbb 	bl	8004b1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061a6:	480c      	ldr	r0, [pc, #48]	; (80061d8 <prvInitialiseTaskLists+0x70>)
 80061a8:	f7fe fcb8 	bl	8004b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061ac:	480b      	ldr	r0, [pc, #44]	; (80061dc <prvInitialiseTaskLists+0x74>)
 80061ae:	f7fe fcb5 	bl	8004b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061b2:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <prvInitialiseTaskLists+0x78>)
 80061b4:	4a05      	ldr	r2, [pc, #20]	; (80061cc <prvInitialiseTaskLists+0x64>)
 80061b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <prvInitialiseTaskLists+0x7c>)
 80061ba:	4a05      	ldr	r2, [pc, #20]	; (80061d0 <prvInitialiseTaskLists+0x68>)
 80061bc:	601a      	str	r2, [r3, #0]
}
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000b04 	.word	0x20000b04
 80061cc:	20000f64 	.word	0x20000f64
 80061d0:	20000f78 	.word	0x20000f78
 80061d4:	20000f94 	.word	0x20000f94
 80061d8:	20000fa8 	.word	0x20000fa8
 80061dc:	20000fc0 	.word	0x20000fc0
 80061e0:	20000f8c 	.word	0x20000f8c
 80061e4:	20000f90 	.word	0x20000f90

080061e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061ee:	e019      	b.n	8006224 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061f0:	f000 fdd8 	bl	8006da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f4:	4b10      	ldr	r3, [pc, #64]	; (8006238 <prvCheckTasksWaitingTermination+0x50>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3304      	adds	r3, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe fd15 	bl	8004c30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006206:	4b0d      	ldr	r3, [pc, #52]	; (800623c <prvCheckTasksWaitingTermination+0x54>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3b01      	subs	r3, #1
 800620c:	4a0b      	ldr	r2, [pc, #44]	; (800623c <prvCheckTasksWaitingTermination+0x54>)
 800620e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <prvCheckTasksWaitingTermination+0x58>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3b01      	subs	r3, #1
 8006216:	4a0a      	ldr	r2, [pc, #40]	; (8006240 <prvCheckTasksWaitingTermination+0x58>)
 8006218:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800621a:	f000 fdf3 	bl	8006e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f810 	bl	8006244 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006224:	4b06      	ldr	r3, [pc, #24]	; (8006240 <prvCheckTasksWaitingTermination+0x58>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e1      	bne.n	80061f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20000fa8 	.word	0x20000fa8
 800623c:	20000fd4 	.word	0x20000fd4
 8006240:	20000fbc 	.word	0x20000fbc

08006244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3354      	adds	r3, #84	; 0x54
 8006250:	4618      	mov	r0, r3
 8006252:	f001 ff1d 	bl	8008090 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800625c:	2b00      	cmp	r3, #0
 800625e:	d108      	bne.n	8006272 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	4618      	mov	r0, r3
 8006266:	f000 ff8b 	bl	8007180 <vPortFree>
				vPortFree( pxTCB );
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 ff88 	bl	8007180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006270:	e018      	b.n	80062a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006278:	2b01      	cmp	r3, #1
 800627a:	d103      	bne.n	8006284 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 ff7f 	bl	8007180 <vPortFree>
	}
 8006282:	e00f      	b.n	80062a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800628a:	2b02      	cmp	r3, #2
 800628c:	d00a      	beq.n	80062a4 <prvDeleteTCB+0x60>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	60fb      	str	r3, [r7, #12]
}
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <prvDeleteTCB+0x5e>
	}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062b2:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <prvResetNextTaskUnblockTime+0x38>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d104      	bne.n	80062c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062bc:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <prvResetNextTaskUnblockTime+0x3c>)
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062c4:	e008      	b.n	80062d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c6:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <prvResetNextTaskUnblockTime+0x38>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4a04      	ldr	r2, [pc, #16]	; (80062e8 <prvResetNextTaskUnblockTime+0x3c>)
 80062d6:	6013      	str	r3, [r2, #0]
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	20000f8c 	.word	0x20000f8c
 80062e8:	20000ff4 	.word	0x20000ff4

080062ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <xTaskGetSchedulerState+0x34>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d102      	bne.n	8006300 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062fa:	2301      	movs	r3, #1
 80062fc:	607b      	str	r3, [r7, #4]
 80062fe:	e008      	b.n	8006312 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006300:	4b08      	ldr	r3, [pc, #32]	; (8006324 <xTaskGetSchedulerState+0x38>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006308:	2302      	movs	r3, #2
 800630a:	607b      	str	r3, [r7, #4]
 800630c:	e001      	b.n	8006312 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800630e:	2300      	movs	r3, #0
 8006310:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006312:	687b      	ldr	r3, [r7, #4]
	}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	20000fe0 	.word	0x20000fe0
 8006324:	20000ffc 	.word	0x20000ffc

08006328 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006334:	2300      	movs	r3, #0
 8006336:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d056      	beq.n	80063ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800633e:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <xTaskPriorityDisinherit+0xd0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	429a      	cmp	r2, r3
 8006346:	d00a      	beq.n	800635e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	60fb      	str	r3, [r7, #12]
}
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	60bb      	str	r3, [r7, #8]
}
 8006378:	bf00      	nop
 800637a:	e7fe      	b.n	800637a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006380:	1e5a      	subs	r2, r3, #1
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638e:	429a      	cmp	r2, r3
 8006390:	d02c      	beq.n	80063ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006396:	2b00      	cmp	r3, #0
 8006398:	d128      	bne.n	80063ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	3304      	adds	r3, #4
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fc46 	bl	8004c30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <xTaskPriorityDisinherit+0xd4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d903      	bls.n	80063cc <xTaskPriorityDisinherit+0xa4>
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	4a0c      	ldr	r2, [pc, #48]	; (80063fc <xTaskPriorityDisinherit+0xd4>)
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4a09      	ldr	r2, [pc, #36]	; (8006400 <xTaskPriorityDisinherit+0xd8>)
 80063da:	441a      	add	r2, r3
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	3304      	adds	r3, #4
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f7fe fbc7 	bl	8004b76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063e8:	2301      	movs	r3, #1
 80063ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063ec:	697b      	ldr	r3, [r7, #20]
	}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000b00 	.word	0x20000b00
 80063fc:	20000fdc 	.word	0x20000fdc
 8006400:	20000b04 	.word	0x20000b04

08006404 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800640e:	4b21      	ldr	r3, [pc, #132]	; (8006494 <prvAddCurrentTaskToDelayedList+0x90>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006414:	4b20      	ldr	r3, [pc, #128]	; (8006498 <prvAddCurrentTaskToDelayedList+0x94>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3304      	adds	r3, #4
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe fc08 	bl	8004c30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d10a      	bne.n	800643e <prvAddCurrentTaskToDelayedList+0x3a>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800642e:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <prvAddCurrentTaskToDelayedList+0x94>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3304      	adds	r3, #4
 8006434:	4619      	mov	r1, r3
 8006436:	4819      	ldr	r0, [pc, #100]	; (800649c <prvAddCurrentTaskToDelayedList+0x98>)
 8006438:	f7fe fb9d 	bl	8004b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800643c:	e026      	b.n	800648c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4413      	add	r3, r2
 8006444:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <prvAddCurrentTaskToDelayedList+0x94>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	429a      	cmp	r2, r3
 8006454:	d209      	bcs.n	800646a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006456:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <prvAddCurrentTaskToDelayedList+0x94>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3304      	adds	r3, #4
 8006460:	4619      	mov	r1, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f7fe fbab 	bl	8004bbe <vListInsert>
}
 8006468:	e010      	b.n	800648c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800646a:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <prvAddCurrentTaskToDelayedList+0x94>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f7fe fba1 	bl	8004bbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800647c:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	429a      	cmp	r2, r3
 8006484:	d202      	bcs.n	800648c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006486:	4a08      	ldr	r2, [pc, #32]	; (80064a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6013      	str	r3, [r2, #0]
}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000fd8 	.word	0x20000fd8
 8006498:	20000b00 	.word	0x20000b00
 800649c:	20000fc0 	.word	0x20000fc0
 80064a0:	20000f90 	.word	0x20000f90
 80064a4:	20000f8c 	.word	0x20000f8c
 80064a8:	20000ff4 	.word	0x20000ff4

080064ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064b6:	f000 fb07 	bl	8006ac8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064ba:	4b1c      	ldr	r3, [pc, #112]	; (800652c <xTimerCreateTimerTask+0x80>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d021      	beq.n	8006506 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064ca:	1d3a      	adds	r2, r7, #4
 80064cc:	f107 0108 	add.w	r1, r7, #8
 80064d0:	f107 030c 	add.w	r3, r7, #12
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fe fb07 	bl	8004ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	9202      	str	r2, [sp, #8]
 80064e2:	9301      	str	r3, [sp, #4]
 80064e4:	2302      	movs	r3, #2
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	2300      	movs	r3, #0
 80064ea:	460a      	mov	r2, r1
 80064ec:	4910      	ldr	r1, [pc, #64]	; (8006530 <xTimerCreateTimerTask+0x84>)
 80064ee:	4811      	ldr	r0, [pc, #68]	; (8006534 <xTimerCreateTimerTask+0x88>)
 80064f0:	f7ff f8b4 	bl	800565c <xTaskCreateStatic>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4a10      	ldr	r2, [pc, #64]	; (8006538 <xTimerCreateTimerTask+0x8c>)
 80064f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064fa:	4b0f      	ldr	r3, [pc, #60]	; (8006538 <xTimerCreateTimerTask+0x8c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006502:	2301      	movs	r3, #1
 8006504:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	613b      	str	r3, [r7, #16]
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006522:	697b      	ldr	r3, [r7, #20]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20001030 	.word	0x20001030
 8006530:	0800b404 	.word	0x0800b404
 8006534:	08006671 	.word	0x08006671
 8006538:	20001034 	.word	0x20001034

0800653c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08a      	sub	sp, #40	; 0x28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800654a:	2300      	movs	r3, #0
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	623b      	str	r3, [r7, #32]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800656a:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <xTimerGenericCommand+0x98>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d02a      	beq.n	80065c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b05      	cmp	r3, #5
 8006582:	dc18      	bgt.n	80065b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006584:	f7ff feb2 	bl	80062ec <xTaskGetSchedulerState>
 8006588:	4603      	mov	r3, r0
 800658a:	2b02      	cmp	r3, #2
 800658c:	d109      	bne.n	80065a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <xTimerGenericCommand+0x98>)
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	f107 0110 	add.w	r1, r7, #16
 8006596:	2300      	movs	r3, #0
 8006598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800659a:	f7fe fc77 	bl	8004e8c <xQueueGenericSend>
 800659e:	6278      	str	r0, [r7, #36]	; 0x24
 80065a0:	e012      	b.n	80065c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065a2:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <xTimerGenericCommand+0x98>)
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	f107 0110 	add.w	r1, r7, #16
 80065aa:	2300      	movs	r3, #0
 80065ac:	2200      	movs	r2, #0
 80065ae:	f7fe fc6d 	bl	8004e8c <xQueueGenericSend>
 80065b2:	6278      	str	r0, [r7, #36]	; 0x24
 80065b4:	e008      	b.n	80065c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <xTimerGenericCommand+0x98>)
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	f107 0110 	add.w	r1, r7, #16
 80065be:	2300      	movs	r3, #0
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	f7fe fd61 	bl	8005088 <xQueueGenericSendFromISR>
 80065c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3728      	adds	r7, #40	; 0x28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20001030 	.word	0x20001030

080065d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af02      	add	r7, sp, #8
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e2:	4b22      	ldr	r3, [pc, #136]	; (800666c <prvProcessExpiredTimer+0x94>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe fb1d 	bl	8004c30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d022      	beq.n	800664a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	18d1      	adds	r1, r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	6978      	ldr	r0, [r7, #20]
 8006612:	f000 f8d1 	bl	80067b8 <prvInsertTimerInActiveList>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01f      	beq.n	800665c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800661c:	2300      	movs	r3, #0
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2300      	movs	r3, #0
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	2100      	movs	r1, #0
 8006626:	6978      	ldr	r0, [r7, #20]
 8006628:	f7ff ff88 	bl	800653c <xTimerGenericCommand>
 800662c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d113      	bne.n	800665c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	60fb      	str	r3, [r7, #12]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	b2da      	uxtb	r2, r3
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	6978      	ldr	r0, [r7, #20]
 8006662:	4798      	blx	r3
}
 8006664:	bf00      	nop
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20001028 	.word	0x20001028

08006670 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006678:	f107 0308 	add.w	r3, r7, #8
 800667c:	4618      	mov	r0, r3
 800667e:	f000 f857 	bl	8006730 <prvGetNextExpireTime>
 8006682:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4619      	mov	r1, r3
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f803 	bl	8006694 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800668e:	f000 f8d5 	bl	800683c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006692:	e7f1      	b.n	8006678 <prvTimerTask+0x8>

08006694 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800669e:	f7ff fa39 	bl	8005b14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066a2:	f107 0308 	add.w	r3, r7, #8
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f866 	bl	8006778 <prvSampleTimeNow>
 80066ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d130      	bne.n	8006716 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <prvProcessTimerOrBlockTask+0x3c>
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d806      	bhi.n	80066d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066c2:	f7ff fa35 	bl	8005b30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066c6:	68f9      	ldr	r1, [r7, #12]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff ff85 	bl	80065d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066ce:	e024      	b.n	800671a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d008      	beq.n	80066e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066d6:	4b13      	ldr	r3, [pc, #76]	; (8006724 <prvProcessTimerOrBlockTask+0x90>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <prvProcessTimerOrBlockTask+0x50>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <prvProcessTimerOrBlockTask+0x52>
 80066e4:	2300      	movs	r3, #0
 80066e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066e8:	4b0f      	ldr	r3, [pc, #60]	; (8006728 <prvProcessTimerOrBlockTask+0x94>)
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	4619      	mov	r1, r3
 80066f6:	f7fe ff7d 	bl	80055f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066fa:	f7ff fa19 	bl	8005b30 <xTaskResumeAll>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006704:	4b09      	ldr	r3, [pc, #36]	; (800672c <prvProcessTimerOrBlockTask+0x98>)
 8006706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	f3bf 8f6f 	isb	sy
}
 8006714:	e001      	b.n	800671a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006716:	f7ff fa0b 	bl	8005b30 <xTaskResumeAll>
}
 800671a:	bf00      	nop
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	2000102c 	.word	0x2000102c
 8006728:	20001030 	.word	0x20001030
 800672c:	e000ed04 	.word	0xe000ed04

08006730 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006738:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <prvGetNextExpireTime+0x44>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <prvGetNextExpireTime+0x16>
 8006742:	2201      	movs	r2, #1
 8006744:	e000      	b.n	8006748 <prvGetNextExpireTime+0x18>
 8006746:	2200      	movs	r2, #0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006754:	4b07      	ldr	r3, [pc, #28]	; (8006774 <prvGetNextExpireTime+0x44>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	e001      	b.n	8006764 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006764:	68fb      	ldr	r3, [r7, #12]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20001028 	.word	0x20001028

08006778 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006780:	f7ff fa74 	bl	8005c6c <xTaskGetTickCount>
 8006784:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006786:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <prvSampleTimeNow+0x3c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	429a      	cmp	r2, r3
 800678e:	d205      	bcs.n	800679c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006790:	f000 f936 	bl	8006a00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e002      	b.n	80067a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067a2:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <prvSampleTimeNow+0x3c>)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067a8:	68fb      	ldr	r3, [r7, #12]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20001038 	.word	0x20001038

080067b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d812      	bhi.n	8006804 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d302      	bcc.n	80067f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	e01b      	b.n	800682a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067f2:	4b10      	ldr	r3, [pc, #64]	; (8006834 <prvInsertTimerInActiveList+0x7c>)
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3304      	adds	r3, #4
 80067fa:	4619      	mov	r1, r3
 80067fc:	4610      	mov	r0, r2
 80067fe:	f7fe f9de 	bl	8004bbe <vListInsert>
 8006802:	e012      	b.n	800682a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d206      	bcs.n	800681a <prvInsertTimerInActiveList+0x62>
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d302      	bcc.n	800681a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006814:	2301      	movs	r3, #1
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	e007      	b.n	800682a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <prvInsertTimerInActiveList+0x80>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3304      	adds	r3, #4
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f7fe f9ca 	bl	8004bbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800682a:	697b      	ldr	r3, [r7, #20]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	2000102c 	.word	0x2000102c
 8006838:	20001028 	.word	0x20001028

0800683c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08e      	sub	sp, #56	; 0x38
 8006840:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006842:	e0ca      	b.n	80069da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	da18      	bge.n	800687c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800684a:	1d3b      	adds	r3, r7, #4
 800684c:	3304      	adds	r3, #4
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	61fb      	str	r3, [r7, #28]
}
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006872:	6850      	ldr	r0, [r2, #4]
 8006874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006876:	6892      	ldr	r2, [r2, #8]
 8006878:	4611      	mov	r1, r2
 800687a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f2c0 80aa 	blt.w	80069d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d004      	beq.n	800689a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	3304      	adds	r3, #4
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe f9cb 	bl	8004c30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800689a:	463b      	mov	r3, r7
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff ff6b 	bl	8006778 <prvSampleTimeNow>
 80068a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b09      	cmp	r3, #9
 80068a8:	f200 8097 	bhi.w	80069da <prvProcessReceivedCommands+0x19e>
 80068ac:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <prvProcessReceivedCommands+0x78>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068dd 	.word	0x080068dd
 80068b8:	080068dd 	.word	0x080068dd
 80068bc:	080068dd 	.word	0x080068dd
 80068c0:	08006951 	.word	0x08006951
 80068c4:	08006965 	.word	0x08006965
 80068c8:	080069af 	.word	0x080069af
 80068cc:	080068dd 	.word	0x080068dd
 80068d0:	080068dd 	.word	0x080068dd
 80068d4:	08006951 	.word	0x08006951
 80068d8:	08006965 	.word	0x08006965
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068e2:	f043 0301 	orr.w	r3, r3, #1
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	18d1      	adds	r1, r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068fc:	f7ff ff5c 	bl	80067b8 <prvInsertTimerInActiveList>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d069      	beq.n	80069da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d05e      	beq.n	80069da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	441a      	add	r2, r3
 8006924:	2300      	movs	r3, #0
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	2300      	movs	r3, #0
 800692a:	2100      	movs	r1, #0
 800692c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800692e:	f7ff fe05 	bl	800653c <xTimerGenericCommand>
 8006932:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d14f      	bne.n	80069da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	61bb      	str	r3, [r7, #24]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006956:	f023 0301 	bic.w	r3, r3, #1
 800695a:	b2da      	uxtb	r2, r3
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006962:	e03a      	b.n	80069da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800696a:	f043 0301 	orr.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	617b      	str	r3, [r7, #20]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	18d1      	adds	r1, r2, r3
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069a8:	f7ff ff06 	bl	80067b8 <prvInsertTimerInActiveList>
					break;
 80069ac:	e015      	b.n	80069da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d103      	bne.n	80069c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80069bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069be:	f000 fbdf 	bl	8007180 <vPortFree>
 80069c2:	e00a      	b.n	80069da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069d6:	e000      	b.n	80069da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80069d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069da:	4b08      	ldr	r3, [pc, #32]	; (80069fc <prvProcessReceivedCommands+0x1c0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	1d39      	adds	r1, r7, #4
 80069e0:	2200      	movs	r2, #0
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe fbec 	bl	80051c0 <xQueueReceive>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f47f af2a 	bne.w	8006844 <prvProcessReceivedCommands+0x8>
	}
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	3730      	adds	r7, #48	; 0x30
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20001030 	.word	0x20001030

08006a00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a06:	e048      	b.n	8006a9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a08:	4b2d      	ldr	r3, [pc, #180]	; (8006ac0 <prvSwitchTimerLists+0xc0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a12:	4b2b      	ldr	r3, [pc, #172]	; (8006ac0 <prvSwitchTimerLists+0xc0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fe f905 	bl	8004c30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d02e      	beq.n	8006a9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4413      	add	r3, r2
 8006a44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d90e      	bls.n	8006a6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a5a:	4b19      	ldr	r3, [pc, #100]	; (8006ac0 <prvSwitchTimerLists+0xc0>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f7fe f8aa 	bl	8004bbe <vListInsert>
 8006a6a:	e016      	b.n	8006a9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	2300      	movs	r3, #0
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	2100      	movs	r1, #0
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f7ff fd60 	bl	800653c <xTimerGenericCommand>
 8006a7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	603b      	str	r3, [r7, #0]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a9a:	4b09      	ldr	r3, [pc, #36]	; (8006ac0 <prvSwitchTimerLists+0xc0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1b1      	bne.n	8006a08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006aa4:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <prvSwitchTimerLists+0xc0>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006aaa:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <prvSwitchTimerLists+0xc4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a04      	ldr	r2, [pc, #16]	; (8006ac0 <prvSwitchTimerLists+0xc0>)
 8006ab0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ab2:	4a04      	ldr	r2, [pc, #16]	; (8006ac4 <prvSwitchTimerLists+0xc4>)
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	6013      	str	r3, [r2, #0]
}
 8006ab8:	bf00      	nop
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20001028 	.word	0x20001028
 8006ac4:	2000102c 	.word	0x2000102c

08006ac8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ace:	f000 f969 	bl	8006da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ad2:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <prvCheckForValidListAndQueue+0x60>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d120      	bne.n	8006b1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ada:	4814      	ldr	r0, [pc, #80]	; (8006b2c <prvCheckForValidListAndQueue+0x64>)
 8006adc:	f7fe f81e 	bl	8004b1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ae0:	4813      	ldr	r0, [pc, #76]	; (8006b30 <prvCheckForValidListAndQueue+0x68>)
 8006ae2:	f7fe f81b 	bl	8004b1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ae6:	4b13      	ldr	r3, [pc, #76]	; (8006b34 <prvCheckForValidListAndQueue+0x6c>)
 8006ae8:	4a10      	ldr	r2, [pc, #64]	; (8006b2c <prvCheckForValidListAndQueue+0x64>)
 8006aea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006aec:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <prvCheckForValidListAndQueue+0x70>)
 8006aee:	4a10      	ldr	r2, [pc, #64]	; (8006b30 <prvCheckForValidListAndQueue+0x68>)
 8006af0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006af2:	2300      	movs	r3, #0
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <prvCheckForValidListAndQueue+0x74>)
 8006af8:	4a11      	ldr	r2, [pc, #68]	; (8006b40 <prvCheckForValidListAndQueue+0x78>)
 8006afa:	2110      	movs	r1, #16
 8006afc:	200a      	movs	r0, #10
 8006afe:	f7fe f929 	bl	8004d54 <xQueueGenericCreateStatic>
 8006b02:	4603      	mov	r3, r0
 8006b04:	4a08      	ldr	r2, [pc, #32]	; (8006b28 <prvCheckForValidListAndQueue+0x60>)
 8006b06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b08:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <prvCheckForValidListAndQueue+0x60>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b10:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <prvCheckForValidListAndQueue+0x60>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	490b      	ldr	r1, [pc, #44]	; (8006b44 <prvCheckForValidListAndQueue+0x7c>)
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe fd42 	bl	80055a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b1c:	f000 f972 	bl	8006e04 <vPortExitCritical>
}
 8006b20:	bf00      	nop
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20001030 	.word	0x20001030
 8006b2c:	20001000 	.word	0x20001000
 8006b30:	20001014 	.word	0x20001014
 8006b34:	20001028 	.word	0x20001028
 8006b38:	2000102c 	.word	0x2000102c
 8006b3c:	200010dc 	.word	0x200010dc
 8006b40:	2000103c 	.word	0x2000103c
 8006b44:	0800b40c 	.word	0x0800b40c

08006b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3b04      	subs	r3, #4
 8006b58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3b04      	subs	r3, #4
 8006b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f023 0201 	bic.w	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b78:	4a0c      	ldr	r2, [pc, #48]	; (8006bac <pxPortInitialiseStack+0x64>)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3b14      	subs	r3, #20
 8006b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3b04      	subs	r3, #4
 8006b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f06f 0202 	mvn.w	r2, #2
 8006b96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3b20      	subs	r3, #32
 8006b9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	08006bb1 	.word	0x08006bb1

08006bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bba:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <prvTaskExitError+0x54>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d00a      	beq.n	8006bda <prvTaskExitError+0x2a>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	60fb      	str	r3, [r7, #12]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <prvTaskExitError+0x28>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	60bb      	str	r3, [r7, #8]
}
 8006bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bee:	bf00      	nop
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0fc      	beq.n	8006bf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	20000010 	.word	0x20000010
	...

08006c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c10:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <pxCurrentTCBConst2>)
 8006c12:	6819      	ldr	r1, [r3, #0]
 8006c14:	6808      	ldr	r0, [r1, #0]
 8006c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1a:	f380 8809 	msr	PSP, r0
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f04f 0000 	mov.w	r0, #0
 8006c26:	f380 8811 	msr	BASEPRI, r0
 8006c2a:	4770      	bx	lr
 8006c2c:	f3af 8000 	nop.w

08006c30 <pxCurrentTCBConst2>:
 8006c30:	20000b00 	.word	0x20000b00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop

08006c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c38:	4808      	ldr	r0, [pc, #32]	; (8006c5c <prvPortStartFirstTask+0x24>)
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	6800      	ldr	r0, [r0, #0]
 8006c3e:	f380 8808 	msr	MSP, r0
 8006c42:	f04f 0000 	mov.w	r0, #0
 8006c46:	f380 8814 	msr	CONTROL, r0
 8006c4a:	b662      	cpsie	i
 8006c4c:	b661      	cpsie	f
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	df00      	svc	0
 8006c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c5a:	bf00      	nop
 8006c5c:	e000ed08 	.word	0xe000ed08

08006c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c66:	4b46      	ldr	r3, [pc, #280]	; (8006d80 <xPortStartScheduler+0x120>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a46      	ldr	r2, [pc, #280]	; (8006d84 <xPortStartScheduler+0x124>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d10a      	bne.n	8006c86 <xPortStartScheduler+0x26>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	613b      	str	r3, [r7, #16]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c86:	4b3e      	ldr	r3, [pc, #248]	; (8006d80 <xPortStartScheduler+0x120>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a3f      	ldr	r2, [pc, #252]	; (8006d88 <xPortStartScheduler+0x128>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10a      	bne.n	8006ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	60fb      	str	r3, [r7, #12]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ca6:	4b39      	ldr	r3, [pc, #228]	; (8006d8c <xPortStartScheduler+0x12c>)
 8006ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	22ff      	movs	r2, #255	; 0xff
 8006cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	4b31      	ldr	r3, [pc, #196]	; (8006d90 <xPortStartScheduler+0x130>)
 8006ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cce:	4b31      	ldr	r3, [pc, #196]	; (8006d94 <xPortStartScheduler+0x134>)
 8006cd0:	2207      	movs	r2, #7
 8006cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cd4:	e009      	b.n	8006cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006cd6:	4b2f      	ldr	r3, [pc, #188]	; (8006d94 <xPortStartScheduler+0x134>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	4a2d      	ldr	r2, [pc, #180]	; (8006d94 <xPortStartScheduler+0x134>)
 8006cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d0ef      	beq.n	8006cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cf6:	4b27      	ldr	r3, [pc, #156]	; (8006d94 <xPortStartScheduler+0x134>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f1c3 0307 	rsb	r3, r3, #7
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d00a      	beq.n	8006d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	60bb      	str	r3, [r7, #8]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d18:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <xPortStartScheduler+0x134>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	4a1d      	ldr	r2, [pc, #116]	; (8006d94 <xPortStartScheduler+0x134>)
 8006d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d22:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <xPortStartScheduler+0x134>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d2a:	4a1a      	ldr	r2, [pc, #104]	; (8006d94 <xPortStartScheduler+0x134>)
 8006d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d36:	4b18      	ldr	r3, [pc, #96]	; (8006d98 <xPortStartScheduler+0x138>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a17      	ldr	r2, [pc, #92]	; (8006d98 <xPortStartScheduler+0x138>)
 8006d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <xPortStartScheduler+0x138>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a14      	ldr	r2, [pc, #80]	; (8006d98 <xPortStartScheduler+0x138>)
 8006d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d4e:	f000 f8dd 	bl	8006f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <xPortStartScheduler+0x13c>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d58:	f000 f8fc 	bl	8006f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d5c:	4b10      	ldr	r3, [pc, #64]	; (8006da0 <xPortStartScheduler+0x140>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0f      	ldr	r2, [pc, #60]	; (8006da0 <xPortStartScheduler+0x140>)
 8006d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d68:	f7ff ff66 	bl	8006c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d6c:	f7ff f848 	bl	8005e00 <vTaskSwitchContext>
	prvTaskExitError();
 8006d70:	f7ff ff1e 	bl	8006bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	e000ed00 	.word	0xe000ed00
 8006d84:	410fc271 	.word	0x410fc271
 8006d88:	410fc270 	.word	0x410fc270
 8006d8c:	e000e400 	.word	0xe000e400
 8006d90:	2000112c 	.word	0x2000112c
 8006d94:	20001130 	.word	0x20001130
 8006d98:	e000ed20 	.word	0xe000ed20
 8006d9c:	20000010 	.word	0x20000010
 8006da0:	e000ef34 	.word	0xe000ef34

08006da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	607b      	str	r3, [r7, #4]
}
 8006dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <vPortEnterCritical+0x58>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	4a0d      	ldr	r2, [pc, #52]	; (8006dfc <vPortEnterCritical+0x58>)
 8006dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <vPortEnterCritical+0x58>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d10f      	bne.n	8006df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <vPortEnterCritical+0x5c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	603b      	str	r3, [r7, #0]
}
 8006dec:	bf00      	nop
 8006dee:	e7fe      	b.n	8006dee <vPortEnterCritical+0x4a>
	}
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	20000010 	.word	0x20000010
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e0a:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <vPortExitCritical+0x50>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <vPortExitCritical+0x24>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	607b      	str	r3, [r7, #4]
}
 8006e24:	bf00      	nop
 8006e26:	e7fe      	b.n	8006e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e28:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <vPortExitCritical+0x50>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	4a09      	ldr	r2, [pc, #36]	; (8006e54 <vPortExitCritical+0x50>)
 8006e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e32:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <vPortExitCritical+0x50>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d105      	bne.n	8006e46 <vPortExitCritical+0x42>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	f383 8811 	msr	BASEPRI, r3
}
 8006e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20000010 	.word	0x20000010
	...

08006e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e60:	f3ef 8009 	mrs	r0, PSP
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <pxCurrentTCBConst>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	f01e 0f10 	tst.w	lr, #16
 8006e70:	bf08      	it	eq
 8006e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7a:	6010      	str	r0, [r2, #0]
 8006e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e84:	f380 8811 	msr	BASEPRI, r0
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f7fe ffb6 	bl	8005e00 <vTaskSwitchContext>
 8006e94:	f04f 0000 	mov.w	r0, #0
 8006e98:	f380 8811 	msr	BASEPRI, r0
 8006e9c:	bc09      	pop	{r0, r3}
 8006e9e:	6819      	ldr	r1, [r3, #0]
 8006ea0:	6808      	ldr	r0, [r1, #0]
 8006ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea6:	f01e 0f10 	tst.w	lr, #16
 8006eaa:	bf08      	it	eq
 8006eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006eb0:	f380 8809 	msr	PSP, r0
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	f3af 8000 	nop.w

08006ec0 <pxCurrentTCBConst>:
 8006ec0:	20000b00 	.word	0x20000b00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop

08006ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	607b      	str	r3, [r7, #4]
}
 8006ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ee2:	f7fe fed3 	bl	8005c8c <xTaskIncrementTick>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <xPortSysTickHandler+0x40>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f383 8811 	msr	BASEPRI, r3
}
 8006efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <vPortSetupTimerInterrupt+0x34>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f16:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <vPortSetupTimerInterrupt+0x38>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <vPortSetupTimerInterrupt+0x3c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <vPortSetupTimerInterrupt+0x40>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	099b      	lsrs	r3, r3, #6
 8006f28:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <vPortSetupTimerInterrupt+0x44>)
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f2e:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <vPortSetupTimerInterrupt+0x34>)
 8006f30:	2207      	movs	r2, #7
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	e000e010 	.word	0xe000e010
 8006f44:	e000e018 	.word	0xe000e018
 8006f48:	20000004 	.word	0x20000004
 8006f4c:	10624dd3 	.word	0x10624dd3
 8006f50:	e000e014 	.word	0xe000e014

08006f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f64 <vPortEnableVFP+0x10>
 8006f58:	6801      	ldr	r1, [r0, #0]
 8006f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f5e:	6001      	str	r1, [r0, #0]
 8006f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f62:	bf00      	nop
 8006f64:	e000ed88 	.word	0xe000ed88

08006f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f6e:	f3ef 8305 	mrs	r3, IPSR
 8006f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b0f      	cmp	r3, #15
 8006f78:	d914      	bls.n	8006fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f7a:	4a17      	ldr	r2, [pc, #92]	; (8006fd8 <vPortValidateInterruptPriority+0x70>)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f84:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <vPortValidateInterruptPriority+0x74>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	7afa      	ldrb	r2, [r7, #11]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d20a      	bcs.n	8006fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	607b      	str	r3, [r7, #4]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fa4:	4b0e      	ldr	r3, [pc, #56]	; (8006fe0 <vPortValidateInterruptPriority+0x78>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fac:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <vPortValidateInterruptPriority+0x7c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d90a      	bls.n	8006fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	603b      	str	r3, [r7, #0]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <vPortValidateInterruptPriority+0x60>
	}
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	e000e3f0 	.word	0xe000e3f0
 8006fdc:	2000112c 	.word	0x2000112c
 8006fe0:	e000ed0c 	.word	0xe000ed0c
 8006fe4:	20001130 	.word	0x20001130

08006fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	; 0x28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ff4:	f7fe fd8e 	bl	8005b14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ff8:	4b5b      	ldr	r3, [pc, #364]	; (8007168 <pvPortMalloc+0x180>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007000:	f000 f920 	bl	8007244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007004:	4b59      	ldr	r3, [pc, #356]	; (800716c <pvPortMalloc+0x184>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4013      	ands	r3, r2
 800700c:	2b00      	cmp	r3, #0
 800700e:	f040 8093 	bne.w	8007138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01d      	beq.n	8007054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007018:	2208      	movs	r2, #8
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4413      	add	r3, r2
 800701e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d014      	beq.n	8007054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f023 0307 	bic.w	r3, r3, #7
 8007030:	3308      	adds	r3, #8
 8007032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <pvPortMalloc+0x6c>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	617b      	str	r3, [r7, #20]
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d06e      	beq.n	8007138 <pvPortMalloc+0x150>
 800705a:	4b45      	ldr	r3, [pc, #276]	; (8007170 <pvPortMalloc+0x188>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d869      	bhi.n	8007138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007064:	4b43      	ldr	r3, [pc, #268]	; (8007174 <pvPortMalloc+0x18c>)
 8007066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007068:	4b42      	ldr	r3, [pc, #264]	; (8007174 <pvPortMalloc+0x18c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800706e:	e004      	b.n	800707a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d903      	bls.n	800708c <pvPortMalloc+0xa4>
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1f1      	bne.n	8007070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800708c:	4b36      	ldr	r3, [pc, #216]	; (8007168 <pvPortMalloc+0x180>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007092:	429a      	cmp	r2, r3
 8007094:	d050      	beq.n	8007138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2208      	movs	r2, #8
 800709c:	4413      	add	r3, r2
 800709e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	2308      	movs	r3, #8
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d91f      	bls.n	80070f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <pvPortMalloc+0xf8>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	613b      	str	r3, [r7, #16]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	1ad2      	subs	r2, r2, r3
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070f2:	69b8      	ldr	r0, [r7, #24]
 80070f4:	f000 f908 	bl	8007308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070f8:	4b1d      	ldr	r3, [pc, #116]	; (8007170 <pvPortMalloc+0x188>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	4a1b      	ldr	r2, [pc, #108]	; (8007170 <pvPortMalloc+0x188>)
 8007104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007106:	4b1a      	ldr	r3, [pc, #104]	; (8007170 <pvPortMalloc+0x188>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <pvPortMalloc+0x190>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d203      	bcs.n	800711a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007112:	4b17      	ldr	r3, [pc, #92]	; (8007170 <pvPortMalloc+0x188>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a18      	ldr	r2, [pc, #96]	; (8007178 <pvPortMalloc+0x190>)
 8007118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	4b13      	ldr	r3, [pc, #76]	; (800716c <pvPortMalloc+0x184>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	431a      	orrs	r2, r3
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <pvPortMalloc+0x194>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a11      	ldr	r2, [pc, #68]	; (800717c <pvPortMalloc+0x194>)
 8007136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007138:	f7fe fcfa 	bl	8005b30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <pvPortMalloc+0x174>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	60fb      	str	r3, [r7, #12]
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <pvPortMalloc+0x172>
	return pvReturn;
 800715c:	69fb      	ldr	r3, [r7, #28]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3728      	adds	r7, #40	; 0x28
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20004d3c 	.word	0x20004d3c
 800716c:	20004d50 	.word	0x20004d50
 8007170:	20004d40 	.word	0x20004d40
 8007174:	20004d34 	.word	0x20004d34
 8007178:	20004d44 	.word	0x20004d44
 800717c:	20004d48 	.word	0x20004d48

08007180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d04d      	beq.n	800722e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007192:	2308      	movs	r3, #8
 8007194:	425b      	negs	r3, r3
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4413      	add	r3, r2
 800719a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	4b24      	ldr	r3, [pc, #144]	; (8007238 <vPortFree+0xb8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4013      	ands	r3, r2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <vPortFree+0x44>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	60fb      	str	r3, [r7, #12]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <vPortFree+0x62>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	60bb      	str	r3, [r7, #8]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	4b14      	ldr	r3, [pc, #80]	; (8007238 <vPortFree+0xb8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4013      	ands	r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01e      	beq.n	800722e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d11a      	bne.n	800722e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	4b0e      	ldr	r3, [pc, #56]	; (8007238 <vPortFree+0xb8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	43db      	mvns	r3, r3
 8007202:	401a      	ands	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007208:	f7fe fc84 	bl	8005b14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	4b0a      	ldr	r3, [pc, #40]	; (800723c <vPortFree+0xbc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4413      	add	r3, r2
 8007216:	4a09      	ldr	r2, [pc, #36]	; (800723c <vPortFree+0xbc>)
 8007218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800721a:	6938      	ldr	r0, [r7, #16]
 800721c:	f000 f874 	bl	8007308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007220:	4b07      	ldr	r3, [pc, #28]	; (8007240 <vPortFree+0xc0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3301      	adds	r3, #1
 8007226:	4a06      	ldr	r2, [pc, #24]	; (8007240 <vPortFree+0xc0>)
 8007228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800722a:	f7fe fc81 	bl	8005b30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800722e:	bf00      	nop
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20004d50 	.word	0x20004d50
 800723c:	20004d40 	.word	0x20004d40
 8007240:	20004d4c 	.word	0x20004d4c

08007244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800724a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800724e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007250:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <prvHeapInit+0xac>)
 8007252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00c      	beq.n	8007278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3307      	adds	r3, #7
 8007262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0307 	bic.w	r3, r3, #7
 800726a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	4a1f      	ldr	r2, [pc, #124]	; (80072f0 <prvHeapInit+0xac>)
 8007274:	4413      	add	r3, r2
 8007276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800727c:	4a1d      	ldr	r2, [pc, #116]	; (80072f4 <prvHeapInit+0xb0>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007282:	4b1c      	ldr	r3, [pc, #112]	; (80072f4 <prvHeapInit+0xb0>)
 8007284:	2200      	movs	r2, #0
 8007286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	4413      	add	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007290:	2208      	movs	r2, #8
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1a9b      	subs	r3, r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0307 	bic.w	r3, r3, #7
 800729e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <prvHeapInit+0xb4>)
 80072a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <prvHeapInit+0xb4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2200      	movs	r2, #0
 80072ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072ae:	4b12      	ldr	r3, [pc, #72]	; (80072f8 <prvHeapInit+0xb4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	1ad2      	subs	r2, r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072c4:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <prvHeapInit+0xb4>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <prvHeapInit+0xb8>)
 80072d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	4a09      	ldr	r2, [pc, #36]	; (8007300 <prvHeapInit+0xbc>)
 80072da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <prvHeapInit+0xc0>)
 80072de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072e2:	601a      	str	r2, [r3, #0]
}
 80072e4:	bf00      	nop
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	20001134 	.word	0x20001134
 80072f4:	20004d34 	.word	0x20004d34
 80072f8:	20004d3c 	.word	0x20004d3c
 80072fc:	20004d44 	.word	0x20004d44
 8007300:	20004d40 	.word	0x20004d40
 8007304:	20004d50 	.word	0x20004d50

08007308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007310:	4b28      	ldr	r3, [pc, #160]	; (80073b4 <prvInsertBlockIntoFreeList+0xac>)
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	e002      	b.n	800731c <prvInsertBlockIntoFreeList+0x14>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d8f7      	bhi.n	8007316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	4413      	add	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	429a      	cmp	r2, r3
 8007336:	d108      	bne.n	800734a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	441a      	add	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	441a      	add	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d118      	bne.n	8007390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d00d      	beq.n	8007386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	441a      	add	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e008      	b.n	8007398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007386:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e003      	b.n	8007398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	429a      	cmp	r2, r3
 800739e:	d002      	beq.n	80073a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073a6:	bf00      	nop
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20004d34 	.word	0x20004d34
 80073b8:	20004d3c 	.word	0x20004d3c

080073bc <gcvt>:
 80073bc:	b530      	push	{r4, r5, lr}
 80073be:	2200      	movs	r2, #0
 80073c0:	b085      	sub	sp, #20
 80073c2:	460c      	mov	r4, r1
 80073c4:	4605      	mov	r5, r0
 80073c6:	2300      	movs	r3, #0
 80073c8:	ec51 0b10 	vmov	r0, r1, d0
 80073cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073d0:	f7f9 fba4 	bl	8000b1c <__aeabi_dcmplt>
 80073d4:	ed9d 0b02 	vldr	d0, [sp, #8]
 80073d8:	4622      	mov	r2, r4
 80073da:	b118      	cbz	r0, 80073e4 <gcvt+0x28>
 80073dc:	232d      	movs	r3, #45	; 0x2d
 80073de:	f802 3b01 	strb.w	r3, [r2], #1
 80073e2:	3d01      	subs	r5, #1
 80073e4:	2300      	movs	r3, #0
 80073e6:	4806      	ldr	r0, [pc, #24]	; (8007400 <gcvt+0x44>)
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	4629      	mov	r1, r5
 80073ec:	2367      	movs	r3, #103	; 0x67
 80073ee:	6800      	ldr	r0, [r0, #0]
 80073f0:	f001 fe16 	bl	8009020 <_gcvt>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	bf14      	ite	ne
 80073f8:	4620      	movne	r0, r4
 80073fa:	2000      	moveq	r0, #0
 80073fc:	b005      	add	sp, #20
 80073fe:	bd30      	pop	{r4, r5, pc}
 8007400:	20000014 	.word	0x20000014

08007404 <__errno>:
 8007404:	4b01      	ldr	r3, [pc, #4]	; (800740c <__errno+0x8>)
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	20000014 	.word	0x20000014

08007410 <std>:
 8007410:	2300      	movs	r3, #0
 8007412:	b510      	push	{r4, lr}
 8007414:	4604      	mov	r4, r0
 8007416:	e9c0 3300 	strd	r3, r3, [r0]
 800741a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800741e:	6083      	str	r3, [r0, #8]
 8007420:	8181      	strh	r1, [r0, #12]
 8007422:	6643      	str	r3, [r0, #100]	; 0x64
 8007424:	81c2      	strh	r2, [r0, #14]
 8007426:	6183      	str	r3, [r0, #24]
 8007428:	4619      	mov	r1, r3
 800742a:	2208      	movs	r2, #8
 800742c:	305c      	adds	r0, #92	; 0x5c
 800742e:	f000 f91a 	bl	8007666 <memset>
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <std+0x38>)
 8007434:	6263      	str	r3, [r4, #36]	; 0x24
 8007436:	4b05      	ldr	r3, [pc, #20]	; (800744c <std+0x3c>)
 8007438:	62a3      	str	r3, [r4, #40]	; 0x28
 800743a:	4b05      	ldr	r3, [pc, #20]	; (8007450 <std+0x40>)
 800743c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <std+0x44>)
 8007440:	6224      	str	r4, [r4, #32]
 8007442:	6323      	str	r3, [r4, #48]	; 0x30
 8007444:	bd10      	pop	{r4, pc}
 8007446:	bf00      	nop
 8007448:	08008169 	.word	0x08008169
 800744c:	0800818b 	.word	0x0800818b
 8007450:	080081c3 	.word	0x080081c3
 8007454:	080081e7 	.word	0x080081e7

08007458 <_cleanup_r>:
 8007458:	4901      	ldr	r1, [pc, #4]	; (8007460 <_cleanup_r+0x8>)
 800745a:	f000 b8af 	b.w	80075bc <_fwalk_reent>
 800745e:	bf00      	nop
 8007460:	080092ad 	.word	0x080092ad

08007464 <__sfmoreglue>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	2268      	movs	r2, #104	; 0x68
 8007468:	1e4d      	subs	r5, r1, #1
 800746a:	4355      	muls	r5, r2
 800746c:	460e      	mov	r6, r1
 800746e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007472:	f000 f921 	bl	80076b8 <_malloc_r>
 8007476:	4604      	mov	r4, r0
 8007478:	b140      	cbz	r0, 800748c <__sfmoreglue+0x28>
 800747a:	2100      	movs	r1, #0
 800747c:	e9c0 1600 	strd	r1, r6, [r0]
 8007480:	300c      	adds	r0, #12
 8007482:	60a0      	str	r0, [r4, #8]
 8007484:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007488:	f000 f8ed 	bl	8007666 <memset>
 800748c:	4620      	mov	r0, r4
 800748e:	bd70      	pop	{r4, r5, r6, pc}

08007490 <__sfp_lock_acquire>:
 8007490:	4801      	ldr	r0, [pc, #4]	; (8007498 <__sfp_lock_acquire+0x8>)
 8007492:	f000 b8d8 	b.w	8007646 <__retarget_lock_acquire_recursive>
 8007496:	bf00      	nop
 8007498:	20004d55 	.word	0x20004d55

0800749c <__sfp_lock_release>:
 800749c:	4801      	ldr	r0, [pc, #4]	; (80074a4 <__sfp_lock_release+0x8>)
 800749e:	f000 b8d3 	b.w	8007648 <__retarget_lock_release_recursive>
 80074a2:	bf00      	nop
 80074a4:	20004d55 	.word	0x20004d55

080074a8 <__sinit_lock_acquire>:
 80074a8:	4801      	ldr	r0, [pc, #4]	; (80074b0 <__sinit_lock_acquire+0x8>)
 80074aa:	f000 b8cc 	b.w	8007646 <__retarget_lock_acquire_recursive>
 80074ae:	bf00      	nop
 80074b0:	20004d56 	.word	0x20004d56

080074b4 <__sinit_lock_release>:
 80074b4:	4801      	ldr	r0, [pc, #4]	; (80074bc <__sinit_lock_release+0x8>)
 80074b6:	f000 b8c7 	b.w	8007648 <__retarget_lock_release_recursive>
 80074ba:	bf00      	nop
 80074bc:	20004d56 	.word	0x20004d56

080074c0 <__sinit>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	4604      	mov	r4, r0
 80074c4:	f7ff fff0 	bl	80074a8 <__sinit_lock_acquire>
 80074c8:	69a3      	ldr	r3, [r4, #24]
 80074ca:	b11b      	cbz	r3, 80074d4 <__sinit+0x14>
 80074cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d0:	f7ff bff0 	b.w	80074b4 <__sinit_lock_release>
 80074d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074d8:	6523      	str	r3, [r4, #80]	; 0x50
 80074da:	4b13      	ldr	r3, [pc, #76]	; (8007528 <__sinit+0x68>)
 80074dc:	4a13      	ldr	r2, [pc, #76]	; (800752c <__sinit+0x6c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	bf04      	itt	eq
 80074e6:	2301      	moveq	r3, #1
 80074e8:	61a3      	streq	r3, [r4, #24]
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 f820 	bl	8007530 <__sfp>
 80074f0:	6060      	str	r0, [r4, #4]
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 f81c 	bl	8007530 <__sfp>
 80074f8:	60a0      	str	r0, [r4, #8]
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 f818 	bl	8007530 <__sfp>
 8007500:	2200      	movs	r2, #0
 8007502:	60e0      	str	r0, [r4, #12]
 8007504:	2104      	movs	r1, #4
 8007506:	6860      	ldr	r0, [r4, #4]
 8007508:	f7ff ff82 	bl	8007410 <std>
 800750c:	68a0      	ldr	r0, [r4, #8]
 800750e:	2201      	movs	r2, #1
 8007510:	2109      	movs	r1, #9
 8007512:	f7ff ff7d 	bl	8007410 <std>
 8007516:	68e0      	ldr	r0, [r4, #12]
 8007518:	2202      	movs	r2, #2
 800751a:	2112      	movs	r1, #18
 800751c:	f7ff ff78 	bl	8007410 <std>
 8007520:	2301      	movs	r3, #1
 8007522:	61a3      	str	r3, [r4, #24]
 8007524:	e7d2      	b.n	80074cc <__sinit+0xc>
 8007526:	bf00      	nop
 8007528:	0800b51c 	.word	0x0800b51c
 800752c:	08007459 	.word	0x08007459

08007530 <__sfp>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	4607      	mov	r7, r0
 8007534:	f7ff ffac 	bl	8007490 <__sfp_lock_acquire>
 8007538:	4b1e      	ldr	r3, [pc, #120]	; (80075b4 <__sfp+0x84>)
 800753a:	681e      	ldr	r6, [r3, #0]
 800753c:	69b3      	ldr	r3, [r6, #24]
 800753e:	b913      	cbnz	r3, 8007546 <__sfp+0x16>
 8007540:	4630      	mov	r0, r6
 8007542:	f7ff ffbd 	bl	80074c0 <__sinit>
 8007546:	3648      	adds	r6, #72	; 0x48
 8007548:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800754c:	3b01      	subs	r3, #1
 800754e:	d503      	bpl.n	8007558 <__sfp+0x28>
 8007550:	6833      	ldr	r3, [r6, #0]
 8007552:	b30b      	cbz	r3, 8007598 <__sfp+0x68>
 8007554:	6836      	ldr	r6, [r6, #0]
 8007556:	e7f7      	b.n	8007548 <__sfp+0x18>
 8007558:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800755c:	b9d5      	cbnz	r5, 8007594 <__sfp+0x64>
 800755e:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <__sfp+0x88>)
 8007560:	60e3      	str	r3, [r4, #12]
 8007562:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007566:	6665      	str	r5, [r4, #100]	; 0x64
 8007568:	f000 f86c 	bl	8007644 <__retarget_lock_init_recursive>
 800756c:	f7ff ff96 	bl	800749c <__sfp_lock_release>
 8007570:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007574:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007578:	6025      	str	r5, [r4, #0]
 800757a:	61a5      	str	r5, [r4, #24]
 800757c:	2208      	movs	r2, #8
 800757e:	4629      	mov	r1, r5
 8007580:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007584:	f000 f86f 	bl	8007666 <memset>
 8007588:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800758c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007590:	4620      	mov	r0, r4
 8007592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007594:	3468      	adds	r4, #104	; 0x68
 8007596:	e7d9      	b.n	800754c <__sfp+0x1c>
 8007598:	2104      	movs	r1, #4
 800759a:	4638      	mov	r0, r7
 800759c:	f7ff ff62 	bl	8007464 <__sfmoreglue>
 80075a0:	4604      	mov	r4, r0
 80075a2:	6030      	str	r0, [r6, #0]
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d1d5      	bne.n	8007554 <__sfp+0x24>
 80075a8:	f7ff ff78 	bl	800749c <__sfp_lock_release>
 80075ac:	230c      	movs	r3, #12
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	e7ee      	b.n	8007590 <__sfp+0x60>
 80075b2:	bf00      	nop
 80075b4:	0800b51c 	.word	0x0800b51c
 80075b8:	ffff0001 	.word	0xffff0001

080075bc <_fwalk_reent>:
 80075bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c0:	4606      	mov	r6, r0
 80075c2:	4688      	mov	r8, r1
 80075c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075c8:	2700      	movs	r7, #0
 80075ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075ce:	f1b9 0901 	subs.w	r9, r9, #1
 80075d2:	d505      	bpl.n	80075e0 <_fwalk_reent+0x24>
 80075d4:	6824      	ldr	r4, [r4, #0]
 80075d6:	2c00      	cmp	r4, #0
 80075d8:	d1f7      	bne.n	80075ca <_fwalk_reent+0xe>
 80075da:	4638      	mov	r0, r7
 80075dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e0:	89ab      	ldrh	r3, [r5, #12]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d907      	bls.n	80075f6 <_fwalk_reent+0x3a>
 80075e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075ea:	3301      	adds	r3, #1
 80075ec:	d003      	beq.n	80075f6 <_fwalk_reent+0x3a>
 80075ee:	4629      	mov	r1, r5
 80075f0:	4630      	mov	r0, r6
 80075f2:	47c0      	blx	r8
 80075f4:	4307      	orrs	r7, r0
 80075f6:	3568      	adds	r5, #104	; 0x68
 80075f8:	e7e9      	b.n	80075ce <_fwalk_reent+0x12>
	...

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	4d0d      	ldr	r5, [pc, #52]	; (8007634 <__libc_init_array+0x38>)
 8007600:	4c0d      	ldr	r4, [pc, #52]	; (8007638 <__libc_init_array+0x3c>)
 8007602:	1b64      	subs	r4, r4, r5
 8007604:	10a4      	asrs	r4, r4, #2
 8007606:	2600      	movs	r6, #0
 8007608:	42a6      	cmp	r6, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	4d0b      	ldr	r5, [pc, #44]	; (800763c <__libc_init_array+0x40>)
 800760e:	4c0c      	ldr	r4, [pc, #48]	; (8007640 <__libc_init_array+0x44>)
 8007610:	f003 feac 	bl	800b36c <_init>
 8007614:	1b64      	subs	r4, r4, r5
 8007616:	10a4      	asrs	r4, r4, #2
 8007618:	2600      	movs	r6, #0
 800761a:	42a6      	cmp	r6, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	f855 3b04 	ldr.w	r3, [r5], #4
 8007624:	4798      	blx	r3
 8007626:	3601      	adds	r6, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	f855 3b04 	ldr.w	r3, [r5], #4
 800762e:	4798      	blx	r3
 8007630:	3601      	adds	r6, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	0800ba78 	.word	0x0800ba78
 8007638:	0800ba78 	.word	0x0800ba78
 800763c:	0800ba78 	.word	0x0800ba78
 8007640:	0800ba7c 	.word	0x0800ba7c

08007644 <__retarget_lock_init_recursive>:
 8007644:	4770      	bx	lr

08007646 <__retarget_lock_acquire_recursive>:
 8007646:	4770      	bx	lr

08007648 <__retarget_lock_release_recursive>:
 8007648:	4770      	bx	lr

0800764a <memcpy>:
 800764a:	440a      	add	r2, r1
 800764c:	4291      	cmp	r1, r2
 800764e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007652:	d100      	bne.n	8007656 <memcpy+0xc>
 8007654:	4770      	bx	lr
 8007656:	b510      	push	{r4, lr}
 8007658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800765c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007660:	4291      	cmp	r1, r2
 8007662:	d1f9      	bne.n	8007658 <memcpy+0xe>
 8007664:	bd10      	pop	{r4, pc}

08007666 <memset>:
 8007666:	4402      	add	r2, r0
 8007668:	4603      	mov	r3, r0
 800766a:	4293      	cmp	r3, r2
 800766c:	d100      	bne.n	8007670 <memset+0xa>
 800766e:	4770      	bx	lr
 8007670:	f803 1b01 	strb.w	r1, [r3], #1
 8007674:	e7f9      	b.n	800766a <memset+0x4>
	...

08007678 <sbrk_aligned>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	4e0e      	ldr	r6, [pc, #56]	; (80076b4 <sbrk_aligned+0x3c>)
 800767c:	460c      	mov	r4, r1
 800767e:	6831      	ldr	r1, [r6, #0]
 8007680:	4605      	mov	r5, r0
 8007682:	b911      	cbnz	r1, 800768a <sbrk_aligned+0x12>
 8007684:	f000 fd60 	bl	8008148 <_sbrk_r>
 8007688:	6030      	str	r0, [r6, #0]
 800768a:	4621      	mov	r1, r4
 800768c:	4628      	mov	r0, r5
 800768e:	f000 fd5b 	bl	8008148 <_sbrk_r>
 8007692:	1c43      	adds	r3, r0, #1
 8007694:	d00a      	beq.n	80076ac <sbrk_aligned+0x34>
 8007696:	1cc4      	adds	r4, r0, #3
 8007698:	f024 0403 	bic.w	r4, r4, #3
 800769c:	42a0      	cmp	r0, r4
 800769e:	d007      	beq.n	80076b0 <sbrk_aligned+0x38>
 80076a0:	1a21      	subs	r1, r4, r0
 80076a2:	4628      	mov	r0, r5
 80076a4:	f000 fd50 	bl	8008148 <_sbrk_r>
 80076a8:	3001      	adds	r0, #1
 80076aa:	d101      	bne.n	80076b0 <sbrk_aligned+0x38>
 80076ac:	f04f 34ff 	mov.w	r4, #4294967295
 80076b0:	4620      	mov	r0, r4
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
 80076b4:	20004d5c 	.word	0x20004d5c

080076b8 <_malloc_r>:
 80076b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076bc:	1ccd      	adds	r5, r1, #3
 80076be:	f025 0503 	bic.w	r5, r5, #3
 80076c2:	3508      	adds	r5, #8
 80076c4:	2d0c      	cmp	r5, #12
 80076c6:	bf38      	it	cc
 80076c8:	250c      	movcc	r5, #12
 80076ca:	2d00      	cmp	r5, #0
 80076cc:	4607      	mov	r7, r0
 80076ce:	db01      	blt.n	80076d4 <_malloc_r+0x1c>
 80076d0:	42a9      	cmp	r1, r5
 80076d2:	d905      	bls.n	80076e0 <_malloc_r+0x28>
 80076d4:	230c      	movs	r3, #12
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	2600      	movs	r6, #0
 80076da:	4630      	mov	r0, r6
 80076dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e0:	4e2e      	ldr	r6, [pc, #184]	; (800779c <_malloc_r+0xe4>)
 80076e2:	f001 fe3d 	bl	8009360 <__malloc_lock>
 80076e6:	6833      	ldr	r3, [r6, #0]
 80076e8:	461c      	mov	r4, r3
 80076ea:	bb34      	cbnz	r4, 800773a <_malloc_r+0x82>
 80076ec:	4629      	mov	r1, r5
 80076ee:	4638      	mov	r0, r7
 80076f0:	f7ff ffc2 	bl	8007678 <sbrk_aligned>
 80076f4:	1c43      	adds	r3, r0, #1
 80076f6:	4604      	mov	r4, r0
 80076f8:	d14d      	bne.n	8007796 <_malloc_r+0xde>
 80076fa:	6834      	ldr	r4, [r6, #0]
 80076fc:	4626      	mov	r6, r4
 80076fe:	2e00      	cmp	r6, #0
 8007700:	d140      	bne.n	8007784 <_malloc_r+0xcc>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	4631      	mov	r1, r6
 8007706:	4638      	mov	r0, r7
 8007708:	eb04 0803 	add.w	r8, r4, r3
 800770c:	f000 fd1c 	bl	8008148 <_sbrk_r>
 8007710:	4580      	cmp	r8, r0
 8007712:	d13a      	bne.n	800778a <_malloc_r+0xd2>
 8007714:	6821      	ldr	r1, [r4, #0]
 8007716:	3503      	adds	r5, #3
 8007718:	1a6d      	subs	r5, r5, r1
 800771a:	f025 0503 	bic.w	r5, r5, #3
 800771e:	3508      	adds	r5, #8
 8007720:	2d0c      	cmp	r5, #12
 8007722:	bf38      	it	cc
 8007724:	250c      	movcc	r5, #12
 8007726:	4629      	mov	r1, r5
 8007728:	4638      	mov	r0, r7
 800772a:	f7ff ffa5 	bl	8007678 <sbrk_aligned>
 800772e:	3001      	adds	r0, #1
 8007730:	d02b      	beq.n	800778a <_malloc_r+0xd2>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	442b      	add	r3, r5
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	e00e      	b.n	8007758 <_malloc_r+0xa0>
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	1b52      	subs	r2, r2, r5
 800773e:	d41e      	bmi.n	800777e <_malloc_r+0xc6>
 8007740:	2a0b      	cmp	r2, #11
 8007742:	d916      	bls.n	8007772 <_malloc_r+0xba>
 8007744:	1961      	adds	r1, r4, r5
 8007746:	42a3      	cmp	r3, r4
 8007748:	6025      	str	r5, [r4, #0]
 800774a:	bf18      	it	ne
 800774c:	6059      	strne	r1, [r3, #4]
 800774e:	6863      	ldr	r3, [r4, #4]
 8007750:	bf08      	it	eq
 8007752:	6031      	streq	r1, [r6, #0]
 8007754:	5162      	str	r2, [r4, r5]
 8007756:	604b      	str	r3, [r1, #4]
 8007758:	4638      	mov	r0, r7
 800775a:	f104 060b 	add.w	r6, r4, #11
 800775e:	f001 fe05 	bl	800936c <__malloc_unlock>
 8007762:	f026 0607 	bic.w	r6, r6, #7
 8007766:	1d23      	adds	r3, r4, #4
 8007768:	1af2      	subs	r2, r6, r3
 800776a:	d0b6      	beq.n	80076da <_malloc_r+0x22>
 800776c:	1b9b      	subs	r3, r3, r6
 800776e:	50a3      	str	r3, [r4, r2]
 8007770:	e7b3      	b.n	80076da <_malloc_r+0x22>
 8007772:	6862      	ldr	r2, [r4, #4]
 8007774:	42a3      	cmp	r3, r4
 8007776:	bf0c      	ite	eq
 8007778:	6032      	streq	r2, [r6, #0]
 800777a:	605a      	strne	r2, [r3, #4]
 800777c:	e7ec      	b.n	8007758 <_malloc_r+0xa0>
 800777e:	4623      	mov	r3, r4
 8007780:	6864      	ldr	r4, [r4, #4]
 8007782:	e7b2      	b.n	80076ea <_malloc_r+0x32>
 8007784:	4634      	mov	r4, r6
 8007786:	6876      	ldr	r6, [r6, #4]
 8007788:	e7b9      	b.n	80076fe <_malloc_r+0x46>
 800778a:	230c      	movs	r3, #12
 800778c:	603b      	str	r3, [r7, #0]
 800778e:	4638      	mov	r0, r7
 8007790:	f001 fdec 	bl	800936c <__malloc_unlock>
 8007794:	e7a1      	b.n	80076da <_malloc_r+0x22>
 8007796:	6025      	str	r5, [r4, #0]
 8007798:	e7de      	b.n	8007758 <_malloc_r+0xa0>
 800779a:	bf00      	nop
 800779c:	20004d58 	.word	0x20004d58

080077a0 <__cvt>:
 80077a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077a4:	ec55 4b10 	vmov	r4, r5, d0
 80077a8:	2d00      	cmp	r5, #0
 80077aa:	460e      	mov	r6, r1
 80077ac:	4619      	mov	r1, r3
 80077ae:	462b      	mov	r3, r5
 80077b0:	bfbb      	ittet	lt
 80077b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077b6:	461d      	movlt	r5, r3
 80077b8:	2300      	movge	r3, #0
 80077ba:	232d      	movlt	r3, #45	; 0x2d
 80077bc:	700b      	strb	r3, [r1, #0]
 80077be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077c4:	4691      	mov	r9, r2
 80077c6:	f023 0820 	bic.w	r8, r3, #32
 80077ca:	bfbc      	itt	lt
 80077cc:	4622      	movlt	r2, r4
 80077ce:	4614      	movlt	r4, r2
 80077d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077d4:	d005      	beq.n	80077e2 <__cvt+0x42>
 80077d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077da:	d100      	bne.n	80077de <__cvt+0x3e>
 80077dc:	3601      	adds	r6, #1
 80077de:	2102      	movs	r1, #2
 80077e0:	e000      	b.n	80077e4 <__cvt+0x44>
 80077e2:	2103      	movs	r1, #3
 80077e4:	ab03      	add	r3, sp, #12
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	ab02      	add	r3, sp, #8
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	ec45 4b10 	vmov	d0, r4, r5
 80077f0:	4653      	mov	r3, sl
 80077f2:	4632      	mov	r2, r6
 80077f4:	f000 fdac 	bl	8008350 <_dtoa_r>
 80077f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077fc:	4607      	mov	r7, r0
 80077fe:	d102      	bne.n	8007806 <__cvt+0x66>
 8007800:	f019 0f01 	tst.w	r9, #1
 8007804:	d022      	beq.n	800784c <__cvt+0xac>
 8007806:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800780a:	eb07 0906 	add.w	r9, r7, r6
 800780e:	d110      	bne.n	8007832 <__cvt+0x92>
 8007810:	783b      	ldrb	r3, [r7, #0]
 8007812:	2b30      	cmp	r3, #48	; 0x30
 8007814:	d10a      	bne.n	800782c <__cvt+0x8c>
 8007816:	2200      	movs	r2, #0
 8007818:	2300      	movs	r3, #0
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	f7f9 f973 	bl	8000b08 <__aeabi_dcmpeq>
 8007822:	b918      	cbnz	r0, 800782c <__cvt+0x8c>
 8007824:	f1c6 0601 	rsb	r6, r6, #1
 8007828:	f8ca 6000 	str.w	r6, [sl]
 800782c:	f8da 3000 	ldr.w	r3, [sl]
 8007830:	4499      	add	r9, r3
 8007832:	2200      	movs	r2, #0
 8007834:	2300      	movs	r3, #0
 8007836:	4620      	mov	r0, r4
 8007838:	4629      	mov	r1, r5
 800783a:	f7f9 f965 	bl	8000b08 <__aeabi_dcmpeq>
 800783e:	b108      	cbz	r0, 8007844 <__cvt+0xa4>
 8007840:	f8cd 900c 	str.w	r9, [sp, #12]
 8007844:	2230      	movs	r2, #48	; 0x30
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	454b      	cmp	r3, r9
 800784a:	d307      	bcc.n	800785c <__cvt+0xbc>
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007850:	1bdb      	subs	r3, r3, r7
 8007852:	4638      	mov	r0, r7
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	b004      	add	sp, #16
 8007858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785c:	1c59      	adds	r1, r3, #1
 800785e:	9103      	str	r1, [sp, #12]
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e7f0      	b.n	8007846 <__cvt+0xa6>

08007864 <__exponent>:
 8007864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007866:	4603      	mov	r3, r0
 8007868:	2900      	cmp	r1, #0
 800786a:	bfb8      	it	lt
 800786c:	4249      	neglt	r1, r1
 800786e:	f803 2b02 	strb.w	r2, [r3], #2
 8007872:	bfb4      	ite	lt
 8007874:	222d      	movlt	r2, #45	; 0x2d
 8007876:	222b      	movge	r2, #43	; 0x2b
 8007878:	2909      	cmp	r1, #9
 800787a:	7042      	strb	r2, [r0, #1]
 800787c:	dd2a      	ble.n	80078d4 <__exponent+0x70>
 800787e:	f10d 0407 	add.w	r4, sp, #7
 8007882:	46a4      	mov	ip, r4
 8007884:	270a      	movs	r7, #10
 8007886:	46a6      	mov	lr, r4
 8007888:	460a      	mov	r2, r1
 800788a:	fb91 f6f7 	sdiv	r6, r1, r7
 800788e:	fb07 1516 	mls	r5, r7, r6, r1
 8007892:	3530      	adds	r5, #48	; 0x30
 8007894:	2a63      	cmp	r2, #99	; 0x63
 8007896:	f104 34ff 	add.w	r4, r4, #4294967295
 800789a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800789e:	4631      	mov	r1, r6
 80078a0:	dcf1      	bgt.n	8007886 <__exponent+0x22>
 80078a2:	3130      	adds	r1, #48	; 0x30
 80078a4:	f1ae 0502 	sub.w	r5, lr, #2
 80078a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078ac:	1c44      	adds	r4, r0, #1
 80078ae:	4629      	mov	r1, r5
 80078b0:	4561      	cmp	r1, ip
 80078b2:	d30a      	bcc.n	80078ca <__exponent+0x66>
 80078b4:	f10d 0209 	add.w	r2, sp, #9
 80078b8:	eba2 020e 	sub.w	r2, r2, lr
 80078bc:	4565      	cmp	r5, ip
 80078be:	bf88      	it	hi
 80078c0:	2200      	movhi	r2, #0
 80078c2:	4413      	add	r3, r2
 80078c4:	1a18      	subs	r0, r3, r0
 80078c6:	b003      	add	sp, #12
 80078c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078d2:	e7ed      	b.n	80078b0 <__exponent+0x4c>
 80078d4:	2330      	movs	r3, #48	; 0x30
 80078d6:	3130      	adds	r1, #48	; 0x30
 80078d8:	7083      	strb	r3, [r0, #2]
 80078da:	70c1      	strb	r1, [r0, #3]
 80078dc:	1d03      	adds	r3, r0, #4
 80078de:	e7f1      	b.n	80078c4 <__exponent+0x60>

080078e0 <_printf_float>:
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	ed2d 8b02 	vpush	{d8}
 80078e8:	b08d      	sub	sp, #52	; 0x34
 80078ea:	460c      	mov	r4, r1
 80078ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078f0:	4616      	mov	r6, r2
 80078f2:	461f      	mov	r7, r3
 80078f4:	4605      	mov	r5, r0
 80078f6:	f001 fd15 	bl	8009324 <_localeconv_r>
 80078fa:	f8d0 a000 	ldr.w	sl, [r0]
 80078fe:	4650      	mov	r0, sl
 8007900:	f7f8 fc86 	bl	8000210 <strlen>
 8007904:	2300      	movs	r3, #0
 8007906:	930a      	str	r3, [sp, #40]	; 0x28
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	9305      	str	r3, [sp, #20]
 800790c:	f8d8 3000 	ldr.w	r3, [r8]
 8007910:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007914:	3307      	adds	r3, #7
 8007916:	f023 0307 	bic.w	r3, r3, #7
 800791a:	f103 0208 	add.w	r2, r3, #8
 800791e:	f8c8 2000 	str.w	r2, [r8]
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800792a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800792e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007932:	9307      	str	r3, [sp, #28]
 8007934:	f8cd 8018 	str.w	r8, [sp, #24]
 8007938:	ee08 0a10 	vmov	s16, r0
 800793c:	4b9f      	ldr	r3, [pc, #636]	; (8007bbc <_printf_float+0x2dc>)
 800793e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007942:	f04f 32ff 	mov.w	r2, #4294967295
 8007946:	f7f9 f911 	bl	8000b6c <__aeabi_dcmpun>
 800794a:	bb88      	cbnz	r0, 80079b0 <_printf_float+0xd0>
 800794c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007950:	4b9a      	ldr	r3, [pc, #616]	; (8007bbc <_printf_float+0x2dc>)
 8007952:	f04f 32ff 	mov.w	r2, #4294967295
 8007956:	f7f9 f8eb 	bl	8000b30 <__aeabi_dcmple>
 800795a:	bb48      	cbnz	r0, 80079b0 <_printf_float+0xd0>
 800795c:	2200      	movs	r2, #0
 800795e:	2300      	movs	r3, #0
 8007960:	4640      	mov	r0, r8
 8007962:	4649      	mov	r1, r9
 8007964:	f7f9 f8da 	bl	8000b1c <__aeabi_dcmplt>
 8007968:	b110      	cbz	r0, 8007970 <_printf_float+0x90>
 800796a:	232d      	movs	r3, #45	; 0x2d
 800796c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007970:	4b93      	ldr	r3, [pc, #588]	; (8007bc0 <_printf_float+0x2e0>)
 8007972:	4894      	ldr	r0, [pc, #592]	; (8007bc4 <_printf_float+0x2e4>)
 8007974:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007978:	bf94      	ite	ls
 800797a:	4698      	movls	r8, r3
 800797c:	4680      	movhi	r8, r0
 800797e:	2303      	movs	r3, #3
 8007980:	6123      	str	r3, [r4, #16]
 8007982:	9b05      	ldr	r3, [sp, #20]
 8007984:	f023 0204 	bic.w	r2, r3, #4
 8007988:	6022      	str	r2, [r4, #0]
 800798a:	f04f 0900 	mov.w	r9, #0
 800798e:	9700      	str	r7, [sp, #0]
 8007990:	4633      	mov	r3, r6
 8007992:	aa0b      	add	r2, sp, #44	; 0x2c
 8007994:	4621      	mov	r1, r4
 8007996:	4628      	mov	r0, r5
 8007998:	f000 f9d8 	bl	8007d4c <_printf_common>
 800799c:	3001      	adds	r0, #1
 800799e:	f040 8090 	bne.w	8007ac2 <_printf_float+0x1e2>
 80079a2:	f04f 30ff 	mov.w	r0, #4294967295
 80079a6:	b00d      	add	sp, #52	; 0x34
 80079a8:	ecbd 8b02 	vpop	{d8}
 80079ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b0:	4642      	mov	r2, r8
 80079b2:	464b      	mov	r3, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	4649      	mov	r1, r9
 80079b8:	f7f9 f8d8 	bl	8000b6c <__aeabi_dcmpun>
 80079bc:	b140      	cbz	r0, 80079d0 <_printf_float+0xf0>
 80079be:	464b      	mov	r3, r9
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bfbc      	itt	lt
 80079c4:	232d      	movlt	r3, #45	; 0x2d
 80079c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079ca:	487f      	ldr	r0, [pc, #508]	; (8007bc8 <_printf_float+0x2e8>)
 80079cc:	4b7f      	ldr	r3, [pc, #508]	; (8007bcc <_printf_float+0x2ec>)
 80079ce:	e7d1      	b.n	8007974 <_printf_float+0x94>
 80079d0:	6863      	ldr	r3, [r4, #4]
 80079d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079d6:	9206      	str	r2, [sp, #24]
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	d13f      	bne.n	8007a5c <_printf_float+0x17c>
 80079dc:	2306      	movs	r3, #6
 80079de:	6063      	str	r3, [r4, #4]
 80079e0:	9b05      	ldr	r3, [sp, #20]
 80079e2:	6861      	ldr	r1, [r4, #4]
 80079e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079e8:	2300      	movs	r3, #0
 80079ea:	9303      	str	r3, [sp, #12]
 80079ec:	ab0a      	add	r3, sp, #40	; 0x28
 80079ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079f2:	ab09      	add	r3, sp, #36	; 0x24
 80079f4:	ec49 8b10 	vmov	d0, r8, r9
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	6022      	str	r2, [r4, #0]
 80079fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a00:	4628      	mov	r0, r5
 8007a02:	f7ff fecd 	bl	80077a0 <__cvt>
 8007a06:	9b06      	ldr	r3, [sp, #24]
 8007a08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a0a:	2b47      	cmp	r3, #71	; 0x47
 8007a0c:	4680      	mov	r8, r0
 8007a0e:	d108      	bne.n	8007a22 <_printf_float+0x142>
 8007a10:	1cc8      	adds	r0, r1, #3
 8007a12:	db02      	blt.n	8007a1a <_printf_float+0x13a>
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	4299      	cmp	r1, r3
 8007a18:	dd41      	ble.n	8007a9e <_printf_float+0x1be>
 8007a1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a1e:	fa5f fb8b 	uxtb.w	fp, fp
 8007a22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a26:	d820      	bhi.n	8007a6a <_printf_float+0x18a>
 8007a28:	3901      	subs	r1, #1
 8007a2a:	465a      	mov	r2, fp
 8007a2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a30:	9109      	str	r1, [sp, #36]	; 0x24
 8007a32:	f7ff ff17 	bl	8007864 <__exponent>
 8007a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a38:	1813      	adds	r3, r2, r0
 8007a3a:	2a01      	cmp	r2, #1
 8007a3c:	4681      	mov	r9, r0
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	dc02      	bgt.n	8007a48 <_printf_float+0x168>
 8007a42:	6822      	ldr	r2, [r4, #0]
 8007a44:	07d2      	lsls	r2, r2, #31
 8007a46:	d501      	bpl.n	8007a4c <_printf_float+0x16c>
 8007a48:	3301      	adds	r3, #1
 8007a4a:	6123      	str	r3, [r4, #16]
 8007a4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d09c      	beq.n	800798e <_printf_float+0xae>
 8007a54:	232d      	movs	r3, #45	; 0x2d
 8007a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a5a:	e798      	b.n	800798e <_printf_float+0xae>
 8007a5c:	9a06      	ldr	r2, [sp, #24]
 8007a5e:	2a47      	cmp	r2, #71	; 0x47
 8007a60:	d1be      	bne.n	80079e0 <_printf_float+0x100>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1bc      	bne.n	80079e0 <_printf_float+0x100>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e7b9      	b.n	80079de <_printf_float+0xfe>
 8007a6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a6e:	d118      	bne.n	8007aa2 <_printf_float+0x1c2>
 8007a70:	2900      	cmp	r1, #0
 8007a72:	6863      	ldr	r3, [r4, #4]
 8007a74:	dd0b      	ble.n	8007a8e <_printf_float+0x1ae>
 8007a76:	6121      	str	r1, [r4, #16]
 8007a78:	b913      	cbnz	r3, 8007a80 <_printf_float+0x1a0>
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	07d0      	lsls	r0, r2, #31
 8007a7e:	d502      	bpl.n	8007a86 <_printf_float+0x1a6>
 8007a80:	3301      	adds	r3, #1
 8007a82:	440b      	add	r3, r1
 8007a84:	6123      	str	r3, [r4, #16]
 8007a86:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a88:	f04f 0900 	mov.w	r9, #0
 8007a8c:	e7de      	b.n	8007a4c <_printf_float+0x16c>
 8007a8e:	b913      	cbnz	r3, 8007a96 <_printf_float+0x1b6>
 8007a90:	6822      	ldr	r2, [r4, #0]
 8007a92:	07d2      	lsls	r2, r2, #31
 8007a94:	d501      	bpl.n	8007a9a <_printf_float+0x1ba>
 8007a96:	3302      	adds	r3, #2
 8007a98:	e7f4      	b.n	8007a84 <_printf_float+0x1a4>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e7f2      	b.n	8007a84 <_printf_float+0x1a4>
 8007a9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa4:	4299      	cmp	r1, r3
 8007aa6:	db05      	blt.n	8007ab4 <_printf_float+0x1d4>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	6121      	str	r1, [r4, #16]
 8007aac:	07d8      	lsls	r0, r3, #31
 8007aae:	d5ea      	bpl.n	8007a86 <_printf_float+0x1a6>
 8007ab0:	1c4b      	adds	r3, r1, #1
 8007ab2:	e7e7      	b.n	8007a84 <_printf_float+0x1a4>
 8007ab4:	2900      	cmp	r1, #0
 8007ab6:	bfd4      	ite	le
 8007ab8:	f1c1 0202 	rsble	r2, r1, #2
 8007abc:	2201      	movgt	r2, #1
 8007abe:	4413      	add	r3, r2
 8007ac0:	e7e0      	b.n	8007a84 <_printf_float+0x1a4>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	055a      	lsls	r2, r3, #21
 8007ac6:	d407      	bmi.n	8007ad8 <_printf_float+0x1f8>
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	4642      	mov	r2, r8
 8007acc:	4631      	mov	r1, r6
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d12c      	bne.n	8007b30 <_printf_float+0x250>
 8007ad6:	e764      	b.n	80079a2 <_printf_float+0xc2>
 8007ad8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007adc:	f240 80e0 	bls.w	8007ca0 <_printf_float+0x3c0>
 8007ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f7f9 f80e 	bl	8000b08 <__aeabi_dcmpeq>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d034      	beq.n	8007b5a <_printf_float+0x27a>
 8007af0:	4a37      	ldr	r2, [pc, #220]	; (8007bd0 <_printf_float+0x2f0>)
 8007af2:	2301      	movs	r3, #1
 8007af4:	4631      	mov	r1, r6
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b8      	blx	r7
 8007afa:	3001      	adds	r0, #1
 8007afc:	f43f af51 	beq.w	80079a2 <_printf_float+0xc2>
 8007b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b04:	429a      	cmp	r2, r3
 8007b06:	db02      	blt.n	8007b0e <_printf_float+0x22e>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	07d8      	lsls	r0, r3, #31
 8007b0c:	d510      	bpl.n	8007b30 <_printf_float+0x250>
 8007b0e:	ee18 3a10 	vmov	r3, s16
 8007b12:	4652      	mov	r2, sl
 8007b14:	4631      	mov	r1, r6
 8007b16:	4628      	mov	r0, r5
 8007b18:	47b8      	blx	r7
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	f43f af41 	beq.w	80079a2 <_printf_float+0xc2>
 8007b20:	f04f 0800 	mov.w	r8, #0
 8007b24:	f104 091a 	add.w	r9, r4, #26
 8007b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	4543      	cmp	r3, r8
 8007b2e:	dc09      	bgt.n	8007b44 <_printf_float+0x264>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	079b      	lsls	r3, r3, #30
 8007b34:	f100 8105 	bmi.w	8007d42 <_printf_float+0x462>
 8007b38:	68e0      	ldr	r0, [r4, #12]
 8007b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b3c:	4298      	cmp	r0, r3
 8007b3e:	bfb8      	it	lt
 8007b40:	4618      	movlt	r0, r3
 8007b42:	e730      	b.n	80079a6 <_printf_float+0xc6>
 8007b44:	2301      	movs	r3, #1
 8007b46:	464a      	mov	r2, r9
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	f43f af27 	beq.w	80079a2 <_printf_float+0xc2>
 8007b54:	f108 0801 	add.w	r8, r8, #1
 8007b58:	e7e6      	b.n	8007b28 <_printf_float+0x248>
 8007b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	dc39      	bgt.n	8007bd4 <_printf_float+0x2f4>
 8007b60:	4a1b      	ldr	r2, [pc, #108]	; (8007bd0 <_printf_float+0x2f0>)
 8007b62:	2301      	movs	r3, #1
 8007b64:	4631      	mov	r1, r6
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f43f af19 	beq.w	80079a2 <_printf_float+0xc2>
 8007b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b74:	4313      	orrs	r3, r2
 8007b76:	d102      	bne.n	8007b7e <_printf_float+0x29e>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	07d9      	lsls	r1, r3, #31
 8007b7c:	d5d8      	bpl.n	8007b30 <_printf_float+0x250>
 8007b7e:	ee18 3a10 	vmov	r3, s16
 8007b82:	4652      	mov	r2, sl
 8007b84:	4631      	mov	r1, r6
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	f43f af09 	beq.w	80079a2 <_printf_float+0xc2>
 8007b90:	f04f 0900 	mov.w	r9, #0
 8007b94:	f104 0a1a 	add.w	sl, r4, #26
 8007b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b9a:	425b      	negs	r3, r3
 8007b9c:	454b      	cmp	r3, r9
 8007b9e:	dc01      	bgt.n	8007ba4 <_printf_float+0x2c4>
 8007ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba2:	e792      	b.n	8007aca <_printf_float+0x1ea>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b8      	blx	r7
 8007bae:	3001      	adds	r0, #1
 8007bb0:	f43f aef7 	beq.w	80079a2 <_printf_float+0xc2>
 8007bb4:	f109 0901 	add.w	r9, r9, #1
 8007bb8:	e7ee      	b.n	8007b98 <_printf_float+0x2b8>
 8007bba:	bf00      	nop
 8007bbc:	7fefffff 	.word	0x7fefffff
 8007bc0:	0800b520 	.word	0x0800b520
 8007bc4:	0800b524 	.word	0x0800b524
 8007bc8:	0800b52c 	.word	0x0800b52c
 8007bcc:	0800b528 	.word	0x0800b528
 8007bd0:	0800b530 	.word	0x0800b530
 8007bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	bfa8      	it	ge
 8007bdc:	461a      	movge	r2, r3
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	4691      	mov	r9, r2
 8007be2:	dc37      	bgt.n	8007c54 <_printf_float+0x374>
 8007be4:	f04f 0b00 	mov.w	fp, #0
 8007be8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bec:	f104 021a 	add.w	r2, r4, #26
 8007bf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	eba3 0309 	sub.w	r3, r3, r9
 8007bf8:	455b      	cmp	r3, fp
 8007bfa:	dc33      	bgt.n	8007c64 <_printf_float+0x384>
 8007bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c00:	429a      	cmp	r2, r3
 8007c02:	db3b      	blt.n	8007c7c <_printf_float+0x39c>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	07da      	lsls	r2, r3, #31
 8007c08:	d438      	bmi.n	8007c7c <_printf_float+0x39c>
 8007c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0c:	9a05      	ldr	r2, [sp, #20]
 8007c0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c10:	1a9a      	subs	r2, r3, r2
 8007c12:	eba3 0901 	sub.w	r9, r3, r1
 8007c16:	4591      	cmp	r9, r2
 8007c18:	bfa8      	it	ge
 8007c1a:	4691      	movge	r9, r2
 8007c1c:	f1b9 0f00 	cmp.w	r9, #0
 8007c20:	dc35      	bgt.n	8007c8e <_printf_float+0x3ae>
 8007c22:	f04f 0800 	mov.w	r8, #0
 8007c26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c2a:	f104 0a1a 	add.w	sl, r4, #26
 8007c2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c32:	1a9b      	subs	r3, r3, r2
 8007c34:	eba3 0309 	sub.w	r3, r3, r9
 8007c38:	4543      	cmp	r3, r8
 8007c3a:	f77f af79 	ble.w	8007b30 <_printf_float+0x250>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4652      	mov	r2, sl
 8007c42:	4631      	mov	r1, r6
 8007c44:	4628      	mov	r0, r5
 8007c46:	47b8      	blx	r7
 8007c48:	3001      	adds	r0, #1
 8007c4a:	f43f aeaa 	beq.w	80079a2 <_printf_float+0xc2>
 8007c4e:	f108 0801 	add.w	r8, r8, #1
 8007c52:	e7ec      	b.n	8007c2e <_printf_float+0x34e>
 8007c54:	4613      	mov	r3, r2
 8007c56:	4631      	mov	r1, r6
 8007c58:	4642      	mov	r2, r8
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	47b8      	blx	r7
 8007c5e:	3001      	adds	r0, #1
 8007c60:	d1c0      	bne.n	8007be4 <_printf_float+0x304>
 8007c62:	e69e      	b.n	80079a2 <_printf_float+0xc2>
 8007c64:	2301      	movs	r3, #1
 8007c66:	4631      	mov	r1, r6
 8007c68:	4628      	mov	r0, r5
 8007c6a:	9205      	str	r2, [sp, #20]
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f ae97 	beq.w	80079a2 <_printf_float+0xc2>
 8007c74:	9a05      	ldr	r2, [sp, #20]
 8007c76:	f10b 0b01 	add.w	fp, fp, #1
 8007c7a:	e7b9      	b.n	8007bf0 <_printf_float+0x310>
 8007c7c:	ee18 3a10 	vmov	r3, s16
 8007c80:	4652      	mov	r2, sl
 8007c82:	4631      	mov	r1, r6
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b8      	blx	r7
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d1be      	bne.n	8007c0a <_printf_float+0x32a>
 8007c8c:	e689      	b.n	80079a2 <_printf_float+0xc2>
 8007c8e:	9a05      	ldr	r2, [sp, #20]
 8007c90:	464b      	mov	r3, r9
 8007c92:	4442      	add	r2, r8
 8007c94:	4631      	mov	r1, r6
 8007c96:	4628      	mov	r0, r5
 8007c98:	47b8      	blx	r7
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d1c1      	bne.n	8007c22 <_printf_float+0x342>
 8007c9e:	e680      	b.n	80079a2 <_printf_float+0xc2>
 8007ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ca2:	2a01      	cmp	r2, #1
 8007ca4:	dc01      	bgt.n	8007caa <_printf_float+0x3ca>
 8007ca6:	07db      	lsls	r3, r3, #31
 8007ca8:	d538      	bpl.n	8007d1c <_printf_float+0x43c>
 8007caa:	2301      	movs	r3, #1
 8007cac:	4642      	mov	r2, r8
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	f43f ae74 	beq.w	80079a2 <_printf_float+0xc2>
 8007cba:	ee18 3a10 	vmov	r3, s16
 8007cbe:	4652      	mov	r2, sl
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f43f ae6b 	beq.w	80079a2 <_printf_float+0xc2>
 8007ccc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f7f8 ff18 	bl	8000b08 <__aeabi_dcmpeq>
 8007cd8:	b9d8      	cbnz	r0, 8007d12 <_printf_float+0x432>
 8007cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cdc:	f108 0201 	add.w	r2, r8, #1
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	47b8      	blx	r7
 8007ce8:	3001      	adds	r0, #1
 8007cea:	d10e      	bne.n	8007d0a <_printf_float+0x42a>
 8007cec:	e659      	b.n	80079a2 <_printf_float+0xc2>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b8      	blx	r7
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	f43f ae52 	beq.w	80079a2 <_printf_float+0xc2>
 8007cfe:	f108 0801 	add.w	r8, r8, #1
 8007d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d04:	3b01      	subs	r3, #1
 8007d06:	4543      	cmp	r3, r8
 8007d08:	dcf1      	bgt.n	8007cee <_printf_float+0x40e>
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d10:	e6dc      	b.n	8007acc <_printf_float+0x1ec>
 8007d12:	f04f 0800 	mov.w	r8, #0
 8007d16:	f104 0a1a 	add.w	sl, r4, #26
 8007d1a:	e7f2      	b.n	8007d02 <_printf_float+0x422>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	4642      	mov	r2, r8
 8007d20:	e7df      	b.n	8007ce2 <_printf_float+0x402>
 8007d22:	2301      	movs	r3, #1
 8007d24:	464a      	mov	r2, r9
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	f43f ae38 	beq.w	80079a2 <_printf_float+0xc2>
 8007d32:	f108 0801 	add.w	r8, r8, #1
 8007d36:	68e3      	ldr	r3, [r4, #12]
 8007d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d3a:	1a5b      	subs	r3, r3, r1
 8007d3c:	4543      	cmp	r3, r8
 8007d3e:	dcf0      	bgt.n	8007d22 <_printf_float+0x442>
 8007d40:	e6fa      	b.n	8007b38 <_printf_float+0x258>
 8007d42:	f04f 0800 	mov.w	r8, #0
 8007d46:	f104 0919 	add.w	r9, r4, #25
 8007d4a:	e7f4      	b.n	8007d36 <_printf_float+0x456>

08007d4c <_printf_common>:
 8007d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d50:	4616      	mov	r6, r2
 8007d52:	4699      	mov	r9, r3
 8007d54:	688a      	ldr	r2, [r1, #8]
 8007d56:	690b      	ldr	r3, [r1, #16]
 8007d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	bfb8      	it	lt
 8007d60:	4613      	movlt	r3, r2
 8007d62:	6033      	str	r3, [r6, #0]
 8007d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d68:	4607      	mov	r7, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b10a      	cbz	r2, 8007d72 <_printf_common+0x26>
 8007d6e:	3301      	adds	r3, #1
 8007d70:	6033      	str	r3, [r6, #0]
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	0699      	lsls	r1, r3, #26
 8007d76:	bf42      	ittt	mi
 8007d78:	6833      	ldrmi	r3, [r6, #0]
 8007d7a:	3302      	addmi	r3, #2
 8007d7c:	6033      	strmi	r3, [r6, #0]
 8007d7e:	6825      	ldr	r5, [r4, #0]
 8007d80:	f015 0506 	ands.w	r5, r5, #6
 8007d84:	d106      	bne.n	8007d94 <_printf_common+0x48>
 8007d86:	f104 0a19 	add.w	sl, r4, #25
 8007d8a:	68e3      	ldr	r3, [r4, #12]
 8007d8c:	6832      	ldr	r2, [r6, #0]
 8007d8e:	1a9b      	subs	r3, r3, r2
 8007d90:	42ab      	cmp	r3, r5
 8007d92:	dc26      	bgt.n	8007de2 <_printf_common+0x96>
 8007d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d98:	1e13      	subs	r3, r2, #0
 8007d9a:	6822      	ldr	r2, [r4, #0]
 8007d9c:	bf18      	it	ne
 8007d9e:	2301      	movne	r3, #1
 8007da0:	0692      	lsls	r2, r2, #26
 8007da2:	d42b      	bmi.n	8007dfc <_printf_common+0xb0>
 8007da4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007da8:	4649      	mov	r1, r9
 8007daa:	4638      	mov	r0, r7
 8007dac:	47c0      	blx	r8
 8007dae:	3001      	adds	r0, #1
 8007db0:	d01e      	beq.n	8007df0 <_printf_common+0xa4>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	68e5      	ldr	r5, [r4, #12]
 8007db6:	6832      	ldr	r2, [r6, #0]
 8007db8:	f003 0306 	and.w	r3, r3, #6
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	bf08      	it	eq
 8007dc0:	1aad      	subeq	r5, r5, r2
 8007dc2:	68a3      	ldr	r3, [r4, #8]
 8007dc4:	6922      	ldr	r2, [r4, #16]
 8007dc6:	bf0c      	ite	eq
 8007dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dcc:	2500      	movne	r5, #0
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	bfc4      	itt	gt
 8007dd2:	1a9b      	subgt	r3, r3, r2
 8007dd4:	18ed      	addgt	r5, r5, r3
 8007dd6:	2600      	movs	r6, #0
 8007dd8:	341a      	adds	r4, #26
 8007dda:	42b5      	cmp	r5, r6
 8007ddc:	d11a      	bne.n	8007e14 <_printf_common+0xc8>
 8007dde:	2000      	movs	r0, #0
 8007de0:	e008      	b.n	8007df4 <_printf_common+0xa8>
 8007de2:	2301      	movs	r3, #1
 8007de4:	4652      	mov	r2, sl
 8007de6:	4649      	mov	r1, r9
 8007de8:	4638      	mov	r0, r7
 8007dea:	47c0      	blx	r8
 8007dec:	3001      	adds	r0, #1
 8007dee:	d103      	bne.n	8007df8 <_printf_common+0xac>
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df8:	3501      	adds	r5, #1
 8007dfa:	e7c6      	b.n	8007d8a <_printf_common+0x3e>
 8007dfc:	18e1      	adds	r1, r4, r3
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	2030      	movs	r0, #48	; 0x30
 8007e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e06:	4422      	add	r2, r4
 8007e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e10:	3302      	adds	r3, #2
 8007e12:	e7c7      	b.n	8007da4 <_printf_common+0x58>
 8007e14:	2301      	movs	r3, #1
 8007e16:	4622      	mov	r2, r4
 8007e18:	4649      	mov	r1, r9
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	47c0      	blx	r8
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d0e6      	beq.n	8007df0 <_printf_common+0xa4>
 8007e22:	3601      	adds	r6, #1
 8007e24:	e7d9      	b.n	8007dda <_printf_common+0x8e>
	...

08007e28 <_printf_i>:
 8007e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2c:	7e0f      	ldrb	r7, [r1, #24]
 8007e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e30:	2f78      	cmp	r7, #120	; 0x78
 8007e32:	4691      	mov	r9, r2
 8007e34:	4680      	mov	r8, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	469a      	mov	sl, r3
 8007e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e3e:	d807      	bhi.n	8007e50 <_printf_i+0x28>
 8007e40:	2f62      	cmp	r7, #98	; 0x62
 8007e42:	d80a      	bhi.n	8007e5a <_printf_i+0x32>
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	f000 80d8 	beq.w	8007ffa <_printf_i+0x1d2>
 8007e4a:	2f58      	cmp	r7, #88	; 0x58
 8007e4c:	f000 80a3 	beq.w	8007f96 <_printf_i+0x16e>
 8007e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e58:	e03a      	b.n	8007ed0 <_printf_i+0xa8>
 8007e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e5e:	2b15      	cmp	r3, #21
 8007e60:	d8f6      	bhi.n	8007e50 <_printf_i+0x28>
 8007e62:	a101      	add	r1, pc, #4	; (adr r1, 8007e68 <_printf_i+0x40>)
 8007e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e68:	08007ec1 	.word	0x08007ec1
 8007e6c:	08007ed5 	.word	0x08007ed5
 8007e70:	08007e51 	.word	0x08007e51
 8007e74:	08007e51 	.word	0x08007e51
 8007e78:	08007e51 	.word	0x08007e51
 8007e7c:	08007e51 	.word	0x08007e51
 8007e80:	08007ed5 	.word	0x08007ed5
 8007e84:	08007e51 	.word	0x08007e51
 8007e88:	08007e51 	.word	0x08007e51
 8007e8c:	08007e51 	.word	0x08007e51
 8007e90:	08007e51 	.word	0x08007e51
 8007e94:	08007fe1 	.word	0x08007fe1
 8007e98:	08007f05 	.word	0x08007f05
 8007e9c:	08007fc3 	.word	0x08007fc3
 8007ea0:	08007e51 	.word	0x08007e51
 8007ea4:	08007e51 	.word	0x08007e51
 8007ea8:	08008003 	.word	0x08008003
 8007eac:	08007e51 	.word	0x08007e51
 8007eb0:	08007f05 	.word	0x08007f05
 8007eb4:	08007e51 	.word	0x08007e51
 8007eb8:	08007e51 	.word	0x08007e51
 8007ebc:	08007fcb 	.word	0x08007fcb
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	1d1a      	adds	r2, r3, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	602a      	str	r2, [r5, #0]
 8007ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0a3      	b.n	800801c <_printf_i+0x1f4>
 8007ed4:	6820      	ldr	r0, [r4, #0]
 8007ed6:	6829      	ldr	r1, [r5, #0]
 8007ed8:	0606      	lsls	r6, r0, #24
 8007eda:	f101 0304 	add.w	r3, r1, #4
 8007ede:	d50a      	bpl.n	8007ef6 <_printf_i+0xce>
 8007ee0:	680e      	ldr	r6, [r1, #0]
 8007ee2:	602b      	str	r3, [r5, #0]
 8007ee4:	2e00      	cmp	r6, #0
 8007ee6:	da03      	bge.n	8007ef0 <_printf_i+0xc8>
 8007ee8:	232d      	movs	r3, #45	; 0x2d
 8007eea:	4276      	negs	r6, r6
 8007eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef0:	485e      	ldr	r0, [pc, #376]	; (800806c <_printf_i+0x244>)
 8007ef2:	230a      	movs	r3, #10
 8007ef4:	e019      	b.n	8007f2a <_printf_i+0x102>
 8007ef6:	680e      	ldr	r6, [r1, #0]
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007efe:	bf18      	it	ne
 8007f00:	b236      	sxthne	r6, r6
 8007f02:	e7ef      	b.n	8007ee4 <_printf_i+0xbc>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	6820      	ldr	r0, [r4, #0]
 8007f08:	1d19      	adds	r1, r3, #4
 8007f0a:	6029      	str	r1, [r5, #0]
 8007f0c:	0601      	lsls	r1, r0, #24
 8007f0e:	d501      	bpl.n	8007f14 <_printf_i+0xec>
 8007f10:	681e      	ldr	r6, [r3, #0]
 8007f12:	e002      	b.n	8007f1a <_printf_i+0xf2>
 8007f14:	0646      	lsls	r6, r0, #25
 8007f16:	d5fb      	bpl.n	8007f10 <_printf_i+0xe8>
 8007f18:	881e      	ldrh	r6, [r3, #0]
 8007f1a:	4854      	ldr	r0, [pc, #336]	; (800806c <_printf_i+0x244>)
 8007f1c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f1e:	bf0c      	ite	eq
 8007f20:	2308      	moveq	r3, #8
 8007f22:	230a      	movne	r3, #10
 8007f24:	2100      	movs	r1, #0
 8007f26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f2a:	6865      	ldr	r5, [r4, #4]
 8007f2c:	60a5      	str	r5, [r4, #8]
 8007f2e:	2d00      	cmp	r5, #0
 8007f30:	bfa2      	ittt	ge
 8007f32:	6821      	ldrge	r1, [r4, #0]
 8007f34:	f021 0104 	bicge.w	r1, r1, #4
 8007f38:	6021      	strge	r1, [r4, #0]
 8007f3a:	b90e      	cbnz	r6, 8007f40 <_printf_i+0x118>
 8007f3c:	2d00      	cmp	r5, #0
 8007f3e:	d04d      	beq.n	8007fdc <_printf_i+0x1b4>
 8007f40:	4615      	mov	r5, r2
 8007f42:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f46:	fb03 6711 	mls	r7, r3, r1, r6
 8007f4a:	5dc7      	ldrb	r7, [r0, r7]
 8007f4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f50:	4637      	mov	r7, r6
 8007f52:	42bb      	cmp	r3, r7
 8007f54:	460e      	mov	r6, r1
 8007f56:	d9f4      	bls.n	8007f42 <_printf_i+0x11a>
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d10b      	bne.n	8007f74 <_printf_i+0x14c>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	07de      	lsls	r6, r3, #31
 8007f60:	d508      	bpl.n	8007f74 <_printf_i+0x14c>
 8007f62:	6923      	ldr	r3, [r4, #16]
 8007f64:	6861      	ldr	r1, [r4, #4]
 8007f66:	4299      	cmp	r1, r3
 8007f68:	bfde      	ittt	le
 8007f6a:	2330      	movle	r3, #48	; 0x30
 8007f6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f74:	1b52      	subs	r2, r2, r5
 8007f76:	6122      	str	r2, [r4, #16]
 8007f78:	f8cd a000 	str.w	sl, [sp]
 8007f7c:	464b      	mov	r3, r9
 8007f7e:	aa03      	add	r2, sp, #12
 8007f80:	4621      	mov	r1, r4
 8007f82:	4640      	mov	r0, r8
 8007f84:	f7ff fee2 	bl	8007d4c <_printf_common>
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d14c      	bne.n	8008026 <_printf_i+0x1fe>
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	b004      	add	sp, #16
 8007f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f96:	4835      	ldr	r0, [pc, #212]	; (800806c <_printf_i+0x244>)
 8007f98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f9c:	6829      	ldr	r1, [r5, #0]
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fa4:	6029      	str	r1, [r5, #0]
 8007fa6:	061d      	lsls	r5, r3, #24
 8007fa8:	d514      	bpl.n	8007fd4 <_printf_i+0x1ac>
 8007faa:	07df      	lsls	r7, r3, #31
 8007fac:	bf44      	itt	mi
 8007fae:	f043 0320 	orrmi.w	r3, r3, #32
 8007fb2:	6023      	strmi	r3, [r4, #0]
 8007fb4:	b91e      	cbnz	r6, 8007fbe <_printf_i+0x196>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	f023 0320 	bic.w	r3, r3, #32
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	2310      	movs	r3, #16
 8007fc0:	e7b0      	b.n	8007f24 <_printf_i+0xfc>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	f043 0320 	orr.w	r3, r3, #32
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	2378      	movs	r3, #120	; 0x78
 8007fcc:	4828      	ldr	r0, [pc, #160]	; (8008070 <_printf_i+0x248>)
 8007fce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fd2:	e7e3      	b.n	8007f9c <_printf_i+0x174>
 8007fd4:	0659      	lsls	r1, r3, #25
 8007fd6:	bf48      	it	mi
 8007fd8:	b2b6      	uxthmi	r6, r6
 8007fda:	e7e6      	b.n	8007faa <_printf_i+0x182>
 8007fdc:	4615      	mov	r5, r2
 8007fde:	e7bb      	b.n	8007f58 <_printf_i+0x130>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	6826      	ldr	r6, [r4, #0]
 8007fe4:	6961      	ldr	r1, [r4, #20]
 8007fe6:	1d18      	adds	r0, r3, #4
 8007fe8:	6028      	str	r0, [r5, #0]
 8007fea:	0635      	lsls	r5, r6, #24
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	d501      	bpl.n	8007ff4 <_printf_i+0x1cc>
 8007ff0:	6019      	str	r1, [r3, #0]
 8007ff2:	e002      	b.n	8007ffa <_printf_i+0x1d2>
 8007ff4:	0670      	lsls	r0, r6, #25
 8007ff6:	d5fb      	bpl.n	8007ff0 <_printf_i+0x1c8>
 8007ff8:	8019      	strh	r1, [r3, #0]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	6123      	str	r3, [r4, #16]
 8007ffe:	4615      	mov	r5, r2
 8008000:	e7ba      	b.n	8007f78 <_printf_i+0x150>
 8008002:	682b      	ldr	r3, [r5, #0]
 8008004:	1d1a      	adds	r2, r3, #4
 8008006:	602a      	str	r2, [r5, #0]
 8008008:	681d      	ldr	r5, [r3, #0]
 800800a:	6862      	ldr	r2, [r4, #4]
 800800c:	2100      	movs	r1, #0
 800800e:	4628      	mov	r0, r5
 8008010:	f7f8 f906 	bl	8000220 <memchr>
 8008014:	b108      	cbz	r0, 800801a <_printf_i+0x1f2>
 8008016:	1b40      	subs	r0, r0, r5
 8008018:	6060      	str	r0, [r4, #4]
 800801a:	6863      	ldr	r3, [r4, #4]
 800801c:	6123      	str	r3, [r4, #16]
 800801e:	2300      	movs	r3, #0
 8008020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008024:	e7a8      	b.n	8007f78 <_printf_i+0x150>
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	462a      	mov	r2, r5
 800802a:	4649      	mov	r1, r9
 800802c:	4640      	mov	r0, r8
 800802e:	47d0      	blx	sl
 8008030:	3001      	adds	r0, #1
 8008032:	d0ab      	beq.n	8007f8c <_printf_i+0x164>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	079b      	lsls	r3, r3, #30
 8008038:	d413      	bmi.n	8008062 <_printf_i+0x23a>
 800803a:	68e0      	ldr	r0, [r4, #12]
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	4298      	cmp	r0, r3
 8008040:	bfb8      	it	lt
 8008042:	4618      	movlt	r0, r3
 8008044:	e7a4      	b.n	8007f90 <_printf_i+0x168>
 8008046:	2301      	movs	r3, #1
 8008048:	4632      	mov	r2, r6
 800804a:	4649      	mov	r1, r9
 800804c:	4640      	mov	r0, r8
 800804e:	47d0      	blx	sl
 8008050:	3001      	adds	r0, #1
 8008052:	d09b      	beq.n	8007f8c <_printf_i+0x164>
 8008054:	3501      	adds	r5, #1
 8008056:	68e3      	ldr	r3, [r4, #12]
 8008058:	9903      	ldr	r1, [sp, #12]
 800805a:	1a5b      	subs	r3, r3, r1
 800805c:	42ab      	cmp	r3, r5
 800805e:	dcf2      	bgt.n	8008046 <_printf_i+0x21e>
 8008060:	e7eb      	b.n	800803a <_printf_i+0x212>
 8008062:	2500      	movs	r5, #0
 8008064:	f104 0619 	add.w	r6, r4, #25
 8008068:	e7f5      	b.n	8008056 <_printf_i+0x22e>
 800806a:	bf00      	nop
 800806c:	0800b532 	.word	0x0800b532
 8008070:	0800b543 	.word	0x0800b543

08008074 <cleanup_glue>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	460c      	mov	r4, r1
 8008078:	6809      	ldr	r1, [r1, #0]
 800807a:	4605      	mov	r5, r0
 800807c:	b109      	cbz	r1, 8008082 <cleanup_glue+0xe>
 800807e:	f7ff fff9 	bl	8008074 <cleanup_glue>
 8008082:	4621      	mov	r1, r4
 8008084:	4628      	mov	r0, r5
 8008086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800808a:	f001 bd2d 	b.w	8009ae8 <_free_r>
	...

08008090 <_reclaim_reent>:
 8008090:	4b2c      	ldr	r3, [pc, #176]	; (8008144 <_reclaim_reent+0xb4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4283      	cmp	r3, r0
 8008096:	b570      	push	{r4, r5, r6, lr}
 8008098:	4604      	mov	r4, r0
 800809a:	d051      	beq.n	8008140 <_reclaim_reent+0xb0>
 800809c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800809e:	b143      	cbz	r3, 80080b2 <_reclaim_reent+0x22>
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d14a      	bne.n	800813c <_reclaim_reent+0xac>
 80080a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080a8:	6819      	ldr	r1, [r3, #0]
 80080aa:	b111      	cbz	r1, 80080b2 <_reclaim_reent+0x22>
 80080ac:	4620      	mov	r0, r4
 80080ae:	f001 fd1b 	bl	8009ae8 <_free_r>
 80080b2:	6961      	ldr	r1, [r4, #20]
 80080b4:	b111      	cbz	r1, 80080bc <_reclaim_reent+0x2c>
 80080b6:	4620      	mov	r0, r4
 80080b8:	f001 fd16 	bl	8009ae8 <_free_r>
 80080bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080be:	b111      	cbz	r1, 80080c6 <_reclaim_reent+0x36>
 80080c0:	4620      	mov	r0, r4
 80080c2:	f001 fd11 	bl	8009ae8 <_free_r>
 80080c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080c8:	b111      	cbz	r1, 80080d0 <_reclaim_reent+0x40>
 80080ca:	4620      	mov	r0, r4
 80080cc:	f001 fd0c 	bl	8009ae8 <_free_r>
 80080d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80080d2:	b111      	cbz	r1, 80080da <_reclaim_reent+0x4a>
 80080d4:	4620      	mov	r0, r4
 80080d6:	f001 fd07 	bl	8009ae8 <_free_r>
 80080da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80080dc:	b111      	cbz	r1, 80080e4 <_reclaim_reent+0x54>
 80080de:	4620      	mov	r0, r4
 80080e0:	f001 fd02 	bl	8009ae8 <_free_r>
 80080e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80080e6:	b111      	cbz	r1, 80080ee <_reclaim_reent+0x5e>
 80080e8:	4620      	mov	r0, r4
 80080ea:	f001 fcfd 	bl	8009ae8 <_free_r>
 80080ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80080f0:	b111      	cbz	r1, 80080f8 <_reclaim_reent+0x68>
 80080f2:	4620      	mov	r0, r4
 80080f4:	f001 fcf8 	bl	8009ae8 <_free_r>
 80080f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080fa:	b111      	cbz	r1, 8008102 <_reclaim_reent+0x72>
 80080fc:	4620      	mov	r0, r4
 80080fe:	f001 fcf3 	bl	8009ae8 <_free_r>
 8008102:	69a3      	ldr	r3, [r4, #24]
 8008104:	b1e3      	cbz	r3, 8008140 <_reclaim_reent+0xb0>
 8008106:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008108:	4620      	mov	r0, r4
 800810a:	4798      	blx	r3
 800810c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800810e:	b1b9      	cbz	r1, 8008140 <_reclaim_reent+0xb0>
 8008110:	4620      	mov	r0, r4
 8008112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008116:	f7ff bfad 	b.w	8008074 <cleanup_glue>
 800811a:	5949      	ldr	r1, [r1, r5]
 800811c:	b941      	cbnz	r1, 8008130 <_reclaim_reent+0xa0>
 800811e:	3504      	adds	r5, #4
 8008120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008122:	2d80      	cmp	r5, #128	; 0x80
 8008124:	68d9      	ldr	r1, [r3, #12]
 8008126:	d1f8      	bne.n	800811a <_reclaim_reent+0x8a>
 8008128:	4620      	mov	r0, r4
 800812a:	f001 fcdd 	bl	8009ae8 <_free_r>
 800812e:	e7ba      	b.n	80080a6 <_reclaim_reent+0x16>
 8008130:	680e      	ldr	r6, [r1, #0]
 8008132:	4620      	mov	r0, r4
 8008134:	f001 fcd8 	bl	8009ae8 <_free_r>
 8008138:	4631      	mov	r1, r6
 800813a:	e7ef      	b.n	800811c <_reclaim_reent+0x8c>
 800813c:	2500      	movs	r5, #0
 800813e:	e7ef      	b.n	8008120 <_reclaim_reent+0x90>
 8008140:	bd70      	pop	{r4, r5, r6, pc}
 8008142:	bf00      	nop
 8008144:	20000014 	.word	0x20000014

08008148 <_sbrk_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4d06      	ldr	r5, [pc, #24]	; (8008164 <_sbrk_r+0x1c>)
 800814c:	2300      	movs	r3, #0
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	602b      	str	r3, [r5, #0]
 8008154:	f7f9 fdcc 	bl	8001cf0 <_sbrk>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_sbrk_r+0x1a>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_sbrk_r+0x1a>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	20004d60 	.word	0x20004d60

08008168 <__sread>:
 8008168:	b510      	push	{r4, lr}
 800816a:	460c      	mov	r4, r1
 800816c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008170:	f001 fd06 	bl	8009b80 <_read_r>
 8008174:	2800      	cmp	r0, #0
 8008176:	bfab      	itete	ge
 8008178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800817a:	89a3      	ldrhlt	r3, [r4, #12]
 800817c:	181b      	addge	r3, r3, r0
 800817e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008182:	bfac      	ite	ge
 8008184:	6563      	strge	r3, [r4, #84]	; 0x54
 8008186:	81a3      	strhlt	r3, [r4, #12]
 8008188:	bd10      	pop	{r4, pc}

0800818a <__swrite>:
 800818a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818e:	461f      	mov	r7, r3
 8008190:	898b      	ldrh	r3, [r1, #12]
 8008192:	05db      	lsls	r3, r3, #23
 8008194:	4605      	mov	r5, r0
 8008196:	460c      	mov	r4, r1
 8008198:	4616      	mov	r6, r2
 800819a:	d505      	bpl.n	80081a8 <__swrite+0x1e>
 800819c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a0:	2302      	movs	r3, #2
 80081a2:	2200      	movs	r2, #0
 80081a4:	f001 f8c2 	bl	800932c <_lseek_r>
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	4628      	mov	r0, r5
 80081ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081be:	f000 b817 	b.w	80081f0 <_write_r>

080081c2 <__sseek>:
 80081c2:	b510      	push	{r4, lr}
 80081c4:	460c      	mov	r4, r1
 80081c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ca:	f001 f8af 	bl	800932c <_lseek_r>
 80081ce:	1c43      	adds	r3, r0, #1
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	bf15      	itete	ne
 80081d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80081d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081de:	81a3      	strheq	r3, [r4, #12]
 80081e0:	bf18      	it	ne
 80081e2:	81a3      	strhne	r3, [r4, #12]
 80081e4:	bd10      	pop	{r4, pc}

080081e6 <__sclose>:
 80081e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ea:	f000 b813 	b.w	8008214 <_close_r>
	...

080081f0 <_write_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d07      	ldr	r5, [pc, #28]	; (8008210 <_write_r+0x20>)
 80081f4:	4604      	mov	r4, r0
 80081f6:	4608      	mov	r0, r1
 80081f8:	4611      	mov	r1, r2
 80081fa:	2200      	movs	r2, #0
 80081fc:	602a      	str	r2, [r5, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	f7f9 fd25 	bl	8001c4e <_write>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_write_r+0x1e>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_write_r+0x1e>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	20004d60 	.word	0x20004d60

08008214 <_close_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d06      	ldr	r5, [pc, #24]	; (8008230 <_close_r+0x1c>)
 8008218:	2300      	movs	r3, #0
 800821a:	4604      	mov	r4, r0
 800821c:	4608      	mov	r0, r1
 800821e:	602b      	str	r3, [r5, #0]
 8008220:	f7f9 fd31 	bl	8001c86 <_close>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_close_r+0x1a>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_close_r+0x1a>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	20004d60 	.word	0x20004d60

08008234 <quorem>:
 8008234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	6903      	ldr	r3, [r0, #16]
 800823a:	690c      	ldr	r4, [r1, #16]
 800823c:	42a3      	cmp	r3, r4
 800823e:	4607      	mov	r7, r0
 8008240:	f2c0 8081 	blt.w	8008346 <quorem+0x112>
 8008244:	3c01      	subs	r4, #1
 8008246:	f101 0814 	add.w	r8, r1, #20
 800824a:	f100 0514 	add.w	r5, r0, #20
 800824e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800825c:	3301      	adds	r3, #1
 800825e:	429a      	cmp	r2, r3
 8008260:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008268:	fbb2 f6f3 	udiv	r6, r2, r3
 800826c:	d331      	bcc.n	80082d2 <quorem+0x9e>
 800826e:	f04f 0e00 	mov.w	lr, #0
 8008272:	4640      	mov	r0, r8
 8008274:	46ac      	mov	ip, r5
 8008276:	46f2      	mov	sl, lr
 8008278:	f850 2b04 	ldr.w	r2, [r0], #4
 800827c:	b293      	uxth	r3, r2
 800827e:	fb06 e303 	mla	r3, r6, r3, lr
 8008282:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008286:	b29b      	uxth	r3, r3
 8008288:	ebaa 0303 	sub.w	r3, sl, r3
 800828c:	f8dc a000 	ldr.w	sl, [ip]
 8008290:	0c12      	lsrs	r2, r2, #16
 8008292:	fa13 f38a 	uxtah	r3, r3, sl
 8008296:	fb06 e202 	mla	r2, r6, r2, lr
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	9b00      	ldr	r3, [sp, #0]
 800829e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082a2:	b292      	uxth	r2, r2
 80082a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80082b0:	4581      	cmp	r9, r0
 80082b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b6:	f84c 3b04 	str.w	r3, [ip], #4
 80082ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082be:	d2db      	bcs.n	8008278 <quorem+0x44>
 80082c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80082c4:	b92b      	cbnz	r3, 80082d2 <quorem+0x9e>
 80082c6:	9b01      	ldr	r3, [sp, #4]
 80082c8:	3b04      	subs	r3, #4
 80082ca:	429d      	cmp	r5, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	d32e      	bcc.n	800832e <quorem+0xfa>
 80082d0:	613c      	str	r4, [r7, #16]
 80082d2:	4638      	mov	r0, r7
 80082d4:	f001 fad2 	bl	800987c <__mcmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	db24      	blt.n	8008326 <quorem+0xf2>
 80082dc:	3601      	adds	r6, #1
 80082de:	4628      	mov	r0, r5
 80082e0:	f04f 0c00 	mov.w	ip, #0
 80082e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80082e8:	f8d0 e000 	ldr.w	lr, [r0]
 80082ec:	b293      	uxth	r3, r2
 80082ee:	ebac 0303 	sub.w	r3, ip, r3
 80082f2:	0c12      	lsrs	r2, r2, #16
 80082f4:	fa13 f38e 	uxtah	r3, r3, lr
 80082f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008300:	b29b      	uxth	r3, r3
 8008302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008306:	45c1      	cmp	r9, r8
 8008308:	f840 3b04 	str.w	r3, [r0], #4
 800830c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008310:	d2e8      	bcs.n	80082e4 <quorem+0xb0>
 8008312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800831a:	b922      	cbnz	r2, 8008326 <quorem+0xf2>
 800831c:	3b04      	subs	r3, #4
 800831e:	429d      	cmp	r5, r3
 8008320:	461a      	mov	r2, r3
 8008322:	d30a      	bcc.n	800833a <quorem+0x106>
 8008324:	613c      	str	r4, [r7, #16]
 8008326:	4630      	mov	r0, r6
 8008328:	b003      	add	sp, #12
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	3b04      	subs	r3, #4
 8008332:	2a00      	cmp	r2, #0
 8008334:	d1cc      	bne.n	80082d0 <quorem+0x9c>
 8008336:	3c01      	subs	r4, #1
 8008338:	e7c7      	b.n	80082ca <quorem+0x96>
 800833a:	6812      	ldr	r2, [r2, #0]
 800833c:	3b04      	subs	r3, #4
 800833e:	2a00      	cmp	r2, #0
 8008340:	d1f0      	bne.n	8008324 <quorem+0xf0>
 8008342:	3c01      	subs	r4, #1
 8008344:	e7eb      	b.n	800831e <quorem+0xea>
 8008346:	2000      	movs	r0, #0
 8008348:	e7ee      	b.n	8008328 <quorem+0xf4>
 800834a:	0000      	movs	r0, r0
 800834c:	0000      	movs	r0, r0
	...

08008350 <_dtoa_r>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	ed2d 8b04 	vpush	{d8-d9}
 8008358:	ec57 6b10 	vmov	r6, r7, d0
 800835c:	b093      	sub	sp, #76	; 0x4c
 800835e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008364:	9106      	str	r1, [sp, #24]
 8008366:	ee10 aa10 	vmov	sl, s0
 800836a:	4604      	mov	r4, r0
 800836c:	9209      	str	r2, [sp, #36]	; 0x24
 800836e:	930c      	str	r3, [sp, #48]	; 0x30
 8008370:	46bb      	mov	fp, r7
 8008372:	b975      	cbnz	r5, 8008392 <_dtoa_r+0x42>
 8008374:	2010      	movs	r0, #16
 8008376:	f000 ffeb 	bl	8009350 <malloc>
 800837a:	4602      	mov	r2, r0
 800837c:	6260      	str	r0, [r4, #36]	; 0x24
 800837e:	b920      	cbnz	r0, 800838a <_dtoa_r+0x3a>
 8008380:	4ba7      	ldr	r3, [pc, #668]	; (8008620 <_dtoa_r+0x2d0>)
 8008382:	21ea      	movs	r1, #234	; 0xea
 8008384:	48a7      	ldr	r0, [pc, #668]	; (8008624 <_dtoa_r+0x2d4>)
 8008386:	f001 fc15 	bl	8009bb4 <__assert_func>
 800838a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800838e:	6005      	str	r5, [r0, #0]
 8008390:	60c5      	str	r5, [r0, #12]
 8008392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008394:	6819      	ldr	r1, [r3, #0]
 8008396:	b151      	cbz	r1, 80083ae <_dtoa_r+0x5e>
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	604a      	str	r2, [r1, #4]
 800839c:	2301      	movs	r3, #1
 800839e:	4093      	lsls	r3, r2
 80083a0:	608b      	str	r3, [r1, #8]
 80083a2:	4620      	mov	r0, r4
 80083a4:	f001 f828 	bl	80093f8 <_Bfree>
 80083a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	1e3b      	subs	r3, r7, #0
 80083b0:	bfaa      	itet	ge
 80083b2:	2300      	movge	r3, #0
 80083b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80083b8:	f8c8 3000 	strge.w	r3, [r8]
 80083bc:	4b9a      	ldr	r3, [pc, #616]	; (8008628 <_dtoa_r+0x2d8>)
 80083be:	bfbc      	itt	lt
 80083c0:	2201      	movlt	r2, #1
 80083c2:	f8c8 2000 	strlt.w	r2, [r8]
 80083c6:	ea33 030b 	bics.w	r3, r3, fp
 80083ca:	d11b      	bne.n	8008404 <_dtoa_r+0xb4>
 80083cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083d8:	4333      	orrs	r3, r6
 80083da:	f000 8592 	beq.w	8008f02 <_dtoa_r+0xbb2>
 80083de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e0:	b963      	cbnz	r3, 80083fc <_dtoa_r+0xac>
 80083e2:	4b92      	ldr	r3, [pc, #584]	; (800862c <_dtoa_r+0x2dc>)
 80083e4:	e022      	b.n	800842c <_dtoa_r+0xdc>
 80083e6:	4b92      	ldr	r3, [pc, #584]	; (8008630 <_dtoa_r+0x2e0>)
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	3308      	adds	r3, #8
 80083ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	9801      	ldr	r0, [sp, #4]
 80083f2:	b013      	add	sp, #76	; 0x4c
 80083f4:	ecbd 8b04 	vpop	{d8-d9}
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fc:	4b8b      	ldr	r3, [pc, #556]	; (800862c <_dtoa_r+0x2dc>)
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	3303      	adds	r3, #3
 8008402:	e7f3      	b.n	80083ec <_dtoa_r+0x9c>
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	4650      	mov	r0, sl
 800840a:	4659      	mov	r1, fp
 800840c:	f7f8 fb7c 	bl	8000b08 <__aeabi_dcmpeq>
 8008410:	ec4b ab19 	vmov	d9, sl, fp
 8008414:	4680      	mov	r8, r0
 8008416:	b158      	cbz	r0, 8008430 <_dtoa_r+0xe0>
 8008418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800841a:	2301      	movs	r3, #1
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 856b 	beq.w	8008efc <_dtoa_r+0xbac>
 8008426:	4883      	ldr	r0, [pc, #524]	; (8008634 <_dtoa_r+0x2e4>)
 8008428:	6018      	str	r0, [r3, #0]
 800842a:	1e43      	subs	r3, r0, #1
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	e7df      	b.n	80083f0 <_dtoa_r+0xa0>
 8008430:	ec4b ab10 	vmov	d0, sl, fp
 8008434:	aa10      	add	r2, sp, #64	; 0x40
 8008436:	a911      	add	r1, sp, #68	; 0x44
 8008438:	4620      	mov	r0, r4
 800843a:	f001 fac5 	bl	80099c8 <__d2b>
 800843e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008442:	ee08 0a10 	vmov	s16, r0
 8008446:	2d00      	cmp	r5, #0
 8008448:	f000 8084 	beq.w	8008554 <_dtoa_r+0x204>
 800844c:	ee19 3a90 	vmov	r3, s19
 8008450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008458:	4656      	mov	r6, sl
 800845a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800845e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008466:	4b74      	ldr	r3, [pc, #464]	; (8008638 <_dtoa_r+0x2e8>)
 8008468:	2200      	movs	r2, #0
 800846a:	4630      	mov	r0, r6
 800846c:	4639      	mov	r1, r7
 800846e:	f7f7 ff2b 	bl	80002c8 <__aeabi_dsub>
 8008472:	a365      	add	r3, pc, #404	; (adr r3, 8008608 <_dtoa_r+0x2b8>)
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f7f8 f8de 	bl	8000638 <__aeabi_dmul>
 800847c:	a364      	add	r3, pc, #400	; (adr r3, 8008610 <_dtoa_r+0x2c0>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f7 ff23 	bl	80002cc <__adddf3>
 8008486:	4606      	mov	r6, r0
 8008488:	4628      	mov	r0, r5
 800848a:	460f      	mov	r7, r1
 800848c:	f7f8 f86a 	bl	8000564 <__aeabi_i2d>
 8008490:	a361      	add	r3, pc, #388	; (adr r3, 8008618 <_dtoa_r+0x2c8>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f8 f8cf 	bl	8000638 <__aeabi_dmul>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f7 ff13 	bl	80002cc <__adddf3>
 80084a6:	4606      	mov	r6, r0
 80084a8:	460f      	mov	r7, r1
 80084aa:	f7f8 fb75 	bl	8000b98 <__aeabi_d2iz>
 80084ae:	2200      	movs	r2, #0
 80084b0:	9000      	str	r0, [sp, #0]
 80084b2:	2300      	movs	r3, #0
 80084b4:	4630      	mov	r0, r6
 80084b6:	4639      	mov	r1, r7
 80084b8:	f7f8 fb30 	bl	8000b1c <__aeabi_dcmplt>
 80084bc:	b150      	cbz	r0, 80084d4 <_dtoa_r+0x184>
 80084be:	9800      	ldr	r0, [sp, #0]
 80084c0:	f7f8 f850 	bl	8000564 <__aeabi_i2d>
 80084c4:	4632      	mov	r2, r6
 80084c6:	463b      	mov	r3, r7
 80084c8:	f7f8 fb1e 	bl	8000b08 <__aeabi_dcmpeq>
 80084cc:	b910      	cbnz	r0, 80084d4 <_dtoa_r+0x184>
 80084ce:	9b00      	ldr	r3, [sp, #0]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	9b00      	ldr	r3, [sp, #0]
 80084d6:	2b16      	cmp	r3, #22
 80084d8:	d85a      	bhi.n	8008590 <_dtoa_r+0x240>
 80084da:	9a00      	ldr	r2, [sp, #0]
 80084dc:	4b57      	ldr	r3, [pc, #348]	; (800863c <_dtoa_r+0x2ec>)
 80084de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	ec51 0b19 	vmov	r0, r1, d9
 80084ea:	f7f8 fb17 	bl	8000b1c <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d050      	beq.n	8008594 <_dtoa_r+0x244>
 80084f2:	9b00      	ldr	r3, [sp, #0]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	2300      	movs	r3, #0
 80084fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80084fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084fe:	1b5d      	subs	r5, r3, r5
 8008500:	1e6b      	subs	r3, r5, #1
 8008502:	9305      	str	r3, [sp, #20]
 8008504:	bf45      	ittet	mi
 8008506:	f1c5 0301 	rsbmi	r3, r5, #1
 800850a:	9304      	strmi	r3, [sp, #16]
 800850c:	2300      	movpl	r3, #0
 800850e:	2300      	movmi	r3, #0
 8008510:	bf4c      	ite	mi
 8008512:	9305      	strmi	r3, [sp, #20]
 8008514:	9304      	strpl	r3, [sp, #16]
 8008516:	9b00      	ldr	r3, [sp, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	db3d      	blt.n	8008598 <_dtoa_r+0x248>
 800851c:	9b05      	ldr	r3, [sp, #20]
 800851e:	9a00      	ldr	r2, [sp, #0]
 8008520:	920a      	str	r2, [sp, #40]	; 0x28
 8008522:	4413      	add	r3, r2
 8008524:	9305      	str	r3, [sp, #20]
 8008526:	2300      	movs	r3, #0
 8008528:	9307      	str	r3, [sp, #28]
 800852a:	9b06      	ldr	r3, [sp, #24]
 800852c:	2b09      	cmp	r3, #9
 800852e:	f200 8089 	bhi.w	8008644 <_dtoa_r+0x2f4>
 8008532:	2b05      	cmp	r3, #5
 8008534:	bfc4      	itt	gt
 8008536:	3b04      	subgt	r3, #4
 8008538:	9306      	strgt	r3, [sp, #24]
 800853a:	9b06      	ldr	r3, [sp, #24]
 800853c:	f1a3 0302 	sub.w	r3, r3, #2
 8008540:	bfcc      	ite	gt
 8008542:	2500      	movgt	r5, #0
 8008544:	2501      	movle	r5, #1
 8008546:	2b03      	cmp	r3, #3
 8008548:	f200 8087 	bhi.w	800865a <_dtoa_r+0x30a>
 800854c:	e8df f003 	tbb	[pc, r3]
 8008550:	59383a2d 	.word	0x59383a2d
 8008554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008558:	441d      	add	r5, r3
 800855a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800855e:	2b20      	cmp	r3, #32
 8008560:	bfc1      	itttt	gt
 8008562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800856a:	fa0b f303 	lslgt.w	r3, fp, r3
 800856e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008572:	bfda      	itte	le
 8008574:	f1c3 0320 	rsble	r3, r3, #32
 8008578:	fa06 f003 	lslle.w	r0, r6, r3
 800857c:	4318      	orrgt	r0, r3
 800857e:	f7f7 ffe1 	bl	8000544 <__aeabi_ui2d>
 8008582:	2301      	movs	r3, #1
 8008584:	4606      	mov	r6, r0
 8008586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800858a:	3d01      	subs	r5, #1
 800858c:	930e      	str	r3, [sp, #56]	; 0x38
 800858e:	e76a      	b.n	8008466 <_dtoa_r+0x116>
 8008590:	2301      	movs	r3, #1
 8008592:	e7b2      	b.n	80084fa <_dtoa_r+0x1aa>
 8008594:	900b      	str	r0, [sp, #44]	; 0x2c
 8008596:	e7b1      	b.n	80084fc <_dtoa_r+0x1ac>
 8008598:	9b04      	ldr	r3, [sp, #16]
 800859a:	9a00      	ldr	r2, [sp, #0]
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	4253      	negs	r3, r2
 80085a2:	9307      	str	r3, [sp, #28]
 80085a4:	2300      	movs	r3, #0
 80085a6:	930a      	str	r3, [sp, #40]	; 0x28
 80085a8:	e7bf      	b.n	800852a <_dtoa_r+0x1da>
 80085aa:	2300      	movs	r3, #0
 80085ac:	9308      	str	r3, [sp, #32]
 80085ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dc55      	bgt.n	8008660 <_dtoa_r+0x310>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085ba:	461a      	mov	r2, r3
 80085bc:	9209      	str	r2, [sp, #36]	; 0x24
 80085be:	e00c      	b.n	80085da <_dtoa_r+0x28a>
 80085c0:	2301      	movs	r3, #1
 80085c2:	e7f3      	b.n	80085ac <_dtoa_r+0x25c>
 80085c4:	2300      	movs	r3, #0
 80085c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085c8:	9308      	str	r3, [sp, #32]
 80085ca:	9b00      	ldr	r3, [sp, #0]
 80085cc:	4413      	add	r3, r2
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	3301      	adds	r3, #1
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	9303      	str	r3, [sp, #12]
 80085d6:	bfb8      	it	lt
 80085d8:	2301      	movlt	r3, #1
 80085da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085dc:	2200      	movs	r2, #0
 80085de:	6042      	str	r2, [r0, #4]
 80085e0:	2204      	movs	r2, #4
 80085e2:	f102 0614 	add.w	r6, r2, #20
 80085e6:	429e      	cmp	r6, r3
 80085e8:	6841      	ldr	r1, [r0, #4]
 80085ea:	d93d      	bls.n	8008668 <_dtoa_r+0x318>
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fec3 	bl	8009378 <_Balloc>
 80085f2:	9001      	str	r0, [sp, #4]
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d13b      	bne.n	8008670 <_dtoa_r+0x320>
 80085f8:	4b11      	ldr	r3, [pc, #68]	; (8008640 <_dtoa_r+0x2f0>)
 80085fa:	4602      	mov	r2, r0
 80085fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008600:	e6c0      	b.n	8008384 <_dtoa_r+0x34>
 8008602:	2301      	movs	r3, #1
 8008604:	e7df      	b.n	80085c6 <_dtoa_r+0x276>
 8008606:	bf00      	nop
 8008608:	636f4361 	.word	0x636f4361
 800860c:	3fd287a7 	.word	0x3fd287a7
 8008610:	8b60c8b3 	.word	0x8b60c8b3
 8008614:	3fc68a28 	.word	0x3fc68a28
 8008618:	509f79fb 	.word	0x509f79fb
 800861c:	3fd34413 	.word	0x3fd34413
 8008620:	0800b561 	.word	0x0800b561
 8008624:	0800b578 	.word	0x0800b578
 8008628:	7ff00000 	.word	0x7ff00000
 800862c:	0800b55d 	.word	0x0800b55d
 8008630:	0800b554 	.word	0x0800b554
 8008634:	0800b531 	.word	0x0800b531
 8008638:	3ff80000 	.word	0x3ff80000
 800863c:	0800b668 	.word	0x0800b668
 8008640:	0800b5d3 	.word	0x0800b5d3
 8008644:	2501      	movs	r5, #1
 8008646:	2300      	movs	r3, #0
 8008648:	9306      	str	r3, [sp, #24]
 800864a:	9508      	str	r5, [sp, #32]
 800864c:	f04f 33ff 	mov.w	r3, #4294967295
 8008650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008654:	2200      	movs	r2, #0
 8008656:	2312      	movs	r3, #18
 8008658:	e7b0      	b.n	80085bc <_dtoa_r+0x26c>
 800865a:	2301      	movs	r3, #1
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	e7f5      	b.n	800864c <_dtoa_r+0x2fc>
 8008660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008666:	e7b8      	b.n	80085da <_dtoa_r+0x28a>
 8008668:	3101      	adds	r1, #1
 800866a:	6041      	str	r1, [r0, #4]
 800866c:	0052      	lsls	r2, r2, #1
 800866e:	e7b8      	b.n	80085e2 <_dtoa_r+0x292>
 8008670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008672:	9a01      	ldr	r2, [sp, #4]
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	2b0e      	cmp	r3, #14
 800867a:	f200 809d 	bhi.w	80087b8 <_dtoa_r+0x468>
 800867e:	2d00      	cmp	r5, #0
 8008680:	f000 809a 	beq.w	80087b8 <_dtoa_r+0x468>
 8008684:	9b00      	ldr	r3, [sp, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	dd32      	ble.n	80086f0 <_dtoa_r+0x3a0>
 800868a:	4ab7      	ldr	r2, [pc, #732]	; (8008968 <_dtoa_r+0x618>)
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008698:	9b00      	ldr	r3, [sp, #0]
 800869a:	05d8      	lsls	r0, r3, #23
 800869c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80086a0:	d516      	bpl.n	80086d0 <_dtoa_r+0x380>
 80086a2:	4bb2      	ldr	r3, [pc, #712]	; (800896c <_dtoa_r+0x61c>)
 80086a4:	ec51 0b19 	vmov	r0, r1, d9
 80086a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086ac:	f7f8 f8ee 	bl	800088c <__aeabi_ddiv>
 80086b0:	f007 070f 	and.w	r7, r7, #15
 80086b4:	4682      	mov	sl, r0
 80086b6:	468b      	mov	fp, r1
 80086b8:	2503      	movs	r5, #3
 80086ba:	4eac      	ldr	r6, [pc, #688]	; (800896c <_dtoa_r+0x61c>)
 80086bc:	b957      	cbnz	r7, 80086d4 <_dtoa_r+0x384>
 80086be:	4642      	mov	r2, r8
 80086c0:	464b      	mov	r3, r9
 80086c2:	4650      	mov	r0, sl
 80086c4:	4659      	mov	r1, fp
 80086c6:	f7f8 f8e1 	bl	800088c <__aeabi_ddiv>
 80086ca:	4682      	mov	sl, r0
 80086cc:	468b      	mov	fp, r1
 80086ce:	e028      	b.n	8008722 <_dtoa_r+0x3d2>
 80086d0:	2502      	movs	r5, #2
 80086d2:	e7f2      	b.n	80086ba <_dtoa_r+0x36a>
 80086d4:	07f9      	lsls	r1, r7, #31
 80086d6:	d508      	bpl.n	80086ea <_dtoa_r+0x39a>
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086e0:	f7f7 ffaa 	bl	8000638 <__aeabi_dmul>
 80086e4:	3501      	adds	r5, #1
 80086e6:	4680      	mov	r8, r0
 80086e8:	4689      	mov	r9, r1
 80086ea:	107f      	asrs	r7, r7, #1
 80086ec:	3608      	adds	r6, #8
 80086ee:	e7e5      	b.n	80086bc <_dtoa_r+0x36c>
 80086f0:	f000 809b 	beq.w	800882a <_dtoa_r+0x4da>
 80086f4:	9b00      	ldr	r3, [sp, #0]
 80086f6:	4f9d      	ldr	r7, [pc, #628]	; (800896c <_dtoa_r+0x61c>)
 80086f8:	425e      	negs	r6, r3
 80086fa:	4b9b      	ldr	r3, [pc, #620]	; (8008968 <_dtoa_r+0x618>)
 80086fc:	f006 020f 	and.w	r2, r6, #15
 8008700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	ec51 0b19 	vmov	r0, r1, d9
 800870c:	f7f7 ff94 	bl	8000638 <__aeabi_dmul>
 8008710:	1136      	asrs	r6, r6, #4
 8008712:	4682      	mov	sl, r0
 8008714:	468b      	mov	fp, r1
 8008716:	2300      	movs	r3, #0
 8008718:	2502      	movs	r5, #2
 800871a:	2e00      	cmp	r6, #0
 800871c:	d17a      	bne.n	8008814 <_dtoa_r+0x4c4>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1d3      	bne.n	80086ca <_dtoa_r+0x37a>
 8008722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8082 	beq.w	800882e <_dtoa_r+0x4de>
 800872a:	4b91      	ldr	r3, [pc, #580]	; (8008970 <_dtoa_r+0x620>)
 800872c:	2200      	movs	r2, #0
 800872e:	4650      	mov	r0, sl
 8008730:	4659      	mov	r1, fp
 8008732:	f7f8 f9f3 	bl	8000b1c <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	d079      	beq.n	800882e <_dtoa_r+0x4de>
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d076      	beq.n	800882e <_dtoa_r+0x4de>
 8008740:	9b02      	ldr	r3, [sp, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	dd36      	ble.n	80087b4 <_dtoa_r+0x464>
 8008746:	9b00      	ldr	r3, [sp, #0]
 8008748:	4650      	mov	r0, sl
 800874a:	4659      	mov	r1, fp
 800874c:	1e5f      	subs	r7, r3, #1
 800874e:	2200      	movs	r2, #0
 8008750:	4b88      	ldr	r3, [pc, #544]	; (8008974 <_dtoa_r+0x624>)
 8008752:	f7f7 ff71 	bl	8000638 <__aeabi_dmul>
 8008756:	9e02      	ldr	r6, [sp, #8]
 8008758:	4682      	mov	sl, r0
 800875a:	468b      	mov	fp, r1
 800875c:	3501      	adds	r5, #1
 800875e:	4628      	mov	r0, r5
 8008760:	f7f7 ff00 	bl	8000564 <__aeabi_i2d>
 8008764:	4652      	mov	r2, sl
 8008766:	465b      	mov	r3, fp
 8008768:	f7f7 ff66 	bl	8000638 <__aeabi_dmul>
 800876c:	4b82      	ldr	r3, [pc, #520]	; (8008978 <_dtoa_r+0x628>)
 800876e:	2200      	movs	r2, #0
 8008770:	f7f7 fdac 	bl	80002cc <__adddf3>
 8008774:	46d0      	mov	r8, sl
 8008776:	46d9      	mov	r9, fp
 8008778:	4682      	mov	sl, r0
 800877a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800877e:	2e00      	cmp	r6, #0
 8008780:	d158      	bne.n	8008834 <_dtoa_r+0x4e4>
 8008782:	4b7e      	ldr	r3, [pc, #504]	; (800897c <_dtoa_r+0x62c>)
 8008784:	2200      	movs	r2, #0
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f7 fd9d 	bl	80002c8 <__aeabi_dsub>
 800878e:	4652      	mov	r2, sl
 8008790:	465b      	mov	r3, fp
 8008792:	4680      	mov	r8, r0
 8008794:	4689      	mov	r9, r1
 8008796:	f7f8 f9df 	bl	8000b58 <__aeabi_dcmpgt>
 800879a:	2800      	cmp	r0, #0
 800879c:	f040 8295 	bne.w	8008cca <_dtoa_r+0x97a>
 80087a0:	4652      	mov	r2, sl
 80087a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087a6:	4640      	mov	r0, r8
 80087a8:	4649      	mov	r1, r9
 80087aa:	f7f8 f9b7 	bl	8000b1c <__aeabi_dcmplt>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f040 8289 	bne.w	8008cc6 <_dtoa_r+0x976>
 80087b4:	ec5b ab19 	vmov	sl, fp, d9
 80087b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f2c0 8148 	blt.w	8008a50 <_dtoa_r+0x700>
 80087c0:	9a00      	ldr	r2, [sp, #0]
 80087c2:	2a0e      	cmp	r2, #14
 80087c4:	f300 8144 	bgt.w	8008a50 <_dtoa_r+0x700>
 80087c8:	4b67      	ldr	r3, [pc, #412]	; (8008968 <_dtoa_r+0x618>)
 80087ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f280 80d5 	bge.w	8008984 <_dtoa_r+0x634>
 80087da:	9b03      	ldr	r3, [sp, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f300 80d1 	bgt.w	8008984 <_dtoa_r+0x634>
 80087e2:	f040 826f 	bne.w	8008cc4 <_dtoa_r+0x974>
 80087e6:	4b65      	ldr	r3, [pc, #404]	; (800897c <_dtoa_r+0x62c>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	f7f7 ff23 	bl	8000638 <__aeabi_dmul>
 80087f2:	4652      	mov	r2, sl
 80087f4:	465b      	mov	r3, fp
 80087f6:	f7f8 f9a5 	bl	8000b44 <__aeabi_dcmpge>
 80087fa:	9e03      	ldr	r6, [sp, #12]
 80087fc:	4637      	mov	r7, r6
 80087fe:	2800      	cmp	r0, #0
 8008800:	f040 8245 	bne.w	8008c8e <_dtoa_r+0x93e>
 8008804:	9d01      	ldr	r5, [sp, #4]
 8008806:	2331      	movs	r3, #49	; 0x31
 8008808:	f805 3b01 	strb.w	r3, [r5], #1
 800880c:	9b00      	ldr	r3, [sp, #0]
 800880e:	3301      	adds	r3, #1
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	e240      	b.n	8008c96 <_dtoa_r+0x946>
 8008814:	07f2      	lsls	r2, r6, #31
 8008816:	d505      	bpl.n	8008824 <_dtoa_r+0x4d4>
 8008818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800881c:	f7f7 ff0c 	bl	8000638 <__aeabi_dmul>
 8008820:	3501      	adds	r5, #1
 8008822:	2301      	movs	r3, #1
 8008824:	1076      	asrs	r6, r6, #1
 8008826:	3708      	adds	r7, #8
 8008828:	e777      	b.n	800871a <_dtoa_r+0x3ca>
 800882a:	2502      	movs	r5, #2
 800882c:	e779      	b.n	8008722 <_dtoa_r+0x3d2>
 800882e:	9f00      	ldr	r7, [sp, #0]
 8008830:	9e03      	ldr	r6, [sp, #12]
 8008832:	e794      	b.n	800875e <_dtoa_r+0x40e>
 8008834:	9901      	ldr	r1, [sp, #4]
 8008836:	4b4c      	ldr	r3, [pc, #304]	; (8008968 <_dtoa_r+0x618>)
 8008838:	4431      	add	r1, r6
 800883a:	910d      	str	r1, [sp, #52]	; 0x34
 800883c:	9908      	ldr	r1, [sp, #32]
 800883e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008846:	2900      	cmp	r1, #0
 8008848:	d043      	beq.n	80088d2 <_dtoa_r+0x582>
 800884a:	494d      	ldr	r1, [pc, #308]	; (8008980 <_dtoa_r+0x630>)
 800884c:	2000      	movs	r0, #0
 800884e:	f7f8 f81d 	bl	800088c <__aeabi_ddiv>
 8008852:	4652      	mov	r2, sl
 8008854:	465b      	mov	r3, fp
 8008856:	f7f7 fd37 	bl	80002c8 <__aeabi_dsub>
 800885a:	9d01      	ldr	r5, [sp, #4]
 800885c:	4682      	mov	sl, r0
 800885e:	468b      	mov	fp, r1
 8008860:	4649      	mov	r1, r9
 8008862:	4640      	mov	r0, r8
 8008864:	f7f8 f998 	bl	8000b98 <__aeabi_d2iz>
 8008868:	4606      	mov	r6, r0
 800886a:	f7f7 fe7b 	bl	8000564 <__aeabi_i2d>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4640      	mov	r0, r8
 8008874:	4649      	mov	r1, r9
 8008876:	f7f7 fd27 	bl	80002c8 <__aeabi_dsub>
 800887a:	3630      	adds	r6, #48	; 0x30
 800887c:	f805 6b01 	strb.w	r6, [r5], #1
 8008880:	4652      	mov	r2, sl
 8008882:	465b      	mov	r3, fp
 8008884:	4680      	mov	r8, r0
 8008886:	4689      	mov	r9, r1
 8008888:	f7f8 f948 	bl	8000b1c <__aeabi_dcmplt>
 800888c:	2800      	cmp	r0, #0
 800888e:	d163      	bne.n	8008958 <_dtoa_r+0x608>
 8008890:	4642      	mov	r2, r8
 8008892:	464b      	mov	r3, r9
 8008894:	4936      	ldr	r1, [pc, #216]	; (8008970 <_dtoa_r+0x620>)
 8008896:	2000      	movs	r0, #0
 8008898:	f7f7 fd16 	bl	80002c8 <__aeabi_dsub>
 800889c:	4652      	mov	r2, sl
 800889e:	465b      	mov	r3, fp
 80088a0:	f7f8 f93c 	bl	8000b1c <__aeabi_dcmplt>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f040 80b5 	bne.w	8008a14 <_dtoa_r+0x6c4>
 80088aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ac:	429d      	cmp	r5, r3
 80088ae:	d081      	beq.n	80087b4 <_dtoa_r+0x464>
 80088b0:	4b30      	ldr	r3, [pc, #192]	; (8008974 <_dtoa_r+0x624>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	4650      	mov	r0, sl
 80088b6:	4659      	mov	r1, fp
 80088b8:	f7f7 febe 	bl	8000638 <__aeabi_dmul>
 80088bc:	4b2d      	ldr	r3, [pc, #180]	; (8008974 <_dtoa_r+0x624>)
 80088be:	4682      	mov	sl, r0
 80088c0:	468b      	mov	fp, r1
 80088c2:	4640      	mov	r0, r8
 80088c4:	4649      	mov	r1, r9
 80088c6:	2200      	movs	r2, #0
 80088c8:	f7f7 feb6 	bl	8000638 <__aeabi_dmul>
 80088cc:	4680      	mov	r8, r0
 80088ce:	4689      	mov	r9, r1
 80088d0:	e7c6      	b.n	8008860 <_dtoa_r+0x510>
 80088d2:	4650      	mov	r0, sl
 80088d4:	4659      	mov	r1, fp
 80088d6:	f7f7 feaf 	bl	8000638 <__aeabi_dmul>
 80088da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088dc:	9d01      	ldr	r5, [sp, #4]
 80088de:	930f      	str	r3, [sp, #60]	; 0x3c
 80088e0:	4682      	mov	sl, r0
 80088e2:	468b      	mov	fp, r1
 80088e4:	4649      	mov	r1, r9
 80088e6:	4640      	mov	r0, r8
 80088e8:	f7f8 f956 	bl	8000b98 <__aeabi_d2iz>
 80088ec:	4606      	mov	r6, r0
 80088ee:	f7f7 fe39 	bl	8000564 <__aeabi_i2d>
 80088f2:	3630      	adds	r6, #48	; 0x30
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4640      	mov	r0, r8
 80088fa:	4649      	mov	r1, r9
 80088fc:	f7f7 fce4 	bl	80002c8 <__aeabi_dsub>
 8008900:	f805 6b01 	strb.w	r6, [r5], #1
 8008904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008906:	429d      	cmp	r5, r3
 8008908:	4680      	mov	r8, r0
 800890a:	4689      	mov	r9, r1
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	d124      	bne.n	800895c <_dtoa_r+0x60c>
 8008912:	4b1b      	ldr	r3, [pc, #108]	; (8008980 <_dtoa_r+0x630>)
 8008914:	4650      	mov	r0, sl
 8008916:	4659      	mov	r1, fp
 8008918:	f7f7 fcd8 	bl	80002cc <__adddf3>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4640      	mov	r0, r8
 8008922:	4649      	mov	r1, r9
 8008924:	f7f8 f918 	bl	8000b58 <__aeabi_dcmpgt>
 8008928:	2800      	cmp	r0, #0
 800892a:	d173      	bne.n	8008a14 <_dtoa_r+0x6c4>
 800892c:	4652      	mov	r2, sl
 800892e:	465b      	mov	r3, fp
 8008930:	4913      	ldr	r1, [pc, #76]	; (8008980 <_dtoa_r+0x630>)
 8008932:	2000      	movs	r0, #0
 8008934:	f7f7 fcc8 	bl	80002c8 <__aeabi_dsub>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4640      	mov	r0, r8
 800893e:	4649      	mov	r1, r9
 8008940:	f7f8 f8ec 	bl	8000b1c <__aeabi_dcmplt>
 8008944:	2800      	cmp	r0, #0
 8008946:	f43f af35 	beq.w	80087b4 <_dtoa_r+0x464>
 800894a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800894c:	1e6b      	subs	r3, r5, #1
 800894e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008954:	2b30      	cmp	r3, #48	; 0x30
 8008956:	d0f8      	beq.n	800894a <_dtoa_r+0x5fa>
 8008958:	9700      	str	r7, [sp, #0]
 800895a:	e049      	b.n	80089f0 <_dtoa_r+0x6a0>
 800895c:	4b05      	ldr	r3, [pc, #20]	; (8008974 <_dtoa_r+0x624>)
 800895e:	f7f7 fe6b 	bl	8000638 <__aeabi_dmul>
 8008962:	4680      	mov	r8, r0
 8008964:	4689      	mov	r9, r1
 8008966:	e7bd      	b.n	80088e4 <_dtoa_r+0x594>
 8008968:	0800b668 	.word	0x0800b668
 800896c:	0800b640 	.word	0x0800b640
 8008970:	3ff00000 	.word	0x3ff00000
 8008974:	40240000 	.word	0x40240000
 8008978:	401c0000 	.word	0x401c0000
 800897c:	40140000 	.word	0x40140000
 8008980:	3fe00000 	.word	0x3fe00000
 8008984:	9d01      	ldr	r5, [sp, #4]
 8008986:	4656      	mov	r6, sl
 8008988:	465f      	mov	r7, fp
 800898a:	4642      	mov	r2, r8
 800898c:	464b      	mov	r3, r9
 800898e:	4630      	mov	r0, r6
 8008990:	4639      	mov	r1, r7
 8008992:	f7f7 ff7b 	bl	800088c <__aeabi_ddiv>
 8008996:	f7f8 f8ff 	bl	8000b98 <__aeabi_d2iz>
 800899a:	4682      	mov	sl, r0
 800899c:	f7f7 fde2 	bl	8000564 <__aeabi_i2d>
 80089a0:	4642      	mov	r2, r8
 80089a2:	464b      	mov	r3, r9
 80089a4:	f7f7 fe48 	bl	8000638 <__aeabi_dmul>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4630      	mov	r0, r6
 80089ae:	4639      	mov	r1, r7
 80089b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80089b4:	f7f7 fc88 	bl	80002c8 <__aeabi_dsub>
 80089b8:	f805 6b01 	strb.w	r6, [r5], #1
 80089bc:	9e01      	ldr	r6, [sp, #4]
 80089be:	9f03      	ldr	r7, [sp, #12]
 80089c0:	1bae      	subs	r6, r5, r6
 80089c2:	42b7      	cmp	r7, r6
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	d135      	bne.n	8008a36 <_dtoa_r+0x6e6>
 80089ca:	f7f7 fc7f 	bl	80002cc <__adddf3>
 80089ce:	4642      	mov	r2, r8
 80089d0:	464b      	mov	r3, r9
 80089d2:	4606      	mov	r6, r0
 80089d4:	460f      	mov	r7, r1
 80089d6:	f7f8 f8bf 	bl	8000b58 <__aeabi_dcmpgt>
 80089da:	b9d0      	cbnz	r0, 8008a12 <_dtoa_r+0x6c2>
 80089dc:	4642      	mov	r2, r8
 80089de:	464b      	mov	r3, r9
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f8 f890 	bl	8000b08 <__aeabi_dcmpeq>
 80089e8:	b110      	cbz	r0, 80089f0 <_dtoa_r+0x6a0>
 80089ea:	f01a 0f01 	tst.w	sl, #1
 80089ee:	d110      	bne.n	8008a12 <_dtoa_r+0x6c2>
 80089f0:	4620      	mov	r0, r4
 80089f2:	ee18 1a10 	vmov	r1, s16
 80089f6:	f000 fcff 	bl	80093f8 <_Bfree>
 80089fa:	2300      	movs	r3, #0
 80089fc:	9800      	ldr	r0, [sp, #0]
 80089fe:	702b      	strb	r3, [r5, #0]
 8008a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a02:	3001      	adds	r0, #1
 8008a04:	6018      	str	r0, [r3, #0]
 8008a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f43f acf1 	beq.w	80083f0 <_dtoa_r+0xa0>
 8008a0e:	601d      	str	r5, [r3, #0]
 8008a10:	e4ee      	b.n	80083f0 <_dtoa_r+0xa0>
 8008a12:	9f00      	ldr	r7, [sp, #0]
 8008a14:	462b      	mov	r3, r5
 8008a16:	461d      	mov	r5, r3
 8008a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a1c:	2a39      	cmp	r2, #57	; 0x39
 8008a1e:	d106      	bne.n	8008a2e <_dtoa_r+0x6de>
 8008a20:	9a01      	ldr	r2, [sp, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d1f7      	bne.n	8008a16 <_dtoa_r+0x6c6>
 8008a26:	9901      	ldr	r1, [sp, #4]
 8008a28:	2230      	movs	r2, #48	; 0x30
 8008a2a:	3701      	adds	r7, #1
 8008a2c:	700a      	strb	r2, [r1, #0]
 8008a2e:	781a      	ldrb	r2, [r3, #0]
 8008a30:	3201      	adds	r2, #1
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	e790      	b.n	8008958 <_dtoa_r+0x608>
 8008a36:	4ba6      	ldr	r3, [pc, #664]	; (8008cd0 <_dtoa_r+0x980>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f7f7 fdfd 	bl	8000638 <__aeabi_dmul>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2300      	movs	r3, #0
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	f7f8 f85f 	bl	8000b08 <__aeabi_dcmpeq>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d09d      	beq.n	800898a <_dtoa_r+0x63a>
 8008a4e:	e7cf      	b.n	80089f0 <_dtoa_r+0x6a0>
 8008a50:	9a08      	ldr	r2, [sp, #32]
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	f000 80d7 	beq.w	8008c06 <_dtoa_r+0x8b6>
 8008a58:	9a06      	ldr	r2, [sp, #24]
 8008a5a:	2a01      	cmp	r2, #1
 8008a5c:	f300 80ba 	bgt.w	8008bd4 <_dtoa_r+0x884>
 8008a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	f000 80b2 	beq.w	8008bcc <_dtoa_r+0x87c>
 8008a68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a6c:	9e07      	ldr	r6, [sp, #28]
 8008a6e:	9d04      	ldr	r5, [sp, #16]
 8008a70:	9a04      	ldr	r2, [sp, #16]
 8008a72:	441a      	add	r2, r3
 8008a74:	9204      	str	r2, [sp, #16]
 8008a76:	9a05      	ldr	r2, [sp, #20]
 8008a78:	2101      	movs	r1, #1
 8008a7a:	441a      	add	r2, r3
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	9205      	str	r2, [sp, #20]
 8008a80:	f000 fd72 	bl	8009568 <__i2b>
 8008a84:	4607      	mov	r7, r0
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	dd0c      	ble.n	8008aa4 <_dtoa_r+0x754>
 8008a8a:	9b05      	ldr	r3, [sp, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	dd09      	ble.n	8008aa4 <_dtoa_r+0x754>
 8008a90:	42ab      	cmp	r3, r5
 8008a92:	9a04      	ldr	r2, [sp, #16]
 8008a94:	bfa8      	it	ge
 8008a96:	462b      	movge	r3, r5
 8008a98:	1ad2      	subs	r2, r2, r3
 8008a9a:	9204      	str	r2, [sp, #16]
 8008a9c:	9a05      	ldr	r2, [sp, #20]
 8008a9e:	1aed      	subs	r5, r5, r3
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	9305      	str	r3, [sp, #20]
 8008aa4:	9b07      	ldr	r3, [sp, #28]
 8008aa6:	b31b      	cbz	r3, 8008af0 <_dtoa_r+0x7a0>
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 80af 	beq.w	8008c0e <_dtoa_r+0x8be>
 8008ab0:	2e00      	cmp	r6, #0
 8008ab2:	dd13      	ble.n	8008adc <_dtoa_r+0x78c>
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 fe15 	bl	80096e8 <__pow5mult>
 8008abe:	ee18 2a10 	vmov	r2, s16
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 fd64 	bl	8009594 <__multiply>
 8008acc:	ee18 1a10 	vmov	r1, s16
 8008ad0:	4680      	mov	r8, r0
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 fc90 	bl	80093f8 <_Bfree>
 8008ad8:	ee08 8a10 	vmov	s16, r8
 8008adc:	9b07      	ldr	r3, [sp, #28]
 8008ade:	1b9a      	subs	r2, r3, r6
 8008ae0:	d006      	beq.n	8008af0 <_dtoa_r+0x7a0>
 8008ae2:	ee18 1a10 	vmov	r1, s16
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 fdfe 	bl	80096e8 <__pow5mult>
 8008aec:	ee08 0a10 	vmov	s16, r0
 8008af0:	2101      	movs	r1, #1
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fd38 	bl	8009568 <__i2b>
 8008af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	4606      	mov	r6, r0
 8008afe:	f340 8088 	ble.w	8008c12 <_dtoa_r+0x8c2>
 8008b02:	461a      	mov	r2, r3
 8008b04:	4601      	mov	r1, r0
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 fdee 	bl	80096e8 <__pow5mult>
 8008b0c:	9b06      	ldr	r3, [sp, #24]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	4606      	mov	r6, r0
 8008b12:	f340 8081 	ble.w	8008c18 <_dtoa_r+0x8c8>
 8008b16:	f04f 0800 	mov.w	r8, #0
 8008b1a:	6933      	ldr	r3, [r6, #16]
 8008b1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b20:	6918      	ldr	r0, [r3, #16]
 8008b22:	f000 fcd1 	bl	80094c8 <__hi0bits>
 8008b26:	f1c0 0020 	rsb	r0, r0, #32
 8008b2a:	9b05      	ldr	r3, [sp, #20]
 8008b2c:	4418      	add	r0, r3
 8008b2e:	f010 001f 	ands.w	r0, r0, #31
 8008b32:	f000 8092 	beq.w	8008c5a <_dtoa_r+0x90a>
 8008b36:	f1c0 0320 	rsb	r3, r0, #32
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	f340 808a 	ble.w	8008c54 <_dtoa_r+0x904>
 8008b40:	f1c0 001c 	rsb	r0, r0, #28
 8008b44:	9b04      	ldr	r3, [sp, #16]
 8008b46:	4403      	add	r3, r0
 8008b48:	9304      	str	r3, [sp, #16]
 8008b4a:	9b05      	ldr	r3, [sp, #20]
 8008b4c:	4403      	add	r3, r0
 8008b4e:	4405      	add	r5, r0
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	9b04      	ldr	r3, [sp, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dd07      	ble.n	8008b68 <_dtoa_r+0x818>
 8008b58:	ee18 1a10 	vmov	r1, s16
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 fe1c 	bl	800979c <__lshift>
 8008b64:	ee08 0a10 	vmov	s16, r0
 8008b68:	9b05      	ldr	r3, [sp, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dd05      	ble.n	8008b7a <_dtoa_r+0x82a>
 8008b6e:	4631      	mov	r1, r6
 8008b70:	461a      	mov	r2, r3
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 fe12 	bl	800979c <__lshift>
 8008b78:	4606      	mov	r6, r0
 8008b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d06e      	beq.n	8008c5e <_dtoa_r+0x90e>
 8008b80:	ee18 0a10 	vmov	r0, s16
 8008b84:	4631      	mov	r1, r6
 8008b86:	f000 fe79 	bl	800987c <__mcmp>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	da67      	bge.n	8008c5e <_dtoa_r+0x90e>
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	ee18 1a10 	vmov	r1, s16
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	220a      	movs	r2, #10
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 fc4d 	bl	800943c <__multadd>
 8008ba2:	9b08      	ldr	r3, [sp, #32]
 8008ba4:	ee08 0a10 	vmov	s16, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 81b1 	beq.w	8008f10 <_dtoa_r+0xbc0>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f000 fc41 	bl	800943c <__multadd>
 8008bba:	9b02      	ldr	r3, [sp, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	4607      	mov	r7, r0
 8008bc0:	f300 808e 	bgt.w	8008ce0 <_dtoa_r+0x990>
 8008bc4:	9b06      	ldr	r3, [sp, #24]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	dc51      	bgt.n	8008c6e <_dtoa_r+0x91e>
 8008bca:	e089      	b.n	8008ce0 <_dtoa_r+0x990>
 8008bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bd2:	e74b      	b.n	8008a6c <_dtoa_r+0x71c>
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	1e5e      	subs	r6, r3, #1
 8008bd8:	9b07      	ldr	r3, [sp, #28]
 8008bda:	42b3      	cmp	r3, r6
 8008bdc:	bfbf      	itttt	lt
 8008bde:	9b07      	ldrlt	r3, [sp, #28]
 8008be0:	9607      	strlt	r6, [sp, #28]
 8008be2:	1af2      	sublt	r2, r6, r3
 8008be4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008be6:	bfb6      	itet	lt
 8008be8:	189b      	addlt	r3, r3, r2
 8008bea:	1b9e      	subge	r6, r3, r6
 8008bec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008bee:	9b03      	ldr	r3, [sp, #12]
 8008bf0:	bfb8      	it	lt
 8008bf2:	2600      	movlt	r6, #0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfb7      	itett	lt
 8008bf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008bfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008c00:	1a9d      	sublt	r5, r3, r2
 8008c02:	2300      	movlt	r3, #0
 8008c04:	e734      	b.n	8008a70 <_dtoa_r+0x720>
 8008c06:	9e07      	ldr	r6, [sp, #28]
 8008c08:	9d04      	ldr	r5, [sp, #16]
 8008c0a:	9f08      	ldr	r7, [sp, #32]
 8008c0c:	e73b      	b.n	8008a86 <_dtoa_r+0x736>
 8008c0e:	9a07      	ldr	r2, [sp, #28]
 8008c10:	e767      	b.n	8008ae2 <_dtoa_r+0x792>
 8008c12:	9b06      	ldr	r3, [sp, #24]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	dc18      	bgt.n	8008c4a <_dtoa_r+0x8fa>
 8008c18:	f1ba 0f00 	cmp.w	sl, #0
 8008c1c:	d115      	bne.n	8008c4a <_dtoa_r+0x8fa>
 8008c1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c22:	b993      	cbnz	r3, 8008c4a <_dtoa_r+0x8fa>
 8008c24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c28:	0d1b      	lsrs	r3, r3, #20
 8008c2a:	051b      	lsls	r3, r3, #20
 8008c2c:	b183      	cbz	r3, 8008c50 <_dtoa_r+0x900>
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	3301      	adds	r3, #1
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	9b05      	ldr	r3, [sp, #20]
 8008c36:	3301      	adds	r3, #1
 8008c38:	9305      	str	r3, [sp, #20]
 8008c3a:	f04f 0801 	mov.w	r8, #1
 8008c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f47f af6a 	bne.w	8008b1a <_dtoa_r+0x7ca>
 8008c46:	2001      	movs	r0, #1
 8008c48:	e76f      	b.n	8008b2a <_dtoa_r+0x7da>
 8008c4a:	f04f 0800 	mov.w	r8, #0
 8008c4e:	e7f6      	b.n	8008c3e <_dtoa_r+0x8ee>
 8008c50:	4698      	mov	r8, r3
 8008c52:	e7f4      	b.n	8008c3e <_dtoa_r+0x8ee>
 8008c54:	f43f af7d 	beq.w	8008b52 <_dtoa_r+0x802>
 8008c58:	4618      	mov	r0, r3
 8008c5a:	301c      	adds	r0, #28
 8008c5c:	e772      	b.n	8008b44 <_dtoa_r+0x7f4>
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc37      	bgt.n	8008cd4 <_dtoa_r+0x984>
 8008c64:	9b06      	ldr	r3, [sp, #24]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	dd34      	ble.n	8008cd4 <_dtoa_r+0x984>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	9302      	str	r3, [sp, #8]
 8008c6e:	9b02      	ldr	r3, [sp, #8]
 8008c70:	b96b      	cbnz	r3, 8008c8e <_dtoa_r+0x93e>
 8008c72:	4631      	mov	r1, r6
 8008c74:	2205      	movs	r2, #5
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fbe0 	bl	800943c <__multadd>
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	4606      	mov	r6, r0
 8008c80:	ee18 0a10 	vmov	r0, s16
 8008c84:	f000 fdfa 	bl	800987c <__mcmp>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	f73f adbb 	bgt.w	8008804 <_dtoa_r+0x4b4>
 8008c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c90:	9d01      	ldr	r5, [sp, #4]
 8008c92:	43db      	mvns	r3, r3
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	f04f 0800 	mov.w	r8, #0
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 fbab 	bl	80093f8 <_Bfree>
 8008ca2:	2f00      	cmp	r7, #0
 8008ca4:	f43f aea4 	beq.w	80089f0 <_dtoa_r+0x6a0>
 8008ca8:	f1b8 0f00 	cmp.w	r8, #0
 8008cac:	d005      	beq.n	8008cba <_dtoa_r+0x96a>
 8008cae:	45b8      	cmp	r8, r7
 8008cb0:	d003      	beq.n	8008cba <_dtoa_r+0x96a>
 8008cb2:	4641      	mov	r1, r8
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fb9f 	bl	80093f8 <_Bfree>
 8008cba:	4639      	mov	r1, r7
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f000 fb9b 	bl	80093f8 <_Bfree>
 8008cc2:	e695      	b.n	80089f0 <_dtoa_r+0x6a0>
 8008cc4:	2600      	movs	r6, #0
 8008cc6:	4637      	mov	r7, r6
 8008cc8:	e7e1      	b.n	8008c8e <_dtoa_r+0x93e>
 8008cca:	9700      	str	r7, [sp, #0]
 8008ccc:	4637      	mov	r7, r6
 8008cce:	e599      	b.n	8008804 <_dtoa_r+0x4b4>
 8008cd0:	40240000 	.word	0x40240000
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80ca 	beq.w	8008e70 <_dtoa_r+0xb20>
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	9302      	str	r3, [sp, #8]
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	dd05      	ble.n	8008cf0 <_dtoa_r+0x9a0>
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	462a      	mov	r2, r5
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 fd57 	bl	800979c <__lshift>
 8008cee:	4607      	mov	r7, r0
 8008cf0:	f1b8 0f00 	cmp.w	r8, #0
 8008cf4:	d05b      	beq.n	8008dae <_dtoa_r+0xa5e>
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f000 fb3d 	bl	8009378 <_Balloc>
 8008cfe:	4605      	mov	r5, r0
 8008d00:	b928      	cbnz	r0, 8008d0e <_dtoa_r+0x9be>
 8008d02:	4b87      	ldr	r3, [pc, #540]	; (8008f20 <_dtoa_r+0xbd0>)
 8008d04:	4602      	mov	r2, r0
 8008d06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d0a:	f7ff bb3b 	b.w	8008384 <_dtoa_r+0x34>
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	3202      	adds	r2, #2
 8008d12:	0092      	lsls	r2, r2, #2
 8008d14:	f107 010c 	add.w	r1, r7, #12
 8008d18:	300c      	adds	r0, #12
 8008d1a:	f7fe fc96 	bl	800764a <memcpy>
 8008d1e:	2201      	movs	r2, #1
 8008d20:	4629      	mov	r1, r5
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 fd3a 	bl	800979c <__lshift>
 8008d28:	9b01      	ldr	r3, [sp, #4]
 8008d2a:	f103 0901 	add.w	r9, r3, #1
 8008d2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	9305      	str	r3, [sp, #20]
 8008d36:	f00a 0301 	and.w	r3, sl, #1
 8008d3a:	46b8      	mov	r8, r7
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	4607      	mov	r7, r0
 8008d40:	4631      	mov	r1, r6
 8008d42:	ee18 0a10 	vmov	r0, s16
 8008d46:	f7ff fa75 	bl	8008234 <quorem>
 8008d4a:	4641      	mov	r1, r8
 8008d4c:	9002      	str	r0, [sp, #8]
 8008d4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d52:	ee18 0a10 	vmov	r0, s16
 8008d56:	f000 fd91 	bl	800987c <__mcmp>
 8008d5a:	463a      	mov	r2, r7
 8008d5c:	9003      	str	r0, [sp, #12]
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 fda7 	bl	80098b4 <__mdiff>
 8008d66:	68c2      	ldr	r2, [r0, #12]
 8008d68:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	bb02      	cbnz	r2, 8008db2 <_dtoa_r+0xa62>
 8008d70:	4601      	mov	r1, r0
 8008d72:	ee18 0a10 	vmov	r0, s16
 8008d76:	f000 fd81 	bl	800987c <__mcmp>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4620      	mov	r0, r4
 8008d80:	9207      	str	r2, [sp, #28]
 8008d82:	f000 fb39 	bl	80093f8 <_Bfree>
 8008d86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d8a:	ea43 0102 	orr.w	r1, r3, r2
 8008d8e:	9b04      	ldr	r3, [sp, #16]
 8008d90:	430b      	orrs	r3, r1
 8008d92:	464d      	mov	r5, r9
 8008d94:	d10f      	bne.n	8008db6 <_dtoa_r+0xa66>
 8008d96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d9a:	d02a      	beq.n	8008df2 <_dtoa_r+0xaa2>
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	dd02      	ble.n	8008da8 <_dtoa_r+0xa58>
 8008da2:	9b02      	ldr	r3, [sp, #8]
 8008da4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008da8:	f88b a000 	strb.w	sl, [fp]
 8008dac:	e775      	b.n	8008c9a <_dtoa_r+0x94a>
 8008dae:	4638      	mov	r0, r7
 8008db0:	e7ba      	b.n	8008d28 <_dtoa_r+0x9d8>
 8008db2:	2201      	movs	r2, #1
 8008db4:	e7e2      	b.n	8008d7c <_dtoa_r+0xa2c>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	db04      	blt.n	8008dc6 <_dtoa_r+0xa76>
 8008dbc:	9906      	ldr	r1, [sp, #24]
 8008dbe:	430b      	orrs	r3, r1
 8008dc0:	9904      	ldr	r1, [sp, #16]
 8008dc2:	430b      	orrs	r3, r1
 8008dc4:	d122      	bne.n	8008e0c <_dtoa_r+0xabc>
 8008dc6:	2a00      	cmp	r2, #0
 8008dc8:	ddee      	ble.n	8008da8 <_dtoa_r+0xa58>
 8008dca:	ee18 1a10 	vmov	r1, s16
 8008dce:	2201      	movs	r2, #1
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 fce3 	bl	800979c <__lshift>
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	ee08 0a10 	vmov	s16, r0
 8008ddc:	f000 fd4e 	bl	800987c <__mcmp>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	dc03      	bgt.n	8008dec <_dtoa_r+0xa9c>
 8008de4:	d1e0      	bne.n	8008da8 <_dtoa_r+0xa58>
 8008de6:	f01a 0f01 	tst.w	sl, #1
 8008dea:	d0dd      	beq.n	8008da8 <_dtoa_r+0xa58>
 8008dec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008df0:	d1d7      	bne.n	8008da2 <_dtoa_r+0xa52>
 8008df2:	2339      	movs	r3, #57	; 0x39
 8008df4:	f88b 3000 	strb.w	r3, [fp]
 8008df8:	462b      	mov	r3, r5
 8008dfa:	461d      	mov	r5, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e02:	2a39      	cmp	r2, #57	; 0x39
 8008e04:	d071      	beq.n	8008eea <_dtoa_r+0xb9a>
 8008e06:	3201      	adds	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	e746      	b.n	8008c9a <_dtoa_r+0x94a>
 8008e0c:	2a00      	cmp	r2, #0
 8008e0e:	dd07      	ble.n	8008e20 <_dtoa_r+0xad0>
 8008e10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e14:	d0ed      	beq.n	8008df2 <_dtoa_r+0xaa2>
 8008e16:	f10a 0301 	add.w	r3, sl, #1
 8008e1a:	f88b 3000 	strb.w	r3, [fp]
 8008e1e:	e73c      	b.n	8008c9a <_dtoa_r+0x94a>
 8008e20:	9b05      	ldr	r3, [sp, #20]
 8008e22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e26:	4599      	cmp	r9, r3
 8008e28:	d047      	beq.n	8008eba <_dtoa_r+0xb6a>
 8008e2a:	ee18 1a10 	vmov	r1, s16
 8008e2e:	2300      	movs	r3, #0
 8008e30:	220a      	movs	r2, #10
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fb02 	bl	800943c <__multadd>
 8008e38:	45b8      	cmp	r8, r7
 8008e3a:	ee08 0a10 	vmov	s16, r0
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	f04f 020a 	mov.w	r2, #10
 8008e46:	4641      	mov	r1, r8
 8008e48:	4620      	mov	r0, r4
 8008e4a:	d106      	bne.n	8008e5a <_dtoa_r+0xb0a>
 8008e4c:	f000 faf6 	bl	800943c <__multadd>
 8008e50:	4680      	mov	r8, r0
 8008e52:	4607      	mov	r7, r0
 8008e54:	f109 0901 	add.w	r9, r9, #1
 8008e58:	e772      	b.n	8008d40 <_dtoa_r+0x9f0>
 8008e5a:	f000 faef 	bl	800943c <__multadd>
 8008e5e:	4639      	mov	r1, r7
 8008e60:	4680      	mov	r8, r0
 8008e62:	2300      	movs	r3, #0
 8008e64:	220a      	movs	r2, #10
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 fae8 	bl	800943c <__multadd>
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	e7f1      	b.n	8008e54 <_dtoa_r+0xb04>
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	9302      	str	r3, [sp, #8]
 8008e74:	9d01      	ldr	r5, [sp, #4]
 8008e76:	ee18 0a10 	vmov	r0, s16
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	f7ff f9da 	bl	8008234 <quorem>
 8008e80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	f805 ab01 	strb.w	sl, [r5], #1
 8008e8a:	1aea      	subs	r2, r5, r3
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	dd09      	ble.n	8008ea6 <_dtoa_r+0xb56>
 8008e92:	ee18 1a10 	vmov	r1, s16
 8008e96:	2300      	movs	r3, #0
 8008e98:	220a      	movs	r2, #10
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 face 	bl	800943c <__multadd>
 8008ea0:	ee08 0a10 	vmov	s16, r0
 8008ea4:	e7e7      	b.n	8008e76 <_dtoa_r+0xb26>
 8008ea6:	9b02      	ldr	r3, [sp, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bfc8      	it	gt
 8008eac:	461d      	movgt	r5, r3
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	bfd8      	it	le
 8008eb2:	2501      	movle	r5, #1
 8008eb4:	441d      	add	r5, r3
 8008eb6:	f04f 0800 	mov.w	r8, #0
 8008eba:	ee18 1a10 	vmov	r1, s16
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fc6b 	bl	800979c <__lshift>
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	ee08 0a10 	vmov	s16, r0
 8008ecc:	f000 fcd6 	bl	800987c <__mcmp>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	dc91      	bgt.n	8008df8 <_dtoa_r+0xaa8>
 8008ed4:	d102      	bne.n	8008edc <_dtoa_r+0xb8c>
 8008ed6:	f01a 0f01 	tst.w	sl, #1
 8008eda:	d18d      	bne.n	8008df8 <_dtoa_r+0xaa8>
 8008edc:	462b      	mov	r3, r5
 8008ede:	461d      	mov	r5, r3
 8008ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ee4:	2a30      	cmp	r2, #48	; 0x30
 8008ee6:	d0fa      	beq.n	8008ede <_dtoa_r+0xb8e>
 8008ee8:	e6d7      	b.n	8008c9a <_dtoa_r+0x94a>
 8008eea:	9a01      	ldr	r2, [sp, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d184      	bne.n	8008dfa <_dtoa_r+0xaaa>
 8008ef0:	9b00      	ldr	r3, [sp, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	2331      	movs	r3, #49	; 0x31
 8008ef8:	7013      	strb	r3, [r2, #0]
 8008efa:	e6ce      	b.n	8008c9a <_dtoa_r+0x94a>
 8008efc:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <_dtoa_r+0xbd4>)
 8008efe:	f7ff ba95 	b.w	800842c <_dtoa_r+0xdc>
 8008f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f47f aa6e 	bne.w	80083e6 <_dtoa_r+0x96>
 8008f0a:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <_dtoa_r+0xbd8>)
 8008f0c:	f7ff ba8e 	b.w	800842c <_dtoa_r+0xdc>
 8008f10:	9b02      	ldr	r3, [sp, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	dcae      	bgt.n	8008e74 <_dtoa_r+0xb24>
 8008f16:	9b06      	ldr	r3, [sp, #24]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	f73f aea8 	bgt.w	8008c6e <_dtoa_r+0x91e>
 8008f1e:	e7a9      	b.n	8008e74 <_dtoa_r+0xb24>
 8008f20:	0800b5d3 	.word	0x0800b5d3
 8008f24:	0800b530 	.word	0x0800b530
 8008f28:	0800b554 	.word	0x0800b554

08008f2c <print_e>:
 8008f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	ec43 2b10 	vmov	d0, r2, r3
 8008f34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008f36:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8008f3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008f3c:	ab04      	add	r3, sp, #16
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	ab03      	add	r3, sp, #12
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	1c62      	adds	r2, r4, #1
 8008f46:	ab05      	add	r3, sp, #20
 8008f48:	460f      	mov	r7, r1
 8008f4a:	2102      	movs	r1, #2
 8008f4c:	f7ff fa00 	bl	8008350 <_dtoa_r>
 8008f50:	9a05      	ldr	r2, [sp, #20]
 8008f52:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d105      	bne.n	8008f66 <print_e+0x3a>
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f000 fe21 	bl	8009ba4 <strcpy>
 8008f62:	b007      	add	sp, #28
 8008f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f66:	463b      	mov	r3, r7
 8008f68:	7801      	ldrb	r1, [r0, #0]
 8008f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f6e:	2c00      	cmp	r4, #0
 8008f70:	bfc8      	it	gt
 8008f72:	2501      	movgt	r5, #1
 8008f74:	212e      	movs	r1, #46	; 0x2e
 8008f76:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8008f7a:	b10f      	cbz	r7, 8008f80 <print_e+0x54>
 8008f7c:	2c00      	cmp	r4, #0
 8008f7e:	dc37      	bgt.n	8008ff0 <print_e+0xc4>
 8008f80:	2e67      	cmp	r6, #103	; 0x67
 8008f82:	d046      	beq.n	8009012 <print_e+0xe6>
 8008f84:	2e47      	cmp	r6, #71	; 0x47
 8008f86:	d046      	beq.n	8009016 <print_e+0xea>
 8008f88:	212e      	movs	r1, #46	; 0x2e
 8008f8a:	2030      	movs	r0, #48	; 0x30
 8008f8c:	2c00      	cmp	r4, #0
 8008f8e:	dc38      	bgt.n	8009002 <print_e+0xd6>
 8008f90:	1e51      	subs	r1, r2, #1
 8008f92:	2900      	cmp	r1, #0
 8008f94:	bfb8      	it	lt
 8008f96:	f1c2 0201 	rsblt	r2, r2, #1
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	9105      	str	r1, [sp, #20]
 8008f9e:	bfac      	ite	ge
 8008fa0:	222b      	movge	r2, #43	; 0x2b
 8008fa2:	9205      	strlt	r2, [sp, #20]
 8008fa4:	f800 6b02 	strb.w	r6, [r0], #2
 8008fa8:	bfa8      	it	ge
 8008faa:	705a      	strbge	r2, [r3, #1]
 8008fac:	9a05      	ldr	r2, [sp, #20]
 8008fae:	bfbc      	itt	lt
 8008fb0:	212d      	movlt	r1, #45	; 0x2d
 8008fb2:	7059      	strblt	r1, [r3, #1]
 8008fb4:	2a63      	cmp	r2, #99	; 0x63
 8008fb6:	dd0b      	ble.n	8008fd0 <print_e+0xa4>
 8008fb8:	2164      	movs	r1, #100	; 0x64
 8008fba:	fb92 f1f1 	sdiv	r1, r2, r1
 8008fbe:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8008fc2:	1cd8      	adds	r0, r3, #3
 8008fc4:	709c      	strb	r4, [r3, #2]
 8008fc6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008fca:	fb03 2201 	mla	r2, r3, r1, r2
 8008fce:	9205      	str	r2, [sp, #20]
 8008fd0:	9b05      	ldr	r3, [sp, #20]
 8008fd2:	220a      	movs	r2, #10
 8008fd4:	fb93 f2f2 	sdiv	r2, r3, r2
 8008fd8:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8008fdc:	7001      	strb	r1, [r0, #0]
 8008fde:	f06f 0109 	mvn.w	r1, #9
 8008fe2:	fb01 3302 	mla	r3, r1, r2, r3
 8008fe6:	3330      	adds	r3, #48	; 0x30
 8008fe8:	7043      	strb	r3, [r0, #1]
 8008fea:	2300      	movs	r3, #0
 8008fec:	7083      	strb	r3, [r0, #2]
 8008fee:	e7b8      	b.n	8008f62 <print_e+0x36>
 8008ff0:	b10d      	cbz	r5, 8008ff6 <print_e+0xca>
 8008ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff6:	7805      	ldrb	r5, [r0, #0]
 8008ff8:	f803 5b01 	strb.w	r5, [r3], #1
 8008ffc:	3c01      	subs	r4, #1
 8008ffe:	2500      	movs	r5, #0
 8009000:	e7b9      	b.n	8008f76 <print_e+0x4a>
 8009002:	b10d      	cbz	r5, 8009008 <print_e+0xdc>
 8009004:	f803 1b01 	strb.w	r1, [r3], #1
 8009008:	f803 0b01 	strb.w	r0, [r3], #1
 800900c:	3c01      	subs	r4, #1
 800900e:	2500      	movs	r5, #0
 8009010:	e7bc      	b.n	8008f8c <print_e+0x60>
 8009012:	2665      	movs	r6, #101	; 0x65
 8009014:	e7bc      	b.n	8008f90 <print_e+0x64>
 8009016:	2645      	movs	r6, #69	; 0x45
 8009018:	e7ba      	b.n	8008f90 <print_e+0x64>
 800901a:	0000      	movs	r0, r0
 800901c:	0000      	movs	r0, r0
	...

08009020 <_gcvt>:
 8009020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009024:	ec55 4b10 	vmov	r4, r5, d0
 8009028:	b088      	sub	sp, #32
 800902a:	4681      	mov	r9, r0
 800902c:	4688      	mov	r8, r1
 800902e:	4616      	mov	r6, r2
 8009030:	469a      	mov	sl, r3
 8009032:	ee10 0a10 	vmov	r0, s0
 8009036:	2200      	movs	r2, #0
 8009038:	2300      	movs	r3, #0
 800903a:	4629      	mov	r1, r5
 800903c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800903e:	f7f7 fd6d 	bl	8000b1c <__aeabi_dcmplt>
 8009042:	b110      	cbz	r0, 800904a <_gcvt+0x2a>
 8009044:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009048:	461d      	mov	r5, r3
 800904a:	2200      	movs	r2, #0
 800904c:	2300      	movs	r3, #0
 800904e:	4620      	mov	r0, r4
 8009050:	4629      	mov	r1, r5
 8009052:	f7f7 fd59 	bl	8000b08 <__aeabi_dcmpeq>
 8009056:	b138      	cbz	r0, 8009068 <_gcvt+0x48>
 8009058:	2330      	movs	r3, #48	; 0x30
 800905a:	7033      	strb	r3, [r6, #0]
 800905c:	2300      	movs	r3, #0
 800905e:	7073      	strb	r3, [r6, #1]
 8009060:	4630      	mov	r0, r6
 8009062:	b008      	add	sp, #32
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009068:	a34b      	add	r3, pc, #300	; (adr r3, 8009198 <_gcvt+0x178>)
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	4620      	mov	r0, r4
 8009070:	4629      	mov	r1, r5
 8009072:	f7f7 fd5d 	bl	8000b30 <__aeabi_dcmple>
 8009076:	b158      	cbz	r0, 8009090 <_gcvt+0x70>
 8009078:	f108 31ff 	add.w	r1, r8, #4294967295
 800907c:	9100      	str	r1, [sp, #0]
 800907e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8009082:	4622      	mov	r2, r4
 8009084:	462b      	mov	r3, r5
 8009086:	4631      	mov	r1, r6
 8009088:	4648      	mov	r0, r9
 800908a:	f7ff ff4f 	bl	8008f2c <print_e>
 800908e:	e7e7      	b.n	8009060 <_gcvt+0x40>
 8009090:	4640      	mov	r0, r8
 8009092:	f000 fcf5 	bl	8009a80 <_mprec_log10>
 8009096:	4622      	mov	r2, r4
 8009098:	ec51 0b10 	vmov	r0, r1, d0
 800909c:	462b      	mov	r3, r5
 800909e:	f7f7 fd47 	bl	8000b30 <__aeabi_dcmple>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d1e8      	bne.n	8009078 <_gcvt+0x58>
 80090a6:	ab07      	add	r3, sp, #28
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	ab06      	add	r3, sp, #24
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	4642      	mov	r2, r8
 80090b0:	ab05      	add	r3, sp, #20
 80090b2:	ec45 4b10 	vmov	d0, r4, r5
 80090b6:	2102      	movs	r1, #2
 80090b8:	4648      	mov	r0, r9
 80090ba:	f7ff f949 	bl	8008350 <_dtoa_r>
 80090be:	9a05      	ldr	r2, [sp, #20]
 80090c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d00e      	beq.n	80090e6 <_gcvt+0xc6>
 80090c8:	4633      	mov	r3, r6
 80090ca:	44b0      	add	r8, r6
 80090cc:	4605      	mov	r5, r0
 80090ce:	f810 1b01 	ldrb.w	r1, [r0], #1
 80090d2:	9c05      	ldr	r4, [sp, #20]
 80090d4:	eba8 0203 	sub.w	r2, r8, r3
 80090d8:	b109      	cbz	r1, 80090de <_gcvt+0xbe>
 80090da:	2c00      	cmp	r4, #0
 80090dc:	dc08      	bgt.n	80090f0 <_gcvt+0xd0>
 80090de:	2100      	movs	r1, #0
 80090e0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80090e4:	e00d      	b.n	8009102 <_gcvt+0xe2>
 80090e6:	4601      	mov	r1, r0
 80090e8:	4630      	mov	r0, r6
 80090ea:	f000 fd5b 	bl	8009ba4 <strcpy>
 80090ee:	e7b7      	b.n	8009060 <_gcvt+0x40>
 80090f0:	3c01      	subs	r4, #1
 80090f2:	f803 1b01 	strb.w	r1, [r3], #1
 80090f6:	9405      	str	r4, [sp, #20]
 80090f8:	e7e8      	b.n	80090cc <_gcvt+0xac>
 80090fa:	f803 cb01 	strb.w	ip, [r3], #1
 80090fe:	3a01      	subs	r2, #1
 8009100:	2101      	movs	r1, #1
 8009102:	2c00      	cmp	r4, #0
 8009104:	4620      	mov	r0, r4
 8009106:	dc2a      	bgt.n	800915e <_gcvt+0x13e>
 8009108:	b101      	cbz	r1, 800910c <_gcvt+0xec>
 800910a:	9405      	str	r4, [sp, #20]
 800910c:	b90f      	cbnz	r7, 8009112 <_gcvt+0xf2>
 800910e:	7829      	ldrb	r1, [r5, #0]
 8009110:	b311      	cbz	r1, 8009158 <_gcvt+0x138>
 8009112:	42b3      	cmp	r3, r6
 8009114:	bf04      	itt	eq
 8009116:	2130      	moveq	r1, #48	; 0x30
 8009118:	f803 1b01 	strbeq.w	r1, [r3], #1
 800911c:	212e      	movs	r1, #46	; 0x2e
 800911e:	7019      	strb	r1, [r3, #0]
 8009120:	9905      	ldr	r1, [sp, #20]
 8009122:	4618      	mov	r0, r3
 8009124:	2400      	movs	r4, #0
 8009126:	eba1 0c03 	sub.w	ip, r1, r3
 800912a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800912e:	eb1c 0f00 	cmn.w	ip, r0
 8009132:	d41c      	bmi.n	800916e <_gcvt+0x14e>
 8009134:	2900      	cmp	r1, #0
 8009136:	f1c1 0000 	rsb	r0, r1, #0
 800913a:	bfc8      	it	gt
 800913c:	2000      	movgt	r0, #0
 800913e:	f100 0c01 	add.w	ip, r0, #1
 8009142:	4463      	add	r3, ip
 8009144:	4401      	add	r1, r0
 8009146:	b104      	cbz	r4, 800914a <_gcvt+0x12a>
 8009148:	9105      	str	r1, [sp, #20]
 800914a:	1e69      	subs	r1, r5, #1
 800914c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009150:	b108      	cbz	r0, 8009156 <_gcvt+0x136>
 8009152:	2a00      	cmp	r2, #0
 8009154:	dc0f      	bgt.n	8009176 <_gcvt+0x156>
 8009156:	b9df      	cbnz	r7, 8009190 <_gcvt+0x170>
 8009158:	2200      	movs	r2, #0
 800915a:	701a      	strb	r2, [r3, #0]
 800915c:	e780      	b.n	8009060 <_gcvt+0x40>
 800915e:	2a00      	cmp	r2, #0
 8009160:	f104 34ff 	add.w	r4, r4, #4294967295
 8009164:	dcc9      	bgt.n	80090fa <_gcvt+0xda>
 8009166:	2900      	cmp	r1, #0
 8009168:	d0d0      	beq.n	800910c <_gcvt+0xec>
 800916a:	9005      	str	r0, [sp, #20]
 800916c:	e7ce      	b.n	800910c <_gcvt+0xec>
 800916e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8009172:	2401      	movs	r4, #1
 8009174:	e7db      	b.n	800912e <_gcvt+0x10e>
 8009176:	f803 0b01 	strb.w	r0, [r3], #1
 800917a:	3a01      	subs	r2, #1
 800917c:	e7e6      	b.n	800914c <_gcvt+0x12c>
 800917e:	f801 5b01 	strb.w	r5, [r1], #1
 8009182:	1a60      	subs	r0, r4, r1
 8009184:	2800      	cmp	r0, #0
 8009186:	dcfa      	bgt.n	800917e <_gcvt+0x15e>
 8009188:	2a00      	cmp	r2, #0
 800918a:	bfa8      	it	ge
 800918c:	189b      	addge	r3, r3, r2
 800918e:	e7e3      	b.n	8009158 <_gcvt+0x138>
 8009190:	4619      	mov	r1, r3
 8009192:	189c      	adds	r4, r3, r2
 8009194:	2530      	movs	r5, #48	; 0x30
 8009196:	e7f4      	b.n	8009182 <_gcvt+0x162>
 8009198:	eb1c432d 	.word	0xeb1c432d
 800919c:	3f1a36e2 	.word	0x3f1a36e2

080091a0 <__sflush_r>:
 80091a0:	898a      	ldrh	r2, [r1, #12]
 80091a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a6:	4605      	mov	r5, r0
 80091a8:	0710      	lsls	r0, r2, #28
 80091aa:	460c      	mov	r4, r1
 80091ac:	d458      	bmi.n	8009260 <__sflush_r+0xc0>
 80091ae:	684b      	ldr	r3, [r1, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	dc05      	bgt.n	80091c0 <__sflush_r+0x20>
 80091b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dc02      	bgt.n	80091c0 <__sflush_r+0x20>
 80091ba:	2000      	movs	r0, #0
 80091bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091c2:	2e00      	cmp	r6, #0
 80091c4:	d0f9      	beq.n	80091ba <__sflush_r+0x1a>
 80091c6:	2300      	movs	r3, #0
 80091c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091cc:	682f      	ldr	r7, [r5, #0]
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	d032      	beq.n	8009238 <__sflush_r+0x98>
 80091d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	075a      	lsls	r2, r3, #29
 80091d8:	d505      	bpl.n	80091e6 <__sflush_r+0x46>
 80091da:	6863      	ldr	r3, [r4, #4]
 80091dc:	1ac0      	subs	r0, r0, r3
 80091de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091e0:	b10b      	cbz	r3, 80091e6 <__sflush_r+0x46>
 80091e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091e4:	1ac0      	subs	r0, r0, r3
 80091e6:	2300      	movs	r3, #0
 80091e8:	4602      	mov	r2, r0
 80091ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091ec:	6a21      	ldr	r1, [r4, #32]
 80091ee:	4628      	mov	r0, r5
 80091f0:	47b0      	blx	r6
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	89a3      	ldrh	r3, [r4, #12]
 80091f6:	d106      	bne.n	8009206 <__sflush_r+0x66>
 80091f8:	6829      	ldr	r1, [r5, #0]
 80091fa:	291d      	cmp	r1, #29
 80091fc:	d82c      	bhi.n	8009258 <__sflush_r+0xb8>
 80091fe:	4a2a      	ldr	r2, [pc, #168]	; (80092a8 <__sflush_r+0x108>)
 8009200:	40ca      	lsrs	r2, r1
 8009202:	07d6      	lsls	r6, r2, #31
 8009204:	d528      	bpl.n	8009258 <__sflush_r+0xb8>
 8009206:	2200      	movs	r2, #0
 8009208:	6062      	str	r2, [r4, #4]
 800920a:	04d9      	lsls	r1, r3, #19
 800920c:	6922      	ldr	r2, [r4, #16]
 800920e:	6022      	str	r2, [r4, #0]
 8009210:	d504      	bpl.n	800921c <__sflush_r+0x7c>
 8009212:	1c42      	adds	r2, r0, #1
 8009214:	d101      	bne.n	800921a <__sflush_r+0x7a>
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	b903      	cbnz	r3, 800921c <__sflush_r+0x7c>
 800921a:	6560      	str	r0, [r4, #84]	; 0x54
 800921c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800921e:	602f      	str	r7, [r5, #0]
 8009220:	2900      	cmp	r1, #0
 8009222:	d0ca      	beq.n	80091ba <__sflush_r+0x1a>
 8009224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009228:	4299      	cmp	r1, r3
 800922a:	d002      	beq.n	8009232 <__sflush_r+0x92>
 800922c:	4628      	mov	r0, r5
 800922e:	f000 fc5b 	bl	8009ae8 <_free_r>
 8009232:	2000      	movs	r0, #0
 8009234:	6360      	str	r0, [r4, #52]	; 0x34
 8009236:	e7c1      	b.n	80091bc <__sflush_r+0x1c>
 8009238:	6a21      	ldr	r1, [r4, #32]
 800923a:	2301      	movs	r3, #1
 800923c:	4628      	mov	r0, r5
 800923e:	47b0      	blx	r6
 8009240:	1c41      	adds	r1, r0, #1
 8009242:	d1c7      	bne.n	80091d4 <__sflush_r+0x34>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d0c4      	beq.n	80091d4 <__sflush_r+0x34>
 800924a:	2b1d      	cmp	r3, #29
 800924c:	d001      	beq.n	8009252 <__sflush_r+0xb2>
 800924e:	2b16      	cmp	r3, #22
 8009250:	d101      	bne.n	8009256 <__sflush_r+0xb6>
 8009252:	602f      	str	r7, [r5, #0]
 8009254:	e7b1      	b.n	80091ba <__sflush_r+0x1a>
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	e7ad      	b.n	80091bc <__sflush_r+0x1c>
 8009260:	690f      	ldr	r7, [r1, #16]
 8009262:	2f00      	cmp	r7, #0
 8009264:	d0a9      	beq.n	80091ba <__sflush_r+0x1a>
 8009266:	0793      	lsls	r3, r2, #30
 8009268:	680e      	ldr	r6, [r1, #0]
 800926a:	bf08      	it	eq
 800926c:	694b      	ldreq	r3, [r1, #20]
 800926e:	600f      	str	r7, [r1, #0]
 8009270:	bf18      	it	ne
 8009272:	2300      	movne	r3, #0
 8009274:	eba6 0807 	sub.w	r8, r6, r7
 8009278:	608b      	str	r3, [r1, #8]
 800927a:	f1b8 0f00 	cmp.w	r8, #0
 800927e:	dd9c      	ble.n	80091ba <__sflush_r+0x1a>
 8009280:	6a21      	ldr	r1, [r4, #32]
 8009282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009284:	4643      	mov	r3, r8
 8009286:	463a      	mov	r2, r7
 8009288:	4628      	mov	r0, r5
 800928a:	47b0      	blx	r6
 800928c:	2800      	cmp	r0, #0
 800928e:	dc06      	bgt.n	800929e <__sflush_r+0xfe>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	f04f 30ff 	mov.w	r0, #4294967295
 800929c:	e78e      	b.n	80091bc <__sflush_r+0x1c>
 800929e:	4407      	add	r7, r0
 80092a0:	eba8 0800 	sub.w	r8, r8, r0
 80092a4:	e7e9      	b.n	800927a <__sflush_r+0xda>
 80092a6:	bf00      	nop
 80092a8:	20400001 	.word	0x20400001

080092ac <_fflush_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	690b      	ldr	r3, [r1, #16]
 80092b0:	4605      	mov	r5, r0
 80092b2:	460c      	mov	r4, r1
 80092b4:	b913      	cbnz	r3, 80092bc <_fflush_r+0x10>
 80092b6:	2500      	movs	r5, #0
 80092b8:	4628      	mov	r0, r5
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	b118      	cbz	r0, 80092c6 <_fflush_r+0x1a>
 80092be:	6983      	ldr	r3, [r0, #24]
 80092c0:	b90b      	cbnz	r3, 80092c6 <_fflush_r+0x1a>
 80092c2:	f7fe f8fd 	bl	80074c0 <__sinit>
 80092c6:	4b14      	ldr	r3, [pc, #80]	; (8009318 <_fflush_r+0x6c>)
 80092c8:	429c      	cmp	r4, r3
 80092ca:	d11b      	bne.n	8009304 <_fflush_r+0x58>
 80092cc:	686c      	ldr	r4, [r5, #4]
 80092ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0ef      	beq.n	80092b6 <_fflush_r+0xa>
 80092d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092d8:	07d0      	lsls	r0, r2, #31
 80092da:	d404      	bmi.n	80092e6 <_fflush_r+0x3a>
 80092dc:	0599      	lsls	r1, r3, #22
 80092de:	d402      	bmi.n	80092e6 <_fflush_r+0x3a>
 80092e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092e2:	f7fe f9b0 	bl	8007646 <__retarget_lock_acquire_recursive>
 80092e6:	4628      	mov	r0, r5
 80092e8:	4621      	mov	r1, r4
 80092ea:	f7ff ff59 	bl	80091a0 <__sflush_r>
 80092ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092f0:	07da      	lsls	r2, r3, #31
 80092f2:	4605      	mov	r5, r0
 80092f4:	d4e0      	bmi.n	80092b8 <_fflush_r+0xc>
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	059b      	lsls	r3, r3, #22
 80092fa:	d4dd      	bmi.n	80092b8 <_fflush_r+0xc>
 80092fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092fe:	f7fe f9a3 	bl	8007648 <__retarget_lock_release_recursive>
 8009302:	e7d9      	b.n	80092b8 <_fflush_r+0xc>
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <_fflush_r+0x70>)
 8009306:	429c      	cmp	r4, r3
 8009308:	d101      	bne.n	800930e <_fflush_r+0x62>
 800930a:	68ac      	ldr	r4, [r5, #8]
 800930c:	e7df      	b.n	80092ce <_fflush_r+0x22>
 800930e:	4b04      	ldr	r3, [pc, #16]	; (8009320 <_fflush_r+0x74>)
 8009310:	429c      	cmp	r4, r3
 8009312:	bf08      	it	eq
 8009314:	68ec      	ldreq	r4, [r5, #12]
 8009316:	e7da      	b.n	80092ce <_fflush_r+0x22>
 8009318:	0800b4dc 	.word	0x0800b4dc
 800931c:	0800b4fc 	.word	0x0800b4fc
 8009320:	0800b4bc 	.word	0x0800b4bc

08009324 <_localeconv_r>:
 8009324:	4800      	ldr	r0, [pc, #0]	; (8009328 <_localeconv_r+0x4>)
 8009326:	4770      	bx	lr
 8009328:	20000168 	.word	0x20000168

0800932c <_lseek_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4d07      	ldr	r5, [pc, #28]	; (800934c <_lseek_r+0x20>)
 8009330:	4604      	mov	r4, r0
 8009332:	4608      	mov	r0, r1
 8009334:	4611      	mov	r1, r2
 8009336:	2200      	movs	r2, #0
 8009338:	602a      	str	r2, [r5, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	f7f8 fcca 	bl	8001cd4 <_lseek>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_lseek_r+0x1e>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_lseek_r+0x1e>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	20004d60 	.word	0x20004d60

08009350 <malloc>:
 8009350:	4b02      	ldr	r3, [pc, #8]	; (800935c <malloc+0xc>)
 8009352:	4601      	mov	r1, r0
 8009354:	6818      	ldr	r0, [r3, #0]
 8009356:	f7fe b9af 	b.w	80076b8 <_malloc_r>
 800935a:	bf00      	nop
 800935c:	20000014 	.word	0x20000014

08009360 <__malloc_lock>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__malloc_lock+0x8>)
 8009362:	f7fe b970 	b.w	8007646 <__retarget_lock_acquire_recursive>
 8009366:	bf00      	nop
 8009368:	20004d54 	.word	0x20004d54

0800936c <__malloc_unlock>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__malloc_unlock+0x8>)
 800936e:	f7fe b96b 	b.w	8007648 <__retarget_lock_release_recursive>
 8009372:	bf00      	nop
 8009374:	20004d54 	.word	0x20004d54

08009378 <_Balloc>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800937c:	4604      	mov	r4, r0
 800937e:	460d      	mov	r5, r1
 8009380:	b976      	cbnz	r6, 80093a0 <_Balloc+0x28>
 8009382:	2010      	movs	r0, #16
 8009384:	f7ff ffe4 	bl	8009350 <malloc>
 8009388:	4602      	mov	r2, r0
 800938a:	6260      	str	r0, [r4, #36]	; 0x24
 800938c:	b920      	cbnz	r0, 8009398 <_Balloc+0x20>
 800938e:	4b18      	ldr	r3, [pc, #96]	; (80093f0 <_Balloc+0x78>)
 8009390:	4818      	ldr	r0, [pc, #96]	; (80093f4 <_Balloc+0x7c>)
 8009392:	2166      	movs	r1, #102	; 0x66
 8009394:	f000 fc0e 	bl	8009bb4 <__assert_func>
 8009398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800939c:	6006      	str	r6, [r0, #0]
 800939e:	60c6      	str	r6, [r0, #12]
 80093a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093a2:	68f3      	ldr	r3, [r6, #12]
 80093a4:	b183      	cbz	r3, 80093c8 <_Balloc+0x50>
 80093a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093ae:	b9b8      	cbnz	r0, 80093e0 <_Balloc+0x68>
 80093b0:	2101      	movs	r1, #1
 80093b2:	fa01 f605 	lsl.w	r6, r1, r5
 80093b6:	1d72      	adds	r2, r6, #5
 80093b8:	0092      	lsls	r2, r2, #2
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 fb7e 	bl	8009abc <_calloc_r>
 80093c0:	b160      	cbz	r0, 80093dc <_Balloc+0x64>
 80093c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093c6:	e00e      	b.n	80093e6 <_Balloc+0x6e>
 80093c8:	2221      	movs	r2, #33	; 0x21
 80093ca:	2104      	movs	r1, #4
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 fb75 	bl	8009abc <_calloc_r>
 80093d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d4:	60f0      	str	r0, [r6, #12]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e4      	bne.n	80093a6 <_Balloc+0x2e>
 80093dc:	2000      	movs	r0, #0
 80093de:	bd70      	pop	{r4, r5, r6, pc}
 80093e0:	6802      	ldr	r2, [r0, #0]
 80093e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093e6:	2300      	movs	r3, #0
 80093e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093ec:	e7f7      	b.n	80093de <_Balloc+0x66>
 80093ee:	bf00      	nop
 80093f0:	0800b561 	.word	0x0800b561
 80093f4:	0800b5e4 	.word	0x0800b5e4

080093f8 <_Bfree>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093fc:	4605      	mov	r5, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	b976      	cbnz	r6, 8009420 <_Bfree+0x28>
 8009402:	2010      	movs	r0, #16
 8009404:	f7ff ffa4 	bl	8009350 <malloc>
 8009408:	4602      	mov	r2, r0
 800940a:	6268      	str	r0, [r5, #36]	; 0x24
 800940c:	b920      	cbnz	r0, 8009418 <_Bfree+0x20>
 800940e:	4b09      	ldr	r3, [pc, #36]	; (8009434 <_Bfree+0x3c>)
 8009410:	4809      	ldr	r0, [pc, #36]	; (8009438 <_Bfree+0x40>)
 8009412:	218a      	movs	r1, #138	; 0x8a
 8009414:	f000 fbce 	bl	8009bb4 <__assert_func>
 8009418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800941c:	6006      	str	r6, [r0, #0]
 800941e:	60c6      	str	r6, [r0, #12]
 8009420:	b13c      	cbz	r4, 8009432 <_Bfree+0x3a>
 8009422:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009424:	6862      	ldr	r2, [r4, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800942c:	6021      	str	r1, [r4, #0]
 800942e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	0800b561 	.word	0x0800b561
 8009438:	0800b5e4 	.word	0x0800b5e4

0800943c <__multadd>:
 800943c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009440:	690d      	ldr	r5, [r1, #16]
 8009442:	4607      	mov	r7, r0
 8009444:	460c      	mov	r4, r1
 8009446:	461e      	mov	r6, r3
 8009448:	f101 0c14 	add.w	ip, r1, #20
 800944c:	2000      	movs	r0, #0
 800944e:	f8dc 3000 	ldr.w	r3, [ip]
 8009452:	b299      	uxth	r1, r3
 8009454:	fb02 6101 	mla	r1, r2, r1, r6
 8009458:	0c1e      	lsrs	r6, r3, #16
 800945a:	0c0b      	lsrs	r3, r1, #16
 800945c:	fb02 3306 	mla	r3, r2, r6, r3
 8009460:	b289      	uxth	r1, r1
 8009462:	3001      	adds	r0, #1
 8009464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009468:	4285      	cmp	r5, r0
 800946a:	f84c 1b04 	str.w	r1, [ip], #4
 800946e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009472:	dcec      	bgt.n	800944e <__multadd+0x12>
 8009474:	b30e      	cbz	r6, 80094ba <__multadd+0x7e>
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	42ab      	cmp	r3, r5
 800947a:	dc19      	bgt.n	80094b0 <__multadd+0x74>
 800947c:	6861      	ldr	r1, [r4, #4]
 800947e:	4638      	mov	r0, r7
 8009480:	3101      	adds	r1, #1
 8009482:	f7ff ff79 	bl	8009378 <_Balloc>
 8009486:	4680      	mov	r8, r0
 8009488:	b928      	cbnz	r0, 8009496 <__multadd+0x5a>
 800948a:	4602      	mov	r2, r0
 800948c:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <__multadd+0x84>)
 800948e:	480d      	ldr	r0, [pc, #52]	; (80094c4 <__multadd+0x88>)
 8009490:	21b5      	movs	r1, #181	; 0xb5
 8009492:	f000 fb8f 	bl	8009bb4 <__assert_func>
 8009496:	6922      	ldr	r2, [r4, #16]
 8009498:	3202      	adds	r2, #2
 800949a:	f104 010c 	add.w	r1, r4, #12
 800949e:	0092      	lsls	r2, r2, #2
 80094a0:	300c      	adds	r0, #12
 80094a2:	f7fe f8d2 	bl	800764a <memcpy>
 80094a6:	4621      	mov	r1, r4
 80094a8:	4638      	mov	r0, r7
 80094aa:	f7ff ffa5 	bl	80093f8 <_Bfree>
 80094ae:	4644      	mov	r4, r8
 80094b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094b4:	3501      	adds	r5, #1
 80094b6:	615e      	str	r6, [r3, #20]
 80094b8:	6125      	str	r5, [r4, #16]
 80094ba:	4620      	mov	r0, r4
 80094bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c0:	0800b5d3 	.word	0x0800b5d3
 80094c4:	0800b5e4 	.word	0x0800b5e4

080094c8 <__hi0bits>:
 80094c8:	0c03      	lsrs	r3, r0, #16
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	b9d3      	cbnz	r3, 8009504 <__hi0bits+0x3c>
 80094ce:	0400      	lsls	r0, r0, #16
 80094d0:	2310      	movs	r3, #16
 80094d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094d6:	bf04      	itt	eq
 80094d8:	0200      	lsleq	r0, r0, #8
 80094da:	3308      	addeq	r3, #8
 80094dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094e0:	bf04      	itt	eq
 80094e2:	0100      	lsleq	r0, r0, #4
 80094e4:	3304      	addeq	r3, #4
 80094e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094ea:	bf04      	itt	eq
 80094ec:	0080      	lsleq	r0, r0, #2
 80094ee:	3302      	addeq	r3, #2
 80094f0:	2800      	cmp	r0, #0
 80094f2:	db05      	blt.n	8009500 <__hi0bits+0x38>
 80094f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094f8:	f103 0301 	add.w	r3, r3, #1
 80094fc:	bf08      	it	eq
 80094fe:	2320      	moveq	r3, #32
 8009500:	4618      	mov	r0, r3
 8009502:	4770      	bx	lr
 8009504:	2300      	movs	r3, #0
 8009506:	e7e4      	b.n	80094d2 <__hi0bits+0xa>

08009508 <__lo0bits>:
 8009508:	6803      	ldr	r3, [r0, #0]
 800950a:	f013 0207 	ands.w	r2, r3, #7
 800950e:	4601      	mov	r1, r0
 8009510:	d00b      	beq.n	800952a <__lo0bits+0x22>
 8009512:	07da      	lsls	r2, r3, #31
 8009514:	d423      	bmi.n	800955e <__lo0bits+0x56>
 8009516:	0798      	lsls	r0, r3, #30
 8009518:	bf49      	itett	mi
 800951a:	085b      	lsrmi	r3, r3, #1
 800951c:	089b      	lsrpl	r3, r3, #2
 800951e:	2001      	movmi	r0, #1
 8009520:	600b      	strmi	r3, [r1, #0]
 8009522:	bf5c      	itt	pl
 8009524:	600b      	strpl	r3, [r1, #0]
 8009526:	2002      	movpl	r0, #2
 8009528:	4770      	bx	lr
 800952a:	b298      	uxth	r0, r3
 800952c:	b9a8      	cbnz	r0, 800955a <__lo0bits+0x52>
 800952e:	0c1b      	lsrs	r3, r3, #16
 8009530:	2010      	movs	r0, #16
 8009532:	b2da      	uxtb	r2, r3
 8009534:	b90a      	cbnz	r2, 800953a <__lo0bits+0x32>
 8009536:	3008      	adds	r0, #8
 8009538:	0a1b      	lsrs	r3, r3, #8
 800953a:	071a      	lsls	r2, r3, #28
 800953c:	bf04      	itt	eq
 800953e:	091b      	lsreq	r3, r3, #4
 8009540:	3004      	addeq	r0, #4
 8009542:	079a      	lsls	r2, r3, #30
 8009544:	bf04      	itt	eq
 8009546:	089b      	lsreq	r3, r3, #2
 8009548:	3002      	addeq	r0, #2
 800954a:	07da      	lsls	r2, r3, #31
 800954c:	d403      	bmi.n	8009556 <__lo0bits+0x4e>
 800954e:	085b      	lsrs	r3, r3, #1
 8009550:	f100 0001 	add.w	r0, r0, #1
 8009554:	d005      	beq.n	8009562 <__lo0bits+0x5a>
 8009556:	600b      	str	r3, [r1, #0]
 8009558:	4770      	bx	lr
 800955a:	4610      	mov	r0, r2
 800955c:	e7e9      	b.n	8009532 <__lo0bits+0x2a>
 800955e:	2000      	movs	r0, #0
 8009560:	4770      	bx	lr
 8009562:	2020      	movs	r0, #32
 8009564:	4770      	bx	lr
	...

08009568 <__i2b>:
 8009568:	b510      	push	{r4, lr}
 800956a:	460c      	mov	r4, r1
 800956c:	2101      	movs	r1, #1
 800956e:	f7ff ff03 	bl	8009378 <_Balloc>
 8009572:	4602      	mov	r2, r0
 8009574:	b928      	cbnz	r0, 8009582 <__i2b+0x1a>
 8009576:	4b05      	ldr	r3, [pc, #20]	; (800958c <__i2b+0x24>)
 8009578:	4805      	ldr	r0, [pc, #20]	; (8009590 <__i2b+0x28>)
 800957a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800957e:	f000 fb19 	bl	8009bb4 <__assert_func>
 8009582:	2301      	movs	r3, #1
 8009584:	6144      	str	r4, [r0, #20]
 8009586:	6103      	str	r3, [r0, #16]
 8009588:	bd10      	pop	{r4, pc}
 800958a:	bf00      	nop
 800958c:	0800b5d3 	.word	0x0800b5d3
 8009590:	0800b5e4 	.word	0x0800b5e4

08009594 <__multiply>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	4691      	mov	r9, r2
 800959a:	690a      	ldr	r2, [r1, #16]
 800959c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	bfb8      	it	lt
 80095a4:	460b      	movlt	r3, r1
 80095a6:	460c      	mov	r4, r1
 80095a8:	bfbc      	itt	lt
 80095aa:	464c      	movlt	r4, r9
 80095ac:	4699      	movlt	r9, r3
 80095ae:	6927      	ldr	r7, [r4, #16]
 80095b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	6861      	ldr	r1, [r4, #4]
 80095b8:	eb07 060a 	add.w	r6, r7, sl
 80095bc:	42b3      	cmp	r3, r6
 80095be:	b085      	sub	sp, #20
 80095c0:	bfb8      	it	lt
 80095c2:	3101      	addlt	r1, #1
 80095c4:	f7ff fed8 	bl	8009378 <_Balloc>
 80095c8:	b930      	cbnz	r0, 80095d8 <__multiply+0x44>
 80095ca:	4602      	mov	r2, r0
 80095cc:	4b44      	ldr	r3, [pc, #272]	; (80096e0 <__multiply+0x14c>)
 80095ce:	4845      	ldr	r0, [pc, #276]	; (80096e4 <__multiply+0x150>)
 80095d0:	f240 115d 	movw	r1, #349	; 0x15d
 80095d4:	f000 faee 	bl	8009bb4 <__assert_func>
 80095d8:	f100 0514 	add.w	r5, r0, #20
 80095dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095e0:	462b      	mov	r3, r5
 80095e2:	2200      	movs	r2, #0
 80095e4:	4543      	cmp	r3, r8
 80095e6:	d321      	bcc.n	800962c <__multiply+0x98>
 80095e8:	f104 0314 	add.w	r3, r4, #20
 80095ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095f0:	f109 0314 	add.w	r3, r9, #20
 80095f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095f8:	9202      	str	r2, [sp, #8]
 80095fa:	1b3a      	subs	r2, r7, r4
 80095fc:	3a15      	subs	r2, #21
 80095fe:	f022 0203 	bic.w	r2, r2, #3
 8009602:	3204      	adds	r2, #4
 8009604:	f104 0115 	add.w	r1, r4, #21
 8009608:	428f      	cmp	r7, r1
 800960a:	bf38      	it	cc
 800960c:	2204      	movcc	r2, #4
 800960e:	9201      	str	r2, [sp, #4]
 8009610:	9a02      	ldr	r2, [sp, #8]
 8009612:	9303      	str	r3, [sp, #12]
 8009614:	429a      	cmp	r2, r3
 8009616:	d80c      	bhi.n	8009632 <__multiply+0x9e>
 8009618:	2e00      	cmp	r6, #0
 800961a:	dd03      	ble.n	8009624 <__multiply+0x90>
 800961c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009620:	2b00      	cmp	r3, #0
 8009622:	d05a      	beq.n	80096da <__multiply+0x146>
 8009624:	6106      	str	r6, [r0, #16]
 8009626:	b005      	add	sp, #20
 8009628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962c:	f843 2b04 	str.w	r2, [r3], #4
 8009630:	e7d8      	b.n	80095e4 <__multiply+0x50>
 8009632:	f8b3 a000 	ldrh.w	sl, [r3]
 8009636:	f1ba 0f00 	cmp.w	sl, #0
 800963a:	d024      	beq.n	8009686 <__multiply+0xf2>
 800963c:	f104 0e14 	add.w	lr, r4, #20
 8009640:	46a9      	mov	r9, r5
 8009642:	f04f 0c00 	mov.w	ip, #0
 8009646:	f85e 2b04 	ldr.w	r2, [lr], #4
 800964a:	f8d9 1000 	ldr.w	r1, [r9]
 800964e:	fa1f fb82 	uxth.w	fp, r2
 8009652:	b289      	uxth	r1, r1
 8009654:	fb0a 110b 	mla	r1, sl, fp, r1
 8009658:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800965c:	f8d9 2000 	ldr.w	r2, [r9]
 8009660:	4461      	add	r1, ip
 8009662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009666:	fb0a c20b 	mla	r2, sl, fp, ip
 800966a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800966e:	b289      	uxth	r1, r1
 8009670:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009674:	4577      	cmp	r7, lr
 8009676:	f849 1b04 	str.w	r1, [r9], #4
 800967a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800967e:	d8e2      	bhi.n	8009646 <__multiply+0xb2>
 8009680:	9a01      	ldr	r2, [sp, #4]
 8009682:	f845 c002 	str.w	ip, [r5, r2]
 8009686:	9a03      	ldr	r2, [sp, #12]
 8009688:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800968c:	3304      	adds	r3, #4
 800968e:	f1b9 0f00 	cmp.w	r9, #0
 8009692:	d020      	beq.n	80096d6 <__multiply+0x142>
 8009694:	6829      	ldr	r1, [r5, #0]
 8009696:	f104 0c14 	add.w	ip, r4, #20
 800969a:	46ae      	mov	lr, r5
 800969c:	f04f 0a00 	mov.w	sl, #0
 80096a0:	f8bc b000 	ldrh.w	fp, [ip]
 80096a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80096a8:	fb09 220b 	mla	r2, r9, fp, r2
 80096ac:	4492      	add	sl, r2
 80096ae:	b289      	uxth	r1, r1
 80096b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80096b4:	f84e 1b04 	str.w	r1, [lr], #4
 80096b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096bc:	f8be 1000 	ldrh.w	r1, [lr]
 80096c0:	0c12      	lsrs	r2, r2, #16
 80096c2:	fb09 1102 	mla	r1, r9, r2, r1
 80096c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096ca:	4567      	cmp	r7, ip
 80096cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096d0:	d8e6      	bhi.n	80096a0 <__multiply+0x10c>
 80096d2:	9a01      	ldr	r2, [sp, #4]
 80096d4:	50a9      	str	r1, [r5, r2]
 80096d6:	3504      	adds	r5, #4
 80096d8:	e79a      	b.n	8009610 <__multiply+0x7c>
 80096da:	3e01      	subs	r6, #1
 80096dc:	e79c      	b.n	8009618 <__multiply+0x84>
 80096de:	bf00      	nop
 80096e0:	0800b5d3 	.word	0x0800b5d3
 80096e4:	0800b5e4 	.word	0x0800b5e4

080096e8 <__pow5mult>:
 80096e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	4615      	mov	r5, r2
 80096ee:	f012 0203 	ands.w	r2, r2, #3
 80096f2:	4606      	mov	r6, r0
 80096f4:	460f      	mov	r7, r1
 80096f6:	d007      	beq.n	8009708 <__pow5mult+0x20>
 80096f8:	4c25      	ldr	r4, [pc, #148]	; (8009790 <__pow5mult+0xa8>)
 80096fa:	3a01      	subs	r2, #1
 80096fc:	2300      	movs	r3, #0
 80096fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009702:	f7ff fe9b 	bl	800943c <__multadd>
 8009706:	4607      	mov	r7, r0
 8009708:	10ad      	asrs	r5, r5, #2
 800970a:	d03d      	beq.n	8009788 <__pow5mult+0xa0>
 800970c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800970e:	b97c      	cbnz	r4, 8009730 <__pow5mult+0x48>
 8009710:	2010      	movs	r0, #16
 8009712:	f7ff fe1d 	bl	8009350 <malloc>
 8009716:	4602      	mov	r2, r0
 8009718:	6270      	str	r0, [r6, #36]	; 0x24
 800971a:	b928      	cbnz	r0, 8009728 <__pow5mult+0x40>
 800971c:	4b1d      	ldr	r3, [pc, #116]	; (8009794 <__pow5mult+0xac>)
 800971e:	481e      	ldr	r0, [pc, #120]	; (8009798 <__pow5mult+0xb0>)
 8009720:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009724:	f000 fa46 	bl	8009bb4 <__assert_func>
 8009728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800972c:	6004      	str	r4, [r0, #0]
 800972e:	60c4      	str	r4, [r0, #12]
 8009730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009738:	b94c      	cbnz	r4, 800974e <__pow5mult+0x66>
 800973a:	f240 2171 	movw	r1, #625	; 0x271
 800973e:	4630      	mov	r0, r6
 8009740:	f7ff ff12 	bl	8009568 <__i2b>
 8009744:	2300      	movs	r3, #0
 8009746:	f8c8 0008 	str.w	r0, [r8, #8]
 800974a:	4604      	mov	r4, r0
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	f04f 0900 	mov.w	r9, #0
 8009752:	07eb      	lsls	r3, r5, #31
 8009754:	d50a      	bpl.n	800976c <__pow5mult+0x84>
 8009756:	4639      	mov	r1, r7
 8009758:	4622      	mov	r2, r4
 800975a:	4630      	mov	r0, r6
 800975c:	f7ff ff1a 	bl	8009594 <__multiply>
 8009760:	4639      	mov	r1, r7
 8009762:	4680      	mov	r8, r0
 8009764:	4630      	mov	r0, r6
 8009766:	f7ff fe47 	bl	80093f8 <_Bfree>
 800976a:	4647      	mov	r7, r8
 800976c:	106d      	asrs	r5, r5, #1
 800976e:	d00b      	beq.n	8009788 <__pow5mult+0xa0>
 8009770:	6820      	ldr	r0, [r4, #0]
 8009772:	b938      	cbnz	r0, 8009784 <__pow5mult+0x9c>
 8009774:	4622      	mov	r2, r4
 8009776:	4621      	mov	r1, r4
 8009778:	4630      	mov	r0, r6
 800977a:	f7ff ff0b 	bl	8009594 <__multiply>
 800977e:	6020      	str	r0, [r4, #0]
 8009780:	f8c0 9000 	str.w	r9, [r0]
 8009784:	4604      	mov	r4, r0
 8009786:	e7e4      	b.n	8009752 <__pow5mult+0x6a>
 8009788:	4638      	mov	r0, r7
 800978a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978e:	bf00      	nop
 8009790:	0800b730 	.word	0x0800b730
 8009794:	0800b561 	.word	0x0800b561
 8009798:	0800b5e4 	.word	0x0800b5e4

0800979c <__lshift>:
 800979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	460c      	mov	r4, r1
 80097a2:	6849      	ldr	r1, [r1, #4]
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	4607      	mov	r7, r0
 80097ae:	4691      	mov	r9, r2
 80097b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097b4:	f108 0601 	add.w	r6, r8, #1
 80097b8:	42b3      	cmp	r3, r6
 80097ba:	db0b      	blt.n	80097d4 <__lshift+0x38>
 80097bc:	4638      	mov	r0, r7
 80097be:	f7ff fddb 	bl	8009378 <_Balloc>
 80097c2:	4605      	mov	r5, r0
 80097c4:	b948      	cbnz	r0, 80097da <__lshift+0x3e>
 80097c6:	4602      	mov	r2, r0
 80097c8:	4b2a      	ldr	r3, [pc, #168]	; (8009874 <__lshift+0xd8>)
 80097ca:	482b      	ldr	r0, [pc, #172]	; (8009878 <__lshift+0xdc>)
 80097cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097d0:	f000 f9f0 	bl	8009bb4 <__assert_func>
 80097d4:	3101      	adds	r1, #1
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	e7ee      	b.n	80097b8 <__lshift+0x1c>
 80097da:	2300      	movs	r3, #0
 80097dc:	f100 0114 	add.w	r1, r0, #20
 80097e0:	f100 0210 	add.w	r2, r0, #16
 80097e4:	4618      	mov	r0, r3
 80097e6:	4553      	cmp	r3, sl
 80097e8:	db37      	blt.n	800985a <__lshift+0xbe>
 80097ea:	6920      	ldr	r0, [r4, #16]
 80097ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097f0:	f104 0314 	add.w	r3, r4, #20
 80097f4:	f019 091f 	ands.w	r9, r9, #31
 80097f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009800:	d02f      	beq.n	8009862 <__lshift+0xc6>
 8009802:	f1c9 0e20 	rsb	lr, r9, #32
 8009806:	468a      	mov	sl, r1
 8009808:	f04f 0c00 	mov.w	ip, #0
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	fa02 f209 	lsl.w	r2, r2, r9
 8009812:	ea42 020c 	orr.w	r2, r2, ip
 8009816:	f84a 2b04 	str.w	r2, [sl], #4
 800981a:	f853 2b04 	ldr.w	r2, [r3], #4
 800981e:	4298      	cmp	r0, r3
 8009820:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009824:	d8f2      	bhi.n	800980c <__lshift+0x70>
 8009826:	1b03      	subs	r3, r0, r4
 8009828:	3b15      	subs	r3, #21
 800982a:	f023 0303 	bic.w	r3, r3, #3
 800982e:	3304      	adds	r3, #4
 8009830:	f104 0215 	add.w	r2, r4, #21
 8009834:	4290      	cmp	r0, r2
 8009836:	bf38      	it	cc
 8009838:	2304      	movcc	r3, #4
 800983a:	f841 c003 	str.w	ip, [r1, r3]
 800983e:	f1bc 0f00 	cmp.w	ip, #0
 8009842:	d001      	beq.n	8009848 <__lshift+0xac>
 8009844:	f108 0602 	add.w	r6, r8, #2
 8009848:	3e01      	subs	r6, #1
 800984a:	4638      	mov	r0, r7
 800984c:	612e      	str	r6, [r5, #16]
 800984e:	4621      	mov	r1, r4
 8009850:	f7ff fdd2 	bl	80093f8 <_Bfree>
 8009854:	4628      	mov	r0, r5
 8009856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985a:	f842 0f04 	str.w	r0, [r2, #4]!
 800985e:	3301      	adds	r3, #1
 8009860:	e7c1      	b.n	80097e6 <__lshift+0x4a>
 8009862:	3904      	subs	r1, #4
 8009864:	f853 2b04 	ldr.w	r2, [r3], #4
 8009868:	f841 2f04 	str.w	r2, [r1, #4]!
 800986c:	4298      	cmp	r0, r3
 800986e:	d8f9      	bhi.n	8009864 <__lshift+0xc8>
 8009870:	e7ea      	b.n	8009848 <__lshift+0xac>
 8009872:	bf00      	nop
 8009874:	0800b5d3 	.word	0x0800b5d3
 8009878:	0800b5e4 	.word	0x0800b5e4

0800987c <__mcmp>:
 800987c:	b530      	push	{r4, r5, lr}
 800987e:	6902      	ldr	r2, [r0, #16]
 8009880:	690c      	ldr	r4, [r1, #16]
 8009882:	1b12      	subs	r2, r2, r4
 8009884:	d10e      	bne.n	80098a4 <__mcmp+0x28>
 8009886:	f100 0314 	add.w	r3, r0, #20
 800988a:	3114      	adds	r1, #20
 800988c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800989c:	42a5      	cmp	r5, r4
 800989e:	d003      	beq.n	80098a8 <__mcmp+0x2c>
 80098a0:	d305      	bcc.n	80098ae <__mcmp+0x32>
 80098a2:	2201      	movs	r2, #1
 80098a4:	4610      	mov	r0, r2
 80098a6:	bd30      	pop	{r4, r5, pc}
 80098a8:	4283      	cmp	r3, r0
 80098aa:	d3f3      	bcc.n	8009894 <__mcmp+0x18>
 80098ac:	e7fa      	b.n	80098a4 <__mcmp+0x28>
 80098ae:	f04f 32ff 	mov.w	r2, #4294967295
 80098b2:	e7f7      	b.n	80098a4 <__mcmp+0x28>

080098b4 <__mdiff>:
 80098b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b8:	460c      	mov	r4, r1
 80098ba:	4606      	mov	r6, r0
 80098bc:	4611      	mov	r1, r2
 80098be:	4620      	mov	r0, r4
 80098c0:	4690      	mov	r8, r2
 80098c2:	f7ff ffdb 	bl	800987c <__mcmp>
 80098c6:	1e05      	subs	r5, r0, #0
 80098c8:	d110      	bne.n	80098ec <__mdiff+0x38>
 80098ca:	4629      	mov	r1, r5
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7ff fd53 	bl	8009378 <_Balloc>
 80098d2:	b930      	cbnz	r0, 80098e2 <__mdiff+0x2e>
 80098d4:	4b3a      	ldr	r3, [pc, #232]	; (80099c0 <__mdiff+0x10c>)
 80098d6:	4602      	mov	r2, r0
 80098d8:	f240 2132 	movw	r1, #562	; 0x232
 80098dc:	4839      	ldr	r0, [pc, #228]	; (80099c4 <__mdiff+0x110>)
 80098de:	f000 f969 	bl	8009bb4 <__assert_func>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	bfa4      	itt	ge
 80098ee:	4643      	movge	r3, r8
 80098f0:	46a0      	movge	r8, r4
 80098f2:	4630      	mov	r0, r6
 80098f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098f8:	bfa6      	itte	ge
 80098fa:	461c      	movge	r4, r3
 80098fc:	2500      	movge	r5, #0
 80098fe:	2501      	movlt	r5, #1
 8009900:	f7ff fd3a 	bl	8009378 <_Balloc>
 8009904:	b920      	cbnz	r0, 8009910 <__mdiff+0x5c>
 8009906:	4b2e      	ldr	r3, [pc, #184]	; (80099c0 <__mdiff+0x10c>)
 8009908:	4602      	mov	r2, r0
 800990a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800990e:	e7e5      	b.n	80098dc <__mdiff+0x28>
 8009910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009914:	6926      	ldr	r6, [r4, #16]
 8009916:	60c5      	str	r5, [r0, #12]
 8009918:	f104 0914 	add.w	r9, r4, #20
 800991c:	f108 0514 	add.w	r5, r8, #20
 8009920:	f100 0e14 	add.w	lr, r0, #20
 8009924:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800992c:	f108 0210 	add.w	r2, r8, #16
 8009930:	46f2      	mov	sl, lr
 8009932:	2100      	movs	r1, #0
 8009934:	f859 3b04 	ldr.w	r3, [r9], #4
 8009938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800993c:	fa1f f883 	uxth.w	r8, r3
 8009940:	fa11 f18b 	uxtah	r1, r1, fp
 8009944:	0c1b      	lsrs	r3, r3, #16
 8009946:	eba1 0808 	sub.w	r8, r1, r8
 800994a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800994e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009952:	fa1f f888 	uxth.w	r8, r8
 8009956:	1419      	asrs	r1, r3, #16
 8009958:	454e      	cmp	r6, r9
 800995a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800995e:	f84a 3b04 	str.w	r3, [sl], #4
 8009962:	d8e7      	bhi.n	8009934 <__mdiff+0x80>
 8009964:	1b33      	subs	r3, r6, r4
 8009966:	3b15      	subs	r3, #21
 8009968:	f023 0303 	bic.w	r3, r3, #3
 800996c:	3304      	adds	r3, #4
 800996e:	3415      	adds	r4, #21
 8009970:	42a6      	cmp	r6, r4
 8009972:	bf38      	it	cc
 8009974:	2304      	movcc	r3, #4
 8009976:	441d      	add	r5, r3
 8009978:	4473      	add	r3, lr
 800997a:	469e      	mov	lr, r3
 800997c:	462e      	mov	r6, r5
 800997e:	4566      	cmp	r6, ip
 8009980:	d30e      	bcc.n	80099a0 <__mdiff+0xec>
 8009982:	f10c 0203 	add.w	r2, ip, #3
 8009986:	1b52      	subs	r2, r2, r5
 8009988:	f022 0203 	bic.w	r2, r2, #3
 800998c:	3d03      	subs	r5, #3
 800998e:	45ac      	cmp	ip, r5
 8009990:	bf38      	it	cc
 8009992:	2200      	movcc	r2, #0
 8009994:	441a      	add	r2, r3
 8009996:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800999a:	b17b      	cbz	r3, 80099bc <__mdiff+0x108>
 800999c:	6107      	str	r7, [r0, #16]
 800999e:	e7a3      	b.n	80098e8 <__mdiff+0x34>
 80099a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80099a4:	fa11 f288 	uxtah	r2, r1, r8
 80099a8:	1414      	asrs	r4, r2, #16
 80099aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80099ae:	b292      	uxth	r2, r2
 80099b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80099b4:	f84e 2b04 	str.w	r2, [lr], #4
 80099b8:	1421      	asrs	r1, r4, #16
 80099ba:	e7e0      	b.n	800997e <__mdiff+0xca>
 80099bc:	3f01      	subs	r7, #1
 80099be:	e7ea      	b.n	8009996 <__mdiff+0xe2>
 80099c0:	0800b5d3 	.word	0x0800b5d3
 80099c4:	0800b5e4 	.word	0x0800b5e4

080099c8 <__d2b>:
 80099c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099cc:	4689      	mov	r9, r1
 80099ce:	2101      	movs	r1, #1
 80099d0:	ec57 6b10 	vmov	r6, r7, d0
 80099d4:	4690      	mov	r8, r2
 80099d6:	f7ff fccf 	bl	8009378 <_Balloc>
 80099da:	4604      	mov	r4, r0
 80099dc:	b930      	cbnz	r0, 80099ec <__d2b+0x24>
 80099de:	4602      	mov	r2, r0
 80099e0:	4b25      	ldr	r3, [pc, #148]	; (8009a78 <__d2b+0xb0>)
 80099e2:	4826      	ldr	r0, [pc, #152]	; (8009a7c <__d2b+0xb4>)
 80099e4:	f240 310a 	movw	r1, #778	; 0x30a
 80099e8:	f000 f8e4 	bl	8009bb4 <__assert_func>
 80099ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099f4:	bb35      	cbnz	r5, 8009a44 <__d2b+0x7c>
 80099f6:	2e00      	cmp	r6, #0
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	d028      	beq.n	8009a4e <__d2b+0x86>
 80099fc:	4668      	mov	r0, sp
 80099fe:	9600      	str	r6, [sp, #0]
 8009a00:	f7ff fd82 	bl	8009508 <__lo0bits>
 8009a04:	9900      	ldr	r1, [sp, #0]
 8009a06:	b300      	cbz	r0, 8009a4a <__d2b+0x82>
 8009a08:	9a01      	ldr	r2, [sp, #4]
 8009a0a:	f1c0 0320 	rsb	r3, r0, #32
 8009a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a12:	430b      	orrs	r3, r1
 8009a14:	40c2      	lsrs	r2, r0
 8009a16:	6163      	str	r3, [r4, #20]
 8009a18:	9201      	str	r2, [sp, #4]
 8009a1a:	9b01      	ldr	r3, [sp, #4]
 8009a1c:	61a3      	str	r3, [r4, #24]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	bf14      	ite	ne
 8009a22:	2202      	movne	r2, #2
 8009a24:	2201      	moveq	r2, #1
 8009a26:	6122      	str	r2, [r4, #16]
 8009a28:	b1d5      	cbz	r5, 8009a60 <__d2b+0x98>
 8009a2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a2e:	4405      	add	r5, r0
 8009a30:	f8c9 5000 	str.w	r5, [r9]
 8009a34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a38:	f8c8 0000 	str.w	r0, [r8]
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	b003      	add	sp, #12
 8009a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a48:	e7d5      	b.n	80099f6 <__d2b+0x2e>
 8009a4a:	6161      	str	r1, [r4, #20]
 8009a4c:	e7e5      	b.n	8009a1a <__d2b+0x52>
 8009a4e:	a801      	add	r0, sp, #4
 8009a50:	f7ff fd5a 	bl	8009508 <__lo0bits>
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	6163      	str	r3, [r4, #20]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	6122      	str	r2, [r4, #16]
 8009a5c:	3020      	adds	r0, #32
 8009a5e:	e7e3      	b.n	8009a28 <__d2b+0x60>
 8009a60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a68:	f8c9 0000 	str.w	r0, [r9]
 8009a6c:	6918      	ldr	r0, [r3, #16]
 8009a6e:	f7ff fd2b 	bl	80094c8 <__hi0bits>
 8009a72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a76:	e7df      	b.n	8009a38 <__d2b+0x70>
 8009a78:	0800b5d3 	.word	0x0800b5d3
 8009a7c:	0800b5e4 	.word	0x0800b5e4

08009a80 <_mprec_log10>:
 8009a80:	2817      	cmp	r0, #23
 8009a82:	b5d0      	push	{r4, r6, r7, lr}
 8009a84:	4604      	mov	r4, r0
 8009a86:	dc07      	bgt.n	8009a98 <_mprec_log10+0x18>
 8009a88:	4809      	ldr	r0, [pc, #36]	; (8009ab0 <_mprec_log10+0x30>)
 8009a8a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8009a8e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009a92:	ec41 0b10 	vmov	d0, r0, r1
 8009a96:	bdd0      	pop	{r4, r6, r7, pc}
 8009a98:	4906      	ldr	r1, [pc, #24]	; (8009ab4 <_mprec_log10+0x34>)
 8009a9a:	4f07      	ldr	r7, [pc, #28]	; (8009ab8 <_mprec_log10+0x38>)
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	2600      	movs	r6, #0
 8009aa0:	4632      	mov	r2, r6
 8009aa2:	463b      	mov	r3, r7
 8009aa4:	f7f6 fdc8 	bl	8000638 <__aeabi_dmul>
 8009aa8:	3c01      	subs	r4, #1
 8009aaa:	d1f9      	bne.n	8009aa0 <_mprec_log10+0x20>
 8009aac:	e7f1      	b.n	8009a92 <_mprec_log10+0x12>
 8009aae:	bf00      	nop
 8009ab0:	0800b668 	.word	0x0800b668
 8009ab4:	3ff00000 	.word	0x3ff00000
 8009ab8:	40240000 	.word	0x40240000

08009abc <_calloc_r>:
 8009abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009abe:	fba1 2402 	umull	r2, r4, r1, r2
 8009ac2:	b94c      	cbnz	r4, 8009ad8 <_calloc_r+0x1c>
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	9201      	str	r2, [sp, #4]
 8009ac8:	f7fd fdf6 	bl	80076b8 <_malloc_r>
 8009acc:	9a01      	ldr	r2, [sp, #4]
 8009ace:	4605      	mov	r5, r0
 8009ad0:	b930      	cbnz	r0, 8009ae0 <_calloc_r+0x24>
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	b003      	add	sp, #12
 8009ad6:	bd30      	pop	{r4, r5, pc}
 8009ad8:	220c      	movs	r2, #12
 8009ada:	6002      	str	r2, [r0, #0]
 8009adc:	2500      	movs	r5, #0
 8009ade:	e7f8      	b.n	8009ad2 <_calloc_r+0x16>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	f7fd fdc0 	bl	8007666 <memset>
 8009ae6:	e7f4      	b.n	8009ad2 <_calloc_r+0x16>

08009ae8 <_free_r>:
 8009ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aea:	2900      	cmp	r1, #0
 8009aec:	d044      	beq.n	8009b78 <_free_r+0x90>
 8009aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009af2:	9001      	str	r0, [sp, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f1a1 0404 	sub.w	r4, r1, #4
 8009afa:	bfb8      	it	lt
 8009afc:	18e4      	addlt	r4, r4, r3
 8009afe:	f7ff fc2f 	bl	8009360 <__malloc_lock>
 8009b02:	4a1e      	ldr	r2, [pc, #120]	; (8009b7c <_free_r+0x94>)
 8009b04:	9801      	ldr	r0, [sp, #4]
 8009b06:	6813      	ldr	r3, [r2, #0]
 8009b08:	b933      	cbnz	r3, 8009b18 <_free_r+0x30>
 8009b0a:	6063      	str	r3, [r4, #4]
 8009b0c:	6014      	str	r4, [r2, #0]
 8009b0e:	b003      	add	sp, #12
 8009b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b14:	f7ff bc2a 	b.w	800936c <__malloc_unlock>
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	d908      	bls.n	8009b2e <_free_r+0x46>
 8009b1c:	6825      	ldr	r5, [r4, #0]
 8009b1e:	1961      	adds	r1, r4, r5
 8009b20:	428b      	cmp	r3, r1
 8009b22:	bf01      	itttt	eq
 8009b24:	6819      	ldreq	r1, [r3, #0]
 8009b26:	685b      	ldreq	r3, [r3, #4]
 8009b28:	1949      	addeq	r1, r1, r5
 8009b2a:	6021      	streq	r1, [r4, #0]
 8009b2c:	e7ed      	b.n	8009b0a <_free_r+0x22>
 8009b2e:	461a      	mov	r2, r3
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	b10b      	cbz	r3, 8009b38 <_free_r+0x50>
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	d9fa      	bls.n	8009b2e <_free_r+0x46>
 8009b38:	6811      	ldr	r1, [r2, #0]
 8009b3a:	1855      	adds	r5, r2, r1
 8009b3c:	42a5      	cmp	r5, r4
 8009b3e:	d10b      	bne.n	8009b58 <_free_r+0x70>
 8009b40:	6824      	ldr	r4, [r4, #0]
 8009b42:	4421      	add	r1, r4
 8009b44:	1854      	adds	r4, r2, r1
 8009b46:	42a3      	cmp	r3, r4
 8009b48:	6011      	str	r1, [r2, #0]
 8009b4a:	d1e0      	bne.n	8009b0e <_free_r+0x26>
 8009b4c:	681c      	ldr	r4, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	6053      	str	r3, [r2, #4]
 8009b52:	4421      	add	r1, r4
 8009b54:	6011      	str	r1, [r2, #0]
 8009b56:	e7da      	b.n	8009b0e <_free_r+0x26>
 8009b58:	d902      	bls.n	8009b60 <_free_r+0x78>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	6003      	str	r3, [r0, #0]
 8009b5e:	e7d6      	b.n	8009b0e <_free_r+0x26>
 8009b60:	6825      	ldr	r5, [r4, #0]
 8009b62:	1961      	adds	r1, r4, r5
 8009b64:	428b      	cmp	r3, r1
 8009b66:	bf04      	itt	eq
 8009b68:	6819      	ldreq	r1, [r3, #0]
 8009b6a:	685b      	ldreq	r3, [r3, #4]
 8009b6c:	6063      	str	r3, [r4, #4]
 8009b6e:	bf04      	itt	eq
 8009b70:	1949      	addeq	r1, r1, r5
 8009b72:	6021      	streq	r1, [r4, #0]
 8009b74:	6054      	str	r4, [r2, #4]
 8009b76:	e7ca      	b.n	8009b0e <_free_r+0x26>
 8009b78:	b003      	add	sp, #12
 8009b7a:	bd30      	pop	{r4, r5, pc}
 8009b7c:	20004d58 	.word	0x20004d58

08009b80 <_read_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d07      	ldr	r5, [pc, #28]	; (8009ba0 <_read_r+0x20>)
 8009b84:	4604      	mov	r4, r0
 8009b86:	4608      	mov	r0, r1
 8009b88:	4611      	mov	r1, r2
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	602a      	str	r2, [r5, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f7f8 f840 	bl	8001c14 <_read>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_read_r+0x1e>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_read_r+0x1e>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	20004d60 	.word	0x20004d60

08009ba4 <strcpy>:
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009baa:	f803 2b01 	strb.w	r2, [r3], #1
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	d1f9      	bne.n	8009ba6 <strcpy+0x2>
 8009bb2:	4770      	bx	lr

08009bb4 <__assert_func>:
 8009bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bb6:	4614      	mov	r4, r2
 8009bb8:	461a      	mov	r2, r3
 8009bba:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <__assert_func+0x2c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	68d8      	ldr	r0, [r3, #12]
 8009bc2:	b14c      	cbz	r4, 8009bd8 <__assert_func+0x24>
 8009bc4:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <__assert_func+0x30>)
 8009bc6:	9100      	str	r1, [sp, #0]
 8009bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bcc:	4906      	ldr	r1, [pc, #24]	; (8009be8 <__assert_func+0x34>)
 8009bce:	462b      	mov	r3, r5
 8009bd0:	f000 f80e 	bl	8009bf0 <fiprintf>
 8009bd4:	f000 fa58 	bl	800a088 <abort>
 8009bd8:	4b04      	ldr	r3, [pc, #16]	; (8009bec <__assert_func+0x38>)
 8009bda:	461c      	mov	r4, r3
 8009bdc:	e7f3      	b.n	8009bc6 <__assert_func+0x12>
 8009bde:	bf00      	nop
 8009be0:	20000014 	.word	0x20000014
 8009be4:	0800b73c 	.word	0x0800b73c
 8009be8:	0800b749 	.word	0x0800b749
 8009bec:	0800b777 	.word	0x0800b777

08009bf0 <fiprintf>:
 8009bf0:	b40e      	push	{r1, r2, r3}
 8009bf2:	b503      	push	{r0, r1, lr}
 8009bf4:	4601      	mov	r1, r0
 8009bf6:	ab03      	add	r3, sp, #12
 8009bf8:	4805      	ldr	r0, [pc, #20]	; (8009c10 <fiprintf+0x20>)
 8009bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bfe:	6800      	ldr	r0, [r0, #0]
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	f000 f843 	bl	8009c8c <_vfiprintf_r>
 8009c06:	b002      	add	sp, #8
 8009c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c0c:	b003      	add	sp, #12
 8009c0e:	4770      	bx	lr
 8009c10:	20000014 	.word	0x20000014

08009c14 <__ascii_mbtowc>:
 8009c14:	b082      	sub	sp, #8
 8009c16:	b901      	cbnz	r1, 8009c1a <__ascii_mbtowc+0x6>
 8009c18:	a901      	add	r1, sp, #4
 8009c1a:	b142      	cbz	r2, 8009c2e <__ascii_mbtowc+0x1a>
 8009c1c:	b14b      	cbz	r3, 8009c32 <__ascii_mbtowc+0x1e>
 8009c1e:	7813      	ldrb	r3, [r2, #0]
 8009c20:	600b      	str	r3, [r1, #0]
 8009c22:	7812      	ldrb	r2, [r2, #0]
 8009c24:	1e10      	subs	r0, r2, #0
 8009c26:	bf18      	it	ne
 8009c28:	2001      	movne	r0, #1
 8009c2a:	b002      	add	sp, #8
 8009c2c:	4770      	bx	lr
 8009c2e:	4610      	mov	r0, r2
 8009c30:	e7fb      	b.n	8009c2a <__ascii_mbtowc+0x16>
 8009c32:	f06f 0001 	mvn.w	r0, #1
 8009c36:	e7f8      	b.n	8009c2a <__ascii_mbtowc+0x16>

08009c38 <__sfputc_r>:
 8009c38:	6893      	ldr	r3, [r2, #8]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	b410      	push	{r4}
 8009c40:	6093      	str	r3, [r2, #8]
 8009c42:	da08      	bge.n	8009c56 <__sfputc_r+0x1e>
 8009c44:	6994      	ldr	r4, [r2, #24]
 8009c46:	42a3      	cmp	r3, r4
 8009c48:	db01      	blt.n	8009c4e <__sfputc_r+0x16>
 8009c4a:	290a      	cmp	r1, #10
 8009c4c:	d103      	bne.n	8009c56 <__sfputc_r+0x1e>
 8009c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c52:	f000 b94b 	b.w	8009eec <__swbuf_r>
 8009c56:	6813      	ldr	r3, [r2, #0]
 8009c58:	1c58      	adds	r0, r3, #1
 8009c5a:	6010      	str	r0, [r2, #0]
 8009c5c:	7019      	strb	r1, [r3, #0]
 8009c5e:	4608      	mov	r0, r1
 8009c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <__sfputs_r>:
 8009c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c68:	4606      	mov	r6, r0
 8009c6a:	460f      	mov	r7, r1
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	18d5      	adds	r5, r2, r3
 8009c70:	42ac      	cmp	r4, r5
 8009c72:	d101      	bne.n	8009c78 <__sfputs_r+0x12>
 8009c74:	2000      	movs	r0, #0
 8009c76:	e007      	b.n	8009c88 <__sfputs_r+0x22>
 8009c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c7c:	463a      	mov	r2, r7
 8009c7e:	4630      	mov	r0, r6
 8009c80:	f7ff ffda 	bl	8009c38 <__sfputc_r>
 8009c84:	1c43      	adds	r3, r0, #1
 8009c86:	d1f3      	bne.n	8009c70 <__sfputs_r+0xa>
 8009c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c8c <_vfiprintf_r>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	460d      	mov	r5, r1
 8009c92:	b09d      	sub	sp, #116	; 0x74
 8009c94:	4614      	mov	r4, r2
 8009c96:	4698      	mov	r8, r3
 8009c98:	4606      	mov	r6, r0
 8009c9a:	b118      	cbz	r0, 8009ca4 <_vfiprintf_r+0x18>
 8009c9c:	6983      	ldr	r3, [r0, #24]
 8009c9e:	b90b      	cbnz	r3, 8009ca4 <_vfiprintf_r+0x18>
 8009ca0:	f7fd fc0e 	bl	80074c0 <__sinit>
 8009ca4:	4b89      	ldr	r3, [pc, #548]	; (8009ecc <_vfiprintf_r+0x240>)
 8009ca6:	429d      	cmp	r5, r3
 8009ca8:	d11b      	bne.n	8009ce2 <_vfiprintf_r+0x56>
 8009caa:	6875      	ldr	r5, [r6, #4]
 8009cac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cae:	07d9      	lsls	r1, r3, #31
 8009cb0:	d405      	bmi.n	8009cbe <_vfiprintf_r+0x32>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	059a      	lsls	r2, r3, #22
 8009cb6:	d402      	bmi.n	8009cbe <_vfiprintf_r+0x32>
 8009cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cba:	f7fd fcc4 	bl	8007646 <__retarget_lock_acquire_recursive>
 8009cbe:	89ab      	ldrh	r3, [r5, #12]
 8009cc0:	071b      	lsls	r3, r3, #28
 8009cc2:	d501      	bpl.n	8009cc8 <_vfiprintf_r+0x3c>
 8009cc4:	692b      	ldr	r3, [r5, #16]
 8009cc6:	b9eb      	cbnz	r3, 8009d04 <_vfiprintf_r+0x78>
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f000 f96e 	bl	8009fac <__swsetup_r>
 8009cd0:	b1c0      	cbz	r0, 8009d04 <_vfiprintf_r+0x78>
 8009cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cd4:	07dc      	lsls	r4, r3, #31
 8009cd6:	d50e      	bpl.n	8009cf6 <_vfiprintf_r+0x6a>
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cdc:	b01d      	add	sp, #116	; 0x74
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce2:	4b7b      	ldr	r3, [pc, #492]	; (8009ed0 <_vfiprintf_r+0x244>)
 8009ce4:	429d      	cmp	r5, r3
 8009ce6:	d101      	bne.n	8009cec <_vfiprintf_r+0x60>
 8009ce8:	68b5      	ldr	r5, [r6, #8]
 8009cea:	e7df      	b.n	8009cac <_vfiprintf_r+0x20>
 8009cec:	4b79      	ldr	r3, [pc, #484]	; (8009ed4 <_vfiprintf_r+0x248>)
 8009cee:	429d      	cmp	r5, r3
 8009cf0:	bf08      	it	eq
 8009cf2:	68f5      	ldreq	r5, [r6, #12]
 8009cf4:	e7da      	b.n	8009cac <_vfiprintf_r+0x20>
 8009cf6:	89ab      	ldrh	r3, [r5, #12]
 8009cf8:	0598      	lsls	r0, r3, #22
 8009cfa:	d4ed      	bmi.n	8009cd8 <_vfiprintf_r+0x4c>
 8009cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cfe:	f7fd fca3 	bl	8007648 <__retarget_lock_release_recursive>
 8009d02:	e7e9      	b.n	8009cd8 <_vfiprintf_r+0x4c>
 8009d04:	2300      	movs	r3, #0
 8009d06:	9309      	str	r3, [sp, #36]	; 0x24
 8009d08:	2320      	movs	r3, #32
 8009d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d12:	2330      	movs	r3, #48	; 0x30
 8009d14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ed8 <_vfiprintf_r+0x24c>
 8009d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d1c:	f04f 0901 	mov.w	r9, #1
 8009d20:	4623      	mov	r3, r4
 8009d22:	469a      	mov	sl, r3
 8009d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d28:	b10a      	cbz	r2, 8009d2e <_vfiprintf_r+0xa2>
 8009d2a:	2a25      	cmp	r2, #37	; 0x25
 8009d2c:	d1f9      	bne.n	8009d22 <_vfiprintf_r+0x96>
 8009d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d32:	d00b      	beq.n	8009d4c <_vfiprintf_r+0xc0>
 8009d34:	465b      	mov	r3, fp
 8009d36:	4622      	mov	r2, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f7ff ff93 	bl	8009c66 <__sfputs_r>
 8009d40:	3001      	adds	r0, #1
 8009d42:	f000 80aa 	beq.w	8009e9a <_vfiprintf_r+0x20e>
 8009d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d48:	445a      	add	r2, fp
 8009d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 80a2 	beq.w	8009e9a <_vfiprintf_r+0x20e>
 8009d56:	2300      	movs	r3, #0
 8009d58:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d60:	f10a 0a01 	add.w	sl, sl, #1
 8009d64:	9304      	str	r3, [sp, #16]
 8009d66:	9307      	str	r3, [sp, #28]
 8009d68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d6c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d6e:	4654      	mov	r4, sl
 8009d70:	2205      	movs	r2, #5
 8009d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d76:	4858      	ldr	r0, [pc, #352]	; (8009ed8 <_vfiprintf_r+0x24c>)
 8009d78:	f7f6 fa52 	bl	8000220 <memchr>
 8009d7c:	9a04      	ldr	r2, [sp, #16]
 8009d7e:	b9d8      	cbnz	r0, 8009db8 <_vfiprintf_r+0x12c>
 8009d80:	06d1      	lsls	r1, r2, #27
 8009d82:	bf44      	itt	mi
 8009d84:	2320      	movmi	r3, #32
 8009d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d8a:	0713      	lsls	r3, r2, #28
 8009d8c:	bf44      	itt	mi
 8009d8e:	232b      	movmi	r3, #43	; 0x2b
 8009d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d94:	f89a 3000 	ldrb.w	r3, [sl]
 8009d98:	2b2a      	cmp	r3, #42	; 0x2a
 8009d9a:	d015      	beq.n	8009dc8 <_vfiprintf_r+0x13c>
 8009d9c:	9a07      	ldr	r2, [sp, #28]
 8009d9e:	4654      	mov	r4, sl
 8009da0:	2000      	movs	r0, #0
 8009da2:	f04f 0c0a 	mov.w	ip, #10
 8009da6:	4621      	mov	r1, r4
 8009da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dac:	3b30      	subs	r3, #48	; 0x30
 8009dae:	2b09      	cmp	r3, #9
 8009db0:	d94e      	bls.n	8009e50 <_vfiprintf_r+0x1c4>
 8009db2:	b1b0      	cbz	r0, 8009de2 <_vfiprintf_r+0x156>
 8009db4:	9207      	str	r2, [sp, #28]
 8009db6:	e014      	b.n	8009de2 <_vfiprintf_r+0x156>
 8009db8:	eba0 0308 	sub.w	r3, r0, r8
 8009dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	9304      	str	r3, [sp, #16]
 8009dc4:	46a2      	mov	sl, r4
 8009dc6:	e7d2      	b.n	8009d6e <_vfiprintf_r+0xe2>
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	1d19      	adds	r1, r3, #4
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	9103      	str	r1, [sp, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	bfbb      	ittet	lt
 8009dd4:	425b      	neglt	r3, r3
 8009dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8009dda:	9307      	strge	r3, [sp, #28]
 8009ddc:	9307      	strlt	r3, [sp, #28]
 8009dde:	bfb8      	it	lt
 8009de0:	9204      	strlt	r2, [sp, #16]
 8009de2:	7823      	ldrb	r3, [r4, #0]
 8009de4:	2b2e      	cmp	r3, #46	; 0x2e
 8009de6:	d10c      	bne.n	8009e02 <_vfiprintf_r+0x176>
 8009de8:	7863      	ldrb	r3, [r4, #1]
 8009dea:	2b2a      	cmp	r3, #42	; 0x2a
 8009dec:	d135      	bne.n	8009e5a <_vfiprintf_r+0x1ce>
 8009dee:	9b03      	ldr	r3, [sp, #12]
 8009df0:	1d1a      	adds	r2, r3, #4
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	9203      	str	r2, [sp, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	bfb8      	it	lt
 8009dfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dfe:	3402      	adds	r4, #2
 8009e00:	9305      	str	r3, [sp, #20]
 8009e02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ee8 <_vfiprintf_r+0x25c>
 8009e06:	7821      	ldrb	r1, [r4, #0]
 8009e08:	2203      	movs	r2, #3
 8009e0a:	4650      	mov	r0, sl
 8009e0c:	f7f6 fa08 	bl	8000220 <memchr>
 8009e10:	b140      	cbz	r0, 8009e24 <_vfiprintf_r+0x198>
 8009e12:	2340      	movs	r3, #64	; 0x40
 8009e14:	eba0 000a 	sub.w	r0, r0, sl
 8009e18:	fa03 f000 	lsl.w	r0, r3, r0
 8009e1c:	9b04      	ldr	r3, [sp, #16]
 8009e1e:	4303      	orrs	r3, r0
 8009e20:	3401      	adds	r4, #1
 8009e22:	9304      	str	r3, [sp, #16]
 8009e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e28:	482c      	ldr	r0, [pc, #176]	; (8009edc <_vfiprintf_r+0x250>)
 8009e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e2e:	2206      	movs	r2, #6
 8009e30:	f7f6 f9f6 	bl	8000220 <memchr>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d03f      	beq.n	8009eb8 <_vfiprintf_r+0x22c>
 8009e38:	4b29      	ldr	r3, [pc, #164]	; (8009ee0 <_vfiprintf_r+0x254>)
 8009e3a:	bb1b      	cbnz	r3, 8009e84 <_vfiprintf_r+0x1f8>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	3307      	adds	r3, #7
 8009e40:	f023 0307 	bic.w	r3, r3, #7
 8009e44:	3308      	adds	r3, #8
 8009e46:	9303      	str	r3, [sp, #12]
 8009e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e4a:	443b      	add	r3, r7
 8009e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e4e:	e767      	b.n	8009d20 <_vfiprintf_r+0x94>
 8009e50:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e54:	460c      	mov	r4, r1
 8009e56:	2001      	movs	r0, #1
 8009e58:	e7a5      	b.n	8009da6 <_vfiprintf_r+0x11a>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	3401      	adds	r4, #1
 8009e5e:	9305      	str	r3, [sp, #20]
 8009e60:	4619      	mov	r1, r3
 8009e62:	f04f 0c0a 	mov.w	ip, #10
 8009e66:	4620      	mov	r0, r4
 8009e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e6c:	3a30      	subs	r2, #48	; 0x30
 8009e6e:	2a09      	cmp	r2, #9
 8009e70:	d903      	bls.n	8009e7a <_vfiprintf_r+0x1ee>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0c5      	beq.n	8009e02 <_vfiprintf_r+0x176>
 8009e76:	9105      	str	r1, [sp, #20]
 8009e78:	e7c3      	b.n	8009e02 <_vfiprintf_r+0x176>
 8009e7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e7e:	4604      	mov	r4, r0
 8009e80:	2301      	movs	r3, #1
 8009e82:	e7f0      	b.n	8009e66 <_vfiprintf_r+0x1da>
 8009e84:	ab03      	add	r3, sp, #12
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	462a      	mov	r2, r5
 8009e8a:	4b16      	ldr	r3, [pc, #88]	; (8009ee4 <_vfiprintf_r+0x258>)
 8009e8c:	a904      	add	r1, sp, #16
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f7fd fd26 	bl	80078e0 <_printf_float>
 8009e94:	4607      	mov	r7, r0
 8009e96:	1c78      	adds	r0, r7, #1
 8009e98:	d1d6      	bne.n	8009e48 <_vfiprintf_r+0x1bc>
 8009e9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e9c:	07d9      	lsls	r1, r3, #31
 8009e9e:	d405      	bmi.n	8009eac <_vfiprintf_r+0x220>
 8009ea0:	89ab      	ldrh	r3, [r5, #12]
 8009ea2:	059a      	lsls	r2, r3, #22
 8009ea4:	d402      	bmi.n	8009eac <_vfiprintf_r+0x220>
 8009ea6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ea8:	f7fd fbce 	bl	8007648 <__retarget_lock_release_recursive>
 8009eac:	89ab      	ldrh	r3, [r5, #12]
 8009eae:	065b      	lsls	r3, r3, #25
 8009eb0:	f53f af12 	bmi.w	8009cd8 <_vfiprintf_r+0x4c>
 8009eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eb6:	e711      	b.n	8009cdc <_vfiprintf_r+0x50>
 8009eb8:	ab03      	add	r3, sp, #12
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	462a      	mov	r2, r5
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <_vfiprintf_r+0x258>)
 8009ec0:	a904      	add	r1, sp, #16
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7fd ffb0 	bl	8007e28 <_printf_i>
 8009ec8:	e7e4      	b.n	8009e94 <_vfiprintf_r+0x208>
 8009eca:	bf00      	nop
 8009ecc:	0800b4dc 	.word	0x0800b4dc
 8009ed0:	0800b4fc 	.word	0x0800b4fc
 8009ed4:	0800b4bc 	.word	0x0800b4bc
 8009ed8:	0800b782 	.word	0x0800b782
 8009edc:	0800b78c 	.word	0x0800b78c
 8009ee0:	080078e1 	.word	0x080078e1
 8009ee4:	08009c67 	.word	0x08009c67
 8009ee8:	0800b788 	.word	0x0800b788

08009eec <__swbuf_r>:
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eee:	460e      	mov	r6, r1
 8009ef0:	4614      	mov	r4, r2
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	b118      	cbz	r0, 8009efe <__swbuf_r+0x12>
 8009ef6:	6983      	ldr	r3, [r0, #24]
 8009ef8:	b90b      	cbnz	r3, 8009efe <__swbuf_r+0x12>
 8009efa:	f7fd fae1 	bl	80074c0 <__sinit>
 8009efe:	4b21      	ldr	r3, [pc, #132]	; (8009f84 <__swbuf_r+0x98>)
 8009f00:	429c      	cmp	r4, r3
 8009f02:	d12b      	bne.n	8009f5c <__swbuf_r+0x70>
 8009f04:	686c      	ldr	r4, [r5, #4]
 8009f06:	69a3      	ldr	r3, [r4, #24]
 8009f08:	60a3      	str	r3, [r4, #8]
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	071a      	lsls	r2, r3, #28
 8009f0e:	d52f      	bpl.n	8009f70 <__swbuf_r+0x84>
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	b36b      	cbz	r3, 8009f70 <__swbuf_r+0x84>
 8009f14:	6923      	ldr	r3, [r4, #16]
 8009f16:	6820      	ldr	r0, [r4, #0]
 8009f18:	1ac0      	subs	r0, r0, r3
 8009f1a:	6963      	ldr	r3, [r4, #20]
 8009f1c:	b2f6      	uxtb	r6, r6
 8009f1e:	4283      	cmp	r3, r0
 8009f20:	4637      	mov	r7, r6
 8009f22:	dc04      	bgt.n	8009f2e <__swbuf_r+0x42>
 8009f24:	4621      	mov	r1, r4
 8009f26:	4628      	mov	r0, r5
 8009f28:	f7ff f9c0 	bl	80092ac <_fflush_r>
 8009f2c:	bb30      	cbnz	r0, 8009f7c <__swbuf_r+0x90>
 8009f2e:	68a3      	ldr	r3, [r4, #8]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	60a3      	str	r3, [r4, #8]
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	6022      	str	r2, [r4, #0]
 8009f3a:	701e      	strb	r6, [r3, #0]
 8009f3c:	6963      	ldr	r3, [r4, #20]
 8009f3e:	3001      	adds	r0, #1
 8009f40:	4283      	cmp	r3, r0
 8009f42:	d004      	beq.n	8009f4e <__swbuf_r+0x62>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	07db      	lsls	r3, r3, #31
 8009f48:	d506      	bpl.n	8009f58 <__swbuf_r+0x6c>
 8009f4a:	2e0a      	cmp	r6, #10
 8009f4c:	d104      	bne.n	8009f58 <__swbuf_r+0x6c>
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4628      	mov	r0, r5
 8009f52:	f7ff f9ab 	bl	80092ac <_fflush_r>
 8009f56:	b988      	cbnz	r0, 8009f7c <__swbuf_r+0x90>
 8009f58:	4638      	mov	r0, r7
 8009f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <__swbuf_r+0x9c>)
 8009f5e:	429c      	cmp	r4, r3
 8009f60:	d101      	bne.n	8009f66 <__swbuf_r+0x7a>
 8009f62:	68ac      	ldr	r4, [r5, #8]
 8009f64:	e7cf      	b.n	8009f06 <__swbuf_r+0x1a>
 8009f66:	4b09      	ldr	r3, [pc, #36]	; (8009f8c <__swbuf_r+0xa0>)
 8009f68:	429c      	cmp	r4, r3
 8009f6a:	bf08      	it	eq
 8009f6c:	68ec      	ldreq	r4, [r5, #12]
 8009f6e:	e7ca      	b.n	8009f06 <__swbuf_r+0x1a>
 8009f70:	4621      	mov	r1, r4
 8009f72:	4628      	mov	r0, r5
 8009f74:	f000 f81a 	bl	8009fac <__swsetup_r>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d0cb      	beq.n	8009f14 <__swbuf_r+0x28>
 8009f7c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f80:	e7ea      	b.n	8009f58 <__swbuf_r+0x6c>
 8009f82:	bf00      	nop
 8009f84:	0800b4dc 	.word	0x0800b4dc
 8009f88:	0800b4fc 	.word	0x0800b4fc
 8009f8c:	0800b4bc 	.word	0x0800b4bc

08009f90 <__ascii_wctomb>:
 8009f90:	b149      	cbz	r1, 8009fa6 <__ascii_wctomb+0x16>
 8009f92:	2aff      	cmp	r2, #255	; 0xff
 8009f94:	bf85      	ittet	hi
 8009f96:	238a      	movhi	r3, #138	; 0x8a
 8009f98:	6003      	strhi	r3, [r0, #0]
 8009f9a:	700a      	strbls	r2, [r1, #0]
 8009f9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009fa0:	bf98      	it	ls
 8009fa2:	2001      	movls	r0, #1
 8009fa4:	4770      	bx	lr
 8009fa6:	4608      	mov	r0, r1
 8009fa8:	4770      	bx	lr
	...

08009fac <__swsetup_r>:
 8009fac:	4b32      	ldr	r3, [pc, #200]	; (800a078 <__swsetup_r+0xcc>)
 8009fae:	b570      	push	{r4, r5, r6, lr}
 8009fb0:	681d      	ldr	r5, [r3, #0]
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	b125      	cbz	r5, 8009fc2 <__swsetup_r+0x16>
 8009fb8:	69ab      	ldr	r3, [r5, #24]
 8009fba:	b913      	cbnz	r3, 8009fc2 <__swsetup_r+0x16>
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f7fd fa7f 	bl	80074c0 <__sinit>
 8009fc2:	4b2e      	ldr	r3, [pc, #184]	; (800a07c <__swsetup_r+0xd0>)
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	d10f      	bne.n	8009fe8 <__swsetup_r+0x3c>
 8009fc8:	686c      	ldr	r4, [r5, #4]
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fd0:	0719      	lsls	r1, r3, #28
 8009fd2:	d42c      	bmi.n	800a02e <__swsetup_r+0x82>
 8009fd4:	06dd      	lsls	r5, r3, #27
 8009fd6:	d411      	bmi.n	8009ffc <__swsetup_r+0x50>
 8009fd8:	2309      	movs	r3, #9
 8009fda:	6033      	str	r3, [r6, #0]
 8009fdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe6:	e03e      	b.n	800a066 <__swsetup_r+0xba>
 8009fe8:	4b25      	ldr	r3, [pc, #148]	; (800a080 <__swsetup_r+0xd4>)
 8009fea:	429c      	cmp	r4, r3
 8009fec:	d101      	bne.n	8009ff2 <__swsetup_r+0x46>
 8009fee:	68ac      	ldr	r4, [r5, #8]
 8009ff0:	e7eb      	b.n	8009fca <__swsetup_r+0x1e>
 8009ff2:	4b24      	ldr	r3, [pc, #144]	; (800a084 <__swsetup_r+0xd8>)
 8009ff4:	429c      	cmp	r4, r3
 8009ff6:	bf08      	it	eq
 8009ff8:	68ec      	ldreq	r4, [r5, #12]
 8009ffa:	e7e6      	b.n	8009fca <__swsetup_r+0x1e>
 8009ffc:	0758      	lsls	r0, r3, #29
 8009ffe:	d512      	bpl.n	800a026 <__swsetup_r+0x7a>
 800a000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a002:	b141      	cbz	r1, 800a016 <__swsetup_r+0x6a>
 800a004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a008:	4299      	cmp	r1, r3
 800a00a:	d002      	beq.n	800a012 <__swsetup_r+0x66>
 800a00c:	4630      	mov	r0, r6
 800a00e:	f7ff fd6b 	bl	8009ae8 <_free_r>
 800a012:	2300      	movs	r3, #0
 800a014:	6363      	str	r3, [r4, #52]	; 0x34
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a01c:	81a3      	strh	r3, [r4, #12]
 800a01e:	2300      	movs	r3, #0
 800a020:	6063      	str	r3, [r4, #4]
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	f043 0308 	orr.w	r3, r3, #8
 800a02c:	81a3      	strh	r3, [r4, #12]
 800a02e:	6923      	ldr	r3, [r4, #16]
 800a030:	b94b      	cbnz	r3, 800a046 <__swsetup_r+0x9a>
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a03c:	d003      	beq.n	800a046 <__swsetup_r+0x9a>
 800a03e:	4621      	mov	r1, r4
 800a040:	4630      	mov	r0, r6
 800a042:	f000 f84d 	bl	800a0e0 <__smakebuf_r>
 800a046:	89a0      	ldrh	r0, [r4, #12]
 800a048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a04c:	f010 0301 	ands.w	r3, r0, #1
 800a050:	d00a      	beq.n	800a068 <__swsetup_r+0xbc>
 800a052:	2300      	movs	r3, #0
 800a054:	60a3      	str	r3, [r4, #8]
 800a056:	6963      	ldr	r3, [r4, #20]
 800a058:	425b      	negs	r3, r3
 800a05a:	61a3      	str	r3, [r4, #24]
 800a05c:	6923      	ldr	r3, [r4, #16]
 800a05e:	b943      	cbnz	r3, 800a072 <__swsetup_r+0xc6>
 800a060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a064:	d1ba      	bne.n	8009fdc <__swsetup_r+0x30>
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	0781      	lsls	r1, r0, #30
 800a06a:	bf58      	it	pl
 800a06c:	6963      	ldrpl	r3, [r4, #20]
 800a06e:	60a3      	str	r3, [r4, #8]
 800a070:	e7f4      	b.n	800a05c <__swsetup_r+0xb0>
 800a072:	2000      	movs	r0, #0
 800a074:	e7f7      	b.n	800a066 <__swsetup_r+0xba>
 800a076:	bf00      	nop
 800a078:	20000014 	.word	0x20000014
 800a07c:	0800b4dc 	.word	0x0800b4dc
 800a080:	0800b4fc 	.word	0x0800b4fc
 800a084:	0800b4bc 	.word	0x0800b4bc

0800a088 <abort>:
 800a088:	b508      	push	{r3, lr}
 800a08a:	2006      	movs	r0, #6
 800a08c:	f000 f890 	bl	800a1b0 <raise>
 800a090:	2001      	movs	r0, #1
 800a092:	f7f7 fdb5 	bl	8001c00 <_exit>

0800a096 <__swhatbuf_r>:
 800a096:	b570      	push	{r4, r5, r6, lr}
 800a098:	460e      	mov	r6, r1
 800a09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a09e:	2900      	cmp	r1, #0
 800a0a0:	b096      	sub	sp, #88	; 0x58
 800a0a2:	4614      	mov	r4, r2
 800a0a4:	461d      	mov	r5, r3
 800a0a6:	da08      	bge.n	800a0ba <__swhatbuf_r+0x24>
 800a0a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	602a      	str	r2, [r5, #0]
 800a0b0:	061a      	lsls	r2, r3, #24
 800a0b2:	d410      	bmi.n	800a0d6 <__swhatbuf_r+0x40>
 800a0b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0b8:	e00e      	b.n	800a0d8 <__swhatbuf_r+0x42>
 800a0ba:	466a      	mov	r2, sp
 800a0bc:	f000 f894 	bl	800a1e8 <_fstat_r>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	dbf1      	blt.n	800a0a8 <__swhatbuf_r+0x12>
 800a0c4:	9a01      	ldr	r2, [sp, #4]
 800a0c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0ce:	425a      	negs	r2, r3
 800a0d0:	415a      	adcs	r2, r3
 800a0d2:	602a      	str	r2, [r5, #0]
 800a0d4:	e7ee      	b.n	800a0b4 <__swhatbuf_r+0x1e>
 800a0d6:	2340      	movs	r3, #64	; 0x40
 800a0d8:	2000      	movs	r0, #0
 800a0da:	6023      	str	r3, [r4, #0]
 800a0dc:	b016      	add	sp, #88	; 0x58
 800a0de:	bd70      	pop	{r4, r5, r6, pc}

0800a0e0 <__smakebuf_r>:
 800a0e0:	898b      	ldrh	r3, [r1, #12]
 800a0e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0e4:	079d      	lsls	r5, r3, #30
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	d507      	bpl.n	800a0fc <__smakebuf_r+0x1c>
 800a0ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	6163      	str	r3, [r4, #20]
 800a0f8:	b002      	add	sp, #8
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}
 800a0fc:	ab01      	add	r3, sp, #4
 800a0fe:	466a      	mov	r2, sp
 800a100:	f7ff ffc9 	bl	800a096 <__swhatbuf_r>
 800a104:	9900      	ldr	r1, [sp, #0]
 800a106:	4605      	mov	r5, r0
 800a108:	4630      	mov	r0, r6
 800a10a:	f7fd fad5 	bl	80076b8 <_malloc_r>
 800a10e:	b948      	cbnz	r0, 800a124 <__smakebuf_r+0x44>
 800a110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a114:	059a      	lsls	r2, r3, #22
 800a116:	d4ef      	bmi.n	800a0f8 <__smakebuf_r+0x18>
 800a118:	f023 0303 	bic.w	r3, r3, #3
 800a11c:	f043 0302 	orr.w	r3, r3, #2
 800a120:	81a3      	strh	r3, [r4, #12]
 800a122:	e7e3      	b.n	800a0ec <__smakebuf_r+0xc>
 800a124:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <__smakebuf_r+0x7c>)
 800a126:	62b3      	str	r3, [r6, #40]	; 0x28
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	6020      	str	r0, [r4, #0]
 800a12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a130:	81a3      	strh	r3, [r4, #12]
 800a132:	9b00      	ldr	r3, [sp, #0]
 800a134:	6163      	str	r3, [r4, #20]
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	6120      	str	r0, [r4, #16]
 800a13a:	b15b      	cbz	r3, 800a154 <__smakebuf_r+0x74>
 800a13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a140:	4630      	mov	r0, r6
 800a142:	f000 f863 	bl	800a20c <_isatty_r>
 800a146:	b128      	cbz	r0, 800a154 <__smakebuf_r+0x74>
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	f023 0303 	bic.w	r3, r3, #3
 800a14e:	f043 0301 	orr.w	r3, r3, #1
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	89a0      	ldrh	r0, [r4, #12]
 800a156:	4305      	orrs	r5, r0
 800a158:	81a5      	strh	r5, [r4, #12]
 800a15a:	e7cd      	b.n	800a0f8 <__smakebuf_r+0x18>
 800a15c:	08007459 	.word	0x08007459

0800a160 <_raise_r>:
 800a160:	291f      	cmp	r1, #31
 800a162:	b538      	push	{r3, r4, r5, lr}
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	d904      	bls.n	800a174 <_raise_r+0x14>
 800a16a:	2316      	movs	r3, #22
 800a16c:	6003      	str	r3, [r0, #0]
 800a16e:	f04f 30ff 	mov.w	r0, #4294967295
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a176:	b112      	cbz	r2, 800a17e <_raise_r+0x1e>
 800a178:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a17c:	b94b      	cbnz	r3, 800a192 <_raise_r+0x32>
 800a17e:	4620      	mov	r0, r4
 800a180:	f000 f830 	bl	800a1e4 <_getpid_r>
 800a184:	462a      	mov	r2, r5
 800a186:	4601      	mov	r1, r0
 800a188:	4620      	mov	r0, r4
 800a18a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a18e:	f000 b817 	b.w	800a1c0 <_kill_r>
 800a192:	2b01      	cmp	r3, #1
 800a194:	d00a      	beq.n	800a1ac <_raise_r+0x4c>
 800a196:	1c59      	adds	r1, r3, #1
 800a198:	d103      	bne.n	800a1a2 <_raise_r+0x42>
 800a19a:	2316      	movs	r3, #22
 800a19c:	6003      	str	r3, [r0, #0]
 800a19e:	2001      	movs	r0, #1
 800a1a0:	e7e7      	b.n	800a172 <_raise_r+0x12>
 800a1a2:	2400      	movs	r4, #0
 800a1a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	4798      	blx	r3
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	e7e0      	b.n	800a172 <_raise_r+0x12>

0800a1b0 <raise>:
 800a1b0:	4b02      	ldr	r3, [pc, #8]	; (800a1bc <raise+0xc>)
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	6818      	ldr	r0, [r3, #0]
 800a1b6:	f7ff bfd3 	b.w	800a160 <_raise_r>
 800a1ba:	bf00      	nop
 800a1bc:	20000014 	.word	0x20000014

0800a1c0 <_kill_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d07      	ldr	r5, [pc, #28]	; (800a1e0 <_kill_r+0x20>)
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	602b      	str	r3, [r5, #0]
 800a1ce:	f7f7 fd07 	bl	8001be0 <_kill>
 800a1d2:	1c43      	adds	r3, r0, #1
 800a1d4:	d102      	bne.n	800a1dc <_kill_r+0x1c>
 800a1d6:	682b      	ldr	r3, [r5, #0]
 800a1d8:	b103      	cbz	r3, 800a1dc <_kill_r+0x1c>
 800a1da:	6023      	str	r3, [r4, #0]
 800a1dc:	bd38      	pop	{r3, r4, r5, pc}
 800a1de:	bf00      	nop
 800a1e0:	20004d60 	.word	0x20004d60

0800a1e4 <_getpid_r>:
 800a1e4:	f7f7 bcf4 	b.w	8001bd0 <_getpid>

0800a1e8 <_fstat_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d07      	ldr	r5, [pc, #28]	; (800a208 <_fstat_r+0x20>)
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	602b      	str	r3, [r5, #0]
 800a1f6:	f7f7 fd52 	bl	8001c9e <_fstat>
 800a1fa:	1c43      	adds	r3, r0, #1
 800a1fc:	d102      	bne.n	800a204 <_fstat_r+0x1c>
 800a1fe:	682b      	ldr	r3, [r5, #0]
 800a200:	b103      	cbz	r3, 800a204 <_fstat_r+0x1c>
 800a202:	6023      	str	r3, [r4, #0]
 800a204:	bd38      	pop	{r3, r4, r5, pc}
 800a206:	bf00      	nop
 800a208:	20004d60 	.word	0x20004d60

0800a20c <_isatty_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4d06      	ldr	r5, [pc, #24]	; (800a228 <_isatty_r+0x1c>)
 800a210:	2300      	movs	r3, #0
 800a212:	4604      	mov	r4, r0
 800a214:	4608      	mov	r0, r1
 800a216:	602b      	str	r3, [r5, #0]
 800a218:	f7f7 fd51 	bl	8001cbe <_isatty>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d102      	bne.n	800a226 <_isatty_r+0x1a>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	b103      	cbz	r3, 800a226 <_isatty_r+0x1a>
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	20004d60 	.word	0x20004d60
 800a22c:	00000000 	.word	0x00000000

0800a230 <cos>:
 800a230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a232:	ec53 2b10 	vmov	r2, r3, d0
 800a236:	4826      	ldr	r0, [pc, #152]	; (800a2d0 <cos+0xa0>)
 800a238:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a23c:	4281      	cmp	r1, r0
 800a23e:	dc06      	bgt.n	800a24e <cos+0x1e>
 800a240:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a2c8 <cos+0x98>
 800a244:	b005      	add	sp, #20
 800a246:	f85d eb04 	ldr.w	lr, [sp], #4
 800a24a:	f000 baa9 	b.w	800a7a0 <__kernel_cos>
 800a24e:	4821      	ldr	r0, [pc, #132]	; (800a2d4 <cos+0xa4>)
 800a250:	4281      	cmp	r1, r0
 800a252:	dd09      	ble.n	800a268 <cos+0x38>
 800a254:	ee10 0a10 	vmov	r0, s0
 800a258:	4619      	mov	r1, r3
 800a25a:	f7f6 f835 	bl	80002c8 <__aeabi_dsub>
 800a25e:	ec41 0b10 	vmov	d0, r0, r1
 800a262:	b005      	add	sp, #20
 800a264:	f85d fb04 	ldr.w	pc, [sp], #4
 800a268:	4668      	mov	r0, sp
 800a26a:	f000 f88d 	bl	800a388 <__ieee754_rem_pio2>
 800a26e:	f000 0003 	and.w	r0, r0, #3
 800a272:	2801      	cmp	r0, #1
 800a274:	d00b      	beq.n	800a28e <cos+0x5e>
 800a276:	2802      	cmp	r0, #2
 800a278:	d016      	beq.n	800a2a8 <cos+0x78>
 800a27a:	b9e0      	cbnz	r0, 800a2b6 <cos+0x86>
 800a27c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a280:	ed9d 0b00 	vldr	d0, [sp]
 800a284:	f000 fa8c 	bl	800a7a0 <__kernel_cos>
 800a288:	ec51 0b10 	vmov	r0, r1, d0
 800a28c:	e7e7      	b.n	800a25e <cos+0x2e>
 800a28e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a292:	ed9d 0b00 	vldr	d0, [sp]
 800a296:	f000 fe9b 	bl	800afd0 <__kernel_sin>
 800a29a:	ec53 2b10 	vmov	r2, r3, d0
 800a29e:	ee10 0a10 	vmov	r0, s0
 800a2a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a2a6:	e7da      	b.n	800a25e <cos+0x2e>
 800a2a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2ac:	ed9d 0b00 	vldr	d0, [sp]
 800a2b0:	f000 fa76 	bl	800a7a0 <__kernel_cos>
 800a2b4:	e7f1      	b.n	800a29a <cos+0x6a>
 800a2b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2ba:	ed9d 0b00 	vldr	d0, [sp]
 800a2be:	2001      	movs	r0, #1
 800a2c0:	f000 fe86 	bl	800afd0 <__kernel_sin>
 800a2c4:	e7e0      	b.n	800a288 <cos+0x58>
 800a2c6:	bf00      	nop
	...
 800a2d0:	3fe921fb 	.word	0x3fe921fb
 800a2d4:	7fefffff 	.word	0x7fefffff

0800a2d8 <sin>:
 800a2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2da:	ec53 2b10 	vmov	r2, r3, d0
 800a2de:	4828      	ldr	r0, [pc, #160]	; (800a380 <sin+0xa8>)
 800a2e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a2e4:	4281      	cmp	r1, r0
 800a2e6:	dc07      	bgt.n	800a2f8 <sin+0x20>
 800a2e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a378 <sin+0xa0>
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	b005      	add	sp, #20
 800a2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2f4:	f000 be6c 	b.w	800afd0 <__kernel_sin>
 800a2f8:	4822      	ldr	r0, [pc, #136]	; (800a384 <sin+0xac>)
 800a2fa:	4281      	cmp	r1, r0
 800a2fc:	dd09      	ble.n	800a312 <sin+0x3a>
 800a2fe:	ee10 0a10 	vmov	r0, s0
 800a302:	4619      	mov	r1, r3
 800a304:	f7f5 ffe0 	bl	80002c8 <__aeabi_dsub>
 800a308:	ec41 0b10 	vmov	d0, r0, r1
 800a30c:	b005      	add	sp, #20
 800a30e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a312:	4668      	mov	r0, sp
 800a314:	f000 f838 	bl	800a388 <__ieee754_rem_pio2>
 800a318:	f000 0003 	and.w	r0, r0, #3
 800a31c:	2801      	cmp	r0, #1
 800a31e:	d00c      	beq.n	800a33a <sin+0x62>
 800a320:	2802      	cmp	r0, #2
 800a322:	d011      	beq.n	800a348 <sin+0x70>
 800a324:	b9f0      	cbnz	r0, 800a364 <sin+0x8c>
 800a326:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a32a:	ed9d 0b00 	vldr	d0, [sp]
 800a32e:	2001      	movs	r0, #1
 800a330:	f000 fe4e 	bl	800afd0 <__kernel_sin>
 800a334:	ec51 0b10 	vmov	r0, r1, d0
 800a338:	e7e6      	b.n	800a308 <sin+0x30>
 800a33a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a33e:	ed9d 0b00 	vldr	d0, [sp]
 800a342:	f000 fa2d 	bl	800a7a0 <__kernel_cos>
 800a346:	e7f5      	b.n	800a334 <sin+0x5c>
 800a348:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a34c:	ed9d 0b00 	vldr	d0, [sp]
 800a350:	2001      	movs	r0, #1
 800a352:	f000 fe3d 	bl	800afd0 <__kernel_sin>
 800a356:	ec53 2b10 	vmov	r2, r3, d0
 800a35a:	ee10 0a10 	vmov	r0, s0
 800a35e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a362:	e7d1      	b.n	800a308 <sin+0x30>
 800a364:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a368:	ed9d 0b00 	vldr	d0, [sp]
 800a36c:	f000 fa18 	bl	800a7a0 <__kernel_cos>
 800a370:	e7f1      	b.n	800a356 <sin+0x7e>
 800a372:	bf00      	nop
 800a374:	f3af 8000 	nop.w
	...
 800a380:	3fe921fb 	.word	0x3fe921fb
 800a384:	7fefffff 	.word	0x7fefffff

0800a388 <__ieee754_rem_pio2>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	ed2d 8b02 	vpush	{d8}
 800a390:	ec55 4b10 	vmov	r4, r5, d0
 800a394:	4bca      	ldr	r3, [pc, #808]	; (800a6c0 <__ieee754_rem_pio2+0x338>)
 800a396:	b08b      	sub	sp, #44	; 0x2c
 800a398:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a39c:	4598      	cmp	r8, r3
 800a39e:	4682      	mov	sl, r0
 800a3a0:	9502      	str	r5, [sp, #8]
 800a3a2:	dc08      	bgt.n	800a3b6 <__ieee754_rem_pio2+0x2e>
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	ed80 0b00 	vstr	d0, [r0]
 800a3ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a3b0:	f04f 0b00 	mov.w	fp, #0
 800a3b4:	e028      	b.n	800a408 <__ieee754_rem_pio2+0x80>
 800a3b6:	4bc3      	ldr	r3, [pc, #780]	; (800a6c4 <__ieee754_rem_pio2+0x33c>)
 800a3b8:	4598      	cmp	r8, r3
 800a3ba:	dc78      	bgt.n	800a4ae <__ieee754_rem_pio2+0x126>
 800a3bc:	9b02      	ldr	r3, [sp, #8]
 800a3be:	4ec2      	ldr	r6, [pc, #776]	; (800a6c8 <__ieee754_rem_pio2+0x340>)
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	ee10 0a10 	vmov	r0, s0
 800a3c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800a688 <__ieee754_rem_pio2+0x300>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	dd39      	ble.n	800a444 <__ieee754_rem_pio2+0xbc>
 800a3d0:	f7f5 ff7a 	bl	80002c8 <__aeabi_dsub>
 800a3d4:	45b0      	cmp	r8, r6
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	460d      	mov	r5, r1
 800a3da:	d01b      	beq.n	800a414 <__ieee754_rem_pio2+0x8c>
 800a3dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800a690 <__ieee754_rem_pio2+0x308>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f5 ff71 	bl	80002c8 <__aeabi_dsub>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	e9ca 2300 	strd	r2, r3, [sl]
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f7f5 ff69 	bl	80002c8 <__aeabi_dsub>
 800a3f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a690 <__ieee754_rem_pio2+0x308>)
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	f7f5 ff64 	bl	80002c8 <__aeabi_dsub>
 800a400:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a404:	f04f 0b01 	mov.w	fp, #1
 800a408:	4658      	mov	r0, fp
 800a40a:	b00b      	add	sp, #44	; 0x2c
 800a40c:	ecbd 8b02 	vpop	{d8}
 800a410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a414:	a3a0      	add	r3, pc, #640	; (adr r3, 800a698 <__ieee754_rem_pio2+0x310>)
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f7f5 ff55 	bl	80002c8 <__aeabi_dsub>
 800a41e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x318>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	4604      	mov	r4, r0
 800a426:	460d      	mov	r5, r1
 800a428:	f7f5 ff4e 	bl	80002c8 <__aeabi_dsub>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	e9ca 2300 	strd	r2, r3, [sl]
 800a434:	4620      	mov	r0, r4
 800a436:	4629      	mov	r1, r5
 800a438:	f7f5 ff46 	bl	80002c8 <__aeabi_dsub>
 800a43c:	a398      	add	r3, pc, #608	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x318>)
 800a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a442:	e7db      	b.n	800a3fc <__ieee754_rem_pio2+0x74>
 800a444:	f7f5 ff42 	bl	80002cc <__adddf3>
 800a448:	45b0      	cmp	r8, r6
 800a44a:	4604      	mov	r4, r0
 800a44c:	460d      	mov	r5, r1
 800a44e:	d016      	beq.n	800a47e <__ieee754_rem_pio2+0xf6>
 800a450:	a38f      	add	r3, pc, #572	; (adr r3, 800a690 <__ieee754_rem_pio2+0x308>)
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	f7f5 ff39 	bl	80002cc <__adddf3>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	e9ca 2300 	strd	r2, r3, [sl]
 800a462:	4620      	mov	r0, r4
 800a464:	4629      	mov	r1, r5
 800a466:	f7f5 ff2f 	bl	80002c8 <__aeabi_dsub>
 800a46a:	a389      	add	r3, pc, #548	; (adr r3, 800a690 <__ieee754_rem_pio2+0x308>)
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	f7f5 ff2c 	bl	80002cc <__adddf3>
 800a474:	f04f 3bff 	mov.w	fp, #4294967295
 800a478:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a47c:	e7c4      	b.n	800a408 <__ieee754_rem_pio2+0x80>
 800a47e:	a386      	add	r3, pc, #536	; (adr r3, 800a698 <__ieee754_rem_pio2+0x310>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f7f5 ff22 	bl	80002cc <__adddf3>
 800a488:	a385      	add	r3, pc, #532	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x318>)
 800a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48e:	4604      	mov	r4, r0
 800a490:	460d      	mov	r5, r1
 800a492:	f7f5 ff1b 	bl	80002cc <__adddf3>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	e9ca 2300 	strd	r2, r3, [sl]
 800a49e:	4620      	mov	r0, r4
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7f5 ff11 	bl	80002c8 <__aeabi_dsub>
 800a4a6:	a37e      	add	r3, pc, #504	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x318>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	e7e0      	b.n	800a470 <__ieee754_rem_pio2+0xe8>
 800a4ae:	4b87      	ldr	r3, [pc, #540]	; (800a6cc <__ieee754_rem_pio2+0x344>)
 800a4b0:	4598      	cmp	r8, r3
 800a4b2:	f300 80d9 	bgt.w	800a668 <__ieee754_rem_pio2+0x2e0>
 800a4b6:	f000 fe49 	bl	800b14c <fabs>
 800a4ba:	ec55 4b10 	vmov	r4, r5, d0
 800a4be:	ee10 0a10 	vmov	r0, s0
 800a4c2:	a379      	add	r3, pc, #484	; (adr r3, 800a6a8 <__ieee754_rem_pio2+0x320>)
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	f7f6 f8b5 	bl	8000638 <__aeabi_dmul>
 800a4ce:	4b80      	ldr	r3, [pc, #512]	; (800a6d0 <__ieee754_rem_pio2+0x348>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f7f5 fefb 	bl	80002cc <__adddf3>
 800a4d6:	f7f6 fb5f 	bl	8000b98 <__aeabi_d2iz>
 800a4da:	4683      	mov	fp, r0
 800a4dc:	f7f6 f842 	bl	8000564 <__aeabi_i2d>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	ec43 2b18 	vmov	d8, r2, r3
 800a4e8:	a367      	add	r3, pc, #412	; (adr r3, 800a688 <__ieee754_rem_pio2+0x300>)
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	f7f6 f8a3 	bl	8000638 <__aeabi_dmul>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	f7f5 fee5 	bl	80002c8 <__aeabi_dsub>
 800a4fe:	a364      	add	r3, pc, #400	; (adr r3, 800a690 <__ieee754_rem_pio2+0x308>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	4606      	mov	r6, r0
 800a506:	460f      	mov	r7, r1
 800a508:	ec51 0b18 	vmov	r0, r1, d8
 800a50c:	f7f6 f894 	bl	8000638 <__aeabi_dmul>
 800a510:	f1bb 0f1f 	cmp.w	fp, #31
 800a514:	4604      	mov	r4, r0
 800a516:	460d      	mov	r5, r1
 800a518:	dc0d      	bgt.n	800a536 <__ieee754_rem_pio2+0x1ae>
 800a51a:	4b6e      	ldr	r3, [pc, #440]	; (800a6d4 <__ieee754_rem_pio2+0x34c>)
 800a51c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a524:	4543      	cmp	r3, r8
 800a526:	d006      	beq.n	800a536 <__ieee754_rem_pio2+0x1ae>
 800a528:	4622      	mov	r2, r4
 800a52a:	462b      	mov	r3, r5
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f5 feca 	bl	80002c8 <__aeabi_dsub>
 800a534:	e00f      	b.n	800a556 <__ieee754_rem_pio2+0x1ce>
 800a536:	462b      	mov	r3, r5
 800a538:	4622      	mov	r2, r4
 800a53a:	4630      	mov	r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7f5 fec3 	bl	80002c8 <__aeabi_dsub>
 800a542:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a546:	9303      	str	r3, [sp, #12]
 800a548:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a54c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a550:	f1b8 0f10 	cmp.w	r8, #16
 800a554:	dc02      	bgt.n	800a55c <__ieee754_rem_pio2+0x1d4>
 800a556:	e9ca 0100 	strd	r0, r1, [sl]
 800a55a:	e039      	b.n	800a5d0 <__ieee754_rem_pio2+0x248>
 800a55c:	a34e      	add	r3, pc, #312	; (adr r3, 800a698 <__ieee754_rem_pio2+0x310>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	ec51 0b18 	vmov	r0, r1, d8
 800a566:	f7f6 f867 	bl	8000638 <__aeabi_dmul>
 800a56a:	4604      	mov	r4, r0
 800a56c:	460d      	mov	r5, r1
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	4630      	mov	r0, r6
 800a574:	4639      	mov	r1, r7
 800a576:	f7f5 fea7 	bl	80002c8 <__aeabi_dsub>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4680      	mov	r8, r0
 800a580:	4689      	mov	r9, r1
 800a582:	4630      	mov	r0, r6
 800a584:	4639      	mov	r1, r7
 800a586:	f7f5 fe9f 	bl	80002c8 <__aeabi_dsub>
 800a58a:	4622      	mov	r2, r4
 800a58c:	462b      	mov	r3, r5
 800a58e:	f7f5 fe9b 	bl	80002c8 <__aeabi_dsub>
 800a592:	a343      	add	r3, pc, #268	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x318>)
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	4604      	mov	r4, r0
 800a59a:	460d      	mov	r5, r1
 800a59c:	ec51 0b18 	vmov	r0, r1, d8
 800a5a0:	f7f6 f84a 	bl	8000638 <__aeabi_dmul>
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	462b      	mov	r3, r5
 800a5a8:	f7f5 fe8e 	bl	80002c8 <__aeabi_dsub>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	460d      	mov	r5, r1
 800a5b4:	4640      	mov	r0, r8
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	f7f5 fe86 	bl	80002c8 <__aeabi_dsub>
 800a5bc:	9a03      	ldr	r2, [sp, #12]
 800a5be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	2b31      	cmp	r3, #49	; 0x31
 800a5c6:	dc24      	bgt.n	800a612 <__ieee754_rem_pio2+0x28a>
 800a5c8:	e9ca 0100 	strd	r0, r1, [sl]
 800a5cc:	4646      	mov	r6, r8
 800a5ce:	464f      	mov	r7, r9
 800a5d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	4642      	mov	r2, r8
 800a5d8:	464b      	mov	r3, r9
 800a5da:	4639      	mov	r1, r7
 800a5dc:	f7f5 fe74 	bl	80002c8 <__aeabi_dsub>
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	4622      	mov	r2, r4
 800a5e4:	f7f5 fe70 	bl	80002c8 <__aeabi_dsub>
 800a5e8:	9b02      	ldr	r3, [sp, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5f0:	f6bf af0a 	bge.w	800a408 <__ieee754_rem_pio2+0x80>
 800a5f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a5f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800a5fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a600:	f8ca 8000 	str.w	r8, [sl]
 800a604:	f8ca 0008 	str.w	r0, [sl, #8]
 800a608:	f8ca 300c 	str.w	r3, [sl, #12]
 800a60c:	f1cb 0b00 	rsb	fp, fp, #0
 800a610:	e6fa      	b.n	800a408 <__ieee754_rem_pio2+0x80>
 800a612:	a327      	add	r3, pc, #156	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x328>)
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	ec51 0b18 	vmov	r0, r1, d8
 800a61c:	f7f6 f80c 	bl	8000638 <__aeabi_dmul>
 800a620:	4604      	mov	r4, r0
 800a622:	460d      	mov	r5, r1
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	4640      	mov	r0, r8
 800a62a:	4649      	mov	r1, r9
 800a62c:	f7f5 fe4c 	bl	80002c8 <__aeabi_dsub>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4606      	mov	r6, r0
 800a636:	460f      	mov	r7, r1
 800a638:	4640      	mov	r0, r8
 800a63a:	4649      	mov	r1, r9
 800a63c:	f7f5 fe44 	bl	80002c8 <__aeabi_dsub>
 800a640:	4622      	mov	r2, r4
 800a642:	462b      	mov	r3, r5
 800a644:	f7f5 fe40 	bl	80002c8 <__aeabi_dsub>
 800a648:	a31b      	add	r3, pc, #108	; (adr r3, 800a6b8 <__ieee754_rem_pio2+0x330>)
 800a64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64e:	4604      	mov	r4, r0
 800a650:	460d      	mov	r5, r1
 800a652:	ec51 0b18 	vmov	r0, r1, d8
 800a656:	f7f5 ffef 	bl	8000638 <__aeabi_dmul>
 800a65a:	4622      	mov	r2, r4
 800a65c:	462b      	mov	r3, r5
 800a65e:	f7f5 fe33 	bl	80002c8 <__aeabi_dsub>
 800a662:	4604      	mov	r4, r0
 800a664:	460d      	mov	r5, r1
 800a666:	e75f      	b.n	800a528 <__ieee754_rem_pio2+0x1a0>
 800a668:	4b1b      	ldr	r3, [pc, #108]	; (800a6d8 <__ieee754_rem_pio2+0x350>)
 800a66a:	4598      	cmp	r8, r3
 800a66c:	dd36      	ble.n	800a6dc <__ieee754_rem_pio2+0x354>
 800a66e:	ee10 2a10 	vmov	r2, s0
 800a672:	462b      	mov	r3, r5
 800a674:	4620      	mov	r0, r4
 800a676:	4629      	mov	r1, r5
 800a678:	f7f5 fe26 	bl	80002c8 <__aeabi_dsub>
 800a67c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a680:	e9ca 0100 	strd	r0, r1, [sl]
 800a684:	e694      	b.n	800a3b0 <__ieee754_rem_pio2+0x28>
 800a686:	bf00      	nop
 800a688:	54400000 	.word	0x54400000
 800a68c:	3ff921fb 	.word	0x3ff921fb
 800a690:	1a626331 	.word	0x1a626331
 800a694:	3dd0b461 	.word	0x3dd0b461
 800a698:	1a600000 	.word	0x1a600000
 800a69c:	3dd0b461 	.word	0x3dd0b461
 800a6a0:	2e037073 	.word	0x2e037073
 800a6a4:	3ba3198a 	.word	0x3ba3198a
 800a6a8:	6dc9c883 	.word	0x6dc9c883
 800a6ac:	3fe45f30 	.word	0x3fe45f30
 800a6b0:	2e000000 	.word	0x2e000000
 800a6b4:	3ba3198a 	.word	0x3ba3198a
 800a6b8:	252049c1 	.word	0x252049c1
 800a6bc:	397b839a 	.word	0x397b839a
 800a6c0:	3fe921fb 	.word	0x3fe921fb
 800a6c4:	4002d97b 	.word	0x4002d97b
 800a6c8:	3ff921fb 	.word	0x3ff921fb
 800a6cc:	413921fb 	.word	0x413921fb
 800a6d0:	3fe00000 	.word	0x3fe00000
 800a6d4:	0800b894 	.word	0x0800b894
 800a6d8:	7fefffff 	.word	0x7fefffff
 800a6dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a6e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a6e4:	ee10 0a10 	vmov	r0, s0
 800a6e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a6ec:	ee10 6a10 	vmov	r6, s0
 800a6f0:	460f      	mov	r7, r1
 800a6f2:	f7f6 fa51 	bl	8000b98 <__aeabi_d2iz>
 800a6f6:	f7f5 ff35 	bl	8000564 <__aeabi_i2d>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4630      	mov	r0, r6
 800a700:	4639      	mov	r1, r7
 800a702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a706:	f7f5 fddf 	bl	80002c8 <__aeabi_dsub>
 800a70a:	4b23      	ldr	r3, [pc, #140]	; (800a798 <__ieee754_rem_pio2+0x410>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	f7f5 ff93 	bl	8000638 <__aeabi_dmul>
 800a712:	460f      	mov	r7, r1
 800a714:	4606      	mov	r6, r0
 800a716:	f7f6 fa3f 	bl	8000b98 <__aeabi_d2iz>
 800a71a:	f7f5 ff23 	bl	8000564 <__aeabi_i2d>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	4630      	mov	r0, r6
 800a724:	4639      	mov	r1, r7
 800a726:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a72a:	f7f5 fdcd 	bl	80002c8 <__aeabi_dsub>
 800a72e:	4b1a      	ldr	r3, [pc, #104]	; (800a798 <__ieee754_rem_pio2+0x410>)
 800a730:	2200      	movs	r2, #0
 800a732:	f7f5 ff81 	bl	8000638 <__aeabi_dmul>
 800a736:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a73a:	ad04      	add	r5, sp, #16
 800a73c:	f04f 0803 	mov.w	r8, #3
 800a740:	46a9      	mov	r9, r5
 800a742:	2600      	movs	r6, #0
 800a744:	2700      	movs	r7, #0
 800a746:	4632      	mov	r2, r6
 800a748:	463b      	mov	r3, r7
 800a74a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a74e:	46c3      	mov	fp, r8
 800a750:	3d08      	subs	r5, #8
 800a752:	f108 38ff 	add.w	r8, r8, #4294967295
 800a756:	f7f6 f9d7 	bl	8000b08 <__aeabi_dcmpeq>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d1f3      	bne.n	800a746 <__ieee754_rem_pio2+0x3be>
 800a75e:	4b0f      	ldr	r3, [pc, #60]	; (800a79c <__ieee754_rem_pio2+0x414>)
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	2302      	movs	r3, #2
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	4622      	mov	r2, r4
 800a768:	465b      	mov	r3, fp
 800a76a:	4651      	mov	r1, sl
 800a76c:	4648      	mov	r0, r9
 800a76e:	f000 f8df 	bl	800a930 <__kernel_rem_pio2>
 800a772:	9b02      	ldr	r3, [sp, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	4683      	mov	fp, r0
 800a778:	f6bf ae46 	bge.w	800a408 <__ieee754_rem_pio2+0x80>
 800a77c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a784:	e9ca 2300 	strd	r2, r3, [sl]
 800a788:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a78c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a790:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a794:	e73a      	b.n	800a60c <__ieee754_rem_pio2+0x284>
 800a796:	bf00      	nop
 800a798:	41700000 	.word	0x41700000
 800a79c:	0800b914 	.word	0x0800b914

0800a7a0 <__kernel_cos>:
 800a7a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a4:	ec57 6b10 	vmov	r6, r7, d0
 800a7a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a7ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a7b0:	ed8d 1b00 	vstr	d1, [sp]
 800a7b4:	da07      	bge.n	800a7c6 <__kernel_cos+0x26>
 800a7b6:	ee10 0a10 	vmov	r0, s0
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	f7f6 f9ec 	bl	8000b98 <__aeabi_d2iz>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	f000 8088 	beq.w	800a8d6 <__kernel_cos+0x136>
 800a7c6:	4632      	mov	r2, r6
 800a7c8:	463b      	mov	r3, r7
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	f7f5 ff33 	bl	8000638 <__aeabi_dmul>
 800a7d2:	4b51      	ldr	r3, [pc, #324]	; (800a918 <__kernel_cos+0x178>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	460d      	mov	r5, r1
 800a7da:	f7f5 ff2d 	bl	8000638 <__aeabi_dmul>
 800a7de:	a340      	add	r3, pc, #256	; (adr r3, 800a8e0 <__kernel_cos+0x140>)
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	4682      	mov	sl, r0
 800a7e6:	468b      	mov	fp, r1
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	f7f5 ff24 	bl	8000638 <__aeabi_dmul>
 800a7f0:	a33d      	add	r3, pc, #244	; (adr r3, 800a8e8 <__kernel_cos+0x148>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f7f5 fd69 	bl	80002cc <__adddf3>
 800a7fa:	4622      	mov	r2, r4
 800a7fc:	462b      	mov	r3, r5
 800a7fe:	f7f5 ff1b 	bl	8000638 <__aeabi_dmul>
 800a802:	a33b      	add	r3, pc, #236	; (adr r3, 800a8f0 <__kernel_cos+0x150>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	f7f5 fd5e 	bl	80002c8 <__aeabi_dsub>
 800a80c:	4622      	mov	r2, r4
 800a80e:	462b      	mov	r3, r5
 800a810:	f7f5 ff12 	bl	8000638 <__aeabi_dmul>
 800a814:	a338      	add	r3, pc, #224	; (adr r3, 800a8f8 <__kernel_cos+0x158>)
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	f7f5 fd57 	bl	80002cc <__adddf3>
 800a81e:	4622      	mov	r2, r4
 800a820:	462b      	mov	r3, r5
 800a822:	f7f5 ff09 	bl	8000638 <__aeabi_dmul>
 800a826:	a336      	add	r3, pc, #216	; (adr r3, 800a900 <__kernel_cos+0x160>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	f7f5 fd4c 	bl	80002c8 <__aeabi_dsub>
 800a830:	4622      	mov	r2, r4
 800a832:	462b      	mov	r3, r5
 800a834:	f7f5 ff00 	bl	8000638 <__aeabi_dmul>
 800a838:	a333      	add	r3, pc, #204	; (adr r3, 800a908 <__kernel_cos+0x168>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f7f5 fd45 	bl	80002cc <__adddf3>
 800a842:	4622      	mov	r2, r4
 800a844:	462b      	mov	r3, r5
 800a846:	f7f5 fef7 	bl	8000638 <__aeabi_dmul>
 800a84a:	4622      	mov	r2, r4
 800a84c:	462b      	mov	r3, r5
 800a84e:	f7f5 fef3 	bl	8000638 <__aeabi_dmul>
 800a852:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a856:	4604      	mov	r4, r0
 800a858:	460d      	mov	r5, r1
 800a85a:	4630      	mov	r0, r6
 800a85c:	4639      	mov	r1, r7
 800a85e:	f7f5 feeb 	bl	8000638 <__aeabi_dmul>
 800a862:	460b      	mov	r3, r1
 800a864:	4602      	mov	r2, r0
 800a866:	4629      	mov	r1, r5
 800a868:	4620      	mov	r0, r4
 800a86a:	f7f5 fd2d 	bl	80002c8 <__aeabi_dsub>
 800a86e:	4b2b      	ldr	r3, [pc, #172]	; (800a91c <__kernel_cos+0x17c>)
 800a870:	4598      	cmp	r8, r3
 800a872:	4606      	mov	r6, r0
 800a874:	460f      	mov	r7, r1
 800a876:	dc10      	bgt.n	800a89a <__kernel_cos+0xfa>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4650      	mov	r0, sl
 800a87e:	4659      	mov	r1, fp
 800a880:	f7f5 fd22 	bl	80002c8 <__aeabi_dsub>
 800a884:	460b      	mov	r3, r1
 800a886:	4926      	ldr	r1, [pc, #152]	; (800a920 <__kernel_cos+0x180>)
 800a888:	4602      	mov	r2, r0
 800a88a:	2000      	movs	r0, #0
 800a88c:	f7f5 fd1c 	bl	80002c8 <__aeabi_dsub>
 800a890:	ec41 0b10 	vmov	d0, r0, r1
 800a894:	b003      	add	sp, #12
 800a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89a:	4b22      	ldr	r3, [pc, #136]	; (800a924 <__kernel_cos+0x184>)
 800a89c:	4920      	ldr	r1, [pc, #128]	; (800a920 <__kernel_cos+0x180>)
 800a89e:	4598      	cmp	r8, r3
 800a8a0:	bfcc      	ite	gt
 800a8a2:	4d21      	ldrgt	r5, [pc, #132]	; (800a928 <__kernel_cos+0x188>)
 800a8a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a8a8:	2400      	movs	r4, #0
 800a8aa:	4622      	mov	r2, r4
 800a8ac:	462b      	mov	r3, r5
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	f7f5 fd0a 	bl	80002c8 <__aeabi_dsub>
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	4680      	mov	r8, r0
 800a8b8:	4689      	mov	r9, r1
 800a8ba:	462b      	mov	r3, r5
 800a8bc:	4650      	mov	r0, sl
 800a8be:	4659      	mov	r1, fp
 800a8c0:	f7f5 fd02 	bl	80002c8 <__aeabi_dsub>
 800a8c4:	4632      	mov	r2, r6
 800a8c6:	463b      	mov	r3, r7
 800a8c8:	f7f5 fcfe 	bl	80002c8 <__aeabi_dsub>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4640      	mov	r0, r8
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	e7da      	b.n	800a88c <__kernel_cos+0xec>
 800a8d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a910 <__kernel_cos+0x170>
 800a8da:	e7db      	b.n	800a894 <__kernel_cos+0xf4>
 800a8dc:	f3af 8000 	nop.w
 800a8e0:	be8838d4 	.word	0xbe8838d4
 800a8e4:	bda8fae9 	.word	0xbda8fae9
 800a8e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a8ec:	3e21ee9e 	.word	0x3e21ee9e
 800a8f0:	809c52ad 	.word	0x809c52ad
 800a8f4:	3e927e4f 	.word	0x3e927e4f
 800a8f8:	19cb1590 	.word	0x19cb1590
 800a8fc:	3efa01a0 	.word	0x3efa01a0
 800a900:	16c15177 	.word	0x16c15177
 800a904:	3f56c16c 	.word	0x3f56c16c
 800a908:	5555554c 	.word	0x5555554c
 800a90c:	3fa55555 	.word	0x3fa55555
 800a910:	00000000 	.word	0x00000000
 800a914:	3ff00000 	.word	0x3ff00000
 800a918:	3fe00000 	.word	0x3fe00000
 800a91c:	3fd33332 	.word	0x3fd33332
 800a920:	3ff00000 	.word	0x3ff00000
 800a924:	3fe90000 	.word	0x3fe90000
 800a928:	3fd20000 	.word	0x3fd20000
 800a92c:	00000000 	.word	0x00000000

0800a930 <__kernel_rem_pio2>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	ed2d 8b02 	vpush	{d8}
 800a938:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a93c:	f112 0f14 	cmn.w	r2, #20
 800a940:	9308      	str	r3, [sp, #32]
 800a942:	9101      	str	r1, [sp, #4]
 800a944:	4bc4      	ldr	r3, [pc, #784]	; (800ac58 <__kernel_rem_pio2+0x328>)
 800a946:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a948:	900b      	str	r0, [sp, #44]	; 0x2c
 800a94a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a94e:	9302      	str	r3, [sp, #8]
 800a950:	9b08      	ldr	r3, [sp, #32]
 800a952:	f103 33ff 	add.w	r3, r3, #4294967295
 800a956:	bfa8      	it	ge
 800a958:	1ed4      	subge	r4, r2, #3
 800a95a:	9306      	str	r3, [sp, #24]
 800a95c:	bfb2      	itee	lt
 800a95e:	2400      	movlt	r4, #0
 800a960:	2318      	movge	r3, #24
 800a962:	fb94 f4f3 	sdivge	r4, r4, r3
 800a966:	f06f 0317 	mvn.w	r3, #23
 800a96a:	fb04 3303 	mla	r3, r4, r3, r3
 800a96e:	eb03 0a02 	add.w	sl, r3, r2
 800a972:	9b02      	ldr	r3, [sp, #8]
 800a974:	9a06      	ldr	r2, [sp, #24]
 800a976:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ac48 <__kernel_rem_pio2+0x318>
 800a97a:	eb03 0802 	add.w	r8, r3, r2
 800a97e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a980:	1aa7      	subs	r7, r4, r2
 800a982:	ae22      	add	r6, sp, #136	; 0x88
 800a984:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a988:	2500      	movs	r5, #0
 800a98a:	4545      	cmp	r5, r8
 800a98c:	dd13      	ble.n	800a9b6 <__kernel_rem_pio2+0x86>
 800a98e:	9b08      	ldr	r3, [sp, #32]
 800a990:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ac48 <__kernel_rem_pio2+0x318>
 800a994:	aa22      	add	r2, sp, #136	; 0x88
 800a996:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a99a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a99e:	f04f 0800 	mov.w	r8, #0
 800a9a2:	9b02      	ldr	r3, [sp, #8]
 800a9a4:	4598      	cmp	r8, r3
 800a9a6:	dc2f      	bgt.n	800aa08 <__kernel_rem_pio2+0xd8>
 800a9a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a9ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a9b0:	462f      	mov	r7, r5
 800a9b2:	2600      	movs	r6, #0
 800a9b4:	e01b      	b.n	800a9ee <__kernel_rem_pio2+0xbe>
 800a9b6:	42ef      	cmn	r7, r5
 800a9b8:	d407      	bmi.n	800a9ca <__kernel_rem_pio2+0x9a>
 800a9ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a9be:	f7f5 fdd1 	bl	8000564 <__aeabi_i2d>
 800a9c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a9c6:	3501      	adds	r5, #1
 800a9c8:	e7df      	b.n	800a98a <__kernel_rem_pio2+0x5a>
 800a9ca:	ec51 0b18 	vmov	r0, r1, d8
 800a9ce:	e7f8      	b.n	800a9c2 <__kernel_rem_pio2+0x92>
 800a9d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a9d8:	f7f5 fe2e 	bl	8000638 <__aeabi_dmul>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9e4:	f7f5 fc72 	bl	80002cc <__adddf3>
 800a9e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9ec:	3601      	adds	r6, #1
 800a9ee:	9b06      	ldr	r3, [sp, #24]
 800a9f0:	429e      	cmp	r6, r3
 800a9f2:	f1a7 0708 	sub.w	r7, r7, #8
 800a9f6:	ddeb      	ble.n	800a9d0 <__kernel_rem_pio2+0xa0>
 800a9f8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a9fc:	f108 0801 	add.w	r8, r8, #1
 800aa00:	ecab 7b02 	vstmia	fp!, {d7}
 800aa04:	3508      	adds	r5, #8
 800aa06:	e7cc      	b.n	800a9a2 <__kernel_rem_pio2+0x72>
 800aa08:	9b02      	ldr	r3, [sp, #8]
 800aa0a:	aa0e      	add	r2, sp, #56	; 0x38
 800aa0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa10:	930d      	str	r3, [sp, #52]	; 0x34
 800aa12:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800aa14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aa18:	9c02      	ldr	r4, [sp, #8]
 800aa1a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa1c:	00e3      	lsls	r3, r4, #3
 800aa1e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa20:	ab9a      	add	r3, sp, #616	; 0x268
 800aa22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa26:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800aa2a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800aa2e:	ab72      	add	r3, sp, #456	; 0x1c8
 800aa30:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800aa34:	46c3      	mov	fp, r8
 800aa36:	46a1      	mov	r9, r4
 800aa38:	f1b9 0f00 	cmp.w	r9, #0
 800aa3c:	f1a5 0508 	sub.w	r5, r5, #8
 800aa40:	dc77      	bgt.n	800ab32 <__kernel_rem_pio2+0x202>
 800aa42:	ec47 6b10 	vmov	d0, r6, r7
 800aa46:	4650      	mov	r0, sl
 800aa48:	f000 fc0a 	bl	800b260 <scalbn>
 800aa4c:	ec57 6b10 	vmov	r6, r7, d0
 800aa50:	2200      	movs	r2, #0
 800aa52:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800aa56:	ee10 0a10 	vmov	r0, s0
 800aa5a:	4639      	mov	r1, r7
 800aa5c:	f7f5 fdec 	bl	8000638 <__aeabi_dmul>
 800aa60:	ec41 0b10 	vmov	d0, r0, r1
 800aa64:	f000 fb7c 	bl	800b160 <floor>
 800aa68:	4b7c      	ldr	r3, [pc, #496]	; (800ac5c <__kernel_rem_pio2+0x32c>)
 800aa6a:	ec51 0b10 	vmov	r0, r1, d0
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f7f5 fde2 	bl	8000638 <__aeabi_dmul>
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	4630      	mov	r0, r6
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	f7f5 fc24 	bl	80002c8 <__aeabi_dsub>
 800aa80:	460f      	mov	r7, r1
 800aa82:	4606      	mov	r6, r0
 800aa84:	f7f6 f888 	bl	8000b98 <__aeabi_d2iz>
 800aa88:	9004      	str	r0, [sp, #16]
 800aa8a:	f7f5 fd6b 	bl	8000564 <__aeabi_i2d>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	4630      	mov	r0, r6
 800aa94:	4639      	mov	r1, r7
 800aa96:	f7f5 fc17 	bl	80002c8 <__aeabi_dsub>
 800aa9a:	f1ba 0f00 	cmp.w	sl, #0
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	460f      	mov	r7, r1
 800aaa2:	dd6d      	ble.n	800ab80 <__kernel_rem_pio2+0x250>
 800aaa4:	1e62      	subs	r2, r4, #1
 800aaa6:	ab0e      	add	r3, sp, #56	; 0x38
 800aaa8:	9d04      	ldr	r5, [sp, #16]
 800aaaa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800aaae:	f1ca 0118 	rsb	r1, sl, #24
 800aab2:	fa40 f301 	asr.w	r3, r0, r1
 800aab6:	441d      	add	r5, r3
 800aab8:	408b      	lsls	r3, r1
 800aaba:	1ac0      	subs	r0, r0, r3
 800aabc:	ab0e      	add	r3, sp, #56	; 0x38
 800aabe:	9504      	str	r5, [sp, #16]
 800aac0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800aac4:	f1ca 0317 	rsb	r3, sl, #23
 800aac8:	fa40 fb03 	asr.w	fp, r0, r3
 800aacc:	f1bb 0f00 	cmp.w	fp, #0
 800aad0:	dd65      	ble.n	800ab9e <__kernel_rem_pio2+0x26e>
 800aad2:	9b04      	ldr	r3, [sp, #16]
 800aad4:	2200      	movs	r2, #0
 800aad6:	3301      	adds	r3, #1
 800aad8:	9304      	str	r3, [sp, #16]
 800aada:	4615      	mov	r5, r2
 800aadc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800aae0:	4294      	cmp	r4, r2
 800aae2:	f300 809c 	bgt.w	800ac1e <__kernel_rem_pio2+0x2ee>
 800aae6:	f1ba 0f00 	cmp.w	sl, #0
 800aaea:	dd07      	ble.n	800aafc <__kernel_rem_pio2+0x1cc>
 800aaec:	f1ba 0f01 	cmp.w	sl, #1
 800aaf0:	f000 80c0 	beq.w	800ac74 <__kernel_rem_pio2+0x344>
 800aaf4:	f1ba 0f02 	cmp.w	sl, #2
 800aaf8:	f000 80c6 	beq.w	800ac88 <__kernel_rem_pio2+0x358>
 800aafc:	f1bb 0f02 	cmp.w	fp, #2
 800ab00:	d14d      	bne.n	800ab9e <__kernel_rem_pio2+0x26e>
 800ab02:	4632      	mov	r2, r6
 800ab04:	463b      	mov	r3, r7
 800ab06:	4956      	ldr	r1, [pc, #344]	; (800ac60 <__kernel_rem_pio2+0x330>)
 800ab08:	2000      	movs	r0, #0
 800ab0a:	f7f5 fbdd 	bl	80002c8 <__aeabi_dsub>
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460f      	mov	r7, r1
 800ab12:	2d00      	cmp	r5, #0
 800ab14:	d043      	beq.n	800ab9e <__kernel_rem_pio2+0x26e>
 800ab16:	4650      	mov	r0, sl
 800ab18:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ac50 <__kernel_rem_pio2+0x320>
 800ab1c:	f000 fba0 	bl	800b260 <scalbn>
 800ab20:	4630      	mov	r0, r6
 800ab22:	4639      	mov	r1, r7
 800ab24:	ec53 2b10 	vmov	r2, r3, d0
 800ab28:	f7f5 fbce 	bl	80002c8 <__aeabi_dsub>
 800ab2c:	4606      	mov	r6, r0
 800ab2e:	460f      	mov	r7, r1
 800ab30:	e035      	b.n	800ab9e <__kernel_rem_pio2+0x26e>
 800ab32:	4b4c      	ldr	r3, [pc, #304]	; (800ac64 <__kernel_rem_pio2+0x334>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	4630      	mov	r0, r6
 800ab38:	4639      	mov	r1, r7
 800ab3a:	f7f5 fd7d 	bl	8000638 <__aeabi_dmul>
 800ab3e:	f7f6 f82b 	bl	8000b98 <__aeabi_d2iz>
 800ab42:	f7f5 fd0f 	bl	8000564 <__aeabi_i2d>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	ec43 2b18 	vmov	d8, r2, r3
 800ab4e:	4b46      	ldr	r3, [pc, #280]	; (800ac68 <__kernel_rem_pio2+0x338>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	f7f5 fd71 	bl	8000638 <__aeabi_dmul>
 800ab56:	4602      	mov	r2, r0
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	f7f5 fbb3 	bl	80002c8 <__aeabi_dsub>
 800ab62:	f7f6 f819 	bl	8000b98 <__aeabi_d2iz>
 800ab66:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab6a:	f84b 0b04 	str.w	r0, [fp], #4
 800ab6e:	ec51 0b18 	vmov	r0, r1, d8
 800ab72:	f7f5 fbab 	bl	80002cc <__adddf3>
 800ab76:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	460f      	mov	r7, r1
 800ab7e:	e75b      	b.n	800aa38 <__kernel_rem_pio2+0x108>
 800ab80:	d106      	bne.n	800ab90 <__kernel_rem_pio2+0x260>
 800ab82:	1e63      	subs	r3, r4, #1
 800ab84:	aa0e      	add	r2, sp, #56	; 0x38
 800ab86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ab8a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ab8e:	e79d      	b.n	800aacc <__kernel_rem_pio2+0x19c>
 800ab90:	4b36      	ldr	r3, [pc, #216]	; (800ac6c <__kernel_rem_pio2+0x33c>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	f7f5 ffd6 	bl	8000b44 <__aeabi_dcmpge>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d13d      	bne.n	800ac18 <__kernel_rem_pio2+0x2e8>
 800ab9c:	4683      	mov	fp, r0
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2300      	movs	r3, #0
 800aba2:	4630      	mov	r0, r6
 800aba4:	4639      	mov	r1, r7
 800aba6:	f7f5 ffaf 	bl	8000b08 <__aeabi_dcmpeq>
 800abaa:	2800      	cmp	r0, #0
 800abac:	f000 80c0 	beq.w	800ad30 <__kernel_rem_pio2+0x400>
 800abb0:	1e65      	subs	r5, r4, #1
 800abb2:	462b      	mov	r3, r5
 800abb4:	2200      	movs	r2, #0
 800abb6:	9902      	ldr	r1, [sp, #8]
 800abb8:	428b      	cmp	r3, r1
 800abba:	da6c      	bge.n	800ac96 <__kernel_rem_pio2+0x366>
 800abbc:	2a00      	cmp	r2, #0
 800abbe:	f000 8089 	beq.w	800acd4 <__kernel_rem_pio2+0x3a4>
 800abc2:	ab0e      	add	r3, sp, #56	; 0x38
 800abc4:	f1aa 0a18 	sub.w	sl, sl, #24
 800abc8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 80ad 	beq.w	800ad2c <__kernel_rem_pio2+0x3fc>
 800abd2:	4650      	mov	r0, sl
 800abd4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ac50 <__kernel_rem_pio2+0x320>
 800abd8:	f000 fb42 	bl	800b260 <scalbn>
 800abdc:	ab9a      	add	r3, sp, #616	; 0x268
 800abde:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800abe2:	ec57 6b10 	vmov	r6, r7, d0
 800abe6:	00ec      	lsls	r4, r5, #3
 800abe8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800abec:	46aa      	mov	sl, r5
 800abee:	f1ba 0f00 	cmp.w	sl, #0
 800abf2:	f280 80d6 	bge.w	800ada2 <__kernel_rem_pio2+0x472>
 800abf6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ac48 <__kernel_rem_pio2+0x318>
 800abfa:	462e      	mov	r6, r5
 800abfc:	2e00      	cmp	r6, #0
 800abfe:	f2c0 8104 	blt.w	800ae0a <__kernel_rem_pio2+0x4da>
 800ac02:	ab72      	add	r3, sp, #456	; 0x1c8
 800ac04:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ac08:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ac70 <__kernel_rem_pio2+0x340>
 800ac0c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ac10:	f04f 0800 	mov.w	r8, #0
 800ac14:	1baf      	subs	r7, r5, r6
 800ac16:	e0ea      	b.n	800adee <__kernel_rem_pio2+0x4be>
 800ac18:	f04f 0b02 	mov.w	fp, #2
 800ac1c:	e759      	b.n	800aad2 <__kernel_rem_pio2+0x1a2>
 800ac1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac22:	b955      	cbnz	r5, 800ac3a <__kernel_rem_pio2+0x30a>
 800ac24:	b123      	cbz	r3, 800ac30 <__kernel_rem_pio2+0x300>
 800ac26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ac2a:	f8c8 3000 	str.w	r3, [r8]
 800ac2e:	2301      	movs	r3, #1
 800ac30:	3201      	adds	r2, #1
 800ac32:	f108 0804 	add.w	r8, r8, #4
 800ac36:	461d      	mov	r5, r3
 800ac38:	e752      	b.n	800aae0 <__kernel_rem_pio2+0x1b0>
 800ac3a:	1acb      	subs	r3, r1, r3
 800ac3c:	f8c8 3000 	str.w	r3, [r8]
 800ac40:	462b      	mov	r3, r5
 800ac42:	e7f5      	b.n	800ac30 <__kernel_rem_pio2+0x300>
 800ac44:	f3af 8000 	nop.w
	...
 800ac54:	3ff00000 	.word	0x3ff00000
 800ac58:	0800ba60 	.word	0x0800ba60
 800ac5c:	40200000 	.word	0x40200000
 800ac60:	3ff00000 	.word	0x3ff00000
 800ac64:	3e700000 	.word	0x3e700000
 800ac68:	41700000 	.word	0x41700000
 800ac6c:	3fe00000 	.word	0x3fe00000
 800ac70:	0800ba20 	.word	0x0800ba20
 800ac74:	1e62      	subs	r2, r4, #1
 800ac76:	ab0e      	add	r3, sp, #56	; 0x38
 800ac78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ac80:	a90e      	add	r1, sp, #56	; 0x38
 800ac82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ac86:	e739      	b.n	800aafc <__kernel_rem_pio2+0x1cc>
 800ac88:	1e62      	subs	r2, r4, #1
 800ac8a:	ab0e      	add	r3, sp, #56	; 0x38
 800ac8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ac94:	e7f4      	b.n	800ac80 <__kernel_rem_pio2+0x350>
 800ac96:	a90e      	add	r1, sp, #56	; 0x38
 800ac98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	e789      	b.n	800abb6 <__kernel_rem_pio2+0x286>
 800aca2:	3301      	adds	r3, #1
 800aca4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aca8:	2900      	cmp	r1, #0
 800acaa:	d0fa      	beq.n	800aca2 <__kernel_rem_pio2+0x372>
 800acac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800acb2:	446a      	add	r2, sp
 800acb4:	3a98      	subs	r2, #152	; 0x98
 800acb6:	920a      	str	r2, [sp, #40]	; 0x28
 800acb8:	9a08      	ldr	r2, [sp, #32]
 800acba:	18e3      	adds	r3, r4, r3
 800acbc:	18a5      	adds	r5, r4, r2
 800acbe:	aa22      	add	r2, sp, #136	; 0x88
 800acc0:	f104 0801 	add.w	r8, r4, #1
 800acc4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800acc8:	9304      	str	r3, [sp, #16]
 800acca:	9b04      	ldr	r3, [sp, #16]
 800accc:	4543      	cmp	r3, r8
 800acce:	da04      	bge.n	800acda <__kernel_rem_pio2+0x3aa>
 800acd0:	461c      	mov	r4, r3
 800acd2:	e6a3      	b.n	800aa1c <__kernel_rem_pio2+0xec>
 800acd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acd6:	2301      	movs	r3, #1
 800acd8:	e7e4      	b.n	800aca4 <__kernel_rem_pio2+0x374>
 800acda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acdc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ace0:	f7f5 fc40 	bl	8000564 <__aeabi_i2d>
 800ace4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ace8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acea:	46ab      	mov	fp, r5
 800acec:	461c      	mov	r4, r3
 800acee:	f04f 0900 	mov.w	r9, #0
 800acf2:	2600      	movs	r6, #0
 800acf4:	2700      	movs	r7, #0
 800acf6:	9b06      	ldr	r3, [sp, #24]
 800acf8:	4599      	cmp	r9, r3
 800acfa:	dd06      	ble.n	800ad0a <__kernel_rem_pio2+0x3da>
 800acfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acfe:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ad02:	f108 0801 	add.w	r8, r8, #1
 800ad06:	930a      	str	r3, [sp, #40]	; 0x28
 800ad08:	e7df      	b.n	800acca <__kernel_rem_pio2+0x39a>
 800ad0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ad0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ad12:	f7f5 fc91 	bl	8000638 <__aeabi_dmul>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	f7f5 fad5 	bl	80002cc <__adddf3>
 800ad22:	f109 0901 	add.w	r9, r9, #1
 800ad26:	4606      	mov	r6, r0
 800ad28:	460f      	mov	r7, r1
 800ad2a:	e7e4      	b.n	800acf6 <__kernel_rem_pio2+0x3c6>
 800ad2c:	3d01      	subs	r5, #1
 800ad2e:	e748      	b.n	800abc2 <__kernel_rem_pio2+0x292>
 800ad30:	ec47 6b10 	vmov	d0, r6, r7
 800ad34:	f1ca 0000 	rsb	r0, sl, #0
 800ad38:	f000 fa92 	bl	800b260 <scalbn>
 800ad3c:	ec57 6b10 	vmov	r6, r7, d0
 800ad40:	4ba0      	ldr	r3, [pc, #640]	; (800afc4 <__kernel_rem_pio2+0x694>)
 800ad42:	ee10 0a10 	vmov	r0, s0
 800ad46:	2200      	movs	r2, #0
 800ad48:	4639      	mov	r1, r7
 800ad4a:	f7f5 fefb 	bl	8000b44 <__aeabi_dcmpge>
 800ad4e:	b1f8      	cbz	r0, 800ad90 <__kernel_rem_pio2+0x460>
 800ad50:	4b9d      	ldr	r3, [pc, #628]	; (800afc8 <__kernel_rem_pio2+0x698>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	4630      	mov	r0, r6
 800ad56:	4639      	mov	r1, r7
 800ad58:	f7f5 fc6e 	bl	8000638 <__aeabi_dmul>
 800ad5c:	f7f5 ff1c 	bl	8000b98 <__aeabi_d2iz>
 800ad60:	4680      	mov	r8, r0
 800ad62:	f7f5 fbff 	bl	8000564 <__aeabi_i2d>
 800ad66:	4b97      	ldr	r3, [pc, #604]	; (800afc4 <__kernel_rem_pio2+0x694>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f7f5 fc65 	bl	8000638 <__aeabi_dmul>
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4602      	mov	r2, r0
 800ad72:	4639      	mov	r1, r7
 800ad74:	4630      	mov	r0, r6
 800ad76:	f7f5 faa7 	bl	80002c8 <__aeabi_dsub>
 800ad7a:	f7f5 ff0d 	bl	8000b98 <__aeabi_d2iz>
 800ad7e:	1c65      	adds	r5, r4, #1
 800ad80:	ab0e      	add	r3, sp, #56	; 0x38
 800ad82:	f10a 0a18 	add.w	sl, sl, #24
 800ad86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ad8a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ad8e:	e720      	b.n	800abd2 <__kernel_rem_pio2+0x2a2>
 800ad90:	4630      	mov	r0, r6
 800ad92:	4639      	mov	r1, r7
 800ad94:	f7f5 ff00 	bl	8000b98 <__aeabi_d2iz>
 800ad98:	ab0e      	add	r3, sp, #56	; 0x38
 800ad9a:	4625      	mov	r5, r4
 800ad9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ada0:	e717      	b.n	800abd2 <__kernel_rem_pio2+0x2a2>
 800ada2:	ab0e      	add	r3, sp, #56	; 0x38
 800ada4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ada8:	f7f5 fbdc 	bl	8000564 <__aeabi_i2d>
 800adac:	4632      	mov	r2, r6
 800adae:	463b      	mov	r3, r7
 800adb0:	f7f5 fc42 	bl	8000638 <__aeabi_dmul>
 800adb4:	4b84      	ldr	r3, [pc, #528]	; (800afc8 <__kernel_rem_pio2+0x698>)
 800adb6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800adba:	2200      	movs	r2, #0
 800adbc:	4630      	mov	r0, r6
 800adbe:	4639      	mov	r1, r7
 800adc0:	f7f5 fc3a 	bl	8000638 <__aeabi_dmul>
 800adc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adc8:	4606      	mov	r6, r0
 800adca:	460f      	mov	r7, r1
 800adcc:	e70f      	b.n	800abee <__kernel_rem_pio2+0x2be>
 800adce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800add2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800add6:	f7f5 fc2f 	bl	8000638 <__aeabi_dmul>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ade2:	f7f5 fa73 	bl	80002cc <__adddf3>
 800ade6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800adea:	f108 0801 	add.w	r8, r8, #1
 800adee:	9b02      	ldr	r3, [sp, #8]
 800adf0:	4598      	cmp	r8, r3
 800adf2:	dc01      	bgt.n	800adf8 <__kernel_rem_pio2+0x4c8>
 800adf4:	45b8      	cmp	r8, r7
 800adf6:	ddea      	ble.n	800adce <__kernel_rem_pio2+0x49e>
 800adf8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800adfc:	ab4a      	add	r3, sp, #296	; 0x128
 800adfe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ae02:	ed87 7b00 	vstr	d7, [r7]
 800ae06:	3e01      	subs	r6, #1
 800ae08:	e6f8      	b.n	800abfc <__kernel_rem_pio2+0x2cc>
 800ae0a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	dc0b      	bgt.n	800ae28 <__kernel_rem_pio2+0x4f8>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dc35      	bgt.n	800ae80 <__kernel_rem_pio2+0x550>
 800ae14:	d059      	beq.n	800aeca <__kernel_rem_pio2+0x59a>
 800ae16:	9b04      	ldr	r3, [sp, #16]
 800ae18:	f003 0007 	and.w	r0, r3, #7
 800ae1c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ae20:	ecbd 8b02 	vpop	{d8}
 800ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d1f3      	bne.n	800ae16 <__kernel_rem_pio2+0x4e6>
 800ae2e:	ab4a      	add	r3, sp, #296	; 0x128
 800ae30:	4423      	add	r3, r4
 800ae32:	9306      	str	r3, [sp, #24]
 800ae34:	461c      	mov	r4, r3
 800ae36:	469a      	mov	sl, r3
 800ae38:	9502      	str	r5, [sp, #8]
 800ae3a:	9b02      	ldr	r3, [sp, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f1aa 0a08 	sub.w	sl, sl, #8
 800ae42:	dc6b      	bgt.n	800af1c <__kernel_rem_pio2+0x5ec>
 800ae44:	46aa      	mov	sl, r5
 800ae46:	f1ba 0f01 	cmp.w	sl, #1
 800ae4a:	f1a4 0408 	sub.w	r4, r4, #8
 800ae4e:	f300 8085 	bgt.w	800af5c <__kernel_rem_pio2+0x62c>
 800ae52:	9c06      	ldr	r4, [sp, #24]
 800ae54:	2000      	movs	r0, #0
 800ae56:	3408      	adds	r4, #8
 800ae58:	2100      	movs	r1, #0
 800ae5a:	2d01      	cmp	r5, #1
 800ae5c:	f300 809d 	bgt.w	800af9a <__kernel_rem_pio2+0x66a>
 800ae60:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ae64:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ae68:	f1bb 0f00 	cmp.w	fp, #0
 800ae6c:	f040 809b 	bne.w	800afa6 <__kernel_rem_pio2+0x676>
 800ae70:	9b01      	ldr	r3, [sp, #4]
 800ae72:	e9c3 5600 	strd	r5, r6, [r3]
 800ae76:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ae7a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ae7e:	e7ca      	b.n	800ae16 <__kernel_rem_pio2+0x4e6>
 800ae80:	3408      	adds	r4, #8
 800ae82:	ab4a      	add	r3, sp, #296	; 0x128
 800ae84:	441c      	add	r4, r3
 800ae86:	462e      	mov	r6, r5
 800ae88:	2000      	movs	r0, #0
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	2e00      	cmp	r6, #0
 800ae8e:	da36      	bge.n	800aefe <__kernel_rem_pio2+0x5ce>
 800ae90:	f1bb 0f00 	cmp.w	fp, #0
 800ae94:	d039      	beq.n	800af0a <__kernel_rem_pio2+0x5da>
 800ae96:	4602      	mov	r2, r0
 800ae98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae9c:	9c01      	ldr	r4, [sp, #4]
 800ae9e:	e9c4 2300 	strd	r2, r3, [r4]
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800aeaa:	f7f5 fa0d 	bl	80002c8 <__aeabi_dsub>
 800aeae:	ae4c      	add	r6, sp, #304	; 0x130
 800aeb0:	2401      	movs	r4, #1
 800aeb2:	42a5      	cmp	r5, r4
 800aeb4:	da2c      	bge.n	800af10 <__kernel_rem_pio2+0x5e0>
 800aeb6:	f1bb 0f00 	cmp.w	fp, #0
 800aeba:	d002      	beq.n	800aec2 <__kernel_rem_pio2+0x592>
 800aebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aec0:	4619      	mov	r1, r3
 800aec2:	9b01      	ldr	r3, [sp, #4]
 800aec4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aec8:	e7a5      	b.n	800ae16 <__kernel_rem_pio2+0x4e6>
 800aeca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800aece:	eb0d 0403 	add.w	r4, sp, r3
 800aed2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800aed6:	2000      	movs	r0, #0
 800aed8:	2100      	movs	r1, #0
 800aeda:	2d00      	cmp	r5, #0
 800aedc:	da09      	bge.n	800aef2 <__kernel_rem_pio2+0x5c2>
 800aede:	f1bb 0f00 	cmp.w	fp, #0
 800aee2:	d002      	beq.n	800aeea <__kernel_rem_pio2+0x5ba>
 800aee4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aee8:	4619      	mov	r1, r3
 800aeea:	9b01      	ldr	r3, [sp, #4]
 800aeec:	e9c3 0100 	strd	r0, r1, [r3]
 800aef0:	e791      	b.n	800ae16 <__kernel_rem_pio2+0x4e6>
 800aef2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aef6:	f7f5 f9e9 	bl	80002cc <__adddf3>
 800aefa:	3d01      	subs	r5, #1
 800aefc:	e7ed      	b.n	800aeda <__kernel_rem_pio2+0x5aa>
 800aefe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af02:	f7f5 f9e3 	bl	80002cc <__adddf3>
 800af06:	3e01      	subs	r6, #1
 800af08:	e7c0      	b.n	800ae8c <__kernel_rem_pio2+0x55c>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	e7c5      	b.n	800ae9c <__kernel_rem_pio2+0x56c>
 800af10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800af14:	f7f5 f9da 	bl	80002cc <__adddf3>
 800af18:	3401      	adds	r4, #1
 800af1a:	e7ca      	b.n	800aeb2 <__kernel_rem_pio2+0x582>
 800af1c:	e9da 8900 	ldrd	r8, r9, [sl]
 800af20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800af24:	9b02      	ldr	r3, [sp, #8]
 800af26:	3b01      	subs	r3, #1
 800af28:	9302      	str	r3, [sp, #8]
 800af2a:	4632      	mov	r2, r6
 800af2c:	463b      	mov	r3, r7
 800af2e:	4640      	mov	r0, r8
 800af30:	4649      	mov	r1, r9
 800af32:	f7f5 f9cb 	bl	80002cc <__adddf3>
 800af36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	4640      	mov	r0, r8
 800af40:	4649      	mov	r1, r9
 800af42:	f7f5 f9c1 	bl	80002c8 <__aeabi_dsub>
 800af46:	4632      	mov	r2, r6
 800af48:	463b      	mov	r3, r7
 800af4a:	f7f5 f9bf 	bl	80002cc <__adddf3>
 800af4e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800af52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af56:	ed8a 7b00 	vstr	d7, [sl]
 800af5a:	e76e      	b.n	800ae3a <__kernel_rem_pio2+0x50a>
 800af5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800af60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800af64:	4640      	mov	r0, r8
 800af66:	4632      	mov	r2, r6
 800af68:	463b      	mov	r3, r7
 800af6a:	4649      	mov	r1, r9
 800af6c:	f7f5 f9ae 	bl	80002cc <__adddf3>
 800af70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4640      	mov	r0, r8
 800af7a:	4649      	mov	r1, r9
 800af7c:	f7f5 f9a4 	bl	80002c8 <__aeabi_dsub>
 800af80:	4632      	mov	r2, r6
 800af82:	463b      	mov	r3, r7
 800af84:	f7f5 f9a2 	bl	80002cc <__adddf3>
 800af88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800af90:	ed84 7b00 	vstr	d7, [r4]
 800af94:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af98:	e755      	b.n	800ae46 <__kernel_rem_pio2+0x516>
 800af9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af9e:	f7f5 f995 	bl	80002cc <__adddf3>
 800afa2:	3d01      	subs	r5, #1
 800afa4:	e759      	b.n	800ae5a <__kernel_rem_pio2+0x52a>
 800afa6:	9b01      	ldr	r3, [sp, #4]
 800afa8:	9a01      	ldr	r2, [sp, #4]
 800afaa:	601d      	str	r5, [r3, #0]
 800afac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800afb0:	605c      	str	r4, [r3, #4]
 800afb2:	609f      	str	r7, [r3, #8]
 800afb4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800afb8:	60d3      	str	r3, [r2, #12]
 800afba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afbe:	6110      	str	r0, [r2, #16]
 800afc0:	6153      	str	r3, [r2, #20]
 800afc2:	e728      	b.n	800ae16 <__kernel_rem_pio2+0x4e6>
 800afc4:	41700000 	.word	0x41700000
 800afc8:	3e700000 	.word	0x3e700000
 800afcc:	00000000 	.word	0x00000000

0800afd0 <__kernel_sin>:
 800afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	ed2d 8b04 	vpush	{d8-d9}
 800afd8:	eeb0 8a41 	vmov.f32	s16, s2
 800afdc:	eef0 8a61 	vmov.f32	s17, s3
 800afe0:	ec55 4b10 	vmov	r4, r5, d0
 800afe4:	b083      	sub	sp, #12
 800afe6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800afea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800afee:	9001      	str	r0, [sp, #4]
 800aff0:	da06      	bge.n	800b000 <__kernel_sin+0x30>
 800aff2:	ee10 0a10 	vmov	r0, s0
 800aff6:	4629      	mov	r1, r5
 800aff8:	f7f5 fdce 	bl	8000b98 <__aeabi_d2iz>
 800affc:	2800      	cmp	r0, #0
 800affe:	d051      	beq.n	800b0a4 <__kernel_sin+0xd4>
 800b000:	4622      	mov	r2, r4
 800b002:	462b      	mov	r3, r5
 800b004:	4620      	mov	r0, r4
 800b006:	4629      	mov	r1, r5
 800b008:	f7f5 fb16 	bl	8000638 <__aeabi_dmul>
 800b00c:	4682      	mov	sl, r0
 800b00e:	468b      	mov	fp, r1
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4620      	mov	r0, r4
 800b016:	4629      	mov	r1, r5
 800b018:	f7f5 fb0e 	bl	8000638 <__aeabi_dmul>
 800b01c:	a341      	add	r3, pc, #260	; (adr r3, 800b124 <__kernel_sin+0x154>)
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	4680      	mov	r8, r0
 800b024:	4689      	mov	r9, r1
 800b026:	4650      	mov	r0, sl
 800b028:	4659      	mov	r1, fp
 800b02a:	f7f5 fb05 	bl	8000638 <__aeabi_dmul>
 800b02e:	a33f      	add	r3, pc, #252	; (adr r3, 800b12c <__kernel_sin+0x15c>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f7f5 f948 	bl	80002c8 <__aeabi_dsub>
 800b038:	4652      	mov	r2, sl
 800b03a:	465b      	mov	r3, fp
 800b03c:	f7f5 fafc 	bl	8000638 <__aeabi_dmul>
 800b040:	a33c      	add	r3, pc, #240	; (adr r3, 800b134 <__kernel_sin+0x164>)
 800b042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b046:	f7f5 f941 	bl	80002cc <__adddf3>
 800b04a:	4652      	mov	r2, sl
 800b04c:	465b      	mov	r3, fp
 800b04e:	f7f5 faf3 	bl	8000638 <__aeabi_dmul>
 800b052:	a33a      	add	r3, pc, #232	; (adr r3, 800b13c <__kernel_sin+0x16c>)
 800b054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b058:	f7f5 f936 	bl	80002c8 <__aeabi_dsub>
 800b05c:	4652      	mov	r2, sl
 800b05e:	465b      	mov	r3, fp
 800b060:	f7f5 faea 	bl	8000638 <__aeabi_dmul>
 800b064:	a337      	add	r3, pc, #220	; (adr r3, 800b144 <__kernel_sin+0x174>)
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	f7f5 f92f 	bl	80002cc <__adddf3>
 800b06e:	9b01      	ldr	r3, [sp, #4]
 800b070:	4606      	mov	r6, r0
 800b072:	460f      	mov	r7, r1
 800b074:	b9eb      	cbnz	r3, 800b0b2 <__kernel_sin+0xe2>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4650      	mov	r0, sl
 800b07c:	4659      	mov	r1, fp
 800b07e:	f7f5 fadb 	bl	8000638 <__aeabi_dmul>
 800b082:	a325      	add	r3, pc, #148	; (adr r3, 800b118 <__kernel_sin+0x148>)
 800b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b088:	f7f5 f91e 	bl	80002c8 <__aeabi_dsub>
 800b08c:	4642      	mov	r2, r8
 800b08e:	464b      	mov	r3, r9
 800b090:	f7f5 fad2 	bl	8000638 <__aeabi_dmul>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	4620      	mov	r0, r4
 800b09a:	4629      	mov	r1, r5
 800b09c:	f7f5 f916 	bl	80002cc <__adddf3>
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	460d      	mov	r5, r1
 800b0a4:	ec45 4b10 	vmov	d0, r4, r5
 800b0a8:	b003      	add	sp, #12
 800b0aa:	ecbd 8b04 	vpop	{d8-d9}
 800b0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b2:	4b1b      	ldr	r3, [pc, #108]	; (800b120 <__kernel_sin+0x150>)
 800b0b4:	ec51 0b18 	vmov	r0, r1, d8
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f7f5 fabd 	bl	8000638 <__aeabi_dmul>
 800b0be:	4632      	mov	r2, r6
 800b0c0:	ec41 0b19 	vmov	d9, r0, r1
 800b0c4:	463b      	mov	r3, r7
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	f7f5 fab5 	bl	8000638 <__aeabi_dmul>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	ec51 0b19 	vmov	r0, r1, d9
 800b0d6:	f7f5 f8f7 	bl	80002c8 <__aeabi_dsub>
 800b0da:	4652      	mov	r2, sl
 800b0dc:	465b      	mov	r3, fp
 800b0de:	f7f5 faab 	bl	8000638 <__aeabi_dmul>
 800b0e2:	ec53 2b18 	vmov	r2, r3, d8
 800b0e6:	f7f5 f8ef 	bl	80002c8 <__aeabi_dsub>
 800b0ea:	a30b      	add	r3, pc, #44	; (adr r3, 800b118 <__kernel_sin+0x148>)
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	460f      	mov	r7, r1
 800b0f4:	4640      	mov	r0, r8
 800b0f6:	4649      	mov	r1, r9
 800b0f8:	f7f5 fa9e 	bl	8000638 <__aeabi_dmul>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4630      	mov	r0, r6
 800b102:	4639      	mov	r1, r7
 800b104:	f7f5 f8e2 	bl	80002cc <__adddf3>
 800b108:	4602      	mov	r2, r0
 800b10a:	460b      	mov	r3, r1
 800b10c:	4620      	mov	r0, r4
 800b10e:	4629      	mov	r1, r5
 800b110:	f7f5 f8da 	bl	80002c8 <__aeabi_dsub>
 800b114:	e7c4      	b.n	800b0a0 <__kernel_sin+0xd0>
 800b116:	bf00      	nop
 800b118:	55555549 	.word	0x55555549
 800b11c:	3fc55555 	.word	0x3fc55555
 800b120:	3fe00000 	.word	0x3fe00000
 800b124:	5acfd57c 	.word	0x5acfd57c
 800b128:	3de5d93a 	.word	0x3de5d93a
 800b12c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b130:	3e5ae5e6 	.word	0x3e5ae5e6
 800b134:	57b1fe7d 	.word	0x57b1fe7d
 800b138:	3ec71de3 	.word	0x3ec71de3
 800b13c:	19c161d5 	.word	0x19c161d5
 800b140:	3f2a01a0 	.word	0x3f2a01a0
 800b144:	1110f8a6 	.word	0x1110f8a6
 800b148:	3f811111 	.word	0x3f811111

0800b14c <fabs>:
 800b14c:	ec51 0b10 	vmov	r0, r1, d0
 800b150:	ee10 2a10 	vmov	r2, s0
 800b154:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b158:	ec43 2b10 	vmov	d0, r2, r3
 800b15c:	4770      	bx	lr
	...

0800b160 <floor>:
 800b160:	ec51 0b10 	vmov	r0, r1, d0
 800b164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b168:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b16c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b170:	2e13      	cmp	r6, #19
 800b172:	ee10 5a10 	vmov	r5, s0
 800b176:	ee10 8a10 	vmov	r8, s0
 800b17a:	460c      	mov	r4, r1
 800b17c:	dc32      	bgt.n	800b1e4 <floor+0x84>
 800b17e:	2e00      	cmp	r6, #0
 800b180:	da14      	bge.n	800b1ac <floor+0x4c>
 800b182:	a333      	add	r3, pc, #204	; (adr r3, 800b250 <floor+0xf0>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f7f5 f8a0 	bl	80002cc <__adddf3>
 800b18c:	2200      	movs	r2, #0
 800b18e:	2300      	movs	r3, #0
 800b190:	f7f5 fce2 	bl	8000b58 <__aeabi_dcmpgt>
 800b194:	b138      	cbz	r0, 800b1a6 <floor+0x46>
 800b196:	2c00      	cmp	r4, #0
 800b198:	da57      	bge.n	800b24a <floor+0xea>
 800b19a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b19e:	431d      	orrs	r5, r3
 800b1a0:	d001      	beq.n	800b1a6 <floor+0x46>
 800b1a2:	4c2d      	ldr	r4, [pc, #180]	; (800b258 <floor+0xf8>)
 800b1a4:	2500      	movs	r5, #0
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	e025      	b.n	800b1f8 <floor+0x98>
 800b1ac:	4f2b      	ldr	r7, [pc, #172]	; (800b25c <floor+0xfc>)
 800b1ae:	4137      	asrs	r7, r6
 800b1b0:	ea01 0307 	and.w	r3, r1, r7
 800b1b4:	4303      	orrs	r3, r0
 800b1b6:	d01f      	beq.n	800b1f8 <floor+0x98>
 800b1b8:	a325      	add	r3, pc, #148	; (adr r3, 800b250 <floor+0xf0>)
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	f7f5 f885 	bl	80002cc <__adddf3>
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f7f5 fcc7 	bl	8000b58 <__aeabi_dcmpgt>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d0eb      	beq.n	800b1a6 <floor+0x46>
 800b1ce:	2c00      	cmp	r4, #0
 800b1d0:	bfbe      	ittt	lt
 800b1d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b1d6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b1da:	19a4      	addlt	r4, r4, r6
 800b1dc:	ea24 0407 	bic.w	r4, r4, r7
 800b1e0:	2500      	movs	r5, #0
 800b1e2:	e7e0      	b.n	800b1a6 <floor+0x46>
 800b1e4:	2e33      	cmp	r6, #51	; 0x33
 800b1e6:	dd0b      	ble.n	800b200 <floor+0xa0>
 800b1e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b1ec:	d104      	bne.n	800b1f8 <floor+0x98>
 800b1ee:	ee10 2a10 	vmov	r2, s0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	f7f5 f86a 	bl	80002cc <__adddf3>
 800b1f8:	ec41 0b10 	vmov	d0, r0, r1
 800b1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b200:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b204:	f04f 33ff 	mov.w	r3, #4294967295
 800b208:	fa23 f707 	lsr.w	r7, r3, r7
 800b20c:	4207      	tst	r7, r0
 800b20e:	d0f3      	beq.n	800b1f8 <floor+0x98>
 800b210:	a30f      	add	r3, pc, #60	; (adr r3, 800b250 <floor+0xf0>)
 800b212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b216:	f7f5 f859 	bl	80002cc <__adddf3>
 800b21a:	2200      	movs	r2, #0
 800b21c:	2300      	movs	r3, #0
 800b21e:	f7f5 fc9b 	bl	8000b58 <__aeabi_dcmpgt>
 800b222:	2800      	cmp	r0, #0
 800b224:	d0bf      	beq.n	800b1a6 <floor+0x46>
 800b226:	2c00      	cmp	r4, #0
 800b228:	da02      	bge.n	800b230 <floor+0xd0>
 800b22a:	2e14      	cmp	r6, #20
 800b22c:	d103      	bne.n	800b236 <floor+0xd6>
 800b22e:	3401      	adds	r4, #1
 800b230:	ea25 0507 	bic.w	r5, r5, r7
 800b234:	e7b7      	b.n	800b1a6 <floor+0x46>
 800b236:	2301      	movs	r3, #1
 800b238:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b23c:	fa03 f606 	lsl.w	r6, r3, r6
 800b240:	4435      	add	r5, r6
 800b242:	4545      	cmp	r5, r8
 800b244:	bf38      	it	cc
 800b246:	18e4      	addcc	r4, r4, r3
 800b248:	e7f2      	b.n	800b230 <floor+0xd0>
 800b24a:	2500      	movs	r5, #0
 800b24c:	462c      	mov	r4, r5
 800b24e:	e7aa      	b.n	800b1a6 <floor+0x46>
 800b250:	8800759c 	.word	0x8800759c
 800b254:	7e37e43c 	.word	0x7e37e43c
 800b258:	bff00000 	.word	0xbff00000
 800b25c:	000fffff 	.word	0x000fffff

0800b260 <scalbn>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	ec55 4b10 	vmov	r4, r5, d0
 800b266:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b26a:	4606      	mov	r6, r0
 800b26c:	462b      	mov	r3, r5
 800b26e:	b99a      	cbnz	r2, 800b298 <scalbn+0x38>
 800b270:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b274:	4323      	orrs	r3, r4
 800b276:	d036      	beq.n	800b2e6 <scalbn+0x86>
 800b278:	4b39      	ldr	r3, [pc, #228]	; (800b360 <scalbn+0x100>)
 800b27a:	4629      	mov	r1, r5
 800b27c:	ee10 0a10 	vmov	r0, s0
 800b280:	2200      	movs	r2, #0
 800b282:	f7f5 f9d9 	bl	8000638 <__aeabi_dmul>
 800b286:	4b37      	ldr	r3, [pc, #220]	; (800b364 <scalbn+0x104>)
 800b288:	429e      	cmp	r6, r3
 800b28a:	4604      	mov	r4, r0
 800b28c:	460d      	mov	r5, r1
 800b28e:	da10      	bge.n	800b2b2 <scalbn+0x52>
 800b290:	a32b      	add	r3, pc, #172	; (adr r3, 800b340 <scalbn+0xe0>)
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	e03a      	b.n	800b30e <scalbn+0xae>
 800b298:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b29c:	428a      	cmp	r2, r1
 800b29e:	d10c      	bne.n	800b2ba <scalbn+0x5a>
 800b2a0:	ee10 2a10 	vmov	r2, s0
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	f7f5 f810 	bl	80002cc <__adddf3>
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	460d      	mov	r5, r1
 800b2b0:	e019      	b.n	800b2e6 <scalbn+0x86>
 800b2b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	3a36      	subs	r2, #54	; 0x36
 800b2ba:	4432      	add	r2, r6
 800b2bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b2c0:	428a      	cmp	r2, r1
 800b2c2:	dd08      	ble.n	800b2d6 <scalbn+0x76>
 800b2c4:	2d00      	cmp	r5, #0
 800b2c6:	a120      	add	r1, pc, #128	; (adr r1, 800b348 <scalbn+0xe8>)
 800b2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2cc:	da1c      	bge.n	800b308 <scalbn+0xa8>
 800b2ce:	a120      	add	r1, pc, #128	; (adr r1, 800b350 <scalbn+0xf0>)
 800b2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d4:	e018      	b.n	800b308 <scalbn+0xa8>
 800b2d6:	2a00      	cmp	r2, #0
 800b2d8:	dd08      	ble.n	800b2ec <scalbn+0x8c>
 800b2da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b2e6:	ec45 4b10 	vmov	d0, r4, r5
 800b2ea:	bd70      	pop	{r4, r5, r6, pc}
 800b2ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b2f0:	da19      	bge.n	800b326 <scalbn+0xc6>
 800b2f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b2f6:	429e      	cmp	r6, r3
 800b2f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b2fc:	dd0a      	ble.n	800b314 <scalbn+0xb4>
 800b2fe:	a112      	add	r1, pc, #72	; (adr r1, 800b348 <scalbn+0xe8>)
 800b300:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e2      	bne.n	800b2ce <scalbn+0x6e>
 800b308:	a30f      	add	r3, pc, #60	; (adr r3, 800b348 <scalbn+0xe8>)
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	f7f5 f993 	bl	8000638 <__aeabi_dmul>
 800b312:	e7cb      	b.n	800b2ac <scalbn+0x4c>
 800b314:	a10a      	add	r1, pc, #40	; (adr r1, 800b340 <scalbn+0xe0>)
 800b316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0b8      	beq.n	800b290 <scalbn+0x30>
 800b31e:	a10e      	add	r1, pc, #56	; (adr r1, 800b358 <scalbn+0xf8>)
 800b320:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b324:	e7b4      	b.n	800b290 <scalbn+0x30>
 800b326:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b32a:	3236      	adds	r2, #54	; 0x36
 800b32c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b330:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b334:	4620      	mov	r0, r4
 800b336:	4b0c      	ldr	r3, [pc, #48]	; (800b368 <scalbn+0x108>)
 800b338:	2200      	movs	r2, #0
 800b33a:	e7e8      	b.n	800b30e <scalbn+0xae>
 800b33c:	f3af 8000 	nop.w
 800b340:	c2f8f359 	.word	0xc2f8f359
 800b344:	01a56e1f 	.word	0x01a56e1f
 800b348:	8800759c 	.word	0x8800759c
 800b34c:	7e37e43c 	.word	0x7e37e43c
 800b350:	8800759c 	.word	0x8800759c
 800b354:	fe37e43c 	.word	0xfe37e43c
 800b358:	c2f8f359 	.word	0xc2f8f359
 800b35c:	81a56e1f 	.word	0x81a56e1f
 800b360:	43500000 	.word	0x43500000
 800b364:	ffff3cb0 	.word	0xffff3cb0
 800b368:	3c900000 	.word	0x3c900000

0800b36c <_init>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr

0800b378 <_fini>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	bf00      	nop
 800b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37e:	bc08      	pop	{r3}
 800b380:	469e      	mov	lr, r3
 800b382:	4770      	bx	lr
