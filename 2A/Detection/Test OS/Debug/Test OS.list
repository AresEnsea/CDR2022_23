
Test OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f4c  08005f4c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f54  08005f54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f54  08005f54  00015f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b14  20000074  08005fd0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b88  08005fd0  00024b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b52  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a9  00000000  00000000  00039bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0003d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001370  00000000  00000000  0003e538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032f8  00000000  00000000  0003f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166d7  00000000  00000000  00042ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088de6  00000000  00000000  00059277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e205d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f0  00000000  00000000  000e20b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e38 	.word	0x08005e38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005e38 	.word	0x08005e38

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 face 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f828 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8fc 	bl	800071c <MX_GPIO_Init>
  MX_TIM5_Init();
 8000524:	f000 f882 	bl	800062c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000528:	f000 f8ce 	bl	80006c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int true;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052c:	f002 fe0c 	bl	8003148 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of checkDistance */
  checkDistanceHandle = osThreadNew(StartDefaultTask, NULL, &checkDistance_attributes);
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <main+0x44>)
 8000532:	2100      	movs	r1, #0
 8000534:	4809      	ldr	r0, [pc, #36]	; (800055c <main+0x48>)
 8000536:	f002 fe51 	bl	80031dc <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a08      	ldr	r2, [pc, #32]	; (8000560 <main+0x4c>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <main+0x50>)
 8000542:	2100      	movs	r1, #0
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <main+0x54>)
 8000546:	f002 fe49 	bl	80031dc <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <main+0x58>)
 800054e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000550:	f002 fe1e 	bl	8003190 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x40>
 8000556:	bf00      	nop
 8000558:	08005e8c 	.word	0x08005e8c
 800055c:	08000781 	.word	0x08000781
 8000560:	2000011c 	.word	0x2000011c
 8000564:	08005eb0 	.word	0x08005eb0
 8000568:	080007bd 	.word	0x080007bd
 800056c:	20000120 	.word	0x20000120

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2234      	movs	r2, #52	; 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f005 fb90 	bl	8005ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xb4>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xb4>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xb4>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <SystemClock_Config+0xb8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <SystemClock_Config+0xb8>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <SystemClock_Config+0xb8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 ffd9 	bl	8001598 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005ec:	f000 f902 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fdb2 	bl	8001174 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000616:	f000 f8ed 	bl	80007f4 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_TIM5_Init+0x94>)
 800064a:	4a1e      	ldr	r2, [pc, #120]	; (80006c4 <MX_TIM5_Init+0x98>)
 800064c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_TIM5_Init+0x94>)
 8000650:	22f9      	movs	r2, #249	; 0xf9
 8000652:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_TIM5_Init+0x94>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_TIM5_Init+0x94>)
 800065c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000660:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_TIM5_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_TIM5_Init+0x94>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <MX_TIM5_Init+0x94>)
 8000670:	f001 fa16 	bl	8001aa0 <HAL_TIM_Base_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800067a:	f000 f8bb 	bl	80007f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	4619      	mov	r1, r3
 800068a:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_TIM5_Init+0x94>)
 800068c:	f001 fbae 	bl	8001dec <HAL_TIM_ConfigClockSource>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 f8ad 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_TIM5_Init+0x94>)
 80006a8:	f001 fd88 	bl	80021bc <HAL_TIMEx_MasterConfigSynchronization>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80006b2:	f000 f89f 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000090 	.word	0x20000090
 80006c4:	40000c00 	.word	0x40000c00

080006c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_USART1_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART1_UART_Init+0x4c>)
 8000700:	f001 fdca 	bl	8002298 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f873 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000d8 	.word	0x200000d8
 8000718:	40011000 	.word	0x40011000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <MX_GPIO_Init+0x5c>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6313      	str	r3, [r2, #48]	; 0x30
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_GPIO_Init+0x5c>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2120      	movs	r1, #32
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <MX_GPIO_Init+0x60>)
 8000752:	f000 fcdb 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000756:	2320      	movs	r3, #32
 8000758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0x60>)
 800076c:	f000 fb5a 	bl	8000e24 <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000

08000780 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t n = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	75fb      	strb	r3, [r7, #23]
	int dist = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	613b      	str	r3, [r7, #16]
	float angle = 90;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <StartDefaultTask+0x34>)
 8000792:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  n+= 10;
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	330a      	adds	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
	  //double * distance = positionRelative(n, dist, angle);
	  if(n > 100)
 800079a:	7dfb      	ldrb	r3, [r7, #23]
 800079c:	2b64      	cmp	r3, #100	; 0x64
 800079e:	d903      	bls.n	80007a8 <StartDefaultTask+0x28>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007a0:	2120      	movs	r1, #32
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <StartDefaultTask+0x38>)
 80007a4:	f000 fccb 	bl	800113e <HAL_GPIO_TogglePin>
	  osDelay(500);
 80007a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ac:	f002 fda8 	bl	8003300 <osDelay>
	  n+= 10;
 80007b0:	e7f0      	b.n	8000794 <StartDefaultTask+0x14>
 80007b2:	bf00      	nop
 80007b4:	42b40000 	.word	0x42b40000
 80007b8:	40020000 	.word	0x40020000

080007bc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    osDelay(500);
 80007c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c8:	f002 fd9a 	bl	8003300 <osDelay>
 80007cc:	e7fa      	b.n	80007c4 <StartTask02+0x8>
	...

080007d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e2:	f000 f98b 	bl	8000afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40010000 	.word	0x40010000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x54>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <HAL_MspInit+0x54>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_MspInit+0x54>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_MspInit+0x54>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	210f      	movs	r1, #15
 8000842:	f06f 0001 	mvn.w	r0, #1
 8000846:	f000 fa31 	bl	8000cac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <HAL_TIM_Base_MspInit+0x3c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d10d      	bne.n	8000886 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_TIM_Base_MspInit+0x40>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <HAL_TIM_Base_MspInit+0x40>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <HAL_TIM_Base_MspInit+0x40>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40000c00 	.word	0x40000c00
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <HAL_UART_MspInit+0x94>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d134      	bne.n	8000928 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_UART_MspInit+0x98>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000908:	2307      	movs	r3, #7
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <HAL_UART_MspInit+0x9c>)
 8000914:	f000 fa86 	bl	8000e24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2105      	movs	r1, #5
 800091c:	2025      	movs	r0, #37	; 0x25
 800091e:	f000 f9c5 	bl	8000cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000922:	2025      	movs	r0, #37	; 0x25
 8000924:	f000 f9de 	bl	8000ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	; 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40011000 	.word	0x40011000
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2019      	movs	r0, #25
 8000952:	f000 f9ab 	bl	8000cac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000956:	2019      	movs	r0, #25
 8000958:	f000 f9c4 	bl	8000ce4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <HAL_InitTick+0xa0>)
 8000962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000964:	4a1d      	ldr	r2, [pc, #116]	; (80009dc <HAL_InitTick+0xa0>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6453      	str	r3, [r2, #68]	; 0x44
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <HAL_InitTick+0xa0>)
 800096e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 0210 	add.w	r2, r7, #16
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fdd6 	bl	8001534 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000988:	f000 fdc0 	bl	800150c <HAL_RCC_GetPCLK2Freq>
 800098c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800098e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <HAL_InitTick+0xa4>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	0c9b      	lsrs	r3, r3, #18
 8000998:	3b01      	subs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_InitTick+0xa8>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <HAL_InitTick+0xac>)
 80009a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_InitTick+0xa8>)
 80009a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_InitTick+0xa8>)
 80009ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_InitTick+0xa8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_InitTick+0xa8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <HAL_InitTick+0xa8>)
 80009be:	f001 f86f 	bl	8001aa0 <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d104      	bne.n	80009d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <HAL_InitTick+0xa8>)
 80009ca:	f001 f8b9 	bl	8001b40 <HAL_TIM_Base_Start_IT>
 80009ce:	4603      	mov	r3, r0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	20000124 	.word	0x20000124
 80009e8:	40010000 	.word	0x40010000

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <TIM1_UP_IRQHandler+0x10>)
 8000a1e:	f001 f8dd 	bl	8001bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000124 	.word	0x20000124

08000a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <USART1_IRQHandler+0x10>)
 8000a32:	f001 fc7f 	bl	8002334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000d8 	.word	0x200000d8

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a6a:	490e      	ldr	r1, [pc, #56]	; (8000aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a6c:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a80:	4c0b      	ldr	r4, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a8e:	f7ff ffd7 	bl	8000a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f005 f8d3 	bl	8005c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a96:	f7ff fd3d 	bl	8000514 <main>
  bx  lr    
 8000a9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000aa8:	08005f5c 	.word	0x08005f5c
  ldr r2, =_sbss
 8000aac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ab0:	20004b88 	.word	0x20004b88

08000ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <HAL_Init+0x40>)
 8000ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_Init+0x40>)
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_Init+0x40>)
 8000ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f8d8 	bl	8000c96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	200f      	movs	r0, #15
 8000ae8:	f7ff ff28 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff fe88 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023c00 	.word	0x40023c00

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	2000016c 	.word	0x2000016c

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000016c 	.word	0x2000016c

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <__NVIC_EnableIRQ+0x38>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff4c 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbe:	f7ff ff61 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000cc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	68b9      	ldr	r1, [r7, #8]
 8000cc8:	6978      	ldr	r0, [r7, #20]
 8000cca:	f7ff ffb1 	bl	8000c30 <NVIC_EncodePriority>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff80 	bl	8000bdc <__NVIC_SetPriority>
}
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff54 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d0e:	f7ff ff09 	bl	8000b24 <HAL_GetTick>
 8000d12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d008      	beq.n	8000d32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e052      	b.n	8000dd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0216 	bic.w	r2, r2, #22
 8000d40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	695a      	ldr	r2, [r3, #20]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d103      	bne.n	8000d62 <HAL_DMA_Abort+0x62>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0208 	bic.w	r2, r2, #8
 8000d70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0201 	bic.w	r2, r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d82:	e013      	b.n	8000dac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d84:	f7ff fece 	bl	8000b24 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	d90c      	bls.n	8000dac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2220      	movs	r2, #32
 8000d96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e015      	b.n	8000dd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1e4      	bne.n	8000d84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dbe:	223f      	movs	r2, #63	; 0x3f
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d004      	beq.n	8000dfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00c      	b.n	8000e18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2205      	movs	r2, #5
 8000e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0201 	bic.w	r2, r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e14d      	b.n	80010dc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 813c 	bne.w	80010d6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d130      	bne.n	8000ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d017      	beq.n	8000f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 8096 	beq.w	80010d6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b51      	ldr	r3, [pc, #324]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a50      	ldr	r2, [pc, #320]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	4a4c      	ldr	r2, [pc, #304]	; (80010f8 <HAL_GPIO_Init+0x2d4>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a43      	ldr	r2, [pc, #268]	; (80010fc <HAL_GPIO_Init+0x2d8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x1ea>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a42      	ldr	r2, [pc, #264]	; (8001100 <HAL_GPIO_Init+0x2dc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x1e6>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a41      	ldr	r2, [pc, #260]	; (8001104 <HAL_GPIO_Init+0x2e0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x1e2>
 8001002:	2302      	movs	r3, #2
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x1ec>
 8001006:	2307      	movs	r3, #7
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x1ec>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x1ec>
 800100e:	2300      	movs	r3, #0
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f002 0203 	and.w	r2, r2, #3
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001020:	4935      	ldr	r1, [pc, #212]	; (80010f8 <HAL_GPIO_Init+0x2d4>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102e:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001052:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800107c:	4a22      	ldr	r2, [pc, #136]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a6:	4a18      	ldr	r2, [pc, #96]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_GPIO_Init+0x2e4>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	f67f aeae 	bls.w	8000e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020400 	.word	0x40020400
 8001104:	40020800 	.word	0x40020800
 8001108:	40013c00 	.word	0x40013c00

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001128:	e003      	b.n	8001132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	041a      	lsls	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113e:	b480      	push	{r7}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001150:	887a      	ldrh	r2, [r7, #2]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	041a      	lsls	r2, r3, #16
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43d9      	mvns	r1, r3
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	400b      	ands	r3, r1
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	619a      	str	r2, [r3, #24]
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0cc      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001188:	4b68      	ldr	r3, [pc, #416]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d90c      	bls.n	80011b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4b65      	ldr	r3, [pc, #404]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b63      	ldr	r3, [pc, #396]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0b8      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d020      	beq.n	80011fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c8:	4b59      	ldr	r3, [pc, #356]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4a58      	ldr	r2, [pc, #352]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e0:	4b53      	ldr	r3, [pc, #332]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a52      	ldr	r2, [pc, #328]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ec:	4b50      	ldr	r3, [pc, #320]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	494d      	ldr	r1, [pc, #308]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d044      	beq.n	8001294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d119      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e07f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d003      	beq.n	8001232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800122e:	2b03      	cmp	r3, #3
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e06f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e067      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001252:	4b37      	ldr	r3, [pc, #220]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f023 0203 	bic.w	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4934      	ldr	r1, [pc, #208]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	4313      	orrs	r3, r2
 8001262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001264:	f7ff fc5e 	bl	8000b24 <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	e00a      	b.n	8001282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f7ff fc5a 	bl	8000b24 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	; 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e04f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 020c 	and.w	r2, r3, #12
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	429a      	cmp	r2, r3
 8001292:	d1eb      	bne.n	800126c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d20c      	bcs.n	80012bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e032      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4916      	ldr	r1, [pc, #88]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d009      	beq.n	80012fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	490e      	ldr	r1, [pc, #56]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012fa:	f000 f821 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	490a      	ldr	r1, [pc, #40]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	5ccb      	ldrb	r3, [r1, r3]
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_RCC_ClockConfig+0x1c8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fb0e 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023c00 	.word	0x40023c00
 8001330:	40023800 	.word	0x40023800
 8001334:	08005ed4 	.word	0x08005ed4
 8001338:	20000000 	.word	0x20000000
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001344:	b090      	sub	sp, #64	; 0x40
 8001346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
 800134c:	2300      	movs	r3, #0
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001358:	4b59      	ldr	r3, [pc, #356]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b08      	cmp	r3, #8
 8001362:	d00d      	beq.n	8001380 <HAL_RCC_GetSysClockFreq+0x40>
 8001364:	2b08      	cmp	r3, #8
 8001366:	f200 80a1 	bhi.w	80014ac <HAL_RCC_GetSysClockFreq+0x16c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x34>
 800136e:	2b04      	cmp	r3, #4
 8001370:	d003      	beq.n	800137a <HAL_RCC_GetSysClockFreq+0x3a>
 8001372:	e09b      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001374:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001378:	e09b      	b.n	80014b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800137a:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800137e:	e098      	b.n	80014b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001380:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800138a:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d028      	beq.n	80013e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001396:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	099b      	lsrs	r3, r3, #6
 800139c:	2200      	movs	r2, #0
 800139e:	623b      	str	r3, [r7, #32]
 80013a0:	627a      	str	r2, [r7, #36]	; 0x24
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013a8:	2100      	movs	r1, #0
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80013ac:	fb03 f201 	mul.w	r2, r3, r1
 80013b0:	2300      	movs	r3, #0
 80013b2:	fb00 f303 	mul.w	r3, r0, r3
 80013b6:	4413      	add	r3, r2
 80013b8:	4a43      	ldr	r2, [pc, #268]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80013ba:	fba0 1202 	umull	r1, r2, r0, r2
 80013be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013c0:	460a      	mov	r2, r1
 80013c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80013c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013c6:	4413      	add	r3, r2
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013cc:	2200      	movs	r2, #0
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	61fa      	str	r2, [r7, #28]
 80013d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013da:	f7fe ff19 	bl	8000210 <__aeabi_uldivmod>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4613      	mov	r3, r2
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013e6:	e053      	b.n	8001490 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	099b      	lsrs	r3, r3, #6
 80013ee:	2200      	movs	r2, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	617a      	str	r2, [r7, #20]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013fa:	f04f 0b00 	mov.w	fp, #0
 80013fe:	4652      	mov	r2, sl
 8001400:	465b      	mov	r3, fp
 8001402:	f04f 0000 	mov.w	r0, #0
 8001406:	f04f 0100 	mov.w	r1, #0
 800140a:	0159      	lsls	r1, r3, #5
 800140c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001410:	0150      	lsls	r0, r2, #5
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	ebb2 080a 	subs.w	r8, r2, sl
 800141a:	eb63 090b 	sbc.w	r9, r3, fp
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800142a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800142e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001432:	ebb2 0408 	subs.w	r4, r2, r8
 8001436:	eb63 0509 	sbc.w	r5, r3, r9
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	00eb      	lsls	r3, r5, #3
 8001444:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001448:	00e2      	lsls	r2, r4, #3
 800144a:	4614      	mov	r4, r2
 800144c:	461d      	mov	r5, r3
 800144e:	eb14 030a 	adds.w	r3, r4, sl
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	eb45 030b 	adc.w	r3, r5, fp
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001466:	4629      	mov	r1, r5
 8001468:	028b      	lsls	r3, r1, #10
 800146a:	4621      	mov	r1, r4
 800146c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001470:	4621      	mov	r1, r4
 8001472:	028a      	lsls	r2, r1, #10
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147a:	2200      	movs	r2, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	60fa      	str	r2, [r7, #12]
 8001480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001484:	f7fe fec4 	bl	8000210 <__aeabi_uldivmod>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4613      	mov	r3, r2
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	0c1b      	lsrs	r3, r3, #16
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	3301      	adds	r3, #1
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80014a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80014aa:	e002      	b.n	80014b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80014b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3740      	adds	r7, #64	; 0x40
 80014b8:	46bd      	mov	sp, r7
 80014ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	00f42400 	.word	0x00f42400
 80014c8:	017d7840 	.word	0x017d7840

080014cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000000 	.word	0x20000000

080014e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014e8:	f7ff fff0 	bl	80014cc <HAL_RCC_GetHCLKFreq>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	0a9b      	lsrs	r3, r3, #10
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	4903      	ldr	r1, [pc, #12]	; (8001508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	08005ee4 	.word	0x08005ee4

0800150c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001510:	f7ff ffdc 	bl	80014cc <HAL_RCC_GetHCLKFreq>
 8001514:	4602      	mov	r2, r0
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	0b5b      	lsrs	r3, r3, #13
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	4903      	ldr	r1, [pc, #12]	; (8001530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001522:	5ccb      	ldrb	r3, [r1, r3]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001528:	4618      	mov	r0, r3
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	08005ee4 	.word	0x08005ee4

08001534 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	220f      	movs	r2, #15
 8001542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_GetClockConfig+0x5c>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0203 	and.w	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_RCC_GetClockConfig+0x5c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_RCC_GetClockConfig+0x5c>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_GetClockConfig+0x5c>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	08db      	lsrs	r3, r3, #3
 800156e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_RCC_GetClockConfig+0x60>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0207 	and.w	r2, r3, #7
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	601a      	str	r2, [r3, #0]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40023c00 	.word	0x40023c00

08001598 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e273      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d075      	beq.n	80016a2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015b6:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d00c      	beq.n	80015dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c2:	4b85      	ldr	r3, [pc, #532]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d112      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ce:	4b82      	ldr	r3, [pc, #520]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015da:	d10b      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	4b7e      	ldr	r3, [pc, #504]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d05b      	beq.n	80016a0 <HAL_RCC_OscConfig+0x108>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d157      	bne.n	80016a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e24e      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d106      	bne.n	800160c <HAL_RCC_OscConfig+0x74>
 80015fe:	4b76      	ldr	r3, [pc, #472]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a75      	ldr	r2, [pc, #468]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e01d      	b.n	8001648 <HAL_RCC_OscConfig+0xb0>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x98>
 8001616:	4b70      	ldr	r3, [pc, #448]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6f      	ldr	r2, [pc, #444]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b6d      	ldr	r3, [pc, #436]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a6c      	ldr	r2, [pc, #432]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0xb0>
 8001630:	4b69      	ldr	r3, [pc, #420]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a68      	ldr	r2, [pc, #416]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a65      	ldr	r2, [pc, #404]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fa68 	bl	8000b24 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fa64 	bl	8000b24 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e213      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	4b5b      	ldr	r3, [pc, #364]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0xc0>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fa54 	bl	8000b24 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fa50 	bl	8000b24 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1ff      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0xe8>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d063      	beq.n	8001776 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ae:	4b4a      	ldr	r3, [pc, #296]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d11c      	bne.n	8001700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c6:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d116      	bne.n	8001700 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x152>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e1d3      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4937      	ldr	r1, [pc, #220]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	e03a      	b.n	8001776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001708:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_RCC_OscConfig+0x244>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff fa09 	bl	8000b24 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001716:	f7ff fa05 	bl	8000b24 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1b4      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4925      	ldr	r1, [pc, #148]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 8001744:	4313      	orrs	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
 8001748:	e015      	b.n	8001776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_RCC_OscConfig+0x244>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff f9e8 	bl	8000b24 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff f9e4 	bl	8000b24 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e193      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d036      	beq.n	80017f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d016      	beq.n	80017b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_RCC_OscConfig+0x248>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff f9c8 	bl	8000b24 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff f9c4 	bl	8000b24 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e173      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_RCC_OscConfig+0x240>)
 80017ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x200>
 80017b6:	e01b      	b.n	80017f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_RCC_OscConfig+0x248>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017be:	f7ff f9b1 	bl	8000b24 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	e00e      	b.n	80017e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c6:	f7ff f9ad 	bl	8000b24 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d907      	bls.n	80017e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e15c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
 80017d8:	40023800 	.word	0x40023800
 80017dc:	42470000 	.word	0x42470000
 80017e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	4b8a      	ldr	r3, [pc, #552]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 80017e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ea      	bne.n	80017c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 8097 	beq.w	800192c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001802:	4b83      	ldr	r3, [pc, #524]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10f      	bne.n	800182e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a7e      	ldr	r2, [pc, #504]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182a:	2301      	movs	r3, #1
 800182c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	4b79      	ldr	r3, [pc, #484]	; (8001a14 <HAL_RCC_OscConfig+0x47c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d118      	bne.n	800186c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183a:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <HAL_RCC_OscConfig+0x47c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a75      	ldr	r2, [pc, #468]	; (8001a14 <HAL_RCC_OscConfig+0x47c>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001846:	f7ff f96d 	bl	8000b24 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184e:	f7ff f969 	bl	8000b24 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e118      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	4b6c      	ldr	r3, [pc, #432]	; (8001a14 <HAL_RCC_OscConfig+0x47c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x2ea>
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	4a65      	ldr	r2, [pc, #404]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6713      	str	r3, [r2, #112]	; 0x70
 8001880:	e01c      	b.n	80018bc <HAL_RCC_OscConfig+0x324>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x30c>
 800188a:	4b61      	ldr	r3, [pc, #388]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	4a60      	ldr	r2, [pc, #384]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6713      	str	r3, [r2, #112]	; 0x70
 8001896:	4b5e      	ldr	r3, [pc, #376]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a5d      	ldr	r2, [pc, #372]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
 80018a2:	e00b      	b.n	80018bc <HAL_RCC_OscConfig+0x324>
 80018a4:	4b5a      	ldr	r3, [pc, #360]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	4a59      	ldr	r2, [pc, #356]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	6713      	str	r3, [r2, #112]	; 0x70
 80018b0:	4b57      	ldr	r3, [pc, #348]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	4a56      	ldr	r2, [pc, #344]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 80018b6:	f023 0304 	bic.w	r3, r3, #4
 80018ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d015      	beq.n	80018f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff f92e 	bl	8000b24 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018cc:	f7ff f92a 	bl	8000b24 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e0d7      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e2:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0ee      	beq.n	80018cc <HAL_RCC_OscConfig+0x334>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f0:	f7ff f918 	bl	8000b24 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f6:	e00a      	b.n	800190e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff f914 	bl	8000b24 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	; 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e0c1      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190e:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ee      	bne.n	80018f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d105      	bne.n	800192c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	4a3a      	ldr	r2, [pc, #232]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80ad 	beq.w	8001a90 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001936:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d060      	beq.n	8001a04 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d145      	bne.n	80019d6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194a:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <HAL_RCC_OscConfig+0x480>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f8e8 	bl	8000b24 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f8e4 	bl	8000b24 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e093      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	3b01      	subs	r3, #1
 8001990:	041b      	lsls	r3, r3, #16
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	061b      	lsls	r3, r3, #24
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	071b      	lsls	r3, r3, #28
 80019a2:	491b      	ldr	r1, [pc, #108]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x480>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f8b9 	bl	8000b24 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b6:	f7ff f8b5 	bl	8000b24 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e064      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x41e>
 80019d4:	e05c      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_RCC_OscConfig+0x480>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff f8a2 	bl	8000b24 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f89e 	bl	8000b24 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04d      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_OscConfig+0x478>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x44c>
 8001a02:	e045      	b.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e040      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40007000 	.word	0x40007000
 8001a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d030      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d129      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d122      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d119      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	3b01      	subs	r3, #1
 8001a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d10f      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e041      	b.n	8001b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fec6 	bl	8000858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3304      	adds	r3, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f000 fa74 	bl	8001fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e035      	b.n	8001bc4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <HAL_TIM_Base_Start_IT+0x90>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d009      	beq.n	8001b8e <HAL_TIM_Base_Start_IT+0x4e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <HAL_TIM_Base_Start_IT+0x94>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d004      	beq.n	8001b8e <HAL_TIM_Base_Start_IT+0x4e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_TIM_Base_Start_IT+0x98>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d111      	bne.n	8001bb2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b06      	cmp	r3, #6
 8001b9e:	d010      	beq.n	8001bc2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb0:	e007      	b.n	8001bc2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40000c00 	.word	0x40000c00
 8001bd8:	40014000 	.word	0x40014000

08001bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d122      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d11b      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0202 	mvn.w	r2, #2
 8001c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f9b5 	bl	8001f8e <HAL_TIM_IC_CaptureCallback>
 8001c24:	e005      	b.n	8001c32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f9a7 	bl	8001f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f9b8 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d122      	bne.n	8001c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d11b      	bne.n	8001c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0204 	mvn.w	r2, #4
 8001c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f98b 	bl	8001f8e <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f97d 	bl	8001f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f98e 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d122      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0208 	mvn.w	r2, #8
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f961 	bl	8001f8e <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f953 	bl	8001f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f964 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d122      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	d11b      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0210 	mvn.w	r2, #16
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2208      	movs	r2, #8
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f937 	bl	8001f8e <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f929 	bl	8001f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f93a 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10e      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0201 	mvn.w	r2, #1
 8001d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe fd38 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b80      	cmp	r3, #128	; 0x80
 8001d6c:	d10e      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d78:	2b80      	cmp	r3, #128	; 0x80
 8001d7a:	d107      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fa7c 	bl	8002284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d96:	2b40      	cmp	r3, #64	; 0x40
 8001d98:	d10e      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da4:	2b40      	cmp	r3, #64	; 0x40
 8001da6:	d107      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8ff 	bl	8001fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d10e      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d107      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0220 	mvn.w	r2, #32
 8001ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fa46 	bl	8002270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_TIM_ConfigClockSource+0x1c>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e0b4      	b.n	8001f72 <HAL_TIM_ConfigClockSource+0x186>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e40:	d03e      	beq.n	8001ec0 <HAL_TIM_ConfigClockSource+0xd4>
 8001e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e46:	f200 8087 	bhi.w	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4e:	f000 8086 	beq.w	8001f5e <HAL_TIM_ConfigClockSource+0x172>
 8001e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e56:	d87f      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e58:	2b70      	cmp	r3, #112	; 0x70
 8001e5a:	d01a      	beq.n	8001e92 <HAL_TIM_ConfigClockSource+0xa6>
 8001e5c:	2b70      	cmp	r3, #112	; 0x70
 8001e5e:	d87b      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e60:	2b60      	cmp	r3, #96	; 0x60
 8001e62:	d050      	beq.n	8001f06 <HAL_TIM_ConfigClockSource+0x11a>
 8001e64:	2b60      	cmp	r3, #96	; 0x60
 8001e66:	d877      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e68:	2b50      	cmp	r3, #80	; 0x50
 8001e6a:	d03c      	beq.n	8001ee6 <HAL_TIM_ConfigClockSource+0xfa>
 8001e6c:	2b50      	cmp	r3, #80	; 0x50
 8001e6e:	d873      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	d058      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0x13a>
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d86f      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e78:	2b30      	cmp	r3, #48	; 0x30
 8001e7a:	d064      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x15a>
 8001e7c:	2b30      	cmp	r3, #48	; 0x30
 8001e7e:	d86b      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d060      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x15a>
 8001e84:	2b20      	cmp	r3, #32
 8001e86:	d867      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d05c      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x15a>
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d05a      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x15a>
 8001e90:	e062      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f000 f96b 	bl	800217c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	609a      	str	r2, [r3, #8]
      break;
 8001ebe:	e04f      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f000 f954 	bl	800217c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ee2:	609a      	str	r2, [r3, #8]
      break;
 8001ee4:	e03c      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f000 f8c8 	bl	8002088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2150      	movs	r1, #80	; 0x50
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f921 	bl	8002146 <TIM_ITRx_SetConfig>
      break;
 8001f04:	e02c      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f000 f8e7 	bl	80020e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2160      	movs	r1, #96	; 0x60
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f911 	bl	8002146 <TIM_ITRx_SetConfig>
      break;
 8001f24:	e01c      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f000 f8a8 	bl	8002088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2140      	movs	r1, #64	; 0x40
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f901 	bl	8002146 <TIM_ITRx_SetConfig>
      break;
 8001f44:	e00c      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f000 f8f8 	bl	8002146 <TIM_ITRx_SetConfig>
      break;
 8001f56:	e003      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5c:	e000      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a26      	ldr	r2, [pc, #152]	; (8002078 <TIM_Base_SetConfig+0xac>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0x20>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a25      	ldr	r2, [pc, #148]	; (800207c <TIM_Base_SetConfig+0xb0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <TIM_Base_SetConfig+0xac>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00b      	beq.n	800201e <TIM_Base_SetConfig+0x52>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a1c      	ldr	r2, [pc, #112]	; (800207c <TIM_Base_SetConfig+0xb0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <TIM_Base_SetConfig+0x52>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <TIM_Base_SetConfig+0xb4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d003      	beq.n	800201e <TIM_Base_SetConfig+0x52>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <TIM_Base_SetConfig+0xb8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d108      	bne.n	8002030 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <TIM_Base_SetConfig+0xac>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d103      	bne.n	8002064 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	615a      	str	r2, [r3, #20]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40010000 	.word	0x40010000
 800207c:	40000c00 	.word	0x40000c00
 8002080:	40014000 	.word	0x40014000
 8002084:	40014800 	.word	0x40014800

08002088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	f023 0201 	bic.w	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f023 030a 	bic.w	r3, r3, #10
 80020c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	621a      	str	r2, [r3, #32]
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b087      	sub	sp, #28
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	f023 0210 	bic.w	r2, r3, #16
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	031b      	lsls	r3, r3, #12
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	621a      	str	r2, [r3, #32]
}
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	f043 0307 	orr.w	r3, r3, #7
 8002168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	609a      	str	r2, [r3, #8]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	021a      	lsls	r2, r3, #8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	431a      	orrs	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	609a      	str	r2, [r3, #8]
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e041      	b.n	8002258 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d10c      	bne.n	8002246 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	4313      	orrs	r3, r2
 800223c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40010000 	.word	0x40010000
 8002268:	40000c00 	.word	0x40000c00
 800226c:	40014000 	.word	0x40014000

08002270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e03f      	b.n	800232a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe faec 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fc7b 	bl	8002bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0ba      	sub	sp, #232	; 0xe8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800237a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_UART_IRQHandler+0x66>
 8002386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fb65 	bl	8002a62 <UART_Receive_IT>
      return;
 8002398:	e256      	b.n	8002848 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800239a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80de 	beq.w	8002560 <HAL_UART_IRQHandler+0x22c>
 80023a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d106      	bne.n	80023be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80d1 	beq.w	8002560 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_UART_IRQHandler+0xae>
 80023ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_UART_IRQHandler+0xd2>
 80023ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_UART_IRQHandler+0xf6>
 8002412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f043 0204 	orr.w	r2, r3, #4
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800242a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d011      	beq.n	800245a <HAL_UART_IRQHandler+0x126>
 8002436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f043 0208 	orr.w	r2, r3, #8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 81ed 	beq.w	800283e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_UART_IRQHandler+0x14e>
 8002470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 faf0 	bl	8002a62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248c:	2b40      	cmp	r3, #64	; 0x40
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <HAL_UART_IRQHandler+0x17a>
 80024a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d04f      	beq.n	800254e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f9f8 	bl	80028a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b40      	cmp	r3, #64	; 0x40
 80024c0:	d141      	bne.n	8002546 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3314      	adds	r3, #20
 80024c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024d0:	e853 3f00 	ldrex	r3, [r3]
 80024d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3314      	adds	r3, #20
 80024ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1d9      	bne.n	80024c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	2b00      	cmp	r3, #0
 8002514:	d013      	beq.n	800253e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	4a7d      	ldr	r2, [pc, #500]	; (8002710 <HAL_UART_IRQHandler+0x3dc>)
 800251c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fc5c 	bl	8000de0 <HAL_DMA_Abort_IT>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d016      	beq.n	800255c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002538:	4610      	mov	r0, r2
 800253a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253c:	e00e      	b.n	800255c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f99a 	bl	8002878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002544:	e00a      	b.n	800255c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f996 	bl	8002878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800254c:	e006      	b.n	800255c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f992 	bl	8002878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800255a:	e170      	b.n	800283e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800255c:	bf00      	nop
    return;
 800255e:	e16e      	b.n	800283e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	2b01      	cmp	r3, #1
 8002566:	f040 814a 	bne.w	80027fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800256a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8143 	beq.w	80027fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 813c 	beq.w	80027fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	f040 80b4 	bne.w	8002714 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8140 	beq.w	8002842 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025ca:	429a      	cmp	r2, r3
 80025cc:	f080 8139 	bcs.w	8002842 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e2:	f000 8088 	beq.w	80026f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	330c      	adds	r3, #12
 80025ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025f4:	e853 3f00 	ldrex	r3, [r3]
 80025f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	330c      	adds	r3, #12
 800260e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800261e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002622:	e841 2300 	strex	r3, r2, [r1]
 8002626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800262a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1d9      	bne.n	80025e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3314      	adds	r3, #20
 8002638:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263c:	e853 3f00 	ldrex	r3, [r3]
 8002640:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3314      	adds	r3, #20
 8002652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002656:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800265a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800265e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002662:	e841 2300 	strex	r3, r2, [r1]
 8002666:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e1      	bne.n	8002632 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3314      	adds	r3, #20
 8002674:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002678:	e853 3f00 	ldrex	r3, [r3]
 800267c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800267e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3314      	adds	r3, #20
 800268e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002692:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002694:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002696:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002698:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800269a:	e841 2300 	strex	r3, r2, [r1]
 800269e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1e3      	bne.n	800266e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	330c      	adds	r3, #12
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026be:	e853 3f00 	ldrex	r3, [r3]
 80026c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c6:	f023 0310 	bic.w	r3, r3, #16
 80026ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80026da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026e0:	e841 2300 	strex	r3, r2, [r1]
 80026e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1e3      	bne.n	80026b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fb05 	bl	8000d00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026fe:	b29b      	uxth	r3, r3
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	b29b      	uxth	r3, r3
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8c0 	bl	800288c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800270c:	e099      	b.n	8002842 <HAL_UART_IRQHandler+0x50e>
 800270e:	bf00      	nop
 8002710:	0800296b 	.word	0x0800296b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800271c:	b29b      	uxth	r3, r3
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 808b 	beq.w	8002846 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8086 	beq.w	8002846 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002750:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	330c      	adds	r3, #12
 800275a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800275e:	647a      	str	r2, [r7, #68]	; 0x44
 8002760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800276c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e3      	bne.n	800273a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	623b      	str	r3, [r7, #32]
   return(result);
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002796:	633a      	str	r2, [r7, #48]	; 0x30
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800279c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e3      	bne.n	8002772 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027dc:	61fa      	str	r2, [r7, #28]
 80027de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	69b9      	ldr	r1, [r7, #24]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	617b      	str	r3, [r7, #20]
   return(result);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e3      	bne.n	80027b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f848 	bl	800288c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027fc:	e023      	b.n	8002846 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_UART_IRQHandler+0x4ea>
 800280a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8bb 	bl	8002992 <UART_Transmit_IT>
    return;
 800281c:	e014      	b.n	8002848 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800281e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00e      	beq.n	8002848 <HAL_UART_IRQHandler+0x514>
 800282a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8fb 	bl	8002a32 <UART_EndTransmit_IT>
    return;
 800283c:	e004      	b.n	8002848 <HAL_UART_IRQHandler+0x514>
    return;
 800283e:	bf00      	nop
 8002840:	e002      	b.n	8002848 <HAL_UART_IRQHandler+0x514>
      return;
 8002842:	bf00      	nop
 8002844:	e000      	b.n	8002848 <HAL_UART_IRQHandler+0x514>
      return;
 8002846:	bf00      	nop
  }
}
 8002848:	37e8      	adds	r7, #232	; 0xe8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop

08002850 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b095      	sub	sp, #84	; 0x54
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	330c      	adds	r3, #12
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	e853 3f00 	ldrex	r3, [r3]
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	330c      	adds	r3, #12
 80028ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028cc:	643a      	str	r2, [r7, #64]	; 0x40
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028d4:	e841 2300 	strex	r3, r2, [r1]
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e5      	bne.n	80028ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3314      	adds	r3, #20
 80028e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	e853 3f00 	ldrex	r3, [r3]
 80028ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3314      	adds	r3, #20
 80028fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002900:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002908:	e841 2300 	strex	r3, r2, [r1]
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e5      	bne.n	80028e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	2b01      	cmp	r3, #1
 800291a:	d119      	bne.n	8002950 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	330c      	adds	r3, #12
 8002922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	e853 3f00 	ldrex	r3, [r3]
 800292a:	60bb      	str	r3, [r7, #8]
   return(result);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f023 0310 	bic.w	r3, r3, #16
 8002932:	647b      	str	r3, [r7, #68]	; 0x44
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	330c      	adds	r3, #12
 800293a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800293c:	61ba      	str	r2, [r7, #24]
 800293e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002940:	6979      	ldr	r1, [r7, #20]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	e841 2300 	strex	r3, r2, [r1]
 8002948:	613b      	str	r3, [r7, #16]
   return(result);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e5      	bne.n	800291c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800295e:	bf00      	nop
 8002960:	3754      	adds	r7, #84	; 0x54
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff ff77 	bl	8002878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b21      	cmp	r3, #33	; 0x21
 80029a4:	d13e      	bne.n	8002a24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ae:	d114      	bne.n	80029da <UART_Transmit_IT+0x48>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d110      	bne.n	80029da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	1c9a      	adds	r2, r3, #2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	621a      	str	r2, [r3, #32]
 80029d8:	e008      	b.n	80029ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	1c59      	adds	r1, r3, #1
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6211      	str	r1, [r2, #32]
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4619      	mov	r1, r3
 80029fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10f      	bne.n	8002a20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff fefc 	bl	8002850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08c      	sub	sp, #48	; 0x30
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b22      	cmp	r3, #34	; 0x22
 8002a74:	f040 80ab 	bne.w	8002bce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a80:	d117      	bne.n	8002ab2 <UART_Receive_IT+0x50>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d113      	bne.n	8002ab2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	1c9a      	adds	r2, r3, #2
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab0:	e026      	b.n	8002b00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac4:	d007      	beq.n	8002ad6 <UART_Receive_IT+0x74>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <UART_Receive_IT+0x82>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e008      	b.n	8002af6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d15a      	bne.n	8002bca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0220 	bic.w	r2, r2, #32
 8002b22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d135      	bne.n	8002bc0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	613b      	str	r3, [r7, #16]
   return(result);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f023 0310 	bic.w	r3, r3, #16
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	330c      	adds	r3, #12
 8002b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7a:	623a      	str	r2, [r7, #32]
 8002b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7e:	69f9      	ldr	r1, [r7, #28]
 8002b80:	6a3a      	ldr	r2, [r7, #32]
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e5      	bne.n	8002b5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d10a      	bne.n	8002bb2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff fe67 	bl	800288c <HAL_UARTEx_RxEventCallback>
 8002bbe:	e002      	b.n	8002bc6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff fe4f 	bl	8002864 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e002      	b.n	8002bd0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
  }
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3730      	adds	r7, #48	; 0x30
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b0c0      	sub	sp, #256	; 0x100
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf4:	68d9      	ldr	r1, [r3, #12]
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	ea40 0301 	orr.w	r3, r0, r1
 8002c00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c30:	f021 010c 	bic.w	r1, r1, #12
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c52:	6999      	ldr	r1, [r3, #24]
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	ea40 0301 	orr.w	r3, r0, r1
 8002c5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b8f      	ldr	r3, [pc, #572]	; (8002ea4 <UART_SetConfig+0x2cc>)
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d005      	beq.n	8002c78 <UART_SetConfig+0xa0>
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b8d      	ldr	r3, [pc, #564]	; (8002ea8 <UART_SetConfig+0x2d0>)
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d104      	bne.n	8002c82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c78:	f7fe fc48 	bl	800150c <HAL_RCC_GetPCLK2Freq>
 8002c7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c80:	e003      	b.n	8002c8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c82:	f7fe fc2f 	bl	80014e4 <HAL_RCC_GetPCLK1Freq>
 8002c86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c94:	f040 810c 	bne.w	8002eb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ca2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ca6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002caa:	4622      	mov	r2, r4
 8002cac:	462b      	mov	r3, r5
 8002cae:	1891      	adds	r1, r2, r2
 8002cb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cba:	4621      	mov	r1, r4
 8002cbc:	eb12 0801 	adds.w	r8, r2, r1
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	eb43 0901 	adc.w	r9, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	eb18 0303 	adds.w	r3, r8, r3
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ce8:	462b      	mov	r3, r5
 8002cea:	eb49 0303 	adc.w	r3, r9, r3
 8002cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d06:	460b      	mov	r3, r1
 8002d08:	18db      	adds	r3, r3, r3
 8002d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	eb42 0303 	adc.w	r3, r2, r3
 8002d12:	657b      	str	r3, [r7, #84]	; 0x54
 8002d14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d1c:	f7fd fa78 	bl	8000210 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4b61      	ldr	r3, [pc, #388]	; (8002eac <UART_SetConfig+0x2d4>)
 8002d26:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	011c      	lsls	r4, r3, #4
 8002d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	1891      	adds	r1, r2, r2
 8002d46:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d48:	415b      	adcs	r3, r3
 8002d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d50:	4641      	mov	r1, r8
 8002d52:	eb12 0a01 	adds.w	sl, r2, r1
 8002d56:	4649      	mov	r1, r9
 8002d58:	eb43 0b01 	adc.w	fp, r3, r1
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d70:	4692      	mov	sl, r2
 8002d72:	469b      	mov	fp, r3
 8002d74:	4643      	mov	r3, r8
 8002d76:	eb1a 0303 	adds.w	r3, sl, r3
 8002d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d7e:	464b      	mov	r3, r9
 8002d80:	eb4b 0303 	adc.w	r3, fp, r3
 8002d84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	18db      	adds	r3, r3, r3
 8002da0:	643b      	str	r3, [r7, #64]	; 0x40
 8002da2:	4613      	mov	r3, r2
 8002da4:	eb42 0303 	adc.w	r3, r2, r3
 8002da8:	647b      	str	r3, [r7, #68]	; 0x44
 8002daa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002db2:	f7fd fa2d 	bl	8000210 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <UART_SetConfig+0x2d4>)
 8002dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2264      	movs	r2, #100	; 0x64
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	1acb      	subs	r3, r1, r3
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dd2:	4b36      	ldr	r3, [pc, #216]	; (8002eac <UART_SetConfig+0x2d4>)
 8002dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002de0:	441c      	add	r4, r3
 8002de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002df0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	1891      	adds	r1, r2, r2
 8002dfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dfc:	415b      	adcs	r3, r3
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e04:	4641      	mov	r1, r8
 8002e06:	1851      	adds	r1, r2, r1
 8002e08:	6339      	str	r1, [r7, #48]	; 0x30
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	414b      	adcs	r3, r1
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e1c:	4659      	mov	r1, fp
 8002e1e:	00cb      	lsls	r3, r1, #3
 8002e20:	4651      	mov	r1, sl
 8002e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e26:	4651      	mov	r1, sl
 8002e28:	00ca      	lsls	r2, r1, #3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4642      	mov	r2, r8
 8002e32:	189b      	adds	r3, r3, r2
 8002e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e38:	464b      	mov	r3, r9
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	eb42 0303 	adc.w	r3, r2, r3
 8002e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e58:	460b      	mov	r3, r1
 8002e5a:	18db      	adds	r3, r3, r3
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5e:	4613      	mov	r3, r2
 8002e60:	eb42 0303 	adc.w	r3, r2, r3
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e6e:	f7fd f9cf 	bl	8000210 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <UART_SetConfig+0x2d4>)
 8002e78:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	2164      	movs	r1, #100	; 0x64
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	3332      	adds	r3, #50	; 0x32
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <UART_SetConfig+0x2d4>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	f003 0207 	and.w	r2, r3, #7
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4422      	add	r2, r4
 8002e9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ea0:	e105      	b.n	80030ae <UART_SetConfig+0x4d6>
 8002ea2:	bf00      	nop
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40011400 	.word	0x40011400
 8002eac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002eba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ebe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ec2:	4642      	mov	r2, r8
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	1891      	adds	r1, r2, r2
 8002ec8:	6239      	str	r1, [r7, #32]
 8002eca:	415b      	adcs	r3, r3
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	1854      	adds	r4, r2, r1
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	eb43 0501 	adc.w	r5, r3, r1
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	00eb      	lsls	r3, r5, #3
 8002ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eea:	00e2      	lsls	r2, r4, #3
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	18e3      	adds	r3, r4, r3
 8002ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ef8:	464b      	mov	r3, r9
 8002efa:	eb45 0303 	adc.w	r3, r5, r3
 8002efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f1e:	4629      	mov	r1, r5
 8002f20:	008b      	lsls	r3, r1, #2
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f28:	4621      	mov	r1, r4
 8002f2a:	008a      	lsls	r2, r1, #2
 8002f2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f30:	f7fd f96e 	bl	8000210 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4b60      	ldr	r3, [pc, #384]	; (80030bc <UART_SetConfig+0x4e4>)
 8002f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	011c      	lsls	r4, r3, #4
 8002f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	1891      	adds	r1, r2, r2
 8002f5a:	61b9      	str	r1, [r7, #24]
 8002f5c:	415b      	adcs	r3, r3
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f64:	4641      	mov	r1, r8
 8002f66:	1851      	adds	r1, r2, r1
 8002f68:	6139      	str	r1, [r7, #16]
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	414b      	adcs	r3, r1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	00cb      	lsls	r3, r1, #3
 8002f80:	4651      	mov	r1, sl
 8002f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f86:	4651      	mov	r1, sl
 8002f88:	00ca      	lsls	r2, r1, #3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4642      	mov	r2, r8
 8002f92:	189b      	adds	r3, r3, r2
 8002f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f98:	464b      	mov	r3, r9
 8002f9a:	460a      	mov	r2, r1
 8002f9c:	eb42 0303 	adc.w	r3, r2, r3
 8002fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	008b      	lsls	r3, r1, #2
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	008a      	lsls	r2, r1, #2
 8002fca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fce:	f7fd f91f 	bl	8000210 <__aeabi_uldivmod>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4b39      	ldr	r3, [pc, #228]	; (80030bc <UART_SetConfig+0x4e4>)
 8002fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	2164      	movs	r1, #100	; 0x64
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	3332      	adds	r3, #50	; 0x32
 8002fea:	4a34      	ldr	r2, [pc, #208]	; (80030bc <UART_SetConfig+0x4e4>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff6:	441c      	add	r4, r3
 8002ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	673b      	str	r3, [r7, #112]	; 0x70
 8003000:	677a      	str	r2, [r7, #116]	; 0x74
 8003002:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003006:	4642      	mov	r2, r8
 8003008:	464b      	mov	r3, r9
 800300a:	1891      	adds	r1, r2, r2
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	415b      	adcs	r3, r3
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003016:	4641      	mov	r1, r8
 8003018:	1851      	adds	r1, r2, r1
 800301a:	6039      	str	r1, [r7, #0]
 800301c:	4649      	mov	r1, r9
 800301e:	414b      	adcs	r3, r1
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800302e:	4659      	mov	r1, fp
 8003030:	00cb      	lsls	r3, r1, #3
 8003032:	4651      	mov	r1, sl
 8003034:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003038:	4651      	mov	r1, sl
 800303a:	00ca      	lsls	r2, r1, #3
 800303c:	4610      	mov	r0, r2
 800303e:	4619      	mov	r1, r3
 8003040:	4603      	mov	r3, r0
 8003042:	4642      	mov	r2, r8
 8003044:	189b      	adds	r3, r3, r2
 8003046:	66bb      	str	r3, [r7, #104]	; 0x68
 8003048:	464b      	mov	r3, r9
 800304a:	460a      	mov	r2, r1
 800304c:	eb42 0303 	adc.w	r3, r2, r3
 8003050:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	663b      	str	r3, [r7, #96]	; 0x60
 800305c:	667a      	str	r2, [r7, #100]	; 0x64
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800306a:	4649      	mov	r1, r9
 800306c:	008b      	lsls	r3, r1, #2
 800306e:	4641      	mov	r1, r8
 8003070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003074:	4641      	mov	r1, r8
 8003076:	008a      	lsls	r2, r1, #2
 8003078:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800307c:	f7fd f8c8 	bl	8000210 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <UART_SetConfig+0x4e4>)
 8003086:	fba3 1302 	umull	r1, r3, r3, r2
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	2164      	movs	r1, #100	; 0x64
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	3332      	adds	r3, #50	; 0x32
 8003098:	4a08      	ldr	r2, [pc, #32]	; (80030bc <UART_SetConfig+0x4e4>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4422      	add	r2, r4
 80030ac:	609a      	str	r2, [r3, #8]
}
 80030ae:	bf00      	nop
 80030b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	51eb851f 	.word	0x51eb851f

080030c0 <__NVIC_SetPriority>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	; (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	; (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <SysTick_Handler+0x1c>)
 800311a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800311c:	f001 fd28 	bl	8004b70 <xTaskGetSchedulerState>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d001      	beq.n	800312a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003126:	f002 fb0f 	bl	8005748 <xPortSysTickHandler>
  }
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010

08003134 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003138:	2100      	movs	r1, #0
 800313a:	f06f 0004 	mvn.w	r0, #4
 800313e:	f7ff ffbf 	bl	80030c0 <__NVIC_SetPriority>
#endif
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800314e:	f3ef 8305 	mrs	r3, IPSR
 8003152:	603b      	str	r3, [r7, #0]
  return(result);
 8003154:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800315a:	f06f 0305 	mvn.w	r3, #5
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	e00c      	b.n	800317c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <osKernelInitialize+0x44>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d105      	bne.n	8003176 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <osKernelInitialize+0x44>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	e002      	b.n	800317c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800317c:	687b      	ldr	r3, [r7, #4]
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000170 	.word	0x20000170

08003190 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003196:	f3ef 8305 	mrs	r3, IPSR
 800319a:	603b      	str	r3, [r7, #0]
  return(result);
 800319c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80031a2:	f06f 0305 	mvn.w	r3, #5
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	e010      	b.n	80031cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <osKernelStart+0x48>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d109      	bne.n	80031c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80031b2:	f7ff ffbf 	bl	8003134 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <osKernelStart+0x48>)
 80031b8:	2202      	movs	r2, #2
 80031ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80031bc:	f001 f87c 	bl	80042b8 <vTaskStartScheduler>
      stat = osOK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	e002      	b.n	80031cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80031c6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031cc:	687b      	ldr	r3, [r7, #4]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000170 	.word	0x20000170

080031dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	; 0x38
 80031e0:	af04      	add	r7, sp, #16
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ec:	f3ef 8305 	mrs	r3, IPSR
 80031f0:	617b      	str	r3, [r7, #20]
  return(result);
 80031f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d17e      	bne.n	80032f6 <osThreadNew+0x11a>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d07b      	beq.n	80032f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003202:	2318      	movs	r3, #24
 8003204:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295
 800320e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d045      	beq.n	80032a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <osThreadNew+0x48>
        name = attr->name;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <osThreadNew+0x6e>
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b38      	cmp	r3, #56	; 0x38
 800323c:	d805      	bhi.n	800324a <osThreadNew+0x6e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <osThreadNew+0x72>
        return (NULL);
 800324a:	2300      	movs	r3, #0
 800324c:	e054      	b.n	80032f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <osThreadNew+0xa8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2bbb      	cmp	r3, #187	; 0xbb
 800326c:	d90a      	bls.n	8003284 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003272:	2b00      	cmp	r3, #0
 8003274:	d006      	beq.n	8003284 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <osThreadNew+0xa8>
        mem = 1;
 800327e:	2301      	movs	r3, #1
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	e010      	b.n	80032a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10c      	bne.n	80032a6 <osThreadNew+0xca>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d108      	bne.n	80032a6 <osThreadNew+0xca>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <osThreadNew+0xca>
          mem = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	e001      	b.n	80032a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d110      	bne.n	80032ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032b4:	9202      	str	r2, [sp, #8]
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	6a3a      	ldr	r2, [r7, #32]
 80032c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fe0c 	bl	8003ee0 <xTaskCreateStatic>
 80032c8:	4603      	mov	r3, r0
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	e013      	b.n	80032f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d110      	bne.n	80032f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fe57 	bl	8003f9a <xTaskCreate>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d001      	beq.n	80032f6 <osThreadNew+0x11a>
            hTask = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032f6:	693b      	ldr	r3, [r7, #16]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3728      	adds	r7, #40	; 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003308:	f3ef 8305 	mrs	r3, IPSR
 800330c:	60bb      	str	r3, [r7, #8]
  return(result);
 800330e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <osDelay+0x1c>
    stat = osErrorISR;
 8003314:	f06f 0305 	mvn.w	r3, #5
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e007      	b.n	800332c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 ff92 	bl	8004250 <vTaskDelay>
    }
  }

  return (stat);
 800332c:	68fb      	ldr	r3, [r7, #12]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a07      	ldr	r2, [pc, #28]	; (8003364 <vApplicationGetIdleTaskMemory+0x2c>)
 8003348:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a06      	ldr	r2, [pc, #24]	; (8003368 <vApplicationGetIdleTaskMemory+0x30>)
 800334e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	601a      	str	r2, [r3, #0]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000174 	.word	0x20000174
 8003368:	20000230 	.word	0x20000230

0800336c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a07      	ldr	r2, [pc, #28]	; (8003398 <vApplicationGetTimerTaskMemory+0x2c>)
 800337c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4a06      	ldr	r2, [pc, #24]	; (800339c <vApplicationGetTimerTaskMemory+0x30>)
 8003382:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800338a:	601a      	str	r2, [r3, #0]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000430 	.word	0x20000430
 800339c:	200004ec 	.word	0x200004ec

080033a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0208 	add.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295
 80033b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f103 0208 	add.w	r2, r3, #8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 0208 	add.w	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	601a      	str	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d103      	bne.n	8003462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e00c      	b.n	800347c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3308      	adds	r3, #8
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e002      	b.n	8003470 <vListInsert+0x2e>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	d2f6      	bcs.n	800346a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	601a      	str	r2, [r3, #0]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6892      	ldr	r2, [r2, #8]
 80034ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6852      	ldr	r2, [r2, #4]
 80034d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d103      	bne.n	80034e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1e5a      	subs	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003532:	f002 f877 	bl	8005624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	68f9      	ldr	r1, [r7, #12]
 8003540:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	441a      	add	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	3b01      	subs	r3, #1
 8003564:	68f9      	ldr	r1, [r7, #12]
 8003566:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	441a      	add	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	22ff      	movs	r2, #255	; 0xff
 8003576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	22ff      	movs	r2, #255	; 0xff
 800357e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d114      	bne.n	80035b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01a      	beq.n	80035c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3310      	adds	r3, #16
 8003594:	4618      	mov	r0, r3
 8003596:	f001 f929 	bl	80047ec <xTaskRemoveFromEventList>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d012      	beq.n	80035c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <xQueueGenericReset+0xcc>)
 80035a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	e009      	b.n	80035c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3310      	adds	r3, #16
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fef2 	bl	80033a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3324      	adds	r3, #36	; 0x24
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff feed 	bl	80033a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035c6:	f002 f85d 	bl	8005684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035ca:	2301      	movs	r3, #1
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	e000ed04 	.word	0xe000ed04

080035d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08e      	sub	sp, #56	; 0x38
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <xQueueGenericCreateStatic+0x52>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <xQueueGenericCreateStatic+0x56>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <xQueueGenericCreateStatic+0x58>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	623b      	str	r3, [r7, #32]
}
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <xQueueGenericCreateStatic+0x7e>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <xQueueGenericCreateStatic+0x82>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <xQueueGenericCreateStatic+0x84>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	61fb      	str	r3, [r7, #28]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003676:	2350      	movs	r3, #80	; 0x50
 8003678:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b50      	cmp	r3, #80	; 0x50
 800367e:	d00a      	beq.n	8003696 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	61bb      	str	r3, [r7, #24]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003696:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4613      	mov	r3, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f805 	bl	80036c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3730      	adds	r7, #48	; 0x30
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d103      	bne.n	80036e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e002      	b.n	80036ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036f6:	2101      	movs	r1, #1
 80036f8:	69b8      	ldr	r0, [r7, #24]
 80036fa:	f7ff ff05 	bl	8003508 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08e      	sub	sp, #56	; 0x38
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800371e:	2300      	movs	r3, #0
 8003720:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <xQueueGenericSend+0x32>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800373e:	bf00      	nop
 8003740:	e7fe      	b.n	8003740 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <xQueueGenericSend+0x40>
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <xQueueGenericSend+0x44>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <xQueueGenericSend+0x46>
 8003754:	2300      	movs	r3, #0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <xQueueGenericSend+0x60>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d103      	bne.n	800377e <xQueueGenericSend+0x6e>
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <xQueueGenericSend+0x72>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <xQueueGenericSend+0x74>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <xQueueGenericSend+0x8e>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	623b      	str	r3, [r7, #32]
}
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800379e:	f001 f9e7 	bl	8004b70 <xTaskGetSchedulerState>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <xQueueGenericSend+0x9e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <xQueueGenericSend+0xa2>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <xQueueGenericSend+0xa4>
 80037b2:	2300      	movs	r3, #0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <xQueueGenericSend+0xbe>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	61fb      	str	r3, [r7, #28]
}
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037ce:	f001 ff29 	bl	8005624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <xQueueGenericSend+0xd4>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d129      	bne.n	8003838 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ea:	f000 fa0b 	bl	8003c04 <prvCopyDataToQueue>
 80037ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d010      	beq.n	800381a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	3324      	adds	r3, #36	; 0x24
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fff5 	bl	80047ec <xTaskRemoveFromEventList>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003808:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <xQueueGenericSend+0x1f8>)
 800380a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	e00a      	b.n	8003830 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d007      	beq.n	8003830 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003820:	4b39      	ldr	r3, [pc, #228]	; (8003908 <xQueueGenericSend+0x1f8>)
 8003822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003830:	f001 ff28 	bl	8005684 <vPortExitCritical>
				return pdPASS;
 8003834:	2301      	movs	r3, #1
 8003836:	e063      	b.n	8003900 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800383e:	f001 ff21 	bl	8005684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003842:	2300      	movs	r3, #0
 8003844:	e05c      	b.n	8003900 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800384c:	f107 0314 	add.w	r3, r7, #20
 8003850:	4618      	mov	r0, r3
 8003852:	f001 f82f 	bl	80048b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003856:	2301      	movs	r3, #1
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800385a:	f001 ff13 	bl	8005684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800385e:	f000 fd9b 	bl	8004398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003862:	f001 fedf 	bl	8005624 <vPortEnterCritical>
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800386c:	b25b      	sxtb	r3, r3
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d103      	bne.n	800387c <xQueueGenericSend+0x16c>
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003882:	b25b      	sxtb	r3, r3
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d103      	bne.n	8003892 <xQueueGenericSend+0x182>
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003892:	f001 fef7 	bl	8005684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003896:	1d3a      	adds	r2, r7, #4
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 f81e 	bl	80048e0 <xTaskCheckForTimeOut>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d124      	bne.n	80038f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ac:	f000 faa2 	bl	8003df4 <prvIsQueueFull>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d018      	beq.n	80038e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	3310      	adds	r3, #16
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 ff44 	bl	800474c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038c6:	f000 fa2d 	bl	8003d24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038ca:	f000 fd73 	bl	80043b4 <xTaskResumeAll>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f47f af7c 	bne.w	80037ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <xQueueGenericSend+0x1f8>)
 80038d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	e772      	b.n	80037ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ea:	f000 fa1b 	bl	8003d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ee:	f000 fd61 	bl	80043b4 <xTaskResumeAll>
 80038f2:	e76c      	b.n	80037ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038f6:	f000 fa15 	bl	8003d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038fa:	f000 fd5b 	bl	80043b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003900:	4618      	mov	r0, r3
 8003902:	3738      	adds	r7, #56	; 0x38
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b090      	sub	sp, #64	; 0x40
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003936:	bf00      	nop
 8003938:	e7fe      	b.n	8003938 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <xQueueGenericSendFromISR+0x3c>
 8003940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <xQueueGenericSendFromISR+0x40>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <xQueueGenericSendFromISR+0x42>
 800394c:	2300      	movs	r3, #0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d103      	bne.n	8003976 <xQueueGenericSendFromISR+0x6a>
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <xQueueGenericSendFromISR+0x6e>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <xQueueGenericSendFromISR+0x70>
 800397a:	2300      	movs	r3, #0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	623b      	str	r3, [r7, #32]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003996:	f001 ff27 	bl	80057e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800399a:	f3ef 8211 	mrs	r2, BASEPRI
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	61fa      	str	r2, [r7, #28]
 80039b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <xQueueGenericSendFromISR+0xbc>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d12f      	bne.n	8003a28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039de:	f000 f911 	bl	8003c04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d112      	bne.n	8003a12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d016      	beq.n	8003a22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	3324      	adds	r3, #36	; 0x24
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fef7 	bl	80047ec <xTaskRemoveFromEventList>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00e      	beq.n	8003a22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e007      	b.n	8003a22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a16:	3301      	adds	r3, #1
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	b25a      	sxtb	r2, r3
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a22:	2301      	movs	r3, #1
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003a26:	e001      	b.n	8003a2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3740      	adds	r7, #64	; 0x40
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	; 0x30
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a50:	2300      	movs	r3, #0
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <xQueueReceive+0x30>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	623b      	str	r3, [r7, #32]
}
 8003a70:	bf00      	nop
 8003a72:	e7fe      	b.n	8003a72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <xQueueReceive+0x3e>
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <xQueueReceive+0x42>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <xQueueReceive+0x44>
 8003a86:	2300      	movs	r3, #0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <xQueueReceive+0x5e>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	61fb      	str	r3, [r7, #28]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aa2:	f001 f865 	bl	8004b70 <xTaskGetSchedulerState>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <xQueueReceive+0x6e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <xQueueReceive+0x72>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <xQueueReceive+0x74>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <xQueueReceive+0x8e>
	__asm volatile
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	61bb      	str	r3, [r7, #24]
}
 8003ace:	bf00      	nop
 8003ad0:	e7fe      	b.n	8003ad0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ad2:	f001 fda7 	bl	8005624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01f      	beq.n	8003b22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae6:	f000 f8f7 	bl	8003cd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	1e5a      	subs	r2, r3, #1
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00f      	beq.n	8003b1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	3310      	adds	r3, #16
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fe74 	bl	80047ec <xTaskRemoveFromEventList>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b0a:	4b3d      	ldr	r3, [pc, #244]	; (8003c00 <xQueueReceive+0x1bc>)
 8003b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b1a:	f001 fdb3 	bl	8005684 <vPortExitCritical>
				return pdPASS;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e069      	b.n	8003bf6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d103      	bne.n	8003b30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b28:	f001 fdac 	bl	8005684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e062      	b.n	8003bf6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b36:	f107 0310 	add.w	r3, r7, #16
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 feba 	bl	80048b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b44:	f001 fd9e 	bl	8005684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b48:	f000 fc26 	bl	8004398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b4c:	f001 fd6a 	bl	8005624 <vPortEnterCritical>
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d103      	bne.n	8003b66 <xQueueReceive+0x122>
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d103      	bne.n	8003b7c <xQueueReceive+0x138>
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b7c:	f001 fd82 	bl	8005684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b80:	1d3a      	adds	r2, r7, #4
 8003b82:	f107 0310 	add.w	r3, r7, #16
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fea9 	bl	80048e0 <xTaskCheckForTimeOut>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d123      	bne.n	8003bdc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b96:	f000 f917 	bl	8003dc8 <prvIsQueueEmpty>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d017      	beq.n	8003bd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	3324      	adds	r3, #36	; 0x24
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fdcf 	bl	800474c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb0:	f000 f8b8 	bl	8003d24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bb4:	f000 fbfe 	bl	80043b4 <xTaskResumeAll>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d189      	bne.n	8003ad2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <xQueueReceive+0x1bc>)
 8003bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	e780      	b.n	8003ad2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bd2:	f000 f8a7 	bl	8003d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bd6:	f000 fbed 	bl	80043b4 <xTaskResumeAll>
 8003bda:	e77a      	b.n	8003ad2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bde:	f000 f8a1 	bl	8003d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003be2:	f000 fbe7 	bl	80043b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003be8:	f000 f8ee 	bl	8003dc8 <prvIsQueueEmpty>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f43f af6f 	beq.w	8003ad2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3730      	adds	r7, #48	; 0x30
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10d      	bne.n	8003c3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d14d      	bne.n	8003cc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 ffbc 	bl	8004bac <xTaskPriorityDisinherit>
 8003c34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	e043      	b.n	8003cc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d119      	bne.n	8003c78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6858      	ldr	r0, [r3, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	f002 f81a 	bl	8005c88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	441a      	add	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d32b      	bcc.n	8003cc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	e026      	b.n	8003cc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68d8      	ldr	r0, [r3, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	461a      	mov	r2, r3
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	f002 f800 	bl	8005c88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	425b      	negs	r3, r3
 8003c92:	441a      	add	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d207      	bcs.n	8003cb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	425b      	negs	r3, r3
 8003cae:	441a      	add	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d105      	bne.n	8003cc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003cce:	697b      	ldr	r3, [r7, #20]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d018      	beq.n	8003d1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	441a      	add	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d303      	bcc.n	8003d0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68d9      	ldr	r1, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	461a      	mov	r2, r3
 8003d16:	6838      	ldr	r0, [r7, #0]
 8003d18:	f001 ffb6 	bl	8005c88 <memcpy>
	}
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d2c:	f001 fc7a 	bl	8005624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d38:	e011      	b.n	8003d5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d012      	beq.n	8003d68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3324      	adds	r3, #36	; 0x24
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fd50 	bl	80047ec <xTaskRemoveFromEventList>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d52:	f000 fe27 	bl	80049a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	dce9      	bgt.n	8003d3a <prvUnlockQueue+0x16>
 8003d66:	e000      	b.n	8003d6a <prvUnlockQueue+0x46>
					break;
 8003d68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	22ff      	movs	r2, #255	; 0xff
 8003d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d72:	f001 fc87 	bl	8005684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d76:	f001 fc55 	bl	8005624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d82:	e011      	b.n	8003da8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d012      	beq.n	8003db2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3310      	adds	r3, #16
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fd2b 	bl	80047ec <xTaskRemoveFromEventList>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d9c:	f000 fe02 	bl	80049a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003da0:	7bbb      	ldrb	r3, [r7, #14]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	dce9      	bgt.n	8003d84 <prvUnlockQueue+0x60>
 8003db0:	e000      	b.n	8003db4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003db2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	22ff      	movs	r2, #255	; 0xff
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003dbc:	f001 fc62 	bl	8005684 <vPortExitCritical>
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dd0:	f001 fc28 	bl	8005624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e001      	b.n	8003de6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003de6:	f001 fc4d 	bl	8005684 <vPortExitCritical>

	return xReturn;
 8003dea:	68fb      	ldr	r3, [r7, #12]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dfc:	f001 fc12 	bl	8005624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d102      	bne.n	8003e12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e001      	b.n	8003e16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e16:	f001 fc35 	bl	8005684 <vPortExitCritical>

	return xReturn;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	e014      	b.n	8003e5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e34:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <vQueueAddToRegistry+0x50>)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e40:	490c      	ldr	r1, [pc, #48]	; (8003e74 <vQueueAddToRegistry+0x50>)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <vQueueAddToRegistry+0x50>)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e56:	e006      	b.n	8003e66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b07      	cmp	r3, #7
 8003e62:	d9e7      	bls.n	8003e34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	200008ec 	.word	0x200008ec

08003e78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e88:	f001 fbcc 	bl	8005624 <vPortEnterCritical>
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e92:	b25b      	sxtb	r3, r3
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e98:	d103      	bne.n	8003ea2 <vQueueWaitForMessageRestricted+0x2a>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ea8:	b25b      	sxtb	r3, r3
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d103      	bne.n	8003eb8 <vQueueWaitForMessageRestricted+0x40>
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb8:	f001 fbe4 	bl	8005684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3324      	adds	r3, #36	; 0x24
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fc61 	bl	8004794 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ed2:	6978      	ldr	r0, [r7, #20]
 8003ed4:	f7ff ff26 	bl	8003d24 <prvUnlockQueue>
	}
 8003ed8:	bf00      	nop
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08e      	sub	sp, #56	; 0x38
 8003ee4:	af04      	add	r7, sp, #16
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	623b      	str	r3, [r7, #32]
}
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	61fb      	str	r3, [r7, #28]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f26:	23bc      	movs	r3, #188	; 0xbc
 8003f28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2bbc      	cmp	r3, #188	; 0xbc
 8003f2e:	d00a      	beq.n	8003f46 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	61bb      	str	r3, [r7, #24]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01e      	beq.n	8003f8c <xTaskCreateStatic+0xac>
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01b      	beq.n	8003f8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f66:	2300      	movs	r3, #0
 8003f68:	9303      	str	r3, [sp, #12]
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	9302      	str	r3, [sp, #8]
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f850 	bl	8004024 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f86:	f000 f8f3 	bl	8004170 <prvAddNewTaskToReadyList>
 8003f8a:	e001      	b.n	8003f90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f90:	697b      	ldr	r3, [r7, #20]
	}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3728      	adds	r7, #40	; 0x28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b08c      	sub	sp, #48	; 0x30
 8003f9e:	af04      	add	r7, sp, #16
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fc5a 	bl	8005868 <pvPortMalloc>
 8003fb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fbc:	20bc      	movs	r0, #188	; 0xbc
 8003fbe:	f001 fc53 	bl	8005868 <pvPortMalloc>
 8003fc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
 8003fd0:	e005      	b.n	8003fde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fd2:	6978      	ldr	r0, [r7, #20]
 8003fd4:	f001 fd14 	bl	8005a00 <vPortFree>
 8003fd8:	e001      	b.n	8003fde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d017      	beq.n	8004014 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9303      	str	r3, [sp, #12]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	9302      	str	r3, [sp, #8]
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f80e 	bl	8004024 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004008:	69f8      	ldr	r0, [r7, #28]
 800400a:	f000 f8b1 	bl	8004170 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800400e:	2301      	movs	r3, #1
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e002      	b.n	800401a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800401a:	69bb      	ldr	r3, [r7, #24]
	}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	461a      	mov	r2, r3
 800403c:	21a5      	movs	r1, #165	; 0xa5
 800403e:	f001 fe31 	bl	8005ca4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800404c:	3b01      	subs	r3, #1
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f023 0307 	bic.w	r3, r3, #7
 800405a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	617b      	str	r3, [r7, #20]
}
 8004078:	bf00      	nop
 800407a:	e7fe      	b.n	800407a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01f      	beq.n	80040c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	e012      	b.n	80040ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	7819      	ldrb	r1, [r3, #0]
 8004090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	3334      	adds	r3, #52	; 0x34
 8004098:	460a      	mov	r2, r1
 800409a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d006      	beq.n	80040b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	3301      	adds	r3, #1
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	2b0f      	cmp	r3, #15
 80040b2:	d9e9      	bls.n	8004088 <prvInitialiseNewTask+0x64>
 80040b4:	e000      	b.n	80040b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80040b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040c0:	e003      	b.n	80040ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	2b37      	cmp	r3, #55	; 0x37
 80040ce:	d901      	bls.n	80040d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040d0:	2337      	movs	r3, #55	; 0x37
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	2200      	movs	r2, #0
 80040e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	3304      	adds	r3, #4
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff f978 	bl	80033e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	3318      	adds	r3, #24
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff f973 	bl	80033e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	2200      	movs	r2, #0
 8004114:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	2200      	movs	r2, #0
 800411c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004122:	3354      	adds	r3, #84	; 0x54
 8004124:	2260      	movs	r2, #96	; 0x60
 8004126:	2100      	movs	r1, #0
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fdbb 	bl	8005ca4 <memset>
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	4a0c      	ldr	r2, [pc, #48]	; (8004164 <prvInitialiseNewTask+0x140>)
 8004132:	659a      	str	r2, [r3, #88]	; 0x58
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <prvInitialiseNewTask+0x144>)
 8004138:	65da      	str	r2, [r3, #92]	; 0x5c
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	4a0b      	ldr	r2, [pc, #44]	; (800416c <prvInitialiseNewTask+0x148>)
 800413e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	68f9      	ldr	r1, [r7, #12]
 8004144:	69b8      	ldr	r0, [r7, #24]
 8004146:	f001 f941 	bl	80053cc <pxPortInitialiseStack>
 800414a:	4602      	mov	r2, r0
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800415c:	bf00      	nop
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	08005f0c 	.word	0x08005f0c
 8004168:	08005f2c 	.word	0x08005f2c
 800416c:	08005eec 	.word	0x08005eec

08004170 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004178:	f001 fa54 	bl	8005624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800417c:	4b2d      	ldr	r3, [pc, #180]	; (8004234 <prvAddNewTaskToReadyList+0xc4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	4a2c      	ldr	r2, [pc, #176]	; (8004234 <prvAddNewTaskToReadyList+0xc4>)
 8004184:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004186:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <prvAddNewTaskToReadyList+0xc8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800418e:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <prvAddNewTaskToReadyList+0xc8>)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004194:	4b27      	ldr	r3, [pc, #156]	; (8004234 <prvAddNewTaskToReadyList+0xc4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d110      	bne.n	80041be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800419c:	f000 fc26 	bl	80049ec <prvInitialiseTaskLists>
 80041a0:	e00d      	b.n	80041be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041a2:	4b26      	ldr	r3, [pc, #152]	; (800423c <prvAddNewTaskToReadyList+0xcc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041aa:	4b23      	ldr	r3, [pc, #140]	; (8004238 <prvAddNewTaskToReadyList+0xc8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d802      	bhi.n	80041be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041b8:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <prvAddNewTaskToReadyList+0xc8>)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041be:	4b20      	ldr	r3, [pc, #128]	; (8004240 <prvAddNewTaskToReadyList+0xd0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3301      	adds	r3, #1
 80041c4:	4a1e      	ldr	r2, [pc, #120]	; (8004240 <prvAddNewTaskToReadyList+0xd0>)
 80041c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041c8:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <prvAddNewTaskToReadyList+0xd0>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d4:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <prvAddNewTaskToReadyList+0xd4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d903      	bls.n	80041e4 <prvAddNewTaskToReadyList+0x74>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	4a18      	ldr	r2, [pc, #96]	; (8004244 <prvAddNewTaskToReadyList+0xd4>)
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4a15      	ldr	r2, [pc, #84]	; (8004248 <prvAddNewTaskToReadyList+0xd8>)
 80041f2:	441a      	add	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f7ff f8fd 	bl	80033fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004200:	f001 fa40 	bl	8005684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004204:	4b0d      	ldr	r3, [pc, #52]	; (800423c <prvAddNewTaskToReadyList+0xcc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00e      	beq.n	800422a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <prvAddNewTaskToReadyList+0xc8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	429a      	cmp	r2, r3
 8004218:	d207      	bcs.n	800422a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <prvAddNewTaskToReadyList+0xdc>)
 800421c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000e00 	.word	0x20000e00
 8004238:	2000092c 	.word	0x2000092c
 800423c:	20000e0c 	.word	0x20000e0c
 8004240:	20000e1c 	.word	0x20000e1c
 8004244:	20000e08 	.word	0x20000e08
 8004248:	20000930 	.word	0x20000930
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d017      	beq.n	8004292 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004262:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <vTaskDelay+0x60>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <vTaskDelay+0x30>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	60bb      	str	r3, [r7, #8]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004280:	f000 f88a 	bl	8004398 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004284:	2100      	movs	r1, #0
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fcfe 	bl	8004c88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800428c:	f000 f892 	bl	80043b4 <xTaskResumeAll>
 8004290:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d107      	bne.n	80042a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <vTaskDelay+0x64>)
 800429a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000e28 	.word	0x20000e28
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042c6:	463a      	mov	r2, r7
 80042c8:	1d39      	adds	r1, r7, #4
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff f832 	bl	8003338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	9202      	str	r2, [sp, #8]
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	2300      	movs	r3, #0
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	460a      	mov	r2, r1
 80042e6:	4924      	ldr	r1, [pc, #144]	; (8004378 <vTaskStartScheduler+0xc0>)
 80042e8:	4824      	ldr	r0, [pc, #144]	; (800437c <vTaskStartScheduler+0xc4>)
 80042ea:	f7ff fdf9 	bl	8003ee0 <xTaskCreateStatic>
 80042ee:	4603      	mov	r3, r0
 80042f0:	4a23      	ldr	r2, [pc, #140]	; (8004380 <vTaskStartScheduler+0xc8>)
 80042f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042f4:	4b22      	ldr	r3, [pc, #136]	; (8004380 <vTaskStartScheduler+0xc8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042fc:	2301      	movs	r3, #1
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e001      	b.n	8004306 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d102      	bne.n	8004312 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800430c:	f000 fd10 	bl	8004d30 <xTimerCreateTimerTask>
 8004310:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d11b      	bne.n	8004350 <vTaskStartScheduler+0x98>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	613b      	str	r3, [r7, #16]
}
 800432a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800432c:	4b15      	ldr	r3, [pc, #84]	; (8004384 <vTaskStartScheduler+0xcc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3354      	adds	r3, #84	; 0x54
 8004332:	4a15      	ldr	r2, [pc, #84]	; (8004388 <vTaskStartScheduler+0xd0>)
 8004334:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <vTaskStartScheduler+0xd4>)
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800433e:	4b14      	ldr	r3, [pc, #80]	; (8004390 <vTaskStartScheduler+0xd8>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <vTaskStartScheduler+0xdc>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800434a:	f001 f8c9 	bl	80054e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800434e:	e00e      	b.n	800436e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d10a      	bne.n	800436e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60fb      	str	r3, [r7, #12]
}
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <vTaskStartScheduler+0xb4>
}
 800436e:	bf00      	nop
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	08005e74 	.word	0x08005e74
 800437c:	080049bd 	.word	0x080049bd
 8004380:	20000e24 	.word	0x20000e24
 8004384:	2000092c 	.word	0x2000092c
 8004388:	20000010 	.word	0x20000010
 800438c:	20000e20 	.word	0x20000e20
 8004390:	20000e0c 	.word	0x20000e0c
 8004394:	20000e04 	.word	0x20000e04

08004398 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <vTaskSuspendAll+0x18>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	4a03      	ldr	r2, [pc, #12]	; (80043b0 <vTaskSuspendAll+0x18>)
 80043a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043a6:	bf00      	nop
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	20000e28 	.word	0x20000e28

080043b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043c2:	4b42      	ldr	r3, [pc, #264]	; (80044cc <xTaskResumeAll+0x118>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10a      	bne.n	80043e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	603b      	str	r3, [r7, #0]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043e0:	f001 f920 	bl	8005624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043e4:	4b39      	ldr	r3, [pc, #228]	; (80044cc <xTaskResumeAll+0x118>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	4a38      	ldr	r2, [pc, #224]	; (80044cc <xTaskResumeAll+0x118>)
 80043ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ee:	4b37      	ldr	r3, [pc, #220]	; (80044cc <xTaskResumeAll+0x118>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d162      	bne.n	80044bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043f6:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <xTaskResumeAll+0x11c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d05e      	beq.n	80044bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043fe:	e02f      	b.n	8004460 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004400:	4b34      	ldr	r3, [pc, #208]	; (80044d4 <xTaskResumeAll+0x120>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3318      	adds	r3, #24
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff f851 	bl	80034b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3304      	adds	r3, #4
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff f84c 	bl	80034b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <xTaskResumeAll+0x124>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d903      	bls.n	8004430 <xTaskResumeAll+0x7c>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	4a2a      	ldr	r2, [pc, #168]	; (80044d8 <xTaskResumeAll+0x124>)
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4a27      	ldr	r2, [pc, #156]	; (80044dc <xTaskResumeAll+0x128>)
 800443e:	441a      	add	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f7fe ffd7 	bl	80033fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <xTaskResumeAll+0x12c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800445a:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <xTaskResumeAll+0x130>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004460:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <xTaskResumeAll+0x120>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1cb      	bne.n	8004400 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800446e:	f000 fb5f 	bl	8004b30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004472:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <xTaskResumeAll+0x134>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800447e:	f000 f847 	bl	8004510 <xTaskIncrementTick>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004488:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <xTaskResumeAll+0x130>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3b01      	subs	r3, #1
 8004492:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f1      	bne.n	800447e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <xTaskResumeAll+0x134>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <xTaskResumeAll+0x130>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044a8:	2301      	movs	r3, #1
 80044aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <xTaskResumeAll+0x138>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044bc:	f001 f8e2 	bl	8005684 <vPortExitCritical>

	return xAlreadyYielded;
 80044c0:	68bb      	ldr	r3, [r7, #8]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000e28 	.word	0x20000e28
 80044d0:	20000e00 	.word	0x20000e00
 80044d4:	20000dc0 	.word	0x20000dc0
 80044d8:	20000e08 	.word	0x20000e08
 80044dc:	20000930 	.word	0x20000930
 80044e0:	2000092c 	.word	0x2000092c
 80044e4:	20000e14 	.word	0x20000e14
 80044e8:	20000e10 	.word	0x20000e10
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <xTaskGetTickCount+0x1c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044fc:	687b      	ldr	r3, [r7, #4]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000e04 	.word	0x20000e04

08004510 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800451a:	4b4f      	ldr	r3, [pc, #316]	; (8004658 <xTaskIncrementTick+0x148>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f040 808f 	bne.w	8004642 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004524:	4b4d      	ldr	r3, [pc, #308]	; (800465c <xTaskIncrementTick+0x14c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800452c:	4a4b      	ldr	r2, [pc, #300]	; (800465c <xTaskIncrementTick+0x14c>)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d120      	bne.n	800457a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004538:	4b49      	ldr	r3, [pc, #292]	; (8004660 <xTaskIncrementTick+0x150>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <xTaskIncrementTick+0x48>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	603b      	str	r3, [r7, #0]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <xTaskIncrementTick+0x46>
 8004558:	4b41      	ldr	r3, [pc, #260]	; (8004660 <xTaskIncrementTick+0x150>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	4b41      	ldr	r3, [pc, #260]	; (8004664 <xTaskIncrementTick+0x154>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a3f      	ldr	r2, [pc, #252]	; (8004660 <xTaskIncrementTick+0x150>)
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4a3f      	ldr	r2, [pc, #252]	; (8004664 <xTaskIncrementTick+0x154>)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b3e      	ldr	r3, [pc, #248]	; (8004668 <xTaskIncrementTick+0x158>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3301      	adds	r3, #1
 8004572:	4a3d      	ldr	r2, [pc, #244]	; (8004668 <xTaskIncrementTick+0x158>)
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	f000 fadb 	bl	8004b30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800457a:	4b3c      	ldr	r3, [pc, #240]	; (800466c <xTaskIncrementTick+0x15c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	429a      	cmp	r2, r3
 8004582:	d349      	bcc.n	8004618 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004584:	4b36      	ldr	r3, [pc, #216]	; (8004660 <xTaskIncrementTick+0x150>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458e:	4b37      	ldr	r3, [pc, #220]	; (800466c <xTaskIncrementTick+0x15c>)
 8004590:	f04f 32ff 	mov.w	r2, #4294967295
 8004594:	601a      	str	r2, [r3, #0]
					break;
 8004596:	e03f      	b.n	8004618 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004598:	4b31      	ldr	r3, [pc, #196]	; (8004660 <xTaskIncrementTick+0x150>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d203      	bcs.n	80045b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045b0:	4a2e      	ldr	r2, [pc, #184]	; (800466c <xTaskIncrementTick+0x15c>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045b6:	e02f      	b.n	8004618 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe ff79 	bl	80034b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	3318      	adds	r3, #24
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe ff70 	bl	80034b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <xTaskIncrementTick+0x160>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d903      	bls.n	80045e8 <xTaskIncrementTick+0xd8>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	4a22      	ldr	r2, [pc, #136]	; (8004670 <xTaskIncrementTick+0x160>)
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <xTaskIncrementTick+0x164>)
 80045f6:	441a      	add	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f7fe fefb 	bl	80033fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <xTaskIncrementTick+0x168>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	429a      	cmp	r2, r3
 8004610:	d3b8      	bcc.n	8004584 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004616:	e7b5      	b.n	8004584 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004618:	4b17      	ldr	r3, [pc, #92]	; (8004678 <xTaskIncrementTick+0x168>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	4915      	ldr	r1, [pc, #84]	; (8004674 <xTaskIncrementTick+0x164>)
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d901      	bls.n	8004634 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <xTaskIncrementTick+0x16c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e004      	b.n	800464c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <xTaskIncrementTick+0x170>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3301      	adds	r3, #1
 8004648:	4a0d      	ldr	r2, [pc, #52]	; (8004680 <xTaskIncrementTick+0x170>)
 800464a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800464c:	697b      	ldr	r3, [r7, #20]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000e28 	.word	0x20000e28
 800465c:	20000e04 	.word	0x20000e04
 8004660:	20000db8 	.word	0x20000db8
 8004664:	20000dbc 	.word	0x20000dbc
 8004668:	20000e18 	.word	0x20000e18
 800466c:	20000e20 	.word	0x20000e20
 8004670:	20000e08 	.word	0x20000e08
 8004674:	20000930 	.word	0x20000930
 8004678:	2000092c 	.word	0x2000092c
 800467c:	20000e14 	.word	0x20000e14
 8004680:	20000e10 	.word	0x20000e10

08004684 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800468a:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <vTaskSwitchContext+0xb0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004692:	4b29      	ldr	r3, [pc, #164]	; (8004738 <vTaskSwitchContext+0xb4>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004698:	e046      	b.n	8004728 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800469a:	4b27      	ldr	r3, [pc, #156]	; (8004738 <vTaskSwitchContext+0xb4>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a0:	4b26      	ldr	r3, [pc, #152]	; (800473c <vTaskSwitchContext+0xb8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e010      	b.n	80046ca <vTaskSwitchContext+0x46>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	607b      	str	r3, [r7, #4]
}
 80046c0:	bf00      	nop
 80046c2:	e7fe      	b.n	80046c2 <vTaskSwitchContext+0x3e>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	491d      	ldr	r1, [pc, #116]	; (8004740 <vTaskSwitchContext+0xbc>)
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0e4      	beq.n	80046a8 <vTaskSwitchContext+0x24>
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <vTaskSwitchContext+0xbc>)
 80046ea:	4413      	add	r3, r2
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3308      	adds	r3, #8
 8004700:	429a      	cmp	r2, r3
 8004702:	d104      	bne.n	800470e <vTaskSwitchContext+0x8a>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a0b      	ldr	r2, [pc, #44]	; (8004744 <vTaskSwitchContext+0xc0>)
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4a08      	ldr	r2, [pc, #32]	; (800473c <vTaskSwitchContext+0xb8>)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800471e:	4b09      	ldr	r3, [pc, #36]	; (8004744 <vTaskSwitchContext+0xc0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3354      	adds	r3, #84	; 0x54
 8004724:	4a08      	ldr	r2, [pc, #32]	; (8004748 <vTaskSwitchContext+0xc4>)
 8004726:	6013      	str	r3, [r2, #0]
}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	20000e28 	.word	0x20000e28
 8004738:	20000e14 	.word	0x20000e14
 800473c:	20000e08 	.word	0x20000e08
 8004740:	20000930 	.word	0x20000930
 8004744:	2000092c 	.word	0x2000092c
 8004748:	20000010 	.word	0x20000010

0800474c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60fb      	str	r3, [r7, #12]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <vTaskPlaceOnEventList+0x44>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3318      	adds	r3, #24
 8004778:	4619      	mov	r1, r3
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fe fe61 	bl	8003442 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004780:	2101      	movs	r1, #1
 8004782:	6838      	ldr	r0, [r7, #0]
 8004784:	f000 fa80 	bl	8004c88 <prvAddCurrentTaskToDelayedList>
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	2000092c 	.word	0x2000092c

08004794 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	617b      	str	r3, [r7, #20]
}
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3318      	adds	r3, #24
 80047c2:	4619      	mov	r1, r3
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7fe fe18 	bl	80033fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295
 80047d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	68b8      	ldr	r0, [r7, #8]
 80047da:	f000 fa55 	bl	8004c88 <prvAddCurrentTaskToDelayedList>
	}
 80047de:	bf00      	nop
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2000092c 	.word	0x2000092c

080047ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60fb      	str	r3, [r7, #12]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	3318      	adds	r3, #24
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe fe49 	bl	80034b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004822:	4b1e      	ldr	r3, [pc, #120]	; (800489c <xTaskRemoveFromEventList+0xb0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d11d      	bne.n	8004866 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3304      	adds	r3, #4
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fe40 	bl	80034b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <xTaskRemoveFromEventList+0xb4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d903      	bls.n	8004848 <xTaskRemoveFromEventList+0x5c>
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <xTaskRemoveFromEventList+0xb4>)
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <xTaskRemoveFromEventList+0xb8>)
 8004856:	441a      	add	r2, r3
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	3304      	adds	r3, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f7fe fdcb 	bl	80033fa <vListInsertEnd>
 8004864:	e005      	b.n	8004872 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	3318      	adds	r3, #24
 800486a:	4619      	mov	r1, r3
 800486c:	480e      	ldr	r0, [pc, #56]	; (80048a8 <xTaskRemoveFromEventList+0xbc>)
 800486e:	f7fe fdc4 	bl	80033fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004876:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <xTaskRemoveFromEventList+0xc0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	429a      	cmp	r2, r3
 800487e:	d905      	bls.n	800488c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004880:	2301      	movs	r3, #1
 8004882:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <xTaskRemoveFromEventList+0xc4>)
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	e001      	b.n	8004890 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004890:	697b      	ldr	r3, [r7, #20]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000e28 	.word	0x20000e28
 80048a0:	20000e08 	.word	0x20000e08
 80048a4:	20000930 	.word	0x20000930
 80048a8:	20000dc0 	.word	0x20000dc0
 80048ac:	2000092c 	.word	0x2000092c
 80048b0:	20000e14 	.word	0x20000e14

080048b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <vTaskInternalSetTimeOutState+0x24>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <vTaskInternalSetTimeOutState+0x28>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	20000e18 	.word	0x20000e18
 80048dc:	20000e04 	.word	0x20000e04

080048e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	613b      	str	r3, [r7, #16]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	60fb      	str	r3, [r7, #12]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004922:	f000 fe7f 	bl	8005624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <xTaskCheckForTimeOut+0xbc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d102      	bne.n	8004946 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e023      	b.n	800498e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <xTaskCheckForTimeOut+0xc0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d007      	beq.n	8004962 <xTaskCheckForTimeOut+0x82>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	429a      	cmp	r2, r3
 800495a:	d302      	bcc.n	8004962 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	e015      	b.n	800498e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	429a      	cmp	r2, r3
 800496a:	d20b      	bcs.n	8004984 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff ff9b 	bl	80048b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e004      	b.n	800498e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800498a:	2301      	movs	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800498e:	f000 fe79 	bl	8005684 <vPortExitCritical>

	return xReturn;
 8004992:	69fb      	ldr	r3, [r7, #28]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000e04 	.word	0x20000e04
 80049a0:	20000e18 	.word	0x20000e18

080049a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049a8:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <vTaskMissedYield+0x14>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	20000e14 	.word	0x20000e14

080049bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049c4:	f000 f852 	bl	8004a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <prvIdleTask+0x28>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d9f9      	bls.n	80049c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <prvIdleTask+0x2c>)
 80049d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049e0:	e7f0      	b.n	80049c4 <prvIdleTask+0x8>
 80049e2:	bf00      	nop
 80049e4:	20000930 	.word	0x20000930
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	e00c      	b.n	8004a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <prvInitialiseTaskLists+0x60>)
 8004a04:	4413      	add	r3, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fcca 	bl	80033a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b37      	cmp	r3, #55	; 0x37
 8004a16:	d9ef      	bls.n	80049f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a18:	480d      	ldr	r0, [pc, #52]	; (8004a50 <prvInitialiseTaskLists+0x64>)
 8004a1a:	f7fe fcc1 	bl	80033a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a1e:	480d      	ldr	r0, [pc, #52]	; (8004a54 <prvInitialiseTaskLists+0x68>)
 8004a20:	f7fe fcbe 	bl	80033a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a24:	480c      	ldr	r0, [pc, #48]	; (8004a58 <prvInitialiseTaskLists+0x6c>)
 8004a26:	f7fe fcbb 	bl	80033a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a2a:	480c      	ldr	r0, [pc, #48]	; (8004a5c <prvInitialiseTaskLists+0x70>)
 8004a2c:	f7fe fcb8 	bl	80033a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a30:	480b      	ldr	r0, [pc, #44]	; (8004a60 <prvInitialiseTaskLists+0x74>)
 8004a32:	f7fe fcb5 	bl	80033a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <prvInitialiseTaskLists+0x78>)
 8004a38:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <prvInitialiseTaskLists+0x64>)
 8004a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <prvInitialiseTaskLists+0x7c>)
 8004a3e:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <prvInitialiseTaskLists+0x68>)
 8004a40:	601a      	str	r2, [r3, #0]
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000930 	.word	0x20000930
 8004a50:	20000d90 	.word	0x20000d90
 8004a54:	20000da4 	.word	0x20000da4
 8004a58:	20000dc0 	.word	0x20000dc0
 8004a5c:	20000dd4 	.word	0x20000dd4
 8004a60:	20000dec 	.word	0x20000dec
 8004a64:	20000db8 	.word	0x20000db8
 8004a68:	20000dbc 	.word	0x20000dbc

08004a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a72:	e019      	b.n	8004aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a74:	f000 fdd6 	bl	8005624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a78:	4b10      	ldr	r3, [pc, #64]	; (8004abc <prvCheckTasksWaitingTermination+0x50>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fd15 	bl	80034b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <prvCheckTasksWaitingTermination+0x54>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <prvCheckTasksWaitingTermination+0x54>)
 8004a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <prvCheckTasksWaitingTermination+0x58>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <prvCheckTasksWaitingTermination+0x58>)
 8004a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a9e:	f000 fdf1 	bl	8005684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f810 	bl	8004ac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <prvCheckTasksWaitingTermination+0x58>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e1      	bne.n	8004a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000dd4 	.word	0x20000dd4
 8004ac0:	20000e00 	.word	0x20000e00
 8004ac4:	20000de8 	.word	0x20000de8

08004ac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3354      	adds	r3, #84	; 0x54
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 f8fb 	bl	8005cd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d108      	bne.n	8004af6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 ff89 	bl	8005a00 <vPortFree>
				vPortFree( pxTCB );
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 ff86 	bl	8005a00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004af4:	e018      	b.n	8004b28 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d103      	bne.n	8004b08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 ff7d 	bl	8005a00 <vPortFree>
	}
 8004b06:	e00f      	b.n	8004b28 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d00a      	beq.n	8004b28 <prvDeleteTCB+0x60>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60fb      	str	r3, [r7, #12]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <prvDeleteTCB+0x5e>
	}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b36:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <prvResetNextTaskUnblockTime+0x38>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d104      	bne.n	8004b4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <prvResetNextTaskUnblockTime+0x3c>)
 8004b42:	f04f 32ff 	mov.w	r2, #4294967295
 8004b46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b48:	e008      	b.n	8004b5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <prvResetNextTaskUnblockTime+0x38>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <prvResetNextTaskUnblockTime+0x3c>)
 8004b5a:	6013      	str	r3, [r2, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	20000db8 	.word	0x20000db8
 8004b6c:	20000e20 	.word	0x20000e20

08004b70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b76:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <xTaskGetSchedulerState+0x34>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d102      	bne.n	8004b84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	e008      	b.n	8004b96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b84:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <xTaskGetSchedulerState+0x38>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	e001      	b.n	8004b96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b96:	687b      	ldr	r3, [r7, #4]
	}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	20000e0c 	.word	0x20000e0c
 8004ba8:	20000e28 	.word	0x20000e28

08004bac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d056      	beq.n	8004c70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bc2:	4b2e      	ldr	r3, [pc, #184]	; (8004c7c <xTaskPriorityDisinherit+0xd0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d00a      	beq.n	8004be2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60fb      	str	r3, [r7, #12]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10a      	bne.n	8004c00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	60bb      	str	r3, [r7, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c04:	1e5a      	subs	r2, r3, #1
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d02c      	beq.n	8004c70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d128      	bne.n	8004c70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fc46 	bl	80034b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <xTaskPriorityDisinherit+0xd4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d903      	bls.n	8004c50 <xTaskPriorityDisinherit+0xa4>
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4a0c      	ldr	r2, [pc, #48]	; (8004c80 <xTaskPriorityDisinherit+0xd4>)
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <xTaskPriorityDisinherit+0xd8>)
 8004c5e:	441a      	add	r2, r3
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f7fe fbc7 	bl	80033fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c70:	697b      	ldr	r3, [r7, #20]
	}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2000092c 	.word	0x2000092c
 8004c80:	20000e08 	.word	0x20000e08
 8004c84:	20000930 	.word	0x20000930

08004c88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c92:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c98:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fc08 	bl	80034b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	d10a      	bne.n	8004cc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4819      	ldr	r0, [pc, #100]	; (8004d20 <prvAddCurrentTaskToDelayedList+0x98>)
 8004cbc:	f7fe fb9d 	bl	80033fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cc0:	e026      	b.n	8004d10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d209      	bcs.n	8004cee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cda:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f7fe fbab 	bl	8003442 <vListInsert>
}
 8004cec:	e010      	b.n	8004d10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cee:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f7fe fba1 	bl	8003442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d00:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d202      	bcs.n	8004d10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d0a:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6013      	str	r3, [r2, #0]
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000e04 	.word	0x20000e04
 8004d1c:	2000092c 	.word	0x2000092c
 8004d20:	20000dec 	.word	0x20000dec
 8004d24:	20000dbc 	.word	0x20000dbc
 8004d28:	20000db8 	.word	0x20000db8
 8004d2c:	20000e20 	.word	0x20000e20

08004d30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	; 0x28
 8004d34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d3a:	f000 fb07 	bl	800534c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d3e:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <xTimerCreateTimerTask+0x80>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d021      	beq.n	8004d8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d4e:	1d3a      	adds	r2, r7, #4
 8004d50:	f107 0108 	add.w	r1, r7, #8
 8004d54:	f107 030c 	add.w	r3, r7, #12
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe fb07 	bl	800336c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	9202      	str	r2, [sp, #8]
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	2302      	movs	r3, #2
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	460a      	mov	r2, r1
 8004d70:	4910      	ldr	r1, [pc, #64]	; (8004db4 <xTimerCreateTimerTask+0x84>)
 8004d72:	4811      	ldr	r0, [pc, #68]	; (8004db8 <xTimerCreateTimerTask+0x88>)
 8004d74:	f7ff f8b4 	bl	8003ee0 <xTaskCreateStatic>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4a10      	ldr	r2, [pc, #64]	; (8004dbc <xTimerCreateTimerTask+0x8c>)
 8004d7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <xTimerCreateTimerTask+0x8c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d86:	2301      	movs	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	613b      	str	r3, [r7, #16]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004da6:	697b      	ldr	r3, [r7, #20]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000e5c 	.word	0x20000e5c
 8004db4:	08005e7c 	.word	0x08005e7c
 8004db8:	08004ef5 	.word	0x08004ef5
 8004dbc:	20000e60 	.word	0x20000e60

08004dc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xTimerGenericCommand+0x2e>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	623b      	str	r3, [r7, #32]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dee:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <xTimerGenericCommand+0x98>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d02a      	beq.n	8004e4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b05      	cmp	r3, #5
 8004e06:	dc18      	bgt.n	8004e3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e08:	f7ff feb2 	bl	8004b70 <xTaskGetSchedulerState>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d109      	bne.n	8004e26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <xTimerGenericCommand+0x98>)
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	f107 0110 	add.w	r1, r7, #16
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e1e:	f7fe fc77 	bl	8003710 <xQueueGenericSend>
 8004e22:	6278      	str	r0, [r7, #36]	; 0x24
 8004e24:	e012      	b.n	8004e4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <xTimerGenericCommand+0x98>)
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	f107 0110 	add.w	r1, r7, #16
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2200      	movs	r2, #0
 8004e32:	f7fe fc6d 	bl	8003710 <xQueueGenericSend>
 8004e36:	6278      	str	r0, [r7, #36]	; 0x24
 8004e38:	e008      	b.n	8004e4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <xTimerGenericCommand+0x98>)
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	f107 0110 	add.w	r1, r7, #16
 8004e42:	2300      	movs	r3, #0
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	f7fe fd61 	bl	800390c <xQueueGenericSendFromISR>
 8004e4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3728      	adds	r7, #40	; 0x28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000e5c 	.word	0x20000e5c

08004e5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e66:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <prvProcessExpiredTimer+0x94>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fe fb1d 	bl	80034b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d022      	beq.n	8004ece <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	699a      	ldr	r2, [r3, #24]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	18d1      	adds	r1, r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	6978      	ldr	r0, [r7, #20]
 8004e96:	f000 f8d1 	bl	800503c <prvInsertTimerInActiveList>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01f      	beq.n	8004ee0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	6978      	ldr	r0, [r7, #20]
 8004eac:	f7ff ff88 	bl	8004dc0 <xTimerGenericCommand>
 8004eb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d113      	bne.n	8004ee0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	60fb      	str	r3, [r7, #12]
}
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	6978      	ldr	r0, [r7, #20]
 8004ee6:	4798      	blx	r3
}
 8004ee8:	bf00      	nop
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20000e54 	.word	0x20000e54

08004ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004efc:	f107 0308 	add.w	r3, r7, #8
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f857 	bl	8004fb4 <prvGetNextExpireTime>
 8004f06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f803 	bl	8004f18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f12:	f000 f8d5 	bl	80050c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f16:	e7f1      	b.n	8004efc <prvTimerTask+0x8>

08004f18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f22:	f7ff fa39 	bl	8004398 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f26:	f107 0308 	add.w	r3, r7, #8
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f866 	bl	8004ffc <prvSampleTimeNow>
 8004f30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d130      	bne.n	8004f9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <prvProcessTimerOrBlockTask+0x3c>
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d806      	bhi.n	8004f54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f46:	f7ff fa35 	bl	80043b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f4a:	68f9      	ldr	r1, [r7, #12]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff85 	bl	8004e5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f52:	e024      	b.n	8004f9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f5a:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <prvProcessTimerOrBlockTask+0x90>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <prvProcessTimerOrBlockTask+0x50>
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <prvProcessTimerOrBlockTask+0x52>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <prvProcessTimerOrBlockTask+0x94>)
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f7fe ff7d 	bl	8003e78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f7e:	f7ff fa19 	bl	80043b4 <xTaskResumeAll>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <prvProcessTimerOrBlockTask+0x98>)
 8004f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	f3bf 8f6f 	isb	sy
}
 8004f98:	e001      	b.n	8004f9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f9a:	f7ff fa0b 	bl	80043b4 <xTaskResumeAll>
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000e58 	.word	0x20000e58
 8004fac:	20000e5c 	.word	0x20000e5c
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fbc:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <prvGetNextExpireTime+0x44>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <prvGetNextExpireTime+0x16>
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	e000      	b.n	8004fcc <prvGetNextExpireTime+0x18>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fd8:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <prvGetNextExpireTime+0x44>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e001      	b.n	8004fe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000e54 	.word	0x20000e54

08004ffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005004:	f7ff fa74 	bl	80044f0 <xTaskGetTickCount>
 8005008:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800500a:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <prvSampleTimeNow+0x3c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	429a      	cmp	r2, r3
 8005012:	d205      	bcs.n	8005020 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005014:	f000 f936 	bl	8005284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e002      	b.n	8005026 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005026:	4a04      	ldr	r2, [pc, #16]	; (8005038 <prvSampleTimeNow+0x3c>)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800502c:	68fb      	ldr	r3, [r7, #12]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000e64 	.word	0x20000e64

0800503c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	429a      	cmp	r2, r3
 8005060:	d812      	bhi.n	8005088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	1ad2      	subs	r2, r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	429a      	cmp	r2, r3
 800506e:	d302      	bcc.n	8005076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005070:	2301      	movs	r3, #1
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e01b      	b.n	80050ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <prvInsertTimerInActiveList+0x7c>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f7fe f9de 	bl	8003442 <vListInsert>
 8005086:	e012      	b.n	80050ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d206      	bcs.n	800509e <prvInsertTimerInActiveList+0x62>
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d302      	bcc.n	800509e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e007      	b.n	80050ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <prvInsertTimerInActiveList+0x80>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3304      	adds	r3, #4
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7fe f9ca 	bl	8003442 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050ae:	697b      	ldr	r3, [r7, #20]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000e58 	.word	0x20000e58
 80050bc:	20000e54 	.word	0x20000e54

080050c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08e      	sub	sp, #56	; 0x38
 80050c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050c6:	e0ca      	b.n	800525e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	da18      	bge.n	8005100 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050ce:	1d3b      	adds	r3, r7, #4
 80050d0:	3304      	adds	r3, #4
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	61fb      	str	r3, [r7, #28]
}
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f6:	6850      	ldr	r0, [r2, #4]
 80050f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050fa:	6892      	ldr	r2, [r2, #8]
 80050fc:	4611      	mov	r1, r2
 80050fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f2c0 80aa 	blt.w	800525c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	3304      	adds	r3, #4
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe f9cb 	bl	80034b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800511e:	463b      	mov	r3, r7
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff6b 	bl	8004ffc <prvSampleTimeNow>
 8005126:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b09      	cmp	r3, #9
 800512c:	f200 8097 	bhi.w	800525e <prvProcessReceivedCommands+0x19e>
 8005130:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <prvProcessReceivedCommands+0x78>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	08005161 	.word	0x08005161
 800513c:	08005161 	.word	0x08005161
 8005140:	08005161 	.word	0x08005161
 8005144:	080051d5 	.word	0x080051d5
 8005148:	080051e9 	.word	0x080051e9
 800514c:	08005233 	.word	0x08005233
 8005150:	08005161 	.word	0x08005161
 8005154:	08005161 	.word	0x08005161
 8005158:	080051d5 	.word	0x080051d5
 800515c:	080051e9 	.word	0x080051e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	b2da      	uxtb	r2, r3
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	18d1      	adds	r1, r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005180:	f7ff ff5c 	bl	800503c <prvInsertTimerInActiveList>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d069      	beq.n	800525e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005190:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d05e      	beq.n	800525e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	441a      	add	r2, r3
 80051a8:	2300      	movs	r3, #0
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	2300      	movs	r3, #0
 80051ae:	2100      	movs	r1, #0
 80051b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051b2:	f7ff fe05 	bl	8004dc0 <xTimerGenericCommand>
 80051b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d14f      	bne.n	800525e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	61bb      	str	r3, [r7, #24]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80051e6:	e03a      	b.n	800525e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	617b      	str	r3, [r7, #20]
}
 800521a:	bf00      	nop
 800521c:	e7fe      	b.n	800521c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	18d1      	adds	r1, r2, r3
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800522c:	f7ff ff06 	bl	800503c <prvInsertTimerInActiveList>
					break;
 8005230:	e015      	b.n	800525e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d103      	bne.n	8005248 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005242:	f000 fbdd 	bl	8005a00 <vPortFree>
 8005246:	e00a      	b.n	800525e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800525a:	e000      	b.n	800525e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800525c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800525e:	4b08      	ldr	r3, [pc, #32]	; (8005280 <prvProcessReceivedCommands+0x1c0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	1d39      	adds	r1, r7, #4
 8005264:	2200      	movs	r2, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fbec 	bl	8003a44 <xQueueReceive>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	f47f af2a 	bne.w	80050c8 <prvProcessReceivedCommands+0x8>
	}
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	3730      	adds	r7, #48	; 0x30
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000e5c 	.word	0x20000e5c

08005284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800528a:	e048      	b.n	800531e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800528c:	4b2d      	ldr	r3, [pc, #180]	; (8005344 <prvSwitchTimerLists+0xc0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005296:	4b2b      	ldr	r3, [pc, #172]	; (8005344 <prvSwitchTimerLists+0xc0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fe f905 	bl	80034b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02e      	beq.n	800531e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d90e      	bls.n	80052f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052de:	4b19      	ldr	r3, [pc, #100]	; (8005344 <prvSwitchTimerLists+0xc0>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7fe f8aa 	bl	8003442 <vListInsert>
 80052ee:	e016      	b.n	800531e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052f0:	2300      	movs	r3, #0
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	2300      	movs	r3, #0
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	2100      	movs	r1, #0
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f7ff fd60 	bl	8004dc0 <xTimerGenericCommand>
 8005300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	603b      	str	r3, [r7, #0]
}
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <prvSwitchTimerLists+0xc0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1b1      	bne.n	800528c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <prvSwitchTimerLists+0xc0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <prvSwitchTimerLists+0xc4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a04      	ldr	r2, [pc, #16]	; (8005344 <prvSwitchTimerLists+0xc0>)
 8005334:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005336:	4a04      	ldr	r2, [pc, #16]	; (8005348 <prvSwitchTimerLists+0xc4>)
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	bf00      	nop
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20000e54 	.word	0x20000e54
 8005348:	20000e58 	.word	0x20000e58

0800534c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005352:	f000 f967 	bl	8005624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005356:	4b15      	ldr	r3, [pc, #84]	; (80053ac <prvCheckForValidListAndQueue+0x60>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d120      	bne.n	80053a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800535e:	4814      	ldr	r0, [pc, #80]	; (80053b0 <prvCheckForValidListAndQueue+0x64>)
 8005360:	f7fe f81e 	bl	80033a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005364:	4813      	ldr	r0, [pc, #76]	; (80053b4 <prvCheckForValidListAndQueue+0x68>)
 8005366:	f7fe f81b 	bl	80033a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800536a:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <prvCheckForValidListAndQueue+0x6c>)
 800536c:	4a10      	ldr	r2, [pc, #64]	; (80053b0 <prvCheckForValidListAndQueue+0x64>)
 800536e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005370:	4b12      	ldr	r3, [pc, #72]	; (80053bc <prvCheckForValidListAndQueue+0x70>)
 8005372:	4a10      	ldr	r2, [pc, #64]	; (80053b4 <prvCheckForValidListAndQueue+0x68>)
 8005374:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005376:	2300      	movs	r3, #0
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <prvCheckForValidListAndQueue+0x74>)
 800537c:	4a11      	ldr	r2, [pc, #68]	; (80053c4 <prvCheckForValidListAndQueue+0x78>)
 800537e:	2110      	movs	r1, #16
 8005380:	200a      	movs	r0, #10
 8005382:	f7fe f929 	bl	80035d8 <xQueueGenericCreateStatic>
 8005386:	4603      	mov	r3, r0
 8005388:	4a08      	ldr	r2, [pc, #32]	; (80053ac <prvCheckForValidListAndQueue+0x60>)
 800538a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800538c:	4b07      	ldr	r3, [pc, #28]	; (80053ac <prvCheckForValidListAndQueue+0x60>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <prvCheckForValidListAndQueue+0x60>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	490b      	ldr	r1, [pc, #44]	; (80053c8 <prvCheckForValidListAndQueue+0x7c>)
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fd42 	bl	8003e24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053a0:	f000 f970 	bl	8005684 <vPortExitCritical>
}
 80053a4:	bf00      	nop
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000e5c 	.word	0x20000e5c
 80053b0:	20000e2c 	.word	0x20000e2c
 80053b4:	20000e40 	.word	0x20000e40
 80053b8:	20000e54 	.word	0x20000e54
 80053bc:	20000e58 	.word	0x20000e58
 80053c0:	20000f08 	.word	0x20000f08
 80053c4:	20000e68 	.word	0x20000e68
 80053c8:	08005e84 	.word	0x08005e84

080053cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3b04      	subs	r3, #4
 80053dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3b04      	subs	r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f023 0201 	bic.w	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3b04      	subs	r3, #4
 80053fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053fc:	4a0c      	ldr	r2, [pc, #48]	; (8005430 <pxPortInitialiseStack+0x64>)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3b14      	subs	r3, #20
 8005406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3b04      	subs	r3, #4
 8005412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f06f 0202 	mvn.w	r2, #2
 800541a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3b20      	subs	r3, #32
 8005420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005422:	68fb      	ldr	r3, [r7, #12]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	08005435 	.word	0x08005435

08005434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <prvTaskExitError+0x54>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d00a      	beq.n	800545e <prvTaskExitError+0x2a>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	60fb      	str	r3, [r7, #12]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <prvTaskExitError+0x28>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60bb      	str	r3, [r7, #8]
}
 8005470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005472:	bf00      	nop
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0fc      	beq.n	8005474 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800547a:	bf00      	nop
 800547c:	bf00      	nop
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	2000000c 	.word	0x2000000c
 800548c:	00000000 	.word	0x00000000

08005490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005490:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <pxCurrentTCBConst2>)
 8005492:	6819      	ldr	r1, [r3, #0]
 8005494:	6808      	ldr	r0, [r1, #0]
 8005496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	f380 8809 	msr	PSP, r0
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f04f 0000 	mov.w	r0, #0
 80054a6:	f380 8811 	msr	BASEPRI, r0
 80054aa:	4770      	bx	lr
 80054ac:	f3af 8000 	nop.w

080054b0 <pxCurrentTCBConst2>:
 80054b0:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop

080054b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054b8:	4808      	ldr	r0, [pc, #32]	; (80054dc <prvPortStartFirstTask+0x24>)
 80054ba:	6800      	ldr	r0, [r0, #0]
 80054bc:	6800      	ldr	r0, [r0, #0]
 80054be:	f380 8808 	msr	MSP, r0
 80054c2:	f04f 0000 	mov.w	r0, #0
 80054c6:	f380 8814 	msr	CONTROL, r0
 80054ca:	b662      	cpsie	i
 80054cc:	b661      	cpsie	f
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	df00      	svc	0
 80054d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054da:	bf00      	nop
 80054dc:	e000ed08 	.word	0xe000ed08

080054e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054e6:	4b46      	ldr	r3, [pc, #280]	; (8005600 <xPortStartScheduler+0x120>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a46      	ldr	r2, [pc, #280]	; (8005604 <xPortStartScheduler+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10a      	bne.n	8005506 <xPortStartScheduler+0x26>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005506:	4b3e      	ldr	r3, [pc, #248]	; (8005600 <xPortStartScheduler+0x120>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3f      	ldr	r2, [pc, #252]	; (8005608 <xPortStartScheduler+0x128>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d10a      	bne.n	8005526 <xPortStartScheduler+0x46>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	60fb      	str	r3, [r7, #12]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005526:	4b39      	ldr	r3, [pc, #228]	; (800560c <xPortStartScheduler+0x12c>)
 8005528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	22ff      	movs	r2, #255	; 0xff
 8005536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005548:	b2da      	uxtb	r2, r3
 800554a:	4b31      	ldr	r3, [pc, #196]	; (8005610 <xPortStartScheduler+0x130>)
 800554c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800554e:	4b31      	ldr	r3, [pc, #196]	; (8005614 <xPortStartScheduler+0x134>)
 8005550:	2207      	movs	r2, #7
 8005552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005554:	e009      	b.n	800556a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005556:	4b2f      	ldr	r3, [pc, #188]	; (8005614 <xPortStartScheduler+0x134>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3b01      	subs	r3, #1
 800555c:	4a2d      	ldr	r2, [pc, #180]	; (8005614 <xPortStartScheduler+0x134>)
 800555e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	b2db      	uxtb	r3, r3
 8005568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005572:	2b80      	cmp	r3, #128	; 0x80
 8005574:	d0ef      	beq.n	8005556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005576:	4b27      	ldr	r3, [pc, #156]	; (8005614 <xPortStartScheduler+0x134>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f1c3 0307 	rsb	r3, r3, #7
 800557e:	2b04      	cmp	r3, #4
 8005580:	d00a      	beq.n	8005598 <xPortStartScheduler+0xb8>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60bb      	str	r3, [r7, #8]
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005598:	4b1e      	ldr	r3, [pc, #120]	; (8005614 <xPortStartScheduler+0x134>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	4a1d      	ldr	r2, [pc, #116]	; (8005614 <xPortStartScheduler+0x134>)
 80055a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055a2:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <xPortStartScheduler+0x134>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055aa:	4a1a      	ldr	r2, [pc, #104]	; (8005614 <xPortStartScheduler+0x134>)
 80055ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055b6:	4b18      	ldr	r3, [pc, #96]	; (8005618 <xPortStartScheduler+0x138>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <xPortStartScheduler+0x138>)
 80055bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <xPortStartScheduler+0x138>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a14      	ldr	r2, [pc, #80]	; (8005618 <xPortStartScheduler+0x138>)
 80055c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055ce:	f000 f8dd 	bl	800578c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <xPortStartScheduler+0x13c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055d8:	f000 f8fc 	bl	80057d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055dc:	4b10      	ldr	r3, [pc, #64]	; (8005620 <xPortStartScheduler+0x140>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a0f      	ldr	r2, [pc, #60]	; (8005620 <xPortStartScheduler+0x140>)
 80055e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055e8:	f7ff ff66 	bl	80054b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055ec:	f7ff f84a 	bl	8004684 <vTaskSwitchContext>
	prvTaskExitError();
 80055f0:	f7ff ff20 	bl	8005434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	e000ed00 	.word	0xe000ed00
 8005604:	410fc271 	.word	0x410fc271
 8005608:	410fc270 	.word	0x410fc270
 800560c:	e000e400 	.word	0xe000e400
 8005610:	20000f58 	.word	0x20000f58
 8005614:	20000f5c 	.word	0x20000f5c
 8005618:	e000ed20 	.word	0xe000ed20
 800561c:	2000000c 	.word	0x2000000c
 8005620:	e000ef34 	.word	0xe000ef34

08005624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	607b      	str	r3, [r7, #4]
}
 800563c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800563e:	4b0f      	ldr	r3, [pc, #60]	; (800567c <vPortEnterCritical+0x58>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a0d      	ldr	r2, [pc, #52]	; (800567c <vPortEnterCritical+0x58>)
 8005646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005648:	4b0c      	ldr	r3, [pc, #48]	; (800567c <vPortEnterCritical+0x58>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d10f      	bne.n	8005670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <vPortEnterCritical+0x5c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <vPortEnterCritical+0x4c>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	603b      	str	r3, [r7, #0]
}
 800566c:	bf00      	nop
 800566e:	e7fe      	b.n	800566e <vPortEnterCritical+0x4a>
	}
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	2000000c 	.word	0x2000000c
 8005680:	e000ed04 	.word	0xe000ed04

08005684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800568a:	4b12      	ldr	r3, [pc, #72]	; (80056d4 <vPortExitCritical+0x50>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <vPortExitCritical+0x24>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	607b      	str	r3, [r7, #4]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <vPortExitCritical+0x50>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	4a09      	ldr	r2, [pc, #36]	; (80056d4 <vPortExitCritical+0x50>)
 80056b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <vPortExitCritical+0x50>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <vPortExitCritical+0x42>
 80056ba:	2300      	movs	r3, #0
 80056bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f383 8811 	msr	BASEPRI, r3
}
 80056c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	2000000c 	.word	0x2000000c
	...

080056e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056e0:	f3ef 8009 	mrs	r0, PSP
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	4b15      	ldr	r3, [pc, #84]	; (8005740 <pxCurrentTCBConst>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	f01e 0f10 	tst.w	lr, #16
 80056f0:	bf08      	it	eq
 80056f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fa:	6010      	str	r0, [r2, #0]
 80056fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005704:	f380 8811 	msr	BASEPRI, r0
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f7fe ffb8 	bl	8004684 <vTaskSwitchContext>
 8005714:	f04f 0000 	mov.w	r0, #0
 8005718:	f380 8811 	msr	BASEPRI, r0
 800571c:	bc09      	pop	{r0, r3}
 800571e:	6819      	ldr	r1, [r3, #0]
 8005720:	6808      	ldr	r0, [r1, #0]
 8005722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005726:	f01e 0f10 	tst.w	lr, #16
 800572a:	bf08      	it	eq
 800572c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005730:	f380 8809 	msr	PSP, r0
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	f3af 8000 	nop.w

08005740 <pxCurrentTCBConst>:
 8005740:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop

08005748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	607b      	str	r3, [r7, #4]
}
 8005760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005762:	f7fe fed5 	bl	8004510 <xTaskIncrementTick>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <xPortSysTickHandler+0x40>)
 800576e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	2300      	movs	r3, #0
 8005776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	f383 8811 	msr	BASEPRI, r3
}
 800577e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005780:	bf00      	nop
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <vPortSetupTimerInterrupt+0x34>)
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <vPortSetupTimerInterrupt+0x38>)
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <vPortSetupTimerInterrupt+0x3c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <vPortSetupTimerInterrupt+0x40>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	099b      	lsrs	r3, r3, #6
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <vPortSetupTimerInterrupt+0x44>)
 80057aa:	3b01      	subs	r3, #1
 80057ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057ae:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <vPortSetupTimerInterrupt+0x34>)
 80057b0:	2207      	movs	r2, #7
 80057b2:	601a      	str	r2, [r3, #0]
}
 80057b4:	bf00      	nop
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	e000e010 	.word	0xe000e010
 80057c4:	e000e018 	.word	0xe000e018
 80057c8:	20000000 	.word	0x20000000
 80057cc:	10624dd3 	.word	0x10624dd3
 80057d0:	e000e014 	.word	0xe000e014

080057d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057e4 <vPortEnableVFP+0x10>
 80057d8:	6801      	ldr	r1, [r0, #0]
 80057da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057de:	6001      	str	r1, [r0, #0]
 80057e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057e2:	bf00      	nop
 80057e4:	e000ed88 	.word	0xe000ed88

080057e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057ee:	f3ef 8305 	mrs	r3, IPSR
 80057f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b0f      	cmp	r3, #15
 80057f8:	d914      	bls.n	8005824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <vPortValidateInterruptPriority+0x70>)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005804:	4b15      	ldr	r3, [pc, #84]	; (800585c <vPortValidateInterruptPriority+0x74>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	7afa      	ldrb	r2, [r7, #11]
 800580a:	429a      	cmp	r2, r3
 800580c:	d20a      	bcs.n	8005824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	607b      	str	r3, [r7, #4]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005824:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <vPortValidateInterruptPriority+0x78>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800582c:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <vPortValidateInterruptPriority+0x7c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d90a      	bls.n	800584a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	603b      	str	r3, [r7, #0]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <vPortValidateInterruptPriority+0x60>
	}
 800584a:	bf00      	nop
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	e000e3f0 	.word	0xe000e3f0
 800585c:	20000f58 	.word	0x20000f58
 8005860:	e000ed0c 	.word	0xe000ed0c
 8005864:	20000f5c 	.word	0x20000f5c

08005868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	; 0x28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005870:	2300      	movs	r3, #0
 8005872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005874:	f7fe fd90 	bl	8004398 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005878:	4b5b      	ldr	r3, [pc, #364]	; (80059e8 <pvPortMalloc+0x180>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005880:	f000 f920 	bl	8005ac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005884:	4b59      	ldr	r3, [pc, #356]	; (80059ec <pvPortMalloc+0x184>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	f040 8093 	bne.w	80059b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01d      	beq.n	80058d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005898:	2208      	movs	r2, #8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4413      	add	r3, r2
 800589e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d014      	beq.n	80058d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f023 0307 	bic.w	r3, r3, #7
 80058b0:	3308      	adds	r3, #8
 80058b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <pvPortMalloc+0x6c>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	617b      	str	r3, [r7, #20]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d06e      	beq.n	80059b8 <pvPortMalloc+0x150>
 80058da:	4b45      	ldr	r3, [pc, #276]	; (80059f0 <pvPortMalloc+0x188>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d869      	bhi.n	80059b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058e4:	4b43      	ldr	r3, [pc, #268]	; (80059f4 <pvPortMalloc+0x18c>)
 80058e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058e8:	4b42      	ldr	r3, [pc, #264]	; (80059f4 <pvPortMalloc+0x18c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ee:	e004      	b.n	80058fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	429a      	cmp	r2, r3
 8005902:	d903      	bls.n	800590c <pvPortMalloc+0xa4>
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f1      	bne.n	80058f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800590c:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <pvPortMalloc+0x180>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005912:	429a      	cmp	r2, r3
 8005914:	d050      	beq.n	80059b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2208      	movs	r2, #8
 800591c:	4413      	add	r3, r2
 800591e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	2308      	movs	r3, #8
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	429a      	cmp	r2, r3
 8005936:	d91f      	bls.n	8005978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <pvPortMalloc+0xf8>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	613b      	str	r3, [r7, #16]
}
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	1ad2      	subs	r2, r2, r3
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005972:	69b8      	ldr	r0, [r7, #24]
 8005974:	f000 f908 	bl	8005b88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005978:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <pvPortMalloc+0x188>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <pvPortMalloc+0x188>)
 8005984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005986:	4b1a      	ldr	r3, [pc, #104]	; (80059f0 <pvPortMalloc+0x188>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <pvPortMalloc+0x190>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d203      	bcs.n	800599a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005992:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <pvPortMalloc+0x188>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a18      	ldr	r2, [pc, #96]	; (80059f8 <pvPortMalloc+0x190>)
 8005998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <pvPortMalloc+0x184>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80059ae:	4b13      	ldr	r3, [pc, #76]	; (80059fc <pvPortMalloc+0x194>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3301      	adds	r3, #1
 80059b4:	4a11      	ldr	r2, [pc, #68]	; (80059fc <pvPortMalloc+0x194>)
 80059b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059b8:	f7fe fcfc 	bl	80043b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <pvPortMalloc+0x174>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	60fb      	str	r3, [r7, #12]
}
 80059d8:	bf00      	nop
 80059da:	e7fe      	b.n	80059da <pvPortMalloc+0x172>
	return pvReturn;
 80059dc:	69fb      	ldr	r3, [r7, #28]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3728      	adds	r7, #40	; 0x28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20004b68 	.word	0x20004b68
 80059ec:	20004b7c 	.word	0x20004b7c
 80059f0:	20004b6c 	.word	0x20004b6c
 80059f4:	20004b60 	.word	0x20004b60
 80059f8:	20004b70 	.word	0x20004b70
 80059fc:	20004b74 	.word	0x20004b74

08005a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d04d      	beq.n	8005aae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a12:	2308      	movs	r3, #8
 8005a14:	425b      	negs	r3, r3
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4413      	add	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <vPortFree+0xb8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <vPortFree+0x44>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	60fb      	str	r3, [r7, #12]
}
 8005a40:	bf00      	nop
 8005a42:	e7fe      	b.n	8005a42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <vPortFree+0x62>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60bb      	str	r3, [r7, #8]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <vPortFree+0xb8>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01e      	beq.n	8005aae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d11a      	bne.n	8005aae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	4b0e      	ldr	r3, [pc, #56]	; (8005ab8 <vPortFree+0xb8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	43db      	mvns	r3, r3
 8005a82:	401a      	ands	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a88:	f7fe fc86 	bl	8004398 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <vPortFree+0xbc>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4413      	add	r3, r2
 8005a96:	4a09      	ldr	r2, [pc, #36]	; (8005abc <vPortFree+0xbc>)
 8005a98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a9a:	6938      	ldr	r0, [r7, #16]
 8005a9c:	f000 f874 	bl	8005b88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <vPortFree+0xc0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	4a06      	ldr	r2, [pc, #24]	; (8005ac0 <vPortFree+0xc0>)
 8005aa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005aaa:	f7fe fc83 	bl	80043b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005aae:	bf00      	nop
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20004b7c 	.word	0x20004b7c
 8005abc:	20004b6c 	.word	0x20004b6c
 8005ac0:	20004b78 	.word	0x20004b78

08005ac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005aca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ad0:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <prvHeapInit+0xac>)
 8005ad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00c      	beq.n	8005af8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3307      	adds	r3, #7
 8005ae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0307 	bic.w	r3, r3, #7
 8005aea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	4a1f      	ldr	r2, [pc, #124]	; (8005b70 <prvHeapInit+0xac>)
 8005af4:	4413      	add	r3, r2
 8005af6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005afc:	4a1d      	ldr	r2, [pc, #116]	; (8005b74 <prvHeapInit+0xb0>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b02:	4b1c      	ldr	r3, [pc, #112]	; (8005b74 <prvHeapInit+0xb0>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b10:	2208      	movs	r2, #8
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	1a9b      	subs	r3, r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0307 	bic.w	r3, r3, #7
 8005b1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a15      	ldr	r2, [pc, #84]	; (8005b78 <prvHeapInit+0xb4>)
 8005b24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <prvHeapInit+0xb4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b2e:	4b12      	ldr	r3, [pc, #72]	; (8005b78 <prvHeapInit+0xb4>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	1ad2      	subs	r2, r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b44:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <prvHeapInit+0xb4>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4a0a      	ldr	r2, [pc, #40]	; (8005b7c <prvHeapInit+0xb8>)
 8005b52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <prvHeapInit+0xbc>)
 8005b5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <prvHeapInit+0xc0>)
 8005b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b62:	601a      	str	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	20000f60 	.word	0x20000f60
 8005b74:	20004b60 	.word	0x20004b60
 8005b78:	20004b68 	.word	0x20004b68
 8005b7c:	20004b70 	.word	0x20004b70
 8005b80:	20004b6c 	.word	0x20004b6c
 8005b84:	20004b7c 	.word	0x20004b7c

08005b88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b90:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <prvInsertBlockIntoFreeList+0xac>)
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e002      	b.n	8005b9c <prvInsertBlockIntoFreeList+0x14>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d8f7      	bhi.n	8005b96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d108      	bne.n	8005bca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	441a      	add	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d118      	bne.n	8005c10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <prvInsertBlockIntoFreeList+0xb0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d00d      	beq.n	8005c06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	441a      	add	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e008      	b.n	8005c18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <prvInsertBlockIntoFreeList+0xb0>)
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e003      	b.n	8005c18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d002      	beq.n	8005c26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	20004b60 	.word	0x20004b60
 8005c38:	20004b68 	.word	0x20004b68

08005c3c <__libc_init_array>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	4d0d      	ldr	r5, [pc, #52]	; (8005c74 <__libc_init_array+0x38>)
 8005c40:	4c0d      	ldr	r4, [pc, #52]	; (8005c78 <__libc_init_array+0x3c>)
 8005c42:	1b64      	subs	r4, r4, r5
 8005c44:	10a4      	asrs	r4, r4, #2
 8005c46:	2600      	movs	r6, #0
 8005c48:	42a6      	cmp	r6, r4
 8005c4a:	d109      	bne.n	8005c60 <__libc_init_array+0x24>
 8005c4c:	4d0b      	ldr	r5, [pc, #44]	; (8005c7c <__libc_init_array+0x40>)
 8005c4e:	4c0c      	ldr	r4, [pc, #48]	; (8005c80 <__libc_init_array+0x44>)
 8005c50:	f000 f8f2 	bl	8005e38 <_init>
 8005c54:	1b64      	subs	r4, r4, r5
 8005c56:	10a4      	asrs	r4, r4, #2
 8005c58:	2600      	movs	r6, #0
 8005c5a:	42a6      	cmp	r6, r4
 8005c5c:	d105      	bne.n	8005c6a <__libc_init_array+0x2e>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c64:	4798      	blx	r3
 8005c66:	3601      	adds	r6, #1
 8005c68:	e7ee      	b.n	8005c48 <__libc_init_array+0xc>
 8005c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6e:	4798      	blx	r3
 8005c70:	3601      	adds	r6, #1
 8005c72:	e7f2      	b.n	8005c5a <__libc_init_array+0x1e>
 8005c74:	08005f54 	.word	0x08005f54
 8005c78:	08005f54 	.word	0x08005f54
 8005c7c:	08005f54 	.word	0x08005f54
 8005c80:	08005f58 	.word	0x08005f58

08005c84 <__retarget_lock_acquire_recursive>:
 8005c84:	4770      	bx	lr

08005c86 <__retarget_lock_release_recursive>:
 8005c86:	4770      	bx	lr

08005c88 <memcpy>:
 8005c88:	440a      	add	r2, r1
 8005c8a:	4291      	cmp	r1, r2
 8005c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c90:	d100      	bne.n	8005c94 <memcpy+0xc>
 8005c92:	4770      	bx	lr
 8005c94:	b510      	push	{r4, lr}
 8005c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c9e:	4291      	cmp	r1, r2
 8005ca0:	d1f9      	bne.n	8005c96 <memcpy+0xe>
 8005ca2:	bd10      	pop	{r4, pc}

08005ca4 <memset>:
 8005ca4:	4402      	add	r2, r0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d100      	bne.n	8005cae <memset+0xa>
 8005cac:	4770      	bx	lr
 8005cae:	f803 1b01 	strb.w	r1, [r3], #1
 8005cb2:	e7f9      	b.n	8005ca8 <memset+0x4>

08005cb4 <cleanup_glue>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	6809      	ldr	r1, [r1, #0]
 8005cba:	4605      	mov	r5, r0
 8005cbc:	b109      	cbz	r1, 8005cc2 <cleanup_glue+0xe>
 8005cbe:	f7ff fff9 	bl	8005cb4 <cleanup_glue>
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cca:	f000 b869 	b.w	8005da0 <_free_r>
	...

08005cd0 <_reclaim_reent>:
 8005cd0:	4b2c      	ldr	r3, [pc, #176]	; (8005d84 <_reclaim_reent+0xb4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4283      	cmp	r3, r0
 8005cd6:	b570      	push	{r4, r5, r6, lr}
 8005cd8:	4604      	mov	r4, r0
 8005cda:	d051      	beq.n	8005d80 <_reclaim_reent+0xb0>
 8005cdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cde:	b143      	cbz	r3, 8005cf2 <_reclaim_reent+0x22>
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d14a      	bne.n	8005d7c <_reclaim_reent+0xac>
 8005ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ce8:	6819      	ldr	r1, [r3, #0]
 8005cea:	b111      	cbz	r1, 8005cf2 <_reclaim_reent+0x22>
 8005cec:	4620      	mov	r0, r4
 8005cee:	f000 f857 	bl	8005da0 <_free_r>
 8005cf2:	6961      	ldr	r1, [r4, #20]
 8005cf4:	b111      	cbz	r1, 8005cfc <_reclaim_reent+0x2c>
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 f852 	bl	8005da0 <_free_r>
 8005cfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005cfe:	b111      	cbz	r1, 8005d06 <_reclaim_reent+0x36>
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 f84d 	bl	8005da0 <_free_r>
 8005d06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005d08:	b111      	cbz	r1, 8005d10 <_reclaim_reent+0x40>
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f000 f848 	bl	8005da0 <_free_r>
 8005d10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005d12:	b111      	cbz	r1, 8005d1a <_reclaim_reent+0x4a>
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 f843 	bl	8005da0 <_free_r>
 8005d1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d1c:	b111      	cbz	r1, 8005d24 <_reclaim_reent+0x54>
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f000 f83e 	bl	8005da0 <_free_r>
 8005d24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005d26:	b111      	cbz	r1, 8005d2e <_reclaim_reent+0x5e>
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 f839 	bl	8005da0 <_free_r>
 8005d2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005d30:	b111      	cbz	r1, 8005d38 <_reclaim_reent+0x68>
 8005d32:	4620      	mov	r0, r4
 8005d34:	f000 f834 	bl	8005da0 <_free_r>
 8005d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d3a:	b111      	cbz	r1, 8005d42 <_reclaim_reent+0x72>
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 f82f 	bl	8005da0 <_free_r>
 8005d42:	69a3      	ldr	r3, [r4, #24]
 8005d44:	b1e3      	cbz	r3, 8005d80 <_reclaim_reent+0xb0>
 8005d46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d48:	4620      	mov	r0, r4
 8005d4a:	4798      	blx	r3
 8005d4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d4e:	b1b9      	cbz	r1, 8005d80 <_reclaim_reent+0xb0>
 8005d50:	4620      	mov	r0, r4
 8005d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d56:	f7ff bfad 	b.w	8005cb4 <cleanup_glue>
 8005d5a:	5949      	ldr	r1, [r1, r5]
 8005d5c:	b941      	cbnz	r1, 8005d70 <_reclaim_reent+0xa0>
 8005d5e:	3504      	adds	r5, #4
 8005d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d62:	2d80      	cmp	r5, #128	; 0x80
 8005d64:	68d9      	ldr	r1, [r3, #12]
 8005d66:	d1f8      	bne.n	8005d5a <_reclaim_reent+0x8a>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f000 f819 	bl	8005da0 <_free_r>
 8005d6e:	e7ba      	b.n	8005ce6 <_reclaim_reent+0x16>
 8005d70:	680e      	ldr	r6, [r1, #0]
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 f814 	bl	8005da0 <_free_r>
 8005d78:	4631      	mov	r1, r6
 8005d7a:	e7ef      	b.n	8005d5c <_reclaim_reent+0x8c>
 8005d7c:	2500      	movs	r5, #0
 8005d7e:	e7ef      	b.n	8005d60 <_reclaim_reent+0x90>
 8005d80:	bd70      	pop	{r4, r5, r6, pc}
 8005d82:	bf00      	nop
 8005d84:	20000010 	.word	0x20000010

08005d88 <__malloc_lock>:
 8005d88:	4801      	ldr	r0, [pc, #4]	; (8005d90 <__malloc_lock+0x8>)
 8005d8a:	f7ff bf7b 	b.w	8005c84 <__retarget_lock_acquire_recursive>
 8005d8e:	bf00      	nop
 8005d90:	20004b80 	.word	0x20004b80

08005d94 <__malloc_unlock>:
 8005d94:	4801      	ldr	r0, [pc, #4]	; (8005d9c <__malloc_unlock+0x8>)
 8005d96:	f7ff bf76 	b.w	8005c86 <__retarget_lock_release_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	20004b80 	.word	0x20004b80

08005da0 <_free_r>:
 8005da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005da2:	2900      	cmp	r1, #0
 8005da4:	d044      	beq.n	8005e30 <_free_r+0x90>
 8005da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005daa:	9001      	str	r0, [sp, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f1a1 0404 	sub.w	r4, r1, #4
 8005db2:	bfb8      	it	lt
 8005db4:	18e4      	addlt	r4, r4, r3
 8005db6:	f7ff ffe7 	bl	8005d88 <__malloc_lock>
 8005dba:	4a1e      	ldr	r2, [pc, #120]	; (8005e34 <_free_r+0x94>)
 8005dbc:	9801      	ldr	r0, [sp, #4]
 8005dbe:	6813      	ldr	r3, [r2, #0]
 8005dc0:	b933      	cbnz	r3, 8005dd0 <_free_r+0x30>
 8005dc2:	6063      	str	r3, [r4, #4]
 8005dc4:	6014      	str	r4, [r2, #0]
 8005dc6:	b003      	add	sp, #12
 8005dc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dcc:	f7ff bfe2 	b.w	8005d94 <__malloc_unlock>
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	d908      	bls.n	8005de6 <_free_r+0x46>
 8005dd4:	6825      	ldr	r5, [r4, #0]
 8005dd6:	1961      	adds	r1, r4, r5
 8005dd8:	428b      	cmp	r3, r1
 8005dda:	bf01      	itttt	eq
 8005ddc:	6819      	ldreq	r1, [r3, #0]
 8005dde:	685b      	ldreq	r3, [r3, #4]
 8005de0:	1949      	addeq	r1, r1, r5
 8005de2:	6021      	streq	r1, [r4, #0]
 8005de4:	e7ed      	b.n	8005dc2 <_free_r+0x22>
 8005de6:	461a      	mov	r2, r3
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	b10b      	cbz	r3, 8005df0 <_free_r+0x50>
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	d9fa      	bls.n	8005de6 <_free_r+0x46>
 8005df0:	6811      	ldr	r1, [r2, #0]
 8005df2:	1855      	adds	r5, r2, r1
 8005df4:	42a5      	cmp	r5, r4
 8005df6:	d10b      	bne.n	8005e10 <_free_r+0x70>
 8005df8:	6824      	ldr	r4, [r4, #0]
 8005dfa:	4421      	add	r1, r4
 8005dfc:	1854      	adds	r4, r2, r1
 8005dfe:	42a3      	cmp	r3, r4
 8005e00:	6011      	str	r1, [r2, #0]
 8005e02:	d1e0      	bne.n	8005dc6 <_free_r+0x26>
 8005e04:	681c      	ldr	r4, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	6053      	str	r3, [r2, #4]
 8005e0a:	4421      	add	r1, r4
 8005e0c:	6011      	str	r1, [r2, #0]
 8005e0e:	e7da      	b.n	8005dc6 <_free_r+0x26>
 8005e10:	d902      	bls.n	8005e18 <_free_r+0x78>
 8005e12:	230c      	movs	r3, #12
 8005e14:	6003      	str	r3, [r0, #0]
 8005e16:	e7d6      	b.n	8005dc6 <_free_r+0x26>
 8005e18:	6825      	ldr	r5, [r4, #0]
 8005e1a:	1961      	adds	r1, r4, r5
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf04      	itt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	6063      	str	r3, [r4, #4]
 8005e26:	bf04      	itt	eq
 8005e28:	1949      	addeq	r1, r1, r5
 8005e2a:	6021      	streq	r1, [r4, #0]
 8005e2c:	6054      	str	r4, [r2, #4]
 8005e2e:	e7ca      	b.n	8005dc6 <_free_r+0x26>
 8005e30:	b003      	add	sp, #12
 8005e32:	bd30      	pop	{r4, r5, pc}
 8005e34:	20004b84 	.word	0x20004b84

08005e38 <_init>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr

08005e44 <_fini>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr
