
Test OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800aef8  0800aef8  0001aef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b550  0800b550  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b550  0800b550  0001b550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b558  0800b558  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b558  0800b558  0001b558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b55c  0800b55c  0001b55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b74  200001e4  0800b744  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d58  0800b744  00024d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6e1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003828  00000000  00000000  0003a8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0003e120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003f6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a50  00000000  00000000  00040ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017adf  00000000  00000000  00046538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbac  00000000  00000000  0005e017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9bc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e84  00000000  00000000  000e9c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aedc 	.word	0x0800aedc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800aedc 	.word	0x0800aedc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0000      	movs	r0, r0
	...

08000f90 <positionRelative>:
#define pasDistance 25
#define rayonCapteurs 4.8
#define deltaAngle (20/360)*2*pi


float * positionRelative(int number, int pseudoDistance, float angleDeg){
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b092      	sub	sp, #72	; 0x48
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	ed87 0a01 	vstr	s0, [r7, #4]
	float pas = pasDistance;				//Pas entre 2 incréments de distance mesuree
 8000f9e:	4bb6      	ldr	r3, [pc, #728]	; (8001278 <positionRelative+0x2e8>)
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
	float distance = pas*pseudoDistance;	//Distance reelle de l'obstacle
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	ee07 3a90 	vmov	s15, r3
 8000fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fac:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float rayon = rayonCapteurs;			//Rayon de la tourelle
 8000fb8:	4bb0      	ldr	r3, [pc, #704]	; (800127c <positionRelative+0x2ec>)
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
	float angleRob = 2*pi*angleDeg/360;		//Angle relatif du robot
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fae3 	bl	8000588 <__aeabi_f2d>
 8000fc2:	a3a9      	add	r3, pc, #676	; (adr r3, 8001268 <positionRelative+0x2d8>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff fb36 	bl	8000638 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	4ba9      	ldr	r3, [pc, #676]	; (8001280 <positionRelative+0x2f0>)
 8000fda:	f7ff fc57 	bl	800088c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fdff 	bl	8000be8 <__aeabi_d2f>
 8000fea:	4603      	mov	r3, r0
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
	float angleCapt = number*pasAngulaire;	//Anlgle du capteur par rapport a l'avant du robot
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
	//float Xb, Yb;		//Position maximale de detection dans le sens horaire
	
	static float  sortie[4];	//

	//Calcul du point P
	OP[0] = (rayon + distance)*cos(angleRob + angleCapt);
 8000ff4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000ff8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001000:	ee17 0a90 	vmov	r0, s15
 8001004:	f7ff fac0 	bl	8000588 <__aeabi_f2d>
 8001008:	4604      	mov	r4, r0
 800100a:	460d      	mov	r5, r1
 800100c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001010:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	ee17 0a90 	vmov	r0, s15
 800101c:	f7ff fab4 	bl	8000588 <__aeabi_f2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	ec43 2b10 	vmov	d0, r2, r3
 8001028:	f008 feba 	bl	8009da0 <cos>
 800102c:	ec53 2b10 	vmov	r2, r3, d0
 8001030:	4620      	mov	r0, r4
 8001032:	4629      	mov	r1, r5
 8001034:	f7ff fb00 	bl	8000638 <__aeabi_dmul>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fdd2 	bl	8000be8 <__aeabi_d2f>
 8001044:	4603      	mov	r3, r0
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
	OP[1] = (rayon + distance)*sin(angleRob + angleCapt);
 8001048:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800104c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	ee17 0a90 	vmov	r0, s15
 8001058:	f7ff fa96 	bl	8000588 <__aeabi_f2d>
 800105c:	4604      	mov	r4, r0
 800105e:	460d      	mov	r5, r1
 8001060:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001064:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106c:	ee17 0a90 	vmov	r0, s15
 8001070:	f7ff fa8a 	bl	8000588 <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	ec43 2b10 	vmov	d0, r2, r3
 800107c:	f008 fee4 	bl	8009e48 <sin>
 8001080:	ec53 2b10 	vmov	r2, r3, d0
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	f7ff fad6 	bl	8000638 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fda8 	bl	8000be8 <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	633b      	str	r3, [r7, #48]	; 0x30

	//Creation de gamma
	gamma[0] = cos(angleRob + angleCapt + pi/2);
 800109c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80010a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a8:	ee17 0a90 	vmov	r0, s15
 80010ac:	f7ff fa6c 	bl	8000588 <__aeabi_f2d>
 80010b0:	a36f      	add	r3, pc, #444	; (adr r3, 8001270 <positionRelative+0x2e0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff f909 	bl	80002cc <__adddf3>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	ec43 2b17 	vmov	d7, r2, r3
 80010c2:	eeb0 0a47 	vmov.f32	s0, s14
 80010c6:	eef0 0a67 	vmov.f32	s1, s15
 80010ca:	f008 fe69 	bl	8009da0 <cos>
 80010ce:	ec53 2b10 	vmov	r2, r3, d0
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fd87 	bl	8000be8 <__aeabi_d2f>
 80010da:	4603      	mov	r3, r0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
	gamma[1] = sin(angleRob + angleCapt + pi/2);
 80010de:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80010e2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ea:	ee17 0a90 	vmov	r0, s15
 80010ee:	f7ff fa4b 	bl	8000588 <__aeabi_f2d>
 80010f2:	a35f      	add	r3, pc, #380	; (adr r3, 8001270 <positionRelative+0x2e0>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff f8e8 	bl	80002cc <__adddf3>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	ec43 2b17 	vmov	d7, r2, r3
 8001104:	eeb0 0a47 	vmov.f32	s0, s14
 8001108:	eef0 0a67 	vmov.f32	s1, s15
 800110c:	f008 fe9c 	bl	8009e48 <sin>
 8001110:	ec53 2b10 	vmov	r2, r3, d0
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fd66 	bl	8000be8 <__aeabi_d2f>
 800111c:	4603      	mov	r3, r0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28

	//Calcul des points maximaux
	//OA = OP - gamma*distance*tan(deltaAngle);
	OA[0] = OP[0] - gamma[0]*distance*tan(deltaAngle);
 8001120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa30 	bl	8000588 <__aeabi_f2d>
 8001128:	4604      	mov	r4, r0
 800112a:	460d      	mov	r5, r1
 800112c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001130:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001138:	ee17 0a90 	vmov	r0, s15
 800113c:	f7ff fa24 	bl	8000588 <__aeabi_f2d>
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	f7ff fa76 	bl	8000638 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff f8b8 	bl	80002c8 <__aeabi_dsub>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd42 	bl	8000be8 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	61fb      	str	r3, [r7, #28]
	OA[1] = OP[1] - gamma[1]*distance*tan(deltaAngle);
 8001168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fa0c 	bl	8000588 <__aeabi_f2d>
 8001170:	4604      	mov	r4, r0
 8001172:	460d      	mov	r5, r1
 8001174:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001178:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800117c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001180:	ee17 0a90 	vmov	r0, s15
 8001184:	f7ff fa00 	bl	8000588 <__aeabi_f2d>
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	f7ff fa52 	bl	8000638 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4620      	mov	r0, r4
 800119a:	4629      	mov	r1, r5
 800119c:	f7ff f894 	bl	80002c8 <__aeabi_dsub>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fd1e 	bl	8000be8 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	623b      	str	r3, [r7, #32]

	//OB = OP + gamma*distance*tan(deltaAngle);
	OB[0] = OP[0] + gamma[0]*distance*tan(deltaAngle);
 80011b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9e8 	bl	8000588 <__aeabi_f2d>
 80011b8:	4604      	mov	r4, r0
 80011ba:	460d      	mov	r5, r1
 80011bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011c0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80011c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c8:	ee17 0a90 	vmov	r0, s15
 80011cc:	f7ff f9dc 	bl	8000588 <__aeabi_f2d>
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	f7ff fa2e 	bl	8000638 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff f872 	bl	80002cc <__adddf3>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fcfa 	bl	8000be8 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	617b      	str	r3, [r7, #20]
	OB[1] = OP[1] + gamma[1]*distance*tan(deltaAngle);
 80011f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9c4 	bl	8000588 <__aeabi_f2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001208:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800120c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001210:	ee17 0a90 	vmov	r0, s15
 8001214:	f7ff f9b8 	bl	8000588 <__aeabi_f2d>
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	f7ff fa0a 	bl	8000638 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4620      	mov	r0, r4
 800122a:	4629      	mov	r1, r5
 800122c:	f7ff f84e 	bl	80002cc <__adddf3>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fcd6 	bl	8000be8 <__aeabi_d2f>
 800123c:	4603      	mov	r3, r0
 800123e:	61bb      	str	r3, [r7, #24]

	sortie[0] = OA[0];
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <positionRelative+0x2f4>)
 8001244:	6013      	str	r3, [r2, #0]
	sortie[1] = OA[1];
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <positionRelative+0x2f4>)
 800124a:	6053      	str	r3, [r2, #4]

	sortie[2] = OB[0];
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <positionRelative+0x2f4>)
 8001250:	6093      	str	r3, [r2, #8]
	sortie[3] = OB[1];
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <positionRelative+0x2f4>)
 8001256:	60d3      	str	r3, [r2, #12]

	return sortie;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <positionRelative+0x2f4>)
}
 800125a:	4618      	mov	r0, r3
 800125c:	3748      	adds	r7, #72	; 0x48
 800125e:	46bd      	mov	sp, r7
 8001260:	bdb0      	pop	{r4, r5, r7, pc}
 8001262:	bf00      	nop
 8001264:	f3af 8000 	nop.w
 8001268:	51eb851f 	.word	0x51eb851f
 800126c:	40191eb8 	.word	0x40191eb8
 8001270:	51eb851f 	.word	0x51eb851f
 8001274:	3ff91eb8 	.word	0x3ff91eb8
 8001278:	41c80000 	.word	0x41c80000
 800127c:	4099999a 	.word	0x4099999a
 8001280:	40768000 	.word	0x40768000
 8001284:	20000200 	.word	0x20000200

08001288 <send_deftask>:





void send_deftask(float x){
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t value[12];
	gcvt(x, 8, value);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff f978 	bl	8000588 <__aeabi_f2d>
 8001298:	4604      	mov	r4, r0
 800129a:	460d      	mov	r5, r1
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	2008      	movs	r0, #8
 80012a4:	ec45 4b10 	vmov	d0, r4, r5
 80012a8:	f005 fe40 	bl	8006f2c <gcvt>
	value[8] = ' ';
 80012ac:	2320      	movs	r3, #32
 80012ae:	753b      	strb	r3, [r7, #20]
	value[9] = '\r';
 80012b0:	230d      	movs	r3, #13
 80012b2:	757b      	strb	r3, [r7, #21]
	value[10] = '\n';
 80012b4:	230a      	movs	r3, #10
 80012b6:	75bb      	strb	r3, [r7, #22]
	value[11]= '\0';
 80012b8:	2300      	movs	r3, #0
 80012ba:	75fb      	strb	r3, [r7, #23]

	//int size = snprintf((char*)value, 20, "%d\r\n",(int)(x*1000));
	HAL_UART_Transmit(&huart2, value, 8+3, 500);
 80012bc:	f107 010c 	add.w	r1, r7, #12
 80012c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c4:	220b      	movs	r2, #11
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <send_deftask+0x4c>)
 80012c8:	f002 f8a7 	bl	800341a <HAL_UART_Transmit>
}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bdb0      	pop	{r4, r5, r7, pc}
 80012d4:	2000029c 	.word	0x2000029c

080012d8 <print_point>:

void print_point(float * OP){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	float x = OP[0];
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	617b      	str	r3, [r7, #20]
	float y = OP[1];
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	613b      	str	r3, [r7, #16]

	uint8_t data[]= " - ";
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <print_point+0x40>)
 80012ee:	60fb      	str	r3, [r7, #12]
	send_deftask(x);
 80012f0:	ed97 0a05 	vldr	s0, [r7, #20]
 80012f4:	f7ff ffc8 	bl	8001288 <send_deftask>
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 80012f8:	f107 010c 	add.w	r1, r7, #12
 80012fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001300:	2204      	movs	r2, #4
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <print_point+0x44>)
 8001304:	f002 f889 	bl	800341a <HAL_UART_Transmit>
	send_deftask(y);
 8001308:	ed97 0a04 	vldr	s0, [r7, #16]
 800130c:	f7ff ffbc 	bl	8001288 <send_deftask>
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	00202d20 	.word	0x00202d20
 800131c:	2000029c 	.word	0x2000029c

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fc3c 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f82a 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 f928 	bl	8001580 <MX_GPIO_Init>
  MX_TIM5_Init();
 8001330:	f000 f884 	bl	800143c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001334:	f000 f8d0 	bl	80014d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001338:	f000 f8f8 	bl	800152c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int true;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800133c:	f003 f878 	bl	8004430 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of checkDistance */
  checkDistanceHandle = osThreadNew(StartDefaultTask, NULL, &checkDistance_attributes);
 8001340:	4a09      	ldr	r2, [pc, #36]	; (8001368 <main+0x48>)
 8001342:	2100      	movs	r1, #0
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <main+0x4c>)
 8001346:	f003 f8bd 	bl	80044c4 <osThreadNew>
 800134a:	4603      	mov	r3, r0
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <main+0x50>)
 800134e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001350:	4a08      	ldr	r2, [pc, #32]	; (8001374 <main+0x54>)
 8001352:	2100      	movs	r1, #0
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <main+0x58>)
 8001356:	f003 f8b5 	bl	80044c4 <osThreadNew>
 800135a:	4603      	mov	r3, r0
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <main+0x5c>)
 800135e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001360:	f003 f88a 	bl	8004478 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001364:	e7fe      	b.n	8001364 <main+0x44>
 8001366:	bf00      	nop
 8001368:	0800af38 	.word	0x0800af38
 800136c:	080015e5 	.word	0x080015e5
 8001370:	200002e0 	.word	0x200002e0
 8001374:	0800af5c 	.word	0x0800af5c
 8001378:	08001621 	.word	0x08001621
 800137c:	200002e4 	.word	0x200002e4

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	; 0x50
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	2234      	movs	r2, #52	; 0x34
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f005 ff21 	bl	80071d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <SystemClock_Config+0xb4>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <SystemClock_Config+0xb4>)
 80013ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <SystemClock_Config+0xb4>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c0:	2300      	movs	r3, #0
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <SystemClock_Config+0xb8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <SystemClock_Config+0xb8>)
 80013ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <SystemClock_Config+0xb8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013dc:	2302      	movs	r3, #2
 80013de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e0:	2301      	movs	r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e4:	2310      	movs	r3, #16
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 f945 	bl	8002680 <HAL_RCC_OscConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80013fc:	f000 f974 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001400:	230f      	movs	r3, #15
 8001402:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f000 ff1e 	bl	800225c <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001426:	f000 f95f 	bl	80016e8 <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3750      	adds	r7, #80	; 0x50
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40007000 	.word	0x40007000

0800143c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_TIM5_Init+0x94>)
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <MX_TIM5_Init+0x98>)
 800145c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_TIM5_Init+0x94>)
 8001460:	22f9      	movs	r2, #249	; 0xf9
 8001462:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_TIM5_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_TIM5_Init+0x94>)
 800146c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001470:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_TIM5_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_TIM5_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800147e:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_TIM5_Init+0x94>)
 8001480:	f001 fb82 	bl	8002b88 <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800148a:	f000 f92d 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_TIM5_Init+0x94>)
 800149c:	f001 fd1a 	bl	8002ed4 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f000 f91f 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <MX_TIM5_Init+0x94>)
 80014b8:	f001 fef4 	bl	80032a4 <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80014c2:	f000 f911 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000210 	.word	0x20000210
 80014d4:	40000c00 	.word	0x40000c00

080014d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_USART1_UART_Init+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART1_UART_Init+0x4c>)
 8001510:	f001 ff36 	bl	8003380 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800151a:	f000 f8e5 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000258 	.word	0x20000258
 8001528:	40011000 	.word	0x40011000

0800152c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_USART2_UART_Init+0x50>)
 8001534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001564:	f001 ff0c 	bl	8003380 <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800156e:	f000 f8bb 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000029c 	.word	0x2000029c
 800157c:	40004400 	.word	0x40004400

08001580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_GPIO_Init+0x5c>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <MX_GPIO_Init+0x5c>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <MX_GPIO_Init+0x5c>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2120      	movs	r1, #32
 80015b4:	480a      	ldr	r0, [pc, #40]	; (80015e0 <MX_GPIO_Init+0x60>)
 80015b6:	f000 fe1d 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015ba:	2320      	movs	r3, #32
 80015bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_GPIO_Init+0x60>)
 80015d0:	f000 fc9c 	bl	8001f0c <HAL_GPIO_Init>

}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000

080015e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t n = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	75fb      	strb	r3, [r7, #23]
	int dist = 4;
 80015f0:	2304      	movs	r3, #4
 80015f2:	613b      	str	r3, [r7, #16]
	float angle = 90;
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <StartDefaultTask+0x34>)
 80015f6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  n+= 10;
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
 80015fa:	330a      	adds	r3, #10
 80015fc:	75fb      	strb	r3, [r7, #23]
	  //double * distance = positionRelative(n, dist, angle);
	  if(n > 100) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	2b64      	cmp	r3, #100	; 0x64
 8001602:	d903      	bls.n	800160c <StartDefaultTask+0x28>
 8001604:	2120      	movs	r1, #32
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <StartDefaultTask+0x38>)
 8001608:	f000 fe0d 	bl	8002226 <HAL_GPIO_TogglePin>
	  osDelay(500);
 800160c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001610:	f002 ffea 	bl	80045e8 <osDelay>
	  n+= 10;
 8001614:	e7f0      	b.n	80015f8 <StartDefaultTask+0x14>
 8001616:	bf00      	nop
 8001618:	42b40000 	.word	0x42b40000
 800161c:	40020000 	.word	0x40020000

08001620 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  float * sortie;
	  sortie = positionRelative((int)i,3,0);
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <StartTask02+0x98>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001632:	2200      	movs	r2, #0
 8001634:	2103      	movs	r1, #3
 8001636:	ee17 0a90 	vmov	r0, s15
 800163a:	f7ff fca9 	bl	8000f90 <positionRelative>
 800163e:	4603      	mov	r3, r0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
	  //sortie[0] = 12.4;
	  float OA[2]; float OB[2];
	  OA[0] = sortie[0]; OA[1] = sortie[1];
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	623b      	str	r3, [r7, #32]
	  OB[0] = sortie[2]; OB[1] = sortie[3];
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
	  print_point(OA);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe3a 	bl	80012d8 <print_point>
	  print_point(OB);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fe35 	bl	80012d8 <print_point>

	  uint8_t data[] = "###### \r\n";
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <StartTask02+0x9c>)
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	ca07      	ldmia	r2, {r0, r1, r2}
 8001676:	c303      	stmia	r3!, {r0, r1}
 8001678:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 800167a:	f107 0108 	add.w	r1, r7, #8
 800167e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001682:	220a      	movs	r2, #10
 8001684:	480e      	ldr	r0, [pc, #56]	; (80016c0 <StartTask02+0xa0>)
 8001686:	f001 fec8 	bl	800341a <HAL_UART_Transmit>
	  send_deftask(i);
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <StartTask02+0x98>)
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	eeb0 0a67 	vmov.f32	s0, s15
 8001694:	f7ff fdf8 	bl	8001288 <send_deftask>

	  i+=1;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <StartTask02+0x98>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <StartTask02+0x98>)
 80016a8:	edc3 7a00 	vstr	s15, [r3]
    osDelay(500);
 80016ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b0:	f002 ff9a 	bl	80045e8 <osDelay>
  {
 80016b4:	e7b8      	b.n	8001628 <StartTask02+0x8>
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000
 80016bc:	0800af14 	.word	0x0800af14
 80016c0:	2000029c 	.word	0x2000029c

080016c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016d6:	f000 fa85 	bl	8001be4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40010000 	.word	0x40010000

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_MspInit+0x54>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_MspInit+0x54>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_MspInit+0x54>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_MspInit+0x54>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_MspInit+0x54>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_MspInit+0x54>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	210f      	movs	r1, #15
 8001736:	f06f 0001 	mvn.w	r0, #1
 800173a:	f000 fb2b 	bl	8001d94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_TIM_Base_MspInit+0x3c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10d      	bne.n	800177a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_TIM_Base_MspInit+0x40>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_TIM_Base_MspInit+0x40>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_TIM_Base_MspInit+0x40>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40000c00 	.word	0x40000c00
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a36      	ldr	r2, [pc, #216]	; (8001888 <HAL_UART_MspInit+0xf8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d12d      	bne.n	800180e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	4b35      	ldr	r3, [pc, #212]	; (800188c <HAL_UART_MspInit+0xfc>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a34      	ldr	r2, [pc, #208]	; (800188c <HAL_UART_MspInit+0xfc>)
 80017bc:	f043 0310 	orr.w	r3, r3, #16
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_UART_MspInit+0xfc>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_UART_MspInit+0xfc>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a2d      	ldr	r2, [pc, #180]	; (800188c <HAL_UART_MspInit+0xfc>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_UART_MspInit+0xfc>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017fc:	2307      	movs	r3, #7
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	4619      	mov	r1, r3
 8001806:	4822      	ldr	r0, [pc, #136]	; (8001890 <HAL_UART_MspInit+0x100>)
 8001808:	f000 fb80 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800180c:	e038      	b.n	8001880 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a20      	ldr	r2, [pc, #128]	; (8001894 <HAL_UART_MspInit+0x104>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d133      	bne.n	8001880 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_UART_MspInit+0xfc>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	4a1a      	ldr	r2, [pc, #104]	; (800188c <HAL_UART_MspInit+0xfc>)
 8001822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001826:	6413      	str	r3, [r2, #64]	; 0x40
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_UART_MspInit+0xfc>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_UART_MspInit+0xfc>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4a13      	ldr	r2, [pc, #76]	; (800188c <HAL_UART_MspInit+0xfc>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_UART_MspInit+0xfc>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001850:	230c      	movs	r3, #12
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001860:	2307      	movs	r3, #7
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	4809      	ldr	r0, [pc, #36]	; (8001890 <HAL_UART_MspInit+0x100>)
 800186c:	f000 fb4e 	bl	8001f0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2105      	movs	r1, #5
 8001874:	2026      	movs	r0, #38	; 0x26
 8001876:	f000 fa8d 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800187a:	2026      	movs	r0, #38	; 0x26
 800187c:	f000 faa6 	bl	8001dcc <HAL_NVIC_EnableIRQ>
}
 8001880:	bf00      	nop
 8001882:	3730      	adds	r7, #48	; 0x30
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40011000 	.word	0x40011000
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000
 8001894:	40004400 	.word	0x40004400

08001898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	2019      	movs	r0, #25
 80018ae:	f000 fa71 	bl	8001d94 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018b2:	2019      	movs	r0, #25
 80018b4:	f000 fa8a 	bl	8001dcc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_InitTick+0xa0>)
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <HAL_InitTick+0xa0>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6453      	str	r3, [r2, #68]	; 0x44
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_InitTick+0xa0>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018d4:	f107 0210 	add.w	r2, r7, #16
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fe9c 	bl	800261c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018e4:	f000 fe86 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 80018e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	4a13      	ldr	r2, [pc, #76]	; (800193c <HAL_InitTick+0xa4>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0c9b      	lsrs	r3, r3, #18
 80018f4:	3b01      	subs	r3, #1
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_InitTick+0xa8>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <HAL_InitTick+0xac>)
 80018fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_InitTick+0xa8>)
 8001900:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001904:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_InitTick+0xa8>)
 8001908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_InitTick+0xa8>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_InitTick+0xa8>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001918:	4809      	ldr	r0, [pc, #36]	; (8001940 <HAL_InitTick+0xa8>)
 800191a:	f001 f935 	bl	8002b88 <HAL_TIM_Base_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d104      	bne.n	800192e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001924:	4806      	ldr	r0, [pc, #24]	; (8001940 <HAL_InitTick+0xa8>)
 8001926:	f001 f97f 	bl	8002c28 <HAL_TIM_Base_Start_IT>
 800192a:	4603      	mov	r3, r0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3730      	adds	r7, #48	; 0x30
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	431bde83 	.word	0x431bde83
 8001940:	200002e8 	.word	0x200002e8
 8001944:	40010000 	.word	0x40010000

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler+0x4>

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <MemManage_Handler+0x4>

0800195a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>

08001966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <TIM1_UP_IRQHandler+0x10>)
 800197a:	f001 f9a3 	bl	8002cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200002e8 	.word	0x200002e8

08001988 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <USART2_IRQHandler+0x10>)
 800198e:	f001 fdd7 	bl	8003540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000029c 	.word	0x2000029c

0800199c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
	return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_kill>:

int _kill(int pid, int sig)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019b6:	f005 fadd 	bl	8006f74 <__errno>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2216      	movs	r2, #22
 80019be:	601a      	str	r2, [r3, #0]
	return -1;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_exit>:

void _exit (int status)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ffe7 	bl	80019ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80019de:	e7fe      	b.n	80019de <_exit+0x12>

080019e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e00a      	b.n	8001a08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019f2:	f3af 8000 	nop.w
 80019f6:	4601      	mov	r1, r0
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	60ba      	str	r2, [r7, #8]
 80019fe:	b2ca      	uxtb	r2, r1
 8001a00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	dbf0      	blt.n	80019f2 <_read+0x12>
	}

return len;
 8001a10:	687b      	ldr	r3, [r7, #4]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e009      	b.n	8001a40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60ba      	str	r2, [r7, #8]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dbf1      	blt.n	8001a2c <_write+0x12>
	}
	return len;
 8001a48:	687b      	ldr	r3, [r7, #4]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_close>:

int _close(int file)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
	return -1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_isatty>:

int _isatty(int file)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
	return 1;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f005 fa42 	bl	8006f74 <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20008000 	.word	0x20008000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	20000330 	.word	0x20000330
 8001b24:	20004d58 	.word	0x20004d58

08001b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b52:	490e      	ldr	r1, [pc, #56]	; (8001b8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b68:	4c0b      	ldr	r4, [pc, #44]	; (8001b98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b76:	f7ff ffd7 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f005 faf7 	bl	800716c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7ff fbcf 	bl	8001320 <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b84:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001b90:	0800b560 	.word	0x0800b560
  ldr r2, =_sbss
 8001b94:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001b98:	20004d58 	.word	0x20004d58

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_Init+0x40>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_Init+0x40>)
 8001bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_Init+0x40>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 f8d8 	bl	8001d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	200f      	movs	r0, #15
 8001bd0:	f7ff fe62 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fd8e 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	20000334 	.word	0x20000334

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000334 	.word	0x20000334

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c56:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60d3      	str	r3, [r2, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ff4c 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da6:	f7ff ff61 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	6978      	ldr	r0, [r7, #20]
 8001db2:	f7ff ffb1 	bl	8001d18 <NVIC_EncodePriority>
 8001db6:	4602      	mov	r2, r0
 8001db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff80 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff54 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001df6:	f7ff ff09 	bl	8001c0c <HAL_GetTick>
 8001dfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d008      	beq.n	8001e1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2280      	movs	r2, #128	; 0x80
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e052      	b.n	8001ec0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0216 	bic.w	r2, r2, #22
 8001e28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <HAL_DMA_Abort+0x62>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0208 	bic.w	r2, r2, #8
 8001e58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6a:	e013      	b.n	8001e94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e6c:	f7ff fece 	bl	8001c0c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d90c      	bls.n	8001e94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2203      	movs	r2, #3
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e015      	b.n	8001ec0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1e4      	bne.n	8001e6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	223f      	movs	r2, #63	; 0x3f
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d004      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00c      	b.n	8001f00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2205      	movs	r2, #5
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	e14d      	b.n	80021c4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 813c 	bne.w	80021be <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d005      	beq.n	8001f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d130      	bne.n	8001fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d017      	beq.n	8001ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d123      	bne.n	8002050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8096 	beq.w	80021be <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b51      	ldr	r3, [pc, #324]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a50      	ldr	r2, [pc, #320]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ae:	4a4c      	ldr	r2, [pc, #304]	; (80021e0 <HAL_GPIO_Init+0x2d4>)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a43      	ldr	r2, [pc, #268]	; (80021e4 <HAL_GPIO_Init+0x2d8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x1ea>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a42      	ldr	r2, [pc, #264]	; (80021e8 <HAL_GPIO_Init+0x2dc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x1e6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a41      	ldr	r2, [pc, #260]	; (80021ec <HAL_GPIO_Init+0x2e0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x1e2>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e004      	b.n	80020f8 <HAL_GPIO_Init+0x1ec>
 80020ee:	2307      	movs	r3, #7
 80020f0:	e002      	b.n	80020f8 <HAL_GPIO_Init+0x1ec>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_GPIO_Init+0x1ec>
 80020f6:	2300      	movs	r3, #0
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	f002 0203 	and.w	r2, r2, #3
 80020fe:	0092      	lsls	r2, r2, #2
 8002100:	4093      	lsls	r3, r2
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002108:	4935      	ldr	r1, [pc, #212]	; (80021e0 <HAL_GPIO_Init+0x2d4>)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	3302      	adds	r3, #2
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002116:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <HAL_GPIO_Init+0x2e4>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800213a:	4a2d      	ldr	r2, [pc, #180]	; (80021f0 <HAL_GPIO_Init+0x2e4>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_GPIO_Init+0x2e4>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002164:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <HAL_GPIO_Init+0x2e4>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_GPIO_Init+0x2e4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_GPIO_Init+0x2e4>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_GPIO_Init+0x2e4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_GPIO_Init+0x2e4>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	2b0f      	cmp	r3, #15
 80021c8:	f67f aeae 	bls.w	8001f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40013800 	.word	0x40013800
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40020400 	.word	0x40020400
 80021ec:	40020800 	.word	0x40020800
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002210:	e003      	b.n	800221a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	041a      	lsls	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002238:	887a      	ldrh	r2, [r7, #2]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	041a      	lsls	r2, r3, #16
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43d9      	mvns	r1, r3
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	400b      	ands	r3, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0cc      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b68      	ldr	r3, [pc, #416]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d90c      	bls.n	8002298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0b8      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b0:	4b59      	ldr	r3, [pc, #356]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a58      	ldr	r2, [pc, #352]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c8:	4b53      	ldr	r3, [pc, #332]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a52      	ldr	r2, [pc, #328]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d4:	4b50      	ldr	r3, [pc, #320]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	494d      	ldr	r1, [pc, #308]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d044      	beq.n	800237c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d119      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e07f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d003      	beq.n	800231a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002316:	2b03      	cmp	r3, #3
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231a:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e067      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4934      	ldr	r1, [pc, #208]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800234c:	f7ff fc5e 	bl	8001c0c <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7ff fc5a 	bl	8001c0c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e04f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d20c      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e032      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4916      	ldr	r1, [pc, #88]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	490e      	ldr	r1, [pc, #56]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023e2:	f000 f821 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	490a      	ldr	r1, [pc, #40]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	5ccb      	ldrb	r3, [r1, r3]
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fa48 	bl	8001898 <HAL_InitTick>

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023c00 	.word	0x40023c00
 8002418:	40023800 	.word	0x40023800
 800241c:	0800af80 	.word	0x0800af80
 8002420:	20000004 	.word	0x20000004
 8002424:	20000008 	.word	0x20000008

08002428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800242c:	b090      	sub	sp, #64	; 0x40
 800242e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
 8002434:	2300      	movs	r3, #0
 8002436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002438:	2300      	movs	r3, #0
 800243a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d00d      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x40>
 800244c:	2b08      	cmp	r3, #8
 800244e:	f200 80a1 	bhi.w	8002594 <HAL_RCC_GetSysClockFreq+0x16c>
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x34>
 8002456:	2b04      	cmp	r3, #4
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x3a>
 800245a:	e09b      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_GetSysClockFreq+0x184>)
 800245e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002460:	e09b      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002462:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002466:	e098      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002468:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002472:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d028      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247e:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	2200      	movs	r2, #0
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	627a      	str	r2, [r7, #36]	; 0x24
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002490:	2100      	movs	r1, #0
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002494:	fb03 f201 	mul.w	r2, r3, r1
 8002498:	2300      	movs	r3, #0
 800249a:	fb00 f303 	mul.w	r3, r0, r3
 800249e:	4413      	add	r3, r2
 80024a0:	4a43      	ldr	r2, [pc, #268]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80024a2:	fba0 1202 	umull	r1, r2, r0, r2
 80024a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024a8:	460a      	mov	r2, r1
 80024aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80024ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ae:	4413      	add	r3, r2
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b4:	2200      	movs	r2, #0
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	61fa      	str	r2, [r7, #28]
 80024ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024c2:	f7fe fbe1 	bl	8000c88 <__aeabi_uldivmod>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4613      	mov	r3, r2
 80024cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ce:	e053      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d0:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	2200      	movs	r2, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	617a      	str	r2, [r7, #20]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024e2:	f04f 0b00 	mov.w	fp, #0
 80024e6:	4652      	mov	r2, sl
 80024e8:	465b      	mov	r3, fp
 80024ea:	f04f 0000 	mov.w	r0, #0
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	0159      	lsls	r1, r3, #5
 80024f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f8:	0150      	lsls	r0, r2, #5
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	ebb2 080a 	subs.w	r8, r2, sl
 8002502:	eb63 090b 	sbc.w	r9, r3, fp
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002512:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002516:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800251a:	ebb2 0408 	subs.w	r4, r2, r8
 800251e:	eb63 0509 	sbc.w	r5, r3, r9
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	00eb      	lsls	r3, r5, #3
 800252c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002530:	00e2      	lsls	r2, r4, #3
 8002532:	4614      	mov	r4, r2
 8002534:	461d      	mov	r5, r3
 8002536:	eb14 030a 	adds.w	r3, r4, sl
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	eb45 030b 	adc.w	r3, r5, fp
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800254e:	4629      	mov	r1, r5
 8002550:	028b      	lsls	r3, r1, #10
 8002552:	4621      	mov	r1, r4
 8002554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002558:	4621      	mov	r1, r4
 800255a:	028a      	lsls	r2, r1, #10
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002562:	2200      	movs	r2, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	60fa      	str	r2, [r7, #12]
 8002568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800256c:	f7fe fb8c 	bl	8000c88 <__aeabi_uldivmod>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4613      	mov	r3, r2
 8002576:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	3301      	adds	r3, #1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002592:	e002      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_RCC_GetSysClockFreq+0x184>)
 8002596:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800259c:	4618      	mov	r0, r3
 800259e:	3740      	adds	r7, #64	; 0x40
 80025a0:	46bd      	mov	sp, r7
 80025a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	00f42400 	.word	0x00f42400
 80025b0:	017d7840 	.word	0x017d7840

080025b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025d0:	f7ff fff0 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0a9b      	lsrs	r3, r3, #10
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	0800af90 	.word	0x0800af90

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025f8:	f7ff ffdc 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0b5b      	lsrs	r3, r3, #13
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	0800af90 	.word	0x0800af90

0800261c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	220f      	movs	r2, #15
 800262a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_GetClockConfig+0x5c>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	08db      	lsrs	r3, r3, #3
 8002656:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_RCC_GetClockConfig+0x60>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0207 	and.w	r2, r3, #7
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40023c00 	.word	0x40023c00

08002680 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e273      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d075      	beq.n	800278a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800269e:	4b88      	ldr	r3, [pc, #544]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d00c      	beq.n	80026c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4b85      	ldr	r3, [pc, #532]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d112      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c2:	d10b      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	4b7e      	ldr	r3, [pc, #504]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d05b      	beq.n	8002788 <HAL_RCC_OscConfig+0x108>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d157      	bne.n	8002788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e24e      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d106      	bne.n	80026f4 <HAL_RCC_OscConfig+0x74>
 80026e6:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a75      	ldr	r2, [pc, #468]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e01d      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x98>
 80026fe:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6f      	ldr	r2, [pc, #444]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b6d      	ldr	r3, [pc, #436]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6c      	ldr	r2, [pc, #432]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 8002718:	4b69      	ldr	r3, [pc, #420]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a68      	ldr	r2, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b66      	ldr	r3, [pc, #408]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a65      	ldr	r2, [pc, #404]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7ff fa68 	bl	8001c0c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff fa64 	bl	8001c0c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e213      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b5b      	ldr	r3, [pc, #364]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xc0>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7ff fa54 	bl	8001c0c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff fa50 	bl	8001c0c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1ff      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0xe8>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002796:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1d3      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4937      	ldr	r1, [pc, #220]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCC_OscConfig+0x244>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7ff fa09 	bl	8001c0c <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff fa05 	bl	8001c0c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1b4      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4925      	ldr	r1, [pc, #148]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_OscConfig+0x244>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7ff f9e8 	bl	8001c0c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002840:	f7ff f9e4 	bl	8001c0c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e193      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d036      	beq.n	80028d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_RCC_OscConfig+0x248>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7ff f9c8 	bl	8001c0c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff f9c4 	bl	8001c0c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e173      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x200>
 800289e:	e01b      	b.n	80028d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_OscConfig+0x248>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a6:	f7ff f9b1 	bl	8001c0c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	e00e      	b.n	80028cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ae:	f7ff f9ad 	bl	8001c0c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d907      	bls.n	80028cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e15c      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470000 	.word	0x42470000
 80028c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	4b8a      	ldr	r3, [pc, #552]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 80028ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ea      	bne.n	80028ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8097 	beq.w	8002a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b83      	ldr	r3, [pc, #524]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	4b7f      	ldr	r3, [pc, #508]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a7e      	ldr	r2, [pc, #504]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b7c      	ldr	r3, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b79      	ldr	r3, [pc, #484]	; (8002afc <HAL_RCC_OscConfig+0x47c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002922:	4b76      	ldr	r3, [pc, #472]	; (8002afc <HAL_RCC_OscConfig+0x47c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a75      	ldr	r2, [pc, #468]	; (8002afc <HAL_RCC_OscConfig+0x47c>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7ff f96d 	bl	8001c0c <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7ff f969 	bl	8001c0c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e118      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <HAL_RCC_OscConfig+0x47c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x2ea>
 800295c:	4b66      	ldr	r3, [pc, #408]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4a65      	ldr	r2, [pc, #404]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	; 0x70
 8002968:	e01c      	b.n	80029a4 <HAL_RCC_OscConfig+0x324>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x30c>
 8002972:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a60      	ldr	r2, [pc, #384]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
 800297e:	4b5e      	ldr	r3, [pc, #376]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a5d      	ldr	r2, [pc, #372]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0x324>
 800298c:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a59      	ldr	r2, [pc, #356]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7ff f92e 	bl	8001c0c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7ff f92a 	bl	8001c0c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0d7      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ca:	4b4b      	ldr	r3, [pc, #300]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ee      	beq.n	80029b4 <HAL_RCC_OscConfig+0x334>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7ff f918 	bl	8001c0c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7ff f914 	bl	8001c0c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0c1      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f6:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ee      	bne.n	80029e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	4a3a      	ldr	r2, [pc, #232]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80ad 	beq.w	8002b78 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a1e:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d060      	beq.n	8002aec <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d145      	bne.n	8002abe <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <HAL_RCC_OscConfig+0x480>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7ff f8e8 	bl	8001c0c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff f8e4 	bl	8001c0c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e093      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	019b      	lsls	r3, r3, #6
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	3b01      	subs	r3, #1
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	071b      	lsls	r3, r3, #28
 8002a8a:	491b      	ldr	r1, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_RCC_OscConfig+0x480>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7ff f8b9 	bl	8001c0c <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7ff f8b5 	bl	8001c0c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e064      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x41e>
 8002abc:	e05c      	b.n	8002b78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_RCC_OscConfig+0x480>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7ff f8a2 	bl	8001c0c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002acc:	f7ff f89e 	bl	8001c0c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e04d      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x44c>
 8002aea:	e045      	b.n	8002b78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e040      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000
 8002b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_RCC_OscConfig+0x504>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d030      	beq.n	8002b74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d129      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d122      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d119      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d10f      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d107      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800

08002b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e041      	b.n	8002c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fdcc 	bl	800174c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f000 fa74 	bl	80030b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d001      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e035      	b.n	8002cac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <HAL_TIM_Base_Start_IT+0x90>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_TIM_Base_Start_IT+0x4e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <HAL_TIM_Base_Start_IT+0x94>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_TIM_Base_Start_IT+0x4e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <HAL_TIM_Base_Start_IT+0x98>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d111      	bne.n	8002c9a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d010      	beq.n	8002caa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c98:	e007      	b.n	8002caa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	40000c00 	.word	0x40000c00
 8002cc0:	40014000 	.word	0x40014000

08002cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d122      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d11b      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0202 	mvn.w	r2, #2
 8002cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f9b5 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f9a7 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f9b8 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d122      	bne.n	8002d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d11b      	bne.n	8002d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0204 	mvn.w	r2, #4
 8002d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f98b 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002d60:	e005      	b.n	8002d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f97d 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f98e 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d122      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0208 	mvn.w	r2, #8
 8002d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f961 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f953 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f964 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d122      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d11b      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0210 	mvn.w	r2, #16
 8002dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2208      	movs	r2, #8
 8002df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f937 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002e08:	e005      	b.n	8002e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f929 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f93a 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10e      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0201 	mvn.w	r2, #1
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fc3e 	bl	80016c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b80      	cmp	r3, #128	; 0x80
 8002e54:	d10e      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d107      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa7c 	bl	800336c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f8ff 	bl	800309e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0220 	mvn.w	r2, #32
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa46 	bl	8003358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e0b4      	b.n	800305a <HAL_TIM_ConfigClockSource+0x186>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f28:	d03e      	beq.n	8002fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2e:	f200 8087 	bhi.w	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	f000 8086 	beq.w	8003046 <HAL_TIM_ConfigClockSource+0x172>
 8002f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3e:	d87f      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f40:	2b70      	cmp	r3, #112	; 0x70
 8002f42:	d01a      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0xa6>
 8002f44:	2b70      	cmp	r3, #112	; 0x70
 8002f46:	d87b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f48:	2b60      	cmp	r3, #96	; 0x60
 8002f4a:	d050      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x11a>
 8002f4c:	2b60      	cmp	r3, #96	; 0x60
 8002f4e:	d877      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f50:	2b50      	cmp	r3, #80	; 0x50
 8002f52:	d03c      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xfa>
 8002f54:	2b50      	cmp	r3, #80	; 0x50
 8002f56:	d873      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d058      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x13a>
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d86f      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f60:	2b30      	cmp	r3, #48	; 0x30
 8002f62:	d064      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15a>
 8002f64:	2b30      	cmp	r3, #48	; 0x30
 8002f66:	d86b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d060      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15a>
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d867      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05c      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15a>
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d05a      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x15a>
 8002f78:	e062      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f000 f96b 	bl	8003264 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	609a      	str	r2, [r3, #8]
      break;
 8002fa6:	e04f      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6899      	ldr	r1, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f000 f954 	bl	8003264 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fca:	609a      	str	r2, [r3, #8]
      break;
 8002fcc:	e03c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 f8c8 	bl	8003170 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2150      	movs	r1, #80	; 0x50
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f921 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002fec:	e02c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f000 f8e7 	bl	80031ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2160      	movs	r1, #96	; 0x60
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f911 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 800300c:	e01c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	461a      	mov	r2, r3
 800301c:	f000 f8a8 	bl	8003170 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f901 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 800302c:	e00c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f000 f8f8 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 800303e:	e003      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      break;
 8003044:	e000      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003058:	7bfb      	ldrb	r3, [r7, #15]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a26      	ldr	r2, [pc, #152]	; (8003160 <TIM_Base_SetConfig+0xac>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <TIM_Base_SetConfig+0x20>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a25      	ldr	r2, [pc, #148]	; (8003164 <TIM_Base_SetConfig+0xb0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d108      	bne.n	80030e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <TIM_Base_SetConfig+0xac>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00b      	beq.n	8003106 <TIM_Base_SetConfig+0x52>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <TIM_Base_SetConfig+0xb0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <TIM_Base_SetConfig+0x52>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <TIM_Base_SetConfig+0xb4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d003      	beq.n	8003106 <TIM_Base_SetConfig+0x52>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1a      	ldr	r2, [pc, #104]	; (800316c <TIM_Base_SetConfig+0xb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d108      	bne.n	8003118 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <TIM_Base_SetConfig+0xac>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d103      	bne.n	800314c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	615a      	str	r2, [r3, #20]
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40010000 	.word	0x40010000
 8003164:	40000c00 	.word	0x40000c00
 8003168:	40014000 	.word	0x40014000
 800316c:	40014800 	.word	0x40014800

08003170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0201 	bic.w	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800319a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f023 030a 	bic.w	r3, r3, #10
 80031ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b087      	sub	sp, #28
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f023 0210 	bic.w	r2, r3, #16
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	031b      	lsls	r3, r3, #12
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800320a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	f043 0307 	orr.w	r3, r3, #7
 8003250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	609a      	str	r2, [r3, #8]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	021a      	lsls	r2, r3, #8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	431a      	orrs	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e041      	b.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d009      	beq.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a12      	ldr	r2, [pc, #72]	; (8003350 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10c      	bne.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800331a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	4313      	orrs	r3, r2
 8003324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40010000 	.word	0x40010000
 8003350:	40000c00 	.word	0x40000c00
 8003354:	40014000 	.word	0x40014000

08003358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e03f      	b.n	8003412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe f9f2 	bl	8001790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fd7b 	bl	8003ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b08a      	sub	sp, #40	; 0x28
 800341e:	af02      	add	r7, sp, #8
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b20      	cmp	r3, #32
 8003438:	d17c      	bne.n	8003534 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_UART_Transmit+0x2c>
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e075      	b.n	8003536 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_UART_Transmit+0x3e>
 8003454:	2302      	movs	r3, #2
 8003456:	e06e      	b.n	8003536 <HAL_UART_Transmit+0x11c>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2221      	movs	r2, #33	; 0x21
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800346e:	f7fe fbcd 	bl	8001c0c <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	88fa      	ldrh	r2, [r7, #6]
 800347e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003488:	d108      	bne.n	800349c <HAL_UART_Transmit+0x82>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	e003      	b.n	80034a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034ac:	e02a      	b.n	8003504 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 faf9 	bl	8003ab0 <UART_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e036      	b.n	8003536 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	3302      	adds	r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e007      	b.n	80034f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	3301      	adds	r3, #1
 80034f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1cf      	bne.n	80034ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2140      	movs	r1, #64	; 0x40
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fac9 	bl	8003ab0 <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e006      	b.n	8003536 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b0ba      	sub	sp, #232	; 0xe8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800357e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10f      	bne.n	80035a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_UART_IRQHandler+0x66>
 8003592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fbd3 	bl	8003d4a <UART_Receive_IT>
      return;
 80035a4:	e256      	b.n	8003a54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80de 	beq.w	800376c <HAL_UART_IRQHandler+0x22c>
 80035b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80d1 	beq.w	800376c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_UART_IRQHandler+0xae>
 80035d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_UART_IRQHandler+0xd2>
 80035fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f043 0202 	orr.w	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_UART_IRQHandler+0xf6>
 800361e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0204 	orr.w	r2, r3, #4
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d011      	beq.n	8003666 <HAL_UART_IRQHandler+0x126>
 8003642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d105      	bne.n	800365a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800364e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f043 0208 	orr.w	r2, r3, #8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 81ed 	beq.w	8003a4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_UART_IRQHandler+0x14e>
 800367c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fb5e 	bl	8003d4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <HAL_UART_IRQHandler+0x17a>
 80036b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d04f      	beq.n	800375a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa66 	bl	8003b8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d141      	bne.n	8003752 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3314      	adds	r3, #20
 80036f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1d9      	bne.n	80036ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	2b00      	cmp	r3, #0
 8003720:	d013      	beq.n	800374a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	4a7d      	ldr	r2, [pc, #500]	; (800391c <HAL_UART_IRQHandler+0x3dc>)
 8003728:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fbca 	bl	8001ec8 <HAL_DMA_Abort_IT>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d016      	beq.n	8003768 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003744:	4610      	mov	r0, r2
 8003746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	e00e      	b.n	8003768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f99a 	bl	8003a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003750:	e00a      	b.n	8003768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f996 	bl	8003a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003758:	e006      	b.n	8003768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f992 	bl	8003a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003766:	e170      	b.n	8003a4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	bf00      	nop
    return;
 800376a:	e16e      	b.n	8003a4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	2b01      	cmp	r3, #1
 8003772:	f040 814a 	bne.w	8003a0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8143 	beq.w	8003a0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 813c 	beq.w	8003a0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	f040 80b4 	bne.w	8003920 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8140 	beq.w	8003a4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037d6:	429a      	cmp	r2, r3
 80037d8:	f080 8139 	bcs.w	8003a4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ee:	f000 8088 	beq.w	8003902 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800380c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800381e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800382a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1d9      	bne.n	80037f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3314      	adds	r3, #20
 8003844:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800384e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003862:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003866:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800386a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e1      	bne.n	800383e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3314      	adds	r3, #20
 8003880:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800388a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800388c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3314      	adds	r3, #20
 800389a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800389e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e3      	bne.n	800387a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d2:	f023 0310 	bic.w	r3, r3, #16
 80038d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	330c      	adds	r3, #12
 80038e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80038e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e3      	bne.n	80038c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fa73 	bl	8001de8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800390a:	b29b      	uxth	r3, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	b29b      	uxth	r3, r3
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8c0 	bl	8003a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003918:	e099      	b.n	8003a4e <HAL_UART_IRQHandler+0x50e>
 800391a:	bf00      	nop
 800391c:	08003c53 	.word	0x08003c53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003928:	b29b      	uxth	r3, r3
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 808b 	beq.w	8003a52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800393c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8086 	beq.w	8003a52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800395c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800396a:	647a      	str	r2, [r7, #68]	; 0x44
 800396c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e3      	bne.n	8003946 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	623b      	str	r3, [r7, #32]
   return(result);
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3314      	adds	r3, #20
 800399e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039a2:	633a      	str	r2, [r7, #48]	; 0x30
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e3      	bne.n	800397e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0310 	bic.w	r3, r3, #16
 80039da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039e8:	61fa      	str	r2, [r7, #28]
 80039ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	69b9      	ldr	r1, [r7, #24]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	617b      	str	r3, [r7, #20]
   return(result);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e3      	bne.n	80039c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f848 	bl	8003a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a08:	e023      	b.n	8003a52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_UART_IRQHandler+0x4ea>
 8003a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f929 	bl	8003c7a <UART_Transmit_IT>
    return;
 8003a28:	e014      	b.n	8003a54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00e      	beq.n	8003a54 <HAL_UART_IRQHandler+0x514>
 8003a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f969 	bl	8003d1a <UART_EndTransmit_IT>
    return;
 8003a48:	e004      	b.n	8003a54 <HAL_UART_IRQHandler+0x514>
    return;
 8003a4a:	bf00      	nop
 8003a4c:	e002      	b.n	8003a54 <HAL_UART_IRQHandler+0x514>
      return;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <HAL_UART_IRQHandler+0x514>
      return;
 8003a52:	bf00      	nop
  }
}
 8003a54:	37e8      	adds	r7, #232	; 0xe8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop

08003a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b090      	sub	sp, #64	; 0x40
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac0:	e050      	b.n	8003b64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d04c      	beq.n	8003b64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ad0:	f7fe f89c 	bl	8001c0c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d241      	bcs.n	8003b64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	330c      	adds	r3, #12
 8003afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b00:	637a      	str	r2, [r7, #52]	; 0x34
 8003b02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e5      	bne.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3314      	adds	r3, #20
 8003b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	613b      	str	r3, [r7, #16]
   return(result);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3314      	adds	r3, #20
 8003b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b34:	623a      	str	r2, [r7, #32]
 8003b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	69f9      	ldr	r1, [r7, #28]
 8003b3a:	6a3a      	ldr	r2, [r7, #32]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e00f      	b.n	8003b84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d09f      	beq.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3740      	adds	r7, #64	; 0x40
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b095      	sub	sp, #84	; 0x54
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bb4:	643a      	str	r2, [r7, #64]	; 0x40
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e5      	bne.n	8003b94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3314      	adds	r3, #20
 8003be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e5      	bne.n	8003bc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d119      	bne.n	8003c38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f023 0310 	bic.w	r3, r3, #16
 8003c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c24:	61ba      	str	r2, [r7, #24]
 8003c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6979      	ldr	r1, [r7, #20]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	613b      	str	r3, [r7, #16]
   return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e5      	bne.n	8003c04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c46:	bf00      	nop
 8003c48:	3754      	adds	r7, #84	; 0x54
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7ff ff09 	bl	8003a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b21      	cmp	r3, #33	; 0x21
 8003c8c:	d13e      	bne.n	8003d0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d114      	bne.n	8003cc2 <UART_Transmit_IT+0x48>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d110      	bne.n	8003cc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	1c9a      	adds	r2, r3, #2
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	621a      	str	r2, [r3, #32]
 8003cc0:	e008      	b.n	8003cd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	1c59      	adds	r1, r3, #1
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6211      	str	r1, [r2, #32]
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10f      	bne.n	8003d08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e000      	b.n	8003d0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fe8e 	bl	8003a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b08c      	sub	sp, #48	; 0x30
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b22      	cmp	r3, #34	; 0x22
 8003d5c:	f040 80ab 	bne.w	8003eb6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d68:	d117      	bne.n	8003d9a <UART_Receive_IT+0x50>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d113      	bne.n	8003d9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	1c9a      	adds	r2, r3, #2
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
 8003d98:	e026      	b.n	8003de8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dac:	d007      	beq.n	8003dbe <UART_Receive_IT+0x74>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <UART_Receive_IT+0x82>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e008      	b.n	8003dde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4619      	mov	r1, r3
 8003df6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d15a      	bne.n	8003eb2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0220 	bic.w	r2, r2, #32
 8003e0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d135      	bne.n	8003ea8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	613b      	str	r3, [r7, #16]
   return(result);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f023 0310 	bic.w	r3, r3, #16
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	623a      	str	r2, [r7, #32]
 8003e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	69f9      	ldr	r1, [r7, #28]
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e5      	bne.n	8003e42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d10a      	bne.n	8003e9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff fdf9 	bl	8003a98 <HAL_UARTEx_RxEventCallback>
 8003ea6:	e002      	b.n	8003eae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff fde1 	bl	8003a70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e002      	b.n	8003eb8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3730      	adds	r7, #48	; 0x30
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec4:	b0c0      	sub	sp, #256	; 0x100
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	68d9      	ldr	r1, [r3, #12]
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	ea40 0301 	orr.w	r3, r0, r1
 8003ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f18:	f021 010c 	bic.w	r1, r1, #12
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f26:	430b      	orrs	r3, r1
 8003f28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3a:	6999      	ldr	r1, [r3, #24]
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	ea40 0301 	orr.w	r3, r0, r1
 8003f46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b8f      	ldr	r3, [pc, #572]	; (800418c <UART_SetConfig+0x2cc>)
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d005      	beq.n	8003f60 <UART_SetConfig+0xa0>
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b8d      	ldr	r3, [pc, #564]	; (8004190 <UART_SetConfig+0x2d0>)
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d104      	bne.n	8003f6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7fe fb48 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8003f64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f68:	e003      	b.n	8003f72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f6a:	f7fe fb2f 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8003f6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	f040 810c 	bne.w	8004198 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	1891      	adds	r1, r2, r2
 8003f98:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f9a:	415b      	adcs	r3, r3
 8003f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	eb12 0801 	adds.w	r8, r2, r1
 8003fa8:	4629      	mov	r1, r5
 8003faa:	eb43 0901 	adc.w	r9, r3, r1
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc2:	4690      	mov	r8, r2
 8003fc4:	4699      	mov	r9, r3
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	eb18 0303 	adds.w	r3, r8, r3
 8003fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	eb49 0303 	adc.w	r3, r9, r3
 8003fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fe6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fee:	460b      	mov	r3, r1
 8003ff0:	18db      	adds	r3, r3, r3
 8003ff2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	eb42 0303 	adc.w	r3, r2, r3
 8003ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8003ffc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004000:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004004:	f7fc fe40 	bl	8000c88 <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4b61      	ldr	r3, [pc, #388]	; (8004194 <UART_SetConfig+0x2d4>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	011c      	lsls	r4, r3, #4
 8004016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004020:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004024:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004030:	415b      	adcs	r3, r3
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004038:	4641      	mov	r1, r8
 800403a:	eb12 0a01 	adds.w	sl, r2, r1
 800403e:	4649      	mov	r1, r9
 8004040:	eb43 0b01 	adc.w	fp, r3, r1
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004050:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004058:	4692      	mov	sl, r2
 800405a:	469b      	mov	fp, r3
 800405c:	4643      	mov	r3, r8
 800405e:	eb1a 0303 	adds.w	r3, sl, r3
 8004062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004066:	464b      	mov	r3, r9
 8004068:	eb4b 0303 	adc.w	r3, fp, r3
 800406c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800407c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004080:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004084:	460b      	mov	r3, r1
 8004086:	18db      	adds	r3, r3, r3
 8004088:	643b      	str	r3, [r7, #64]	; 0x40
 800408a:	4613      	mov	r3, r2
 800408c:	eb42 0303 	adc.w	r3, r2, r3
 8004090:	647b      	str	r3, [r7, #68]	; 0x44
 8004092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004096:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800409a:	f7fc fdf5 	bl	8000c88 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <UART_SetConfig+0x2d4>)
 80040a6:	fba3 2301 	umull	r2, r3, r3, r1
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2264      	movs	r2, #100	; 0x64
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	1acb      	subs	r3, r1, r3
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040ba:	4b36      	ldr	r3, [pc, #216]	; (8004194 <UART_SetConfig+0x2d4>)
 80040bc:	fba3 2302 	umull	r2, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040c8:	441c      	add	r4, r3
 80040ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80040e4:	415b      	adcs	r3, r3
 80040e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040ec:	4641      	mov	r1, r8
 80040ee:	1851      	adds	r1, r2, r1
 80040f0:	6339      	str	r1, [r7, #48]	; 0x30
 80040f2:	4649      	mov	r1, r9
 80040f4:	414b      	adcs	r3, r1
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004104:	4659      	mov	r1, fp
 8004106:	00cb      	lsls	r3, r1, #3
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410e:	4651      	mov	r1, sl
 8004110:	00ca      	lsls	r2, r1, #3
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	4603      	mov	r3, r0
 8004118:	4642      	mov	r2, r8
 800411a:	189b      	adds	r3, r3, r2
 800411c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004120:	464b      	mov	r3, r9
 8004122:	460a      	mov	r2, r1
 8004124:	eb42 0303 	adc.w	r3, r2, r3
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004138:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800413c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004140:	460b      	mov	r3, r1
 8004142:	18db      	adds	r3, r3, r3
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
 8004146:	4613      	mov	r3, r2
 8004148:	eb42 0303 	adc.w	r3, r2, r3
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004152:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004156:	f7fc fd97 	bl	8000c88 <__aeabi_uldivmod>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <UART_SetConfig+0x2d4>)
 8004160:	fba3 1302 	umull	r1, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	2164      	movs	r1, #100	; 0x64
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	3332      	adds	r3, #50	; 0x32
 8004172:	4a08      	ldr	r2, [pc, #32]	; (8004194 <UART_SetConfig+0x2d4>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	f003 0207 	and.w	r2, r3, #7
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4422      	add	r2, r4
 8004186:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004188:	e105      	b.n	8004396 <UART_SetConfig+0x4d6>
 800418a:	bf00      	nop
 800418c:	40011000 	.word	0x40011000
 8004190:	40011400 	.word	0x40011400
 8004194:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800419c:	2200      	movs	r2, #0
 800419e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041aa:	4642      	mov	r2, r8
 80041ac:	464b      	mov	r3, r9
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	6239      	str	r1, [r7, #32]
 80041b2:	415b      	adcs	r3, r3
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
 80041b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ba:	4641      	mov	r1, r8
 80041bc:	1854      	adds	r4, r2, r1
 80041be:	4649      	mov	r1, r9
 80041c0:	eb43 0501 	adc.w	r5, r3, r1
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	00eb      	lsls	r3, r5, #3
 80041ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d2:	00e2      	lsls	r2, r4, #3
 80041d4:	4614      	mov	r4, r2
 80041d6:	461d      	mov	r5, r3
 80041d8:	4643      	mov	r3, r8
 80041da:	18e3      	adds	r3, r4, r3
 80041dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041e0:	464b      	mov	r3, r9
 80041e2:	eb45 0303 	adc.w	r3, r5, r3
 80041e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004206:	4629      	mov	r1, r5
 8004208:	008b      	lsls	r3, r1, #2
 800420a:	4621      	mov	r1, r4
 800420c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004210:	4621      	mov	r1, r4
 8004212:	008a      	lsls	r2, r1, #2
 8004214:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004218:	f7fc fd36 	bl	8000c88 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <UART_SetConfig+0x4e4>)
 8004222:	fba3 2302 	umull	r2, r3, r3, r2
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	011c      	lsls	r4, r3, #4
 800422a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004234:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004238:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	1891      	adds	r1, r2, r2
 8004242:	61b9      	str	r1, [r7, #24]
 8004244:	415b      	adcs	r3, r3
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800424c:	4641      	mov	r1, r8
 800424e:	1851      	adds	r1, r2, r1
 8004250:	6139      	str	r1, [r7, #16]
 8004252:	4649      	mov	r1, r9
 8004254:	414b      	adcs	r3, r1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004264:	4659      	mov	r1, fp
 8004266:	00cb      	lsls	r3, r1, #3
 8004268:	4651      	mov	r1, sl
 800426a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426e:	4651      	mov	r1, sl
 8004270:	00ca      	lsls	r2, r1, #3
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	4603      	mov	r3, r0
 8004278:	4642      	mov	r2, r8
 800427a:	189b      	adds	r3, r3, r2
 800427c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004280:	464b      	mov	r3, r9
 8004282:	460a      	mov	r2, r1
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	67bb      	str	r3, [r7, #120]	; 0x78
 8004296:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042a4:	4649      	mov	r1, r9
 80042a6:	008b      	lsls	r3, r1, #2
 80042a8:	4641      	mov	r1, r8
 80042aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ae:	4641      	mov	r1, r8
 80042b0:	008a      	lsls	r2, r1, #2
 80042b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042b6:	f7fc fce7 	bl	8000c88 <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <UART_SetConfig+0x4e4>)
 80042c0:	fba3 1302 	umull	r1, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2164      	movs	r1, #100	; 0x64
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	3332      	adds	r3, #50	; 0x32
 80042d2:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <UART_SetConfig+0x4e4>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042de:	441c      	add	r4, r3
 80042e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e4:	2200      	movs	r2, #0
 80042e6:	673b      	str	r3, [r7, #112]	; 0x70
 80042e8:	677a      	str	r2, [r7, #116]	; 0x74
 80042ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042ee:	4642      	mov	r2, r8
 80042f0:	464b      	mov	r3, r9
 80042f2:	1891      	adds	r1, r2, r2
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	415b      	adcs	r3, r3
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042fe:	4641      	mov	r1, r8
 8004300:	1851      	adds	r1, r2, r1
 8004302:	6039      	str	r1, [r7, #0]
 8004304:	4649      	mov	r1, r9
 8004306:	414b      	adcs	r3, r1
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004316:	4659      	mov	r1, fp
 8004318:	00cb      	lsls	r3, r1, #3
 800431a:	4651      	mov	r1, sl
 800431c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004320:	4651      	mov	r1, sl
 8004322:	00ca      	lsls	r2, r1, #3
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	4603      	mov	r3, r0
 800432a:	4642      	mov	r2, r8
 800432c:	189b      	adds	r3, r3, r2
 800432e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004330:	464b      	mov	r3, r9
 8004332:	460a      	mov	r2, r1
 8004334:	eb42 0303 	adc.w	r3, r2, r3
 8004338:	66fb      	str	r3, [r7, #108]	; 0x6c
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	663b      	str	r3, [r7, #96]	; 0x60
 8004344:	667a      	str	r2, [r7, #100]	; 0x64
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004352:	4649      	mov	r1, r9
 8004354:	008b      	lsls	r3, r1, #2
 8004356:	4641      	mov	r1, r8
 8004358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435c:	4641      	mov	r1, r8
 800435e:	008a      	lsls	r2, r1, #2
 8004360:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004364:	f7fc fc90 	bl	8000c88 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <UART_SetConfig+0x4e4>)
 800436e:	fba3 1302 	umull	r1, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2164      	movs	r1, #100	; 0x64
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	3332      	adds	r3, #50	; 0x32
 8004380:	4a08      	ldr	r2, [pc, #32]	; (80043a4 <UART_SetConfig+0x4e4>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4422      	add	r2, r4
 8004394:	609a      	str	r2, [r3, #8]
}
 8004396:	bf00      	nop
 8004398:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a2:	bf00      	nop
 80043a4:	51eb851f 	.word	0x51eb851f

080043a8 <__NVIC_SetPriority>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	6039      	str	r1, [r7, #0]
 80043b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	db0a      	blt.n	80043d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	490c      	ldr	r1, [pc, #48]	; (80043f4 <__NVIC_SetPriority+0x4c>)
 80043c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c6:	0112      	lsls	r2, r2, #4
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	440b      	add	r3, r1
 80043cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043d0:	e00a      	b.n	80043e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	4908      	ldr	r1, [pc, #32]	; (80043f8 <__NVIC_SetPriority+0x50>)
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	3b04      	subs	r3, #4
 80043e0:	0112      	lsls	r2, r2, #4
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	440b      	add	r3, r1
 80043e6:	761a      	strb	r2, [r3, #24]
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	e000e100 	.word	0xe000e100
 80043f8:	e000ed00 	.word	0xe000ed00

080043fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <SysTick_Handler+0x1c>)
 8004402:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004404:	f001 fd28 	bl	8005e58 <xTaskGetSchedulerState>
 8004408:	4603      	mov	r3, r0
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800440e:	f002 fb13 	bl	8006a38 <xPortSysTickHandler>
  }
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	e000e010 	.word	0xe000e010

0800441c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004420:	2100      	movs	r1, #0
 8004422:	f06f 0004 	mvn.w	r0, #4
 8004426:	f7ff ffbf 	bl	80043a8 <__NVIC_SetPriority>
#endif
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004436:	f3ef 8305 	mrs	r3, IPSR
 800443a:	603b      	str	r3, [r7, #0]
  return(result);
 800443c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004442:	f06f 0305 	mvn.w	r3, #5
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	e00c      	b.n	8004464 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <osKernelInitialize+0x44>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <osKernelInitialize+0x44>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004458:	2300      	movs	r3, #0
 800445a:	607b      	str	r3, [r7, #4]
 800445c:	e002      	b.n	8004464 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004464:	687b      	ldr	r3, [r7, #4]
}
 8004466:	4618      	mov	r0, r3
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000338 	.word	0x20000338

08004478 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800447e:	f3ef 8305 	mrs	r3, IPSR
 8004482:	603b      	str	r3, [r7, #0]
  return(result);
 8004484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <osKernelStart+0x1a>
    stat = osErrorISR;
 800448a:	f06f 0305 	mvn.w	r3, #5
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	e010      	b.n	80044b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <osKernelStart+0x48>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d109      	bne.n	80044ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800449a:	f7ff ffbf 	bl	800441c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <osKernelStart+0x48>)
 80044a0:	2202      	movs	r2, #2
 80044a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044a4:	f001 f87c 	bl	80055a0 <vTaskStartScheduler>
      stat = osOK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	e002      	b.n	80044b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044b4:	687b      	ldr	r3, [r7, #4]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000338 	.word	0x20000338

080044c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08e      	sub	sp, #56	; 0x38
 80044c8:	af04      	add	r7, sp, #16
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044d4:	f3ef 8305 	mrs	r3, IPSR
 80044d8:	617b      	str	r3, [r7, #20]
  return(result);
 80044da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d17e      	bne.n	80045de <osThreadNew+0x11a>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d07b      	beq.n	80045de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044ea:	2318      	movs	r3, #24
 80044ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d045      	beq.n	800458a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <osThreadNew+0x48>
        name = attr->name;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <osThreadNew+0x6e>
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b38      	cmp	r3, #56	; 0x38
 8004524:	d805      	bhi.n	8004532 <osThreadNew+0x6e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <osThreadNew+0x72>
        return (NULL);
 8004532:	2300      	movs	r3, #0
 8004534:	e054      	b.n	80045e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00e      	beq.n	800456c <osThreadNew+0xa8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2bbb      	cmp	r3, #187	; 0xbb
 8004554:	d90a      	bls.n	800456c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800455a:	2b00      	cmp	r3, #0
 800455c:	d006      	beq.n	800456c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <osThreadNew+0xa8>
        mem = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	e010      	b.n	800458e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10c      	bne.n	800458e <osThreadNew+0xca>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d108      	bne.n	800458e <osThreadNew+0xca>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <osThreadNew+0xca>
          mem = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	e001      	b.n	800458e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d110      	bne.n	80045b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800459c:	9202      	str	r2, [sp, #8]
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6a3a      	ldr	r2, [r7, #32]
 80045a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fe0c 	bl	80051c8 <xTaskCreateStatic>
 80045b0:	4603      	mov	r3, r0
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	e013      	b.n	80045de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d110      	bne.n	80045de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	f107 0310 	add.w	r3, r7, #16
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fe57 	bl	8005282 <xTaskCreate>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d001      	beq.n	80045de <osThreadNew+0x11a>
            hTask = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045de:	693b      	ldr	r3, [r7, #16]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3728      	adds	r7, #40	; 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f0:	f3ef 8305 	mrs	r3, IPSR
 80045f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80045f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <osDelay+0x1c>
    stat = osErrorISR;
 80045fc:	f06f 0305 	mvn.w	r3, #5
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e007      	b.n	8004614 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <osDelay+0x2c>
      vTaskDelay(ticks);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 ff92 	bl	8005538 <vTaskDelay>
    }
  }

  return (stat);
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a07      	ldr	r2, [pc, #28]	; (800464c <vApplicationGetIdleTaskMemory+0x2c>)
 8004630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a06      	ldr	r2, [pc, #24]	; (8004650 <vApplicationGetIdleTaskMemory+0x30>)
 8004636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	601a      	str	r2, [r3, #0]
}
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	2000033c 	.word	0x2000033c
 8004650:	200003f8 	.word	0x200003f8

08004654 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a07      	ldr	r2, [pc, #28]	; (8004680 <vApplicationGetTimerTaskMemory+0x2c>)
 8004664:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a06      	ldr	r2, [pc, #24]	; (8004684 <vApplicationGetTimerTaskMemory+0x30>)
 800466a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004672:	601a      	str	r2, [r3, #0]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	200005f8 	.word	0x200005f8
 8004684:	200006b4 	.word	0x200006b4

08004688 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f103 0208 	add.w	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f103 0208 	add.w	r2, r3, #8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f103 0208 	add.w	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d103      	bne.n	800474a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e00c      	b.n	8004764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3308      	adds	r3, #8
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e002      	b.n	8004758 <vListInsert+0x2e>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d2f6      	bcs.n	8004752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6892      	ldr	r2, [r2, #8]
 80047b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6852      	ldr	r2, [r2, #4]
 80047bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d103      	bne.n	80047d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1e5a      	subs	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800481a:	f002 f87b 	bl	8006914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	441a      	add	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	3b01      	subs	r3, #1
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	441a      	add	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	22ff      	movs	r2, #255	; 0xff
 800485e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	22ff      	movs	r2, #255	; 0xff
 8004866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d114      	bne.n	800489a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01a      	beq.n	80048ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3310      	adds	r3, #16
 800487c:	4618      	mov	r0, r3
 800487e:	f001 f929 	bl	8005ad4 <xTaskRemoveFromEventList>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <xQueueGenericReset+0xcc>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	e009      	b.n	80048ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3310      	adds	r3, #16
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fef2 	bl	8004688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3324      	adds	r3, #36	; 0x24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff feed 	bl	8004688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048ae:	f002 f861 	bl	8006974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048b2:	2301      	movs	r3, #1
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08e      	sub	sp, #56	; 0x38
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <xQueueGenericCreateStatic+0x52>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <xQueueGenericCreateStatic+0x56>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <xQueueGenericCreateStatic+0x58>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	623b      	str	r3, [r7, #32]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <xQueueGenericCreateStatic+0x7e>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <xQueueGenericCreateStatic+0x82>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericCreateStatic+0x84>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	61fb      	str	r3, [r7, #28]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800495e:	2350      	movs	r3, #80	; 0x50
 8004960:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b50      	cmp	r3, #80	; 0x50
 8004966:	d00a      	beq.n	800497e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	61bb      	str	r3, [r7, #24]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800497e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004992:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f805 	bl	80049b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3730      	adds	r7, #48	; 0x30
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e002      	b.n	80049d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049de:	2101      	movs	r1, #1
 80049e0:	69b8      	ldr	r0, [r7, #24]
 80049e2:	f7ff ff05 	bl	80047f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	78fa      	ldrb	r2, [r7, #3]
 80049ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08e      	sub	sp, #56	; 0x38
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a06:	2300      	movs	r3, #0
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <xQueueGenericSend+0x32>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <xQueueGenericSend+0x40>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <xQueueGenericSend+0x44>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <xQueueGenericSend+0x46>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <xQueueGenericSend+0x60>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d103      	bne.n	8004a66 <xQueueGenericSend+0x6e>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <xQueueGenericSend+0x72>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueGenericSend+0x74>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueGenericSend+0x8e>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	623b      	str	r3, [r7, #32]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a86:	f001 f9e7 	bl	8005e58 <xTaskGetSchedulerState>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <xQueueGenericSend+0x9e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <xQueueGenericSend+0xa2>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueGenericSend+0xa4>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	61fb      	str	r3, [r7, #28]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ab6:	f001 ff2d 	bl	8006914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <xQueueGenericSend+0xd4>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d129      	bne.n	8004b20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad2:	f000 fa0b 	bl	8004eec <prvCopyDataToQueue>
 8004ad6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	3324      	adds	r3, #36	; 0x24
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fff5 	bl	8005ad4 <xTaskRemoveFromEventList>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004af0:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <xQueueGenericSend+0x1f8>)
 8004af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	e00a      	b.n	8004b18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b08:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <xQueueGenericSend+0x1f8>)
 8004b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b18:	f001 ff2c 	bl	8006974 <vPortExitCritical>
				return pdPASS;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e063      	b.n	8004be8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b26:	f001 ff25 	bl	8006974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e05c      	b.n	8004be8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b34:	f107 0314 	add.w	r3, r7, #20
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 f82f 	bl	8005b9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b42:	f001 ff17 	bl	8006974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b46:	f000 fd9b 	bl	8005680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b4a:	f001 fee3 	bl	8006914 <vPortEnterCritical>
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5a:	d103      	bne.n	8004b64 <xQueueGenericSend+0x16c>
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b6a:	b25b      	sxtb	r3, r3
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d103      	bne.n	8004b7a <xQueueGenericSend+0x182>
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b7a:	f001 fefb 	bl	8006974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b7e:	1d3a      	adds	r2, r7, #4
 8004b80:	f107 0314 	add.w	r3, r7, #20
 8004b84:	4611      	mov	r1, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f001 f81e 	bl	8005bc8 <xTaskCheckForTimeOut>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d124      	bne.n	8004bdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b94:	f000 faa2 	bl	80050dc <prvIsQueueFull>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d018      	beq.n	8004bd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	3310      	adds	r3, #16
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 ff44 	bl	8005a34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bae:	f000 fa2d 	bl	800500c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bb2:	f000 fd73 	bl	800569c <xTaskResumeAll>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f47f af7c 	bne.w	8004ab6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <xQueueGenericSend+0x1f8>)
 8004bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	e772      	b.n	8004ab6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bd2:	f000 fa1b 	bl	800500c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bd6:	f000 fd61 	bl	800569c <xTaskResumeAll>
 8004bda:	e76c      	b.n	8004ab6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bde:	f000 fa15 	bl	800500c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004be2:	f000 fd5b 	bl	800569c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004be6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3738      	adds	r7, #56	; 0x38
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b090      	sub	sp, #64	; 0x40
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <xQueueGenericSendFromISR+0x3c>
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <xQueueGenericSendFromISR+0x40>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <xQueueGenericSendFromISR+0x42>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d103      	bne.n	8004c5e <xQueueGenericSendFromISR+0x6a>
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <xQueueGenericSendFromISR+0x6e>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <xQueueGenericSendFromISR+0x70>
 8004c62:	2300      	movs	r3, #0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	623b      	str	r3, [r7, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c7e:	f001 ff2b 	bl	8006ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c82:	f3ef 8211 	mrs	r2, BASEPRI
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	61fa      	str	r2, [r7, #28]
 8004c98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d302      	bcc.n	8004cb0 <xQueueGenericSendFromISR+0xbc>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d12f      	bne.n	8004d10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cc6:	f000 f911 	bl	8004eec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd2:	d112      	bne.n	8004cfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d016      	beq.n	8004d0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	3324      	adds	r3, #36	; 0x24
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fef7 	bl	8005ad4 <xTaskRemoveFromEventList>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00e      	beq.n	8004d0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	e007      	b.n	8004d0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cfe:	3301      	adds	r3, #1
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	b25a      	sxtb	r2, r3
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d0e:	e001      	b.n	8004d14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3740      	adds	r7, #64	; 0x40
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08c      	sub	sp, #48	; 0x30
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <xQueueReceive+0x30>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	623b      	str	r3, [r7, #32]
}
 8004d58:	bf00      	nop
 8004d5a:	e7fe      	b.n	8004d5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <xQueueReceive+0x3e>
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <xQueueReceive+0x42>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <xQueueReceive+0x44>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xQueueReceive+0x5e>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	61fb      	str	r3, [r7, #28]
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d8a:	f001 f865 	bl	8005e58 <xTaskGetSchedulerState>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <xQueueReceive+0x6e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <xQueueReceive+0x72>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <xQueueReceive+0x74>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xQueueReceive+0x8e>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	61bb      	str	r3, [r7, #24]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dba:	f001 fdab 	bl	8006914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01f      	beq.n	8004e0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dce:	f000 f8f7 	bl	8004fc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	1e5a      	subs	r2, r3, #1
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00f      	beq.n	8004e02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	3310      	adds	r3, #16
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fe74 	bl	8005ad4 <xTaskRemoveFromEventList>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004df2:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <xQueueReceive+0x1bc>)
 8004df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e02:	f001 fdb7 	bl	8006974 <vPortExitCritical>
				return pdPASS;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e069      	b.n	8004ede <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e10:	f001 fdb0 	bl	8006974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e062      	b.n	8004ede <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e1e:	f107 0310 	add.w	r3, r7, #16
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 feba 	bl	8005b9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e2c:	f001 fda2 	bl	8006974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e30:	f000 fc26 	bl	8005680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e34:	f001 fd6e 	bl	8006914 <vPortEnterCritical>
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e3e:	b25b      	sxtb	r3, r3
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d103      	bne.n	8004e4e <xQueueReceive+0x122>
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d103      	bne.n	8004e64 <xQueueReceive+0x138>
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e64:	f001 fd86 	bl	8006974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e68:	1d3a      	adds	r2, r7, #4
 8004e6a:	f107 0310 	add.w	r3, r7, #16
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fea9 	bl	8005bc8 <xTaskCheckForTimeOut>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d123      	bne.n	8004ec4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7e:	f000 f917 	bl	80050b0 <prvIsQueueEmpty>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d017      	beq.n	8004eb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	3324      	adds	r3, #36	; 0x24
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fdcf 	bl	8005a34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e98:	f000 f8b8 	bl	800500c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e9c:	f000 fbfe 	bl	800569c <xTaskResumeAll>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d189      	bne.n	8004dba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <xQueueReceive+0x1bc>)
 8004ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	e780      	b.n	8004dba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eba:	f000 f8a7 	bl	800500c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ebe:	f000 fbed 	bl	800569c <xTaskResumeAll>
 8004ec2:	e77a      	b.n	8004dba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec6:	f000 f8a1 	bl	800500c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eca:	f000 fbe7 	bl	800569c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed0:	f000 f8ee 	bl	80050b0 <prvIsQueueEmpty>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f43f af6f 	beq.w	8004dba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004edc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3730      	adds	r7, #48	; 0x30
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10d      	bne.n	8004f26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d14d      	bne.n	8004fae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 ffbc 	bl	8005e94 <xTaskPriorityDisinherit>
 8004f1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	609a      	str	r2, [r3, #8]
 8004f24:	e043      	b.n	8004fae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d119      	bne.n	8004f60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6858      	ldr	r0, [r3, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	461a      	mov	r2, r3
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	f002 f93f 	bl	80071ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	441a      	add	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d32b      	bcc.n	8004fae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	e026      	b.n	8004fae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68d8      	ldr	r0, [r3, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	f002 f925 	bl	80071ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	425b      	negs	r3, r3
 8004f7a:	441a      	add	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d207      	bcs.n	8004f9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	425b      	negs	r3, r3
 8004f96:	441a      	add	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d105      	bne.n	8004fae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fb6:	697b      	ldr	r3, [r7, #20]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d018      	beq.n	8005004 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	441a      	add	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d303      	bcc.n	8004ff4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68d9      	ldr	r1, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6838      	ldr	r0, [r7, #0]
 8005000:	f002 f8db 	bl	80071ba <memcpy>
	}
}
 8005004:	bf00      	nop
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005014:	f001 fc7e 	bl	8006914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800501e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005020:	e011      	b.n	8005046 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	d012      	beq.n	8005050 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3324      	adds	r3, #36	; 0x24
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fd50 	bl	8005ad4 <xTaskRemoveFromEventList>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800503a:	f000 fe27 	bl	8005c8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	3b01      	subs	r3, #1
 8005042:	b2db      	uxtb	r3, r3
 8005044:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504a:	2b00      	cmp	r3, #0
 800504c:	dce9      	bgt.n	8005022 <prvUnlockQueue+0x16>
 800504e:	e000      	b.n	8005052 <prvUnlockQueue+0x46>
					break;
 8005050:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800505a:	f001 fc8b 	bl	8006974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800505e:	f001 fc59 	bl	8006914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005068:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800506a:	e011      	b.n	8005090 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d012      	beq.n	800509a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3310      	adds	r3, #16
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fd2b 	bl	8005ad4 <xTaskRemoveFromEventList>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005084:	f000 fe02 	bl	8005c8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	3b01      	subs	r3, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005094:	2b00      	cmp	r3, #0
 8005096:	dce9      	bgt.n	800506c <prvUnlockQueue+0x60>
 8005098:	e000      	b.n	800509c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800509a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	22ff      	movs	r2, #255	; 0xff
 80050a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050a4:	f001 fc66 	bl	8006974 <vPortExitCritical>
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050b8:	f001 fc2c 	bl	8006914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e001      	b.n	80050ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ce:	f001 fc51 	bl	8006974 <vPortExitCritical>

	return xReturn;
 80050d2:	68fb      	ldr	r3, [r7, #12]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050e4:	f001 fc16 	bl	8006914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d102      	bne.n	80050fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e001      	b.n	80050fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050fe:	f001 fc39 	bl	8006974 <vPortExitCritical>

	return xReturn;
 8005102:	68fb      	ldr	r3, [r7, #12]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e014      	b.n	8005146 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800511c:	4a0f      	ldr	r2, [pc, #60]	; (800515c <vQueueAddToRegistry+0x50>)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005128:	490c      	ldr	r1, [pc, #48]	; (800515c <vQueueAddToRegistry+0x50>)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <vQueueAddToRegistry+0x50>)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800513e:	e006      	b.n	800514e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3301      	adds	r3, #1
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b07      	cmp	r3, #7
 800514a:	d9e7      	bls.n	800511c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000ab4 	.word	0x20000ab4

08005160 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005170:	f001 fbd0 	bl	8006914 <vPortEnterCritical>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800517a:	b25b      	sxtb	r3, r3
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d103      	bne.n	800518a <vQueueWaitForMessageRestricted+0x2a>
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005190:	b25b      	sxtb	r3, r3
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d103      	bne.n	80051a0 <vQueueWaitForMessageRestricted+0x40>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a0:	f001 fbe8 	bl	8006974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	3324      	adds	r3, #36	; 0x24
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fc61 	bl	8005a7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051ba:	6978      	ldr	r0, [r7, #20]
 80051bc:	f7ff ff26 	bl	800500c <prvUnlockQueue>
	}
 80051c0:	bf00      	nop
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af04      	add	r7, sp, #16
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <xTaskCreateStatic+0x46>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	61fb      	str	r3, [r7, #28]
}
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800520e:	23bc      	movs	r3, #188	; 0xbc
 8005210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2bbc      	cmp	r3, #188	; 0xbc
 8005216:	d00a      	beq.n	800522e <xTaskCreateStatic+0x66>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	61bb      	str	r3, [r7, #24]
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800522e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01e      	beq.n	8005274 <xTaskCreateStatic+0xac>
 8005236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01b      	beq.n	8005274 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005244:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	2202      	movs	r2, #2
 800524a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800524e:	2300      	movs	r3, #0
 8005250:	9303      	str	r3, [sp, #12]
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	9302      	str	r3, [sp, #8]
 8005256:	f107 0314 	add.w	r3, r7, #20
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f850 	bl	800530c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800526c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800526e:	f000 f8f3 	bl	8005458 <prvAddNewTaskToReadyList>
 8005272:	e001      	b.n	8005278 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005278:	697b      	ldr	r3, [r7, #20]
	}
 800527a:	4618      	mov	r0, r3
 800527c:	3728      	adds	r7, #40	; 0x28
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005282:	b580      	push	{r7, lr}
 8005284:	b08c      	sub	sp, #48	; 0x30
 8005286:	af04      	add	r7, sp, #16
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4618      	mov	r0, r3
 8005298:	f001 fc5e 	bl	8006b58 <pvPortMalloc>
 800529c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052a4:	20bc      	movs	r0, #188	; 0xbc
 80052a6:	f001 fc57 	bl	8006b58 <pvPortMalloc>
 80052aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
 80052b8:	e005      	b.n	80052c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052ba:	6978      	ldr	r0, [r7, #20]
 80052bc:	f001 fd18 	bl	8006cf0 <vPortFree>
 80052c0:	e001      	b.n	80052c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d017      	beq.n	80052fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	2300      	movs	r3, #0
 80052d8:	9303      	str	r3, [sp, #12]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	9302      	str	r3, [sp, #8]
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f80e 	bl	800530c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052f0:	69f8      	ldr	r0, [r7, #28]
 80052f2:	f000 f8b1 	bl	8005458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052f6:	2301      	movs	r3, #1
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e002      	b.n	8005302 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005300:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005302:	69bb      	ldr	r3, [r7, #24]
	}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	461a      	mov	r2, r3
 8005324:	21a5      	movs	r1, #165	; 0xa5
 8005326:	f001 ff56 	bl	80071d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005334:	3b01      	subs	r3, #1
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f023 0307 	bic.w	r3, r3, #7
 8005342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <prvInitialiseNewTask+0x58>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	617b      	str	r3, [r7, #20]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01f      	beq.n	80053aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e012      	b.n	8005396 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	7819      	ldrb	r1, [r3, #0]
 8005378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	3334      	adds	r3, #52	; 0x34
 8005380:	460a      	mov	r2, r1
 8005382:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d006      	beq.n	800539e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	3301      	adds	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	2b0f      	cmp	r3, #15
 800539a:	d9e9      	bls.n	8005370 <prvInitialiseNewTask+0x64>
 800539c:	e000      	b.n	80053a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800539e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053a8:	e003      	b.n	80053b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	2b37      	cmp	r3, #55	; 0x37
 80053b6:	d901      	bls.n	80053bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053b8:	2337      	movs	r3, #55	; 0x37
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	2200      	movs	r2, #0
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	3304      	adds	r3, #4
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff f978 	bl	80046c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	3318      	adds	r3, #24
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff f973 	bl	80046c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	3354      	adds	r3, #84	; 0x54
 800540c:	2260      	movs	r2, #96	; 0x60
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f001 fee0 	bl	80071d6 <memset>
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	4a0c      	ldr	r2, [pc, #48]	; (800544c <prvInitialiseNewTask+0x140>)
 800541a:	659a      	str	r2, [r3, #88]	; 0x58
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <prvInitialiseNewTask+0x144>)
 8005420:	65da      	str	r2, [r3, #92]	; 0x5c
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	4a0b      	ldr	r2, [pc, #44]	; (8005454 <prvInitialiseNewTask+0x148>)
 8005426:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	68f9      	ldr	r1, [r7, #12]
 800542c:	69b8      	ldr	r0, [r7, #24]
 800542e:	f001 f941 	bl	80066b4 <pxPortInitialiseStack>
 8005432:	4602      	mov	r2, r0
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005442:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005444:	bf00      	nop
 8005446:	3720      	adds	r7, #32
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	0800afb8 	.word	0x0800afb8
 8005450:	0800afd8 	.word	0x0800afd8
 8005454:	0800af98 	.word	0x0800af98

08005458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005460:	f001 fa58 	bl	8006914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005464:	4b2d      	ldr	r3, [pc, #180]	; (800551c <prvAddNewTaskToReadyList+0xc4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3301      	adds	r3, #1
 800546a:	4a2c      	ldr	r2, [pc, #176]	; (800551c <prvAddNewTaskToReadyList+0xc4>)
 800546c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800546e:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <prvAddNewTaskToReadyList+0xc8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005476:	4a2a      	ldr	r2, [pc, #168]	; (8005520 <prvAddNewTaskToReadyList+0xc8>)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800547c:	4b27      	ldr	r3, [pc, #156]	; (800551c <prvAddNewTaskToReadyList+0xc4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d110      	bne.n	80054a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005484:	f000 fc26 	bl	8005cd4 <prvInitialiseTaskLists>
 8005488:	e00d      	b.n	80054a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800548a:	4b26      	ldr	r3, [pc, #152]	; (8005524 <prvAddNewTaskToReadyList+0xcc>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d109      	bne.n	80054a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005492:	4b23      	ldr	r3, [pc, #140]	; (8005520 <prvAddNewTaskToReadyList+0xc8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	429a      	cmp	r2, r3
 800549e:	d802      	bhi.n	80054a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054a0:	4a1f      	ldr	r2, [pc, #124]	; (8005520 <prvAddNewTaskToReadyList+0xc8>)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054a6:	4b20      	ldr	r3, [pc, #128]	; (8005528 <prvAddNewTaskToReadyList+0xd0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	4a1e      	ldr	r2, [pc, #120]	; (8005528 <prvAddNewTaskToReadyList+0xd0>)
 80054ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <prvAddNewTaskToReadyList+0xd0>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <prvAddNewTaskToReadyList+0xd4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d903      	bls.n	80054cc <prvAddNewTaskToReadyList+0x74>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	4a18      	ldr	r2, [pc, #96]	; (800552c <prvAddNewTaskToReadyList+0xd4>)
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4a15      	ldr	r2, [pc, #84]	; (8005530 <prvAddNewTaskToReadyList+0xd8>)
 80054da:	441a      	add	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f7ff f8fd 	bl	80046e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054e8:	f001 fa44 	bl	8006974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054ec:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <prvAddNewTaskToReadyList+0xcc>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00e      	beq.n	8005512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <prvAddNewTaskToReadyList+0xc8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	429a      	cmp	r2, r3
 8005500:	d207      	bcs.n	8005512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005502:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <prvAddNewTaskToReadyList+0xdc>)
 8005504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000fc8 	.word	0x20000fc8
 8005520:	20000af4 	.word	0x20000af4
 8005524:	20000fd4 	.word	0x20000fd4
 8005528:	20000fe4 	.word	0x20000fe4
 800552c:	20000fd0 	.word	0x20000fd0
 8005530:	20000af8 	.word	0x20000af8
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d017      	beq.n	800557a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800554a:	4b13      	ldr	r3, [pc, #76]	; (8005598 <vTaskDelay+0x60>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <vTaskDelay+0x30>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60bb      	str	r3, [r7, #8]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005568:	f000 f88a 	bl	8005680 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800556c:	2100      	movs	r1, #0
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fcfe 	bl	8005f70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005574:	f000 f892 	bl	800569c <xTaskResumeAll>
 8005578:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d107      	bne.n	8005590 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <vTaskDelay+0x64>)
 8005582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20000ff0 	.word	0x20000ff0
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055ae:	463a      	mov	r2, r7
 80055b0:	1d39      	adds	r1, r7, #4
 80055b2:	f107 0308 	add.w	r3, r7, #8
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff f832 	bl	8004620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	9202      	str	r2, [sp, #8]
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	2300      	movs	r3, #0
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	2300      	movs	r3, #0
 80055cc:	460a      	mov	r2, r1
 80055ce:	4924      	ldr	r1, [pc, #144]	; (8005660 <vTaskStartScheduler+0xc0>)
 80055d0:	4824      	ldr	r0, [pc, #144]	; (8005664 <vTaskStartScheduler+0xc4>)
 80055d2:	f7ff fdf9 	bl	80051c8 <xTaskCreateStatic>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4a23      	ldr	r2, [pc, #140]	; (8005668 <vTaskStartScheduler+0xc8>)
 80055da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055dc:	4b22      	ldr	r3, [pc, #136]	; (8005668 <vTaskStartScheduler+0xc8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055e4:	2301      	movs	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e001      	b.n	80055ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d102      	bne.n	80055fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055f4:	f000 fd10 	bl	8006018 <xTimerCreateTimerTask>
 80055f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d11b      	bne.n	8005638 <vTaskStartScheduler+0x98>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	613b      	str	r3, [r7, #16]
}
 8005612:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005614:	4b15      	ldr	r3, [pc, #84]	; (800566c <vTaskStartScheduler+0xcc>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3354      	adds	r3, #84	; 0x54
 800561a:	4a15      	ldr	r2, [pc, #84]	; (8005670 <vTaskStartScheduler+0xd0>)
 800561c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800561e:	4b15      	ldr	r3, [pc, #84]	; (8005674 <vTaskStartScheduler+0xd4>)
 8005620:	f04f 32ff 	mov.w	r2, #4294967295
 8005624:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <vTaskStartScheduler+0xd8>)
 8005628:	2201      	movs	r2, #1
 800562a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800562c:	4b13      	ldr	r3, [pc, #76]	; (800567c <vTaskStartScheduler+0xdc>)
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005632:	f001 f8cd 	bl	80067d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005636:	e00e      	b.n	8005656 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563e:	d10a      	bne.n	8005656 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	60fb      	str	r3, [r7, #12]
}
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <vTaskStartScheduler+0xb4>
}
 8005656:	bf00      	nop
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	0800af20 	.word	0x0800af20
 8005664:	08005ca5 	.word	0x08005ca5
 8005668:	20000fec 	.word	0x20000fec
 800566c:	20000af4 	.word	0x20000af4
 8005670:	20000014 	.word	0x20000014
 8005674:	20000fe8 	.word	0x20000fe8
 8005678:	20000fd4 	.word	0x20000fd4
 800567c:	20000fcc 	.word	0x20000fcc

08005680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005684:	4b04      	ldr	r3, [pc, #16]	; (8005698 <vTaskSuspendAll+0x18>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	4a03      	ldr	r2, [pc, #12]	; (8005698 <vTaskSuspendAll+0x18>)
 800568c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20000ff0 	.word	0x20000ff0

0800569c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056aa:	4b42      	ldr	r3, [pc, #264]	; (80057b4 <xTaskResumeAll+0x118>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	603b      	str	r3, [r7, #0]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056c8:	f001 f924 	bl	8006914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056cc:	4b39      	ldr	r3, [pc, #228]	; (80057b4 <xTaskResumeAll+0x118>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	4a38      	ldr	r2, [pc, #224]	; (80057b4 <xTaskResumeAll+0x118>)
 80056d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d6:	4b37      	ldr	r3, [pc, #220]	; (80057b4 <xTaskResumeAll+0x118>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d162      	bne.n	80057a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056de:	4b36      	ldr	r3, [pc, #216]	; (80057b8 <xTaskResumeAll+0x11c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d05e      	beq.n	80057a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056e6:	e02f      	b.n	8005748 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e8:	4b34      	ldr	r3, [pc, #208]	; (80057bc <xTaskResumeAll+0x120>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3318      	adds	r3, #24
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff f851 	bl	800479c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff f84c 	bl	800479c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005708:	4b2d      	ldr	r3, [pc, #180]	; (80057c0 <xTaskResumeAll+0x124>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d903      	bls.n	8005718 <xTaskResumeAll+0x7c>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	4a2a      	ldr	r2, [pc, #168]	; (80057c0 <xTaskResumeAll+0x124>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a27      	ldr	r2, [pc, #156]	; (80057c4 <xTaskResumeAll+0x128>)
 8005726:	441a      	add	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7fe ffd7 	bl	80046e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <xTaskResumeAll+0x12c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005742:	4b22      	ldr	r3, [pc, #136]	; (80057cc <xTaskResumeAll+0x130>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005748:	4b1c      	ldr	r3, [pc, #112]	; (80057bc <xTaskResumeAll+0x120>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1cb      	bne.n	80056e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005756:	f000 fb5f 	bl	8005e18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800575a:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <xTaskResumeAll+0x134>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d010      	beq.n	8005788 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005766:	f000 f847 	bl	80057f8 <xTaskIncrementTick>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005770:	4b16      	ldr	r3, [pc, #88]	; (80057cc <xTaskResumeAll+0x130>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3b01      	subs	r3, #1
 800577a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f1      	bne.n	8005766 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005782:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <xTaskResumeAll+0x134>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005788:	4b10      	ldr	r3, [pc, #64]	; (80057cc <xTaskResumeAll+0x130>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d009      	beq.n	80057a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005790:	2301      	movs	r3, #1
 8005792:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005794:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <xTaskResumeAll+0x138>)
 8005796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057a4:	f001 f8e6 	bl	8006974 <vPortExitCritical>

	return xAlreadyYielded;
 80057a8:	68bb      	ldr	r3, [r7, #8]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000ff0 	.word	0x20000ff0
 80057b8:	20000fc8 	.word	0x20000fc8
 80057bc:	20000f88 	.word	0x20000f88
 80057c0:	20000fd0 	.word	0x20000fd0
 80057c4:	20000af8 	.word	0x20000af8
 80057c8:	20000af4 	.word	0x20000af4
 80057cc:	20000fdc 	.word	0x20000fdc
 80057d0:	20000fd8 	.word	0x20000fd8
 80057d4:	e000ed04 	.word	0xe000ed04

080057d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <xTaskGetTickCount+0x1c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057e4:	687b      	ldr	r3, [r7, #4]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000fcc 	.word	0x20000fcc

080057f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005802:	4b4f      	ldr	r3, [pc, #316]	; (8005940 <xTaskIncrementTick+0x148>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f040 808f 	bne.w	800592a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800580c:	4b4d      	ldr	r3, [pc, #308]	; (8005944 <xTaskIncrementTick+0x14c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005814:	4a4b      	ldr	r2, [pc, #300]	; (8005944 <xTaskIncrementTick+0x14c>)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d120      	bne.n	8005862 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005820:	4b49      	ldr	r3, [pc, #292]	; (8005948 <xTaskIncrementTick+0x150>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <xTaskIncrementTick+0x48>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	603b      	str	r3, [r7, #0]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <xTaskIncrementTick+0x46>
 8005840:	4b41      	ldr	r3, [pc, #260]	; (8005948 <xTaskIncrementTick+0x150>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	4b41      	ldr	r3, [pc, #260]	; (800594c <xTaskIncrementTick+0x154>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a3f      	ldr	r2, [pc, #252]	; (8005948 <xTaskIncrementTick+0x150>)
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4a3f      	ldr	r2, [pc, #252]	; (800594c <xTaskIncrementTick+0x154>)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	4b3e      	ldr	r3, [pc, #248]	; (8005950 <xTaskIncrementTick+0x158>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	4a3d      	ldr	r2, [pc, #244]	; (8005950 <xTaskIncrementTick+0x158>)
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	f000 fadb 	bl	8005e18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005862:	4b3c      	ldr	r3, [pc, #240]	; (8005954 <xTaskIncrementTick+0x15c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	429a      	cmp	r2, r3
 800586a:	d349      	bcc.n	8005900 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800586c:	4b36      	ldr	r3, [pc, #216]	; (8005948 <xTaskIncrementTick+0x150>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005876:	4b37      	ldr	r3, [pc, #220]	; (8005954 <xTaskIncrementTick+0x15c>)
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	601a      	str	r2, [r3, #0]
					break;
 800587e:	e03f      	b.n	8005900 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005880:	4b31      	ldr	r3, [pc, #196]	; (8005948 <xTaskIncrementTick+0x150>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	d203      	bcs.n	80058a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005898:	4a2e      	ldr	r2, [pc, #184]	; (8005954 <xTaskIncrementTick+0x15c>)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800589e:	e02f      	b.n	8005900 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fe ff79 	bl	800479c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d004      	beq.n	80058bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	3318      	adds	r3, #24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe ff70 	bl	800479c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	4b25      	ldr	r3, [pc, #148]	; (8005958 <xTaskIncrementTick+0x160>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d903      	bls.n	80058d0 <xTaskIncrementTick+0xd8>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	4a22      	ldr	r2, [pc, #136]	; (8005958 <xTaskIncrementTick+0x160>)
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4a1f      	ldr	r2, [pc, #124]	; (800595c <xTaskIncrementTick+0x164>)
 80058de:	441a      	add	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f7fe fefb 	bl	80046e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <xTaskIncrementTick+0x168>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d3b8      	bcc.n	800586c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058fa:	2301      	movs	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058fe:	e7b5      	b.n	800586c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005900:	4b17      	ldr	r3, [pc, #92]	; (8005960 <xTaskIncrementTick+0x168>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005906:	4915      	ldr	r1, [pc, #84]	; (800595c <xTaskIncrementTick+0x164>)
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d901      	bls.n	800591c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005918:	2301      	movs	r3, #1
 800591a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800591c:	4b11      	ldr	r3, [pc, #68]	; (8005964 <xTaskIncrementTick+0x16c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005924:	2301      	movs	r3, #1
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e004      	b.n	8005934 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800592a:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <xTaskIncrementTick+0x170>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3301      	adds	r3, #1
 8005930:	4a0d      	ldr	r2, [pc, #52]	; (8005968 <xTaskIncrementTick+0x170>)
 8005932:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005934:	697b      	ldr	r3, [r7, #20]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000ff0 	.word	0x20000ff0
 8005944:	20000fcc 	.word	0x20000fcc
 8005948:	20000f80 	.word	0x20000f80
 800594c:	20000f84 	.word	0x20000f84
 8005950:	20000fe0 	.word	0x20000fe0
 8005954:	20000fe8 	.word	0x20000fe8
 8005958:	20000fd0 	.word	0x20000fd0
 800595c:	20000af8 	.word	0x20000af8
 8005960:	20000af4 	.word	0x20000af4
 8005964:	20000fdc 	.word	0x20000fdc
 8005968:	20000fd8 	.word	0x20000fd8

0800596c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005972:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <vTaskSwitchContext+0xb0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800597a:	4b29      	ldr	r3, [pc, #164]	; (8005a20 <vTaskSwitchContext+0xb4>)
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005980:	e046      	b.n	8005a10 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005982:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <vTaskSwitchContext+0xb4>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005988:	4b26      	ldr	r3, [pc, #152]	; (8005a24 <vTaskSwitchContext+0xb8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	e010      	b.n	80059b2 <vTaskSwitchContext+0x46>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <vTaskSwitchContext+0x40>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	607b      	str	r3, [r7, #4]
}
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <vTaskSwitchContext+0x3e>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	491d      	ldr	r1, [pc, #116]	; (8005a28 <vTaskSwitchContext+0xbc>)
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0e4      	beq.n	8005990 <vTaskSwitchContext+0x24>
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <vTaskSwitchContext+0xbc>)
 80059d2:	4413      	add	r3, r2
 80059d4:	60bb      	str	r3, [r7, #8]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	605a      	str	r2, [r3, #4]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	3308      	adds	r3, #8
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d104      	bne.n	80059f6 <vTaskSwitchContext+0x8a>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4a0b      	ldr	r2, [pc, #44]	; (8005a2c <vTaskSwitchContext+0xc0>)
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <vTaskSwitchContext+0xb8>)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <vTaskSwitchContext+0xc0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3354      	adds	r3, #84	; 0x54
 8005a0c:	4a08      	ldr	r2, [pc, #32]	; (8005a30 <vTaskSwitchContext+0xc4>)
 8005a0e:	6013      	str	r3, [r2, #0]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	20000ff0 	.word	0x20000ff0
 8005a20:	20000fdc 	.word	0x20000fdc
 8005a24:	20000fd0 	.word	0x20000fd0
 8005a28:	20000af8 	.word	0x20000af8
 8005a2c:	20000af4 	.word	0x20000af4
 8005a30:	20000014 	.word	0x20000014

08005a34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	60fb      	str	r3, [r7, #12]
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a5a:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <vTaskPlaceOnEventList+0x44>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3318      	adds	r3, #24
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fe fe61 	bl	800472a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a68:	2101      	movs	r1, #1
 8005a6a:	6838      	ldr	r0, [r7, #0]
 8005a6c:	f000 fa80 	bl	8005f70 <prvAddCurrentTaskToDelayedList>
}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000af4 	.word	0x20000af4

08005a7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	617b      	str	r3, [r7, #20]
}
 8005aa0:	bf00      	nop
 8005aa2:	e7fe      	b.n	8005aa2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3318      	adds	r3, #24
 8005aaa:	4619      	mov	r1, r3
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7fe fe18 	bl	80046e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8005abc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	68b8      	ldr	r0, [r7, #8]
 8005ac2:	f000 fa55 	bl	8005f70 <prvAddCurrentTaskToDelayedList>
	}
 8005ac6:	bf00      	nop
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000af4 	.word	0x20000af4

08005ad4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	60fb      	str	r3, [r7, #12]
}
 8005afc:	bf00      	nop
 8005afe:	e7fe      	b.n	8005afe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	3318      	adds	r3, #24
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fe49 	bl	800479c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b0a:	4b1e      	ldr	r3, [pc, #120]	; (8005b84 <xTaskRemoveFromEventList+0xb0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d11d      	bne.n	8005b4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fe40 	bl	800479c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <xTaskRemoveFromEventList+0xb4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d903      	bls.n	8005b30 <xTaskRemoveFromEventList+0x5c>
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a16      	ldr	r2, [pc, #88]	; (8005b88 <xTaskRemoveFromEventList+0xb4>)
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4a13      	ldr	r2, [pc, #76]	; (8005b8c <xTaskRemoveFromEventList+0xb8>)
 8005b3e:	441a      	add	r2, r3
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4619      	mov	r1, r3
 8005b46:	4610      	mov	r0, r2
 8005b48:	f7fe fdcb 	bl	80046e2 <vListInsertEnd>
 8005b4c:	e005      	b.n	8005b5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	3318      	adds	r3, #24
 8005b52:	4619      	mov	r1, r3
 8005b54:	480e      	ldr	r0, [pc, #56]	; (8005b90 <xTaskRemoveFromEventList+0xbc>)
 8005b56:	f7fe fdc4 	bl	80046e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <xTaskRemoveFromEventList+0xc0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d905      	bls.n	8005b74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <xTaskRemoveFromEventList+0xc4>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e001      	b.n	8005b78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b78:	697b      	ldr	r3, [r7, #20]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000ff0 	.word	0x20000ff0
 8005b88:	20000fd0 	.word	0x20000fd0
 8005b8c:	20000af8 	.word	0x20000af8
 8005b90:	20000f88 	.word	0x20000f88
 8005b94:	20000af4 	.word	0x20000af4
 8005b98:	20000fdc 	.word	0x20000fdc

08005b9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <vTaskInternalSetTimeOutState+0x24>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <vTaskInternalSetTimeOutState+0x28>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	605a      	str	r2, [r3, #4]
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	20000fe0 	.word	0x20000fe0
 8005bc4:	20000fcc 	.word	0x20000fcc

08005bc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	613b      	str	r3, [r7, #16]
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	60fb      	str	r3, [r7, #12]
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c0a:	f000 fe83 	bl	8006914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c0e:	4b1d      	ldr	r3, [pc, #116]	; (8005c84 <xTaskCheckForTimeOut+0xbc>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d102      	bne.n	8005c2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	e023      	b.n	8005c76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <xTaskCheckForTimeOut+0xc0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d007      	beq.n	8005c4a <xTaskCheckForTimeOut+0x82>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d302      	bcc.n	8005c4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c44:	2301      	movs	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	e015      	b.n	8005c76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d20b      	bcs.n	8005c6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	1ad2      	subs	r2, r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff ff9b 	bl	8005b9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	e004      	b.n	8005c76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c72:	2301      	movs	r3, #1
 8005c74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c76:	f000 fe7d 	bl	8006974 <vPortExitCritical>

	return xReturn;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000fcc 	.word	0x20000fcc
 8005c88:	20000fe0 	.word	0x20000fe0

08005c8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c90:	4b03      	ldr	r3, [pc, #12]	; (8005ca0 <vTaskMissedYield+0x14>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
}
 8005c96:	bf00      	nop
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	20000fdc 	.word	0x20000fdc

08005ca4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cac:	f000 f852 	bl	8005d54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cb0:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <prvIdleTask+0x28>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d9f9      	bls.n	8005cac <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <prvIdleTask+0x2c>)
 8005cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cc8:	e7f0      	b.n	8005cac <prvIdleTask+0x8>
 8005cca:	bf00      	nop
 8005ccc:	20000af8 	.word	0x20000af8
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
 8005cde:	e00c      	b.n	8005cfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <prvInitialiseTaskLists+0x60>)
 8005cec:	4413      	add	r3, r2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fcca 	bl	8004688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b37      	cmp	r3, #55	; 0x37
 8005cfe:	d9ef      	bls.n	8005ce0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d00:	480d      	ldr	r0, [pc, #52]	; (8005d38 <prvInitialiseTaskLists+0x64>)
 8005d02:	f7fe fcc1 	bl	8004688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d06:	480d      	ldr	r0, [pc, #52]	; (8005d3c <prvInitialiseTaskLists+0x68>)
 8005d08:	f7fe fcbe 	bl	8004688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d0c:	480c      	ldr	r0, [pc, #48]	; (8005d40 <prvInitialiseTaskLists+0x6c>)
 8005d0e:	f7fe fcbb 	bl	8004688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d12:	480c      	ldr	r0, [pc, #48]	; (8005d44 <prvInitialiseTaskLists+0x70>)
 8005d14:	f7fe fcb8 	bl	8004688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d18:	480b      	ldr	r0, [pc, #44]	; (8005d48 <prvInitialiseTaskLists+0x74>)
 8005d1a:	f7fe fcb5 	bl	8004688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <prvInitialiseTaskLists+0x78>)
 8005d20:	4a05      	ldr	r2, [pc, #20]	; (8005d38 <prvInitialiseTaskLists+0x64>)
 8005d22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d24:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <prvInitialiseTaskLists+0x7c>)
 8005d26:	4a05      	ldr	r2, [pc, #20]	; (8005d3c <prvInitialiseTaskLists+0x68>)
 8005d28:	601a      	str	r2, [r3, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000af8 	.word	0x20000af8
 8005d38:	20000f58 	.word	0x20000f58
 8005d3c:	20000f6c 	.word	0x20000f6c
 8005d40:	20000f88 	.word	0x20000f88
 8005d44:	20000f9c 	.word	0x20000f9c
 8005d48:	20000fb4 	.word	0x20000fb4
 8005d4c:	20000f80 	.word	0x20000f80
 8005d50:	20000f84 	.word	0x20000f84

08005d54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d5a:	e019      	b.n	8005d90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d5c:	f000 fdda 	bl	8006914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d60:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <prvCheckTasksWaitingTermination+0x50>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fe fd15 	bl	800479c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d72:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <prvCheckTasksWaitingTermination+0x54>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	4a0b      	ldr	r2, [pc, #44]	; (8005da8 <prvCheckTasksWaitingTermination+0x54>)
 8005d7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <prvCheckTasksWaitingTermination+0x58>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	4a0a      	ldr	r2, [pc, #40]	; (8005dac <prvCheckTasksWaitingTermination+0x58>)
 8005d84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d86:	f000 fdf5 	bl	8006974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f810 	bl	8005db0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d90:	4b06      	ldr	r3, [pc, #24]	; (8005dac <prvCheckTasksWaitingTermination+0x58>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e1      	bne.n	8005d5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d98:	bf00      	nop
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000f9c 	.word	0x20000f9c
 8005da8:	20000fc8 	.word	0x20000fc8
 8005dac:	20000fb0 	.word	0x20000fb0

08005db0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3354      	adds	r3, #84	; 0x54
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 ff1f 	bl	8007c00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d108      	bne.n	8005dde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 ff8d 	bl	8006cf0 <vPortFree>
				vPortFree( pxTCB );
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 ff8a 	bl	8006cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ddc:	e018      	b.n	8005e10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d103      	bne.n	8005df0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 ff81 	bl	8006cf0 <vPortFree>
	}
 8005dee:	e00f      	b.n	8005e10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d00a      	beq.n	8005e10 <prvDeleteTCB+0x60>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	60fb      	str	r3, [r7, #12]
}
 8005e0c:	bf00      	nop
 8005e0e:	e7fe      	b.n	8005e0e <prvDeleteTCB+0x5e>
	}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <prvResetNextTaskUnblockTime+0x38>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e28:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <prvResetNextTaskUnblockTime+0x3c>)
 8005e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e30:	e008      	b.n	8005e44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <prvResetNextTaskUnblockTime+0x38>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	4a04      	ldr	r2, [pc, #16]	; (8005e54 <prvResetNextTaskUnblockTime+0x3c>)
 8005e42:	6013      	str	r3, [r2, #0]
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	20000f80 	.word	0x20000f80
 8005e54:	20000fe8 	.word	0x20000fe8

08005e58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <xTaskGetSchedulerState+0x34>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e66:	2301      	movs	r3, #1
 8005e68:	607b      	str	r3, [r7, #4]
 8005e6a:	e008      	b.n	8005e7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e6c:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <xTaskGetSchedulerState+0x38>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d102      	bne.n	8005e7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e74:	2302      	movs	r3, #2
 8005e76:	607b      	str	r3, [r7, #4]
 8005e78:	e001      	b.n	8005e7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e7e:	687b      	ldr	r3, [r7, #4]
	}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	20000fd4 	.word	0x20000fd4
 8005e90:	20000ff0 	.word	0x20000ff0

08005e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d056      	beq.n	8005f58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005eaa:	4b2e      	ldr	r3, [pc, #184]	; (8005f64 <xTaskPriorityDisinherit+0xd0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d00a      	beq.n	8005eca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	60fb      	str	r3, [r7, #12]
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	60bb      	str	r3, [r7, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eec:	1e5a      	subs	r2, r3, #1
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d02c      	beq.n	8005f58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d128      	bne.n	8005f58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fe fc46 	bl	800479c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <xTaskPriorityDisinherit+0xd4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d903      	bls.n	8005f38 <xTaskPriorityDisinherit+0xa4>
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	4a0c      	ldr	r2, [pc, #48]	; (8005f68 <xTaskPriorityDisinherit+0xd4>)
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <xTaskPriorityDisinherit+0xd8>)
 8005f46:	441a      	add	r2, r3
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f7fe fbc7 	bl	80046e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f54:	2301      	movs	r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f58:	697b      	ldr	r3, [r7, #20]
	}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000af4 	.word	0x20000af4
 8005f68:	20000fd0 	.word	0x20000fd0
 8005f6c:	20000af8 	.word	0x20000af8

08005f70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f7a:	4b21      	ldr	r3, [pc, #132]	; (8006000 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f80:	4b20      	ldr	r3, [pc, #128]	; (8006004 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fe fc08 	bl	800479c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f92:	d10a      	bne.n	8005faa <prvAddCurrentTaskToDelayedList+0x3a>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f9a:	4b1a      	ldr	r3, [pc, #104]	; (8006004 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4819      	ldr	r0, [pc, #100]	; (8006008 <prvAddCurrentTaskToDelayedList+0x98>)
 8005fa4:	f7fe fb9d 	bl	80046e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fa8:	e026      	b.n	8005ff8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4413      	add	r3, r2
 8005fb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fb2:	4b14      	ldr	r3, [pc, #80]	; (8006004 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d209      	bcs.n	8005fd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f7fe fbab 	bl	800472a <vListInsert>
}
 8005fd4:	e010      	b.n	8005ff8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fd6:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f7fe fba1 	bl	800472a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d202      	bcs.n	8005ff8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ff2:	4a08      	ldr	r2, [pc, #32]	; (8006014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6013      	str	r3, [r2, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000fcc 	.word	0x20000fcc
 8006004:	20000af4 	.word	0x20000af4
 8006008:	20000fb4 	.word	0x20000fb4
 800600c:	20000f84 	.word	0x20000f84
 8006010:	20000f80 	.word	0x20000f80
 8006014:	20000fe8 	.word	0x20000fe8

08006018 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	; 0x28
 800601c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006022:	f000 fb07 	bl	8006634 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006026:	4b1c      	ldr	r3, [pc, #112]	; (8006098 <xTimerCreateTimerTask+0x80>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d021      	beq.n	8006072 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006036:	1d3a      	adds	r2, r7, #4
 8006038:	f107 0108 	add.w	r1, r7, #8
 800603c:	f107 030c 	add.w	r3, r7, #12
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe fb07 	bl	8004654 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	9202      	str	r2, [sp, #8]
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	2302      	movs	r3, #2
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	2300      	movs	r3, #0
 8006056:	460a      	mov	r2, r1
 8006058:	4910      	ldr	r1, [pc, #64]	; (800609c <xTimerCreateTimerTask+0x84>)
 800605a:	4811      	ldr	r0, [pc, #68]	; (80060a0 <xTimerCreateTimerTask+0x88>)
 800605c:	f7ff f8b4 	bl	80051c8 <xTaskCreateStatic>
 8006060:	4603      	mov	r3, r0
 8006062:	4a10      	ldr	r2, [pc, #64]	; (80060a4 <xTimerCreateTimerTask+0x8c>)
 8006064:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006066:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <xTimerCreateTimerTask+0x8c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800606e:	2301      	movs	r3, #1
 8006070:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	613b      	str	r3, [r7, #16]
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800608e:	697b      	ldr	r3, [r7, #20]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20001024 	.word	0x20001024
 800609c:	0800af28 	.word	0x0800af28
 80060a0:	080061dd 	.word	0x080061dd
 80060a4:	20001028 	.word	0x20001028

080060a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	623b      	str	r3, [r7, #32]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060d6:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <xTimerGenericCommand+0x98>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d02a      	beq.n	8006134 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b05      	cmp	r3, #5
 80060ee:	dc18      	bgt.n	8006122 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060f0:	f7ff feb2 	bl	8005e58 <xTaskGetSchedulerState>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d109      	bne.n	800610e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060fa:	4b11      	ldr	r3, [pc, #68]	; (8006140 <xTimerGenericCommand+0x98>)
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	f107 0110 	add.w	r1, r7, #16
 8006102:	2300      	movs	r3, #0
 8006104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006106:	f7fe fc77 	bl	80049f8 <xQueueGenericSend>
 800610a:	6278      	str	r0, [r7, #36]	; 0x24
 800610c:	e012      	b.n	8006134 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800610e:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <xTimerGenericCommand+0x98>)
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	f107 0110 	add.w	r1, r7, #16
 8006116:	2300      	movs	r3, #0
 8006118:	2200      	movs	r2, #0
 800611a:	f7fe fc6d 	bl	80049f8 <xQueueGenericSend>
 800611e:	6278      	str	r0, [r7, #36]	; 0x24
 8006120:	e008      	b.n	8006134 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006122:	4b07      	ldr	r3, [pc, #28]	; (8006140 <xTimerGenericCommand+0x98>)
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	f107 0110 	add.w	r1, r7, #16
 800612a:	2300      	movs	r3, #0
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	f7fe fd61 	bl	8004bf4 <xQueueGenericSendFromISR>
 8006132:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006136:	4618      	mov	r0, r3
 8006138:	3728      	adds	r7, #40	; 0x28
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20001024 	.word	0x20001024

08006144 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800614e:	4b22      	ldr	r3, [pc, #136]	; (80061d8 <prvProcessExpiredTimer+0x94>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	3304      	adds	r3, #4
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe fb1d 	bl	800479c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d022      	beq.n	80061b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	699a      	ldr	r2, [r3, #24]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	18d1      	adds	r1, r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	6978      	ldr	r0, [r7, #20]
 800617e:	f000 f8d1 	bl	8006324 <prvInsertTimerInActiveList>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01f      	beq.n	80061c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006188:	2300      	movs	r3, #0
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2300      	movs	r3, #0
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	2100      	movs	r1, #0
 8006192:	6978      	ldr	r0, [r7, #20]
 8006194:	f7ff ff88 	bl	80060a8 <xTimerGenericCommand>
 8006198:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d113      	bne.n	80061c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	60fb      	str	r3, [r7, #12]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061bc:	f023 0301 	bic.w	r3, r3, #1
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	6978      	ldr	r0, [r7, #20]
 80061ce:	4798      	blx	r3
}
 80061d0:	bf00      	nop
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	2000101c 	.word	0x2000101c

080061dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061e4:	f107 0308 	add.w	r3, r7, #8
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 f857 	bl	800629c <prvGetNextExpireTime>
 80061ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4619      	mov	r1, r3
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f803 	bl	8006200 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061fa:	f000 f8d5 	bl	80063a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061fe:	e7f1      	b.n	80061e4 <prvTimerTask+0x8>

08006200 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800620a:	f7ff fa39 	bl	8005680 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f000 f866 	bl	80062e4 <prvSampleTimeNow>
 8006218:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d130      	bne.n	8006282 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <prvProcessTimerOrBlockTask+0x3c>
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	429a      	cmp	r2, r3
 800622c:	d806      	bhi.n	800623c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800622e:	f7ff fa35 	bl	800569c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ff85 	bl	8006144 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800623a:	e024      	b.n	8006286 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d008      	beq.n	8006254 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <prvProcessTimerOrBlockTask+0x90>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <prvProcessTimerOrBlockTask+0x50>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <prvProcessTimerOrBlockTask+0x52>
 8006250:	2300      	movs	r3, #0
 8006252:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <prvProcessTimerOrBlockTask+0x94>)
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	4619      	mov	r1, r3
 8006262:	f7fe ff7d 	bl	8005160 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006266:	f7ff fa19 	bl	800569c <xTaskResumeAll>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006270:	4b09      	ldr	r3, [pc, #36]	; (8006298 <prvProcessTimerOrBlockTask+0x98>)
 8006272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
}
 8006280:	e001      	b.n	8006286 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006282:	f7ff fa0b 	bl	800569c <xTaskResumeAll>
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20001020 	.word	0x20001020
 8006294:	20001024 	.word	0x20001024
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <prvGetNextExpireTime+0x44>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <prvGetNextExpireTime+0x16>
 80062ae:	2201      	movs	r2, #1
 80062b0:	e000      	b.n	80062b4 <prvGetNextExpireTime+0x18>
 80062b2:	2200      	movs	r2, #0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d105      	bne.n	80062cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <prvGetNextExpireTime+0x44>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e001      	b.n	80062d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80062d0:	68fb      	ldr	r3, [r7, #12]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	2000101c 	.word	0x2000101c

080062e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062ec:	f7ff fa74 	bl	80057d8 <xTaskGetTickCount>
 80062f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <prvSampleTimeNow+0x3c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d205      	bcs.n	8006308 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062fc:	f000 f936 	bl	800656c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e002      	b.n	800630e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800630e:	4a04      	ldr	r2, [pc, #16]	; (8006320 <prvSampleTimeNow+0x3c>)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006314:	68fb      	ldr	r3, [r7, #12]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	2000102c 	.word	0x2000102c

08006324 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d812      	bhi.n	8006370 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	429a      	cmp	r2, r3
 8006356:	d302      	bcc.n	800635e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006358:	2301      	movs	r3, #1
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e01b      	b.n	8006396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800635e:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <prvInsertTimerInActiveList+0x7c>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3304      	adds	r3, #4
 8006366:	4619      	mov	r1, r3
 8006368:	4610      	mov	r0, r2
 800636a:	f7fe f9de 	bl	800472a <vListInsert>
 800636e:	e012      	b.n	8006396 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d206      	bcs.n	8006386 <prvInsertTimerInActiveList+0x62>
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d302      	bcc.n	8006386 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006380:	2301      	movs	r3, #1
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	e007      	b.n	8006396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006386:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <prvInsertTimerInActiveList+0x80>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3304      	adds	r3, #4
 800638e:	4619      	mov	r1, r3
 8006390:	4610      	mov	r0, r2
 8006392:	f7fe f9ca 	bl	800472a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006396:	697b      	ldr	r3, [r7, #20]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20001020 	.word	0x20001020
 80063a4:	2000101c 	.word	0x2000101c

080063a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08e      	sub	sp, #56	; 0x38
 80063ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063ae:	e0ca      	b.n	8006546 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	da18      	bge.n	80063e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063b6:	1d3b      	adds	r3, r7, #4
 80063b8:	3304      	adds	r3, #4
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	61fb      	str	r3, [r7, #28]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063de:	6850      	ldr	r0, [r2, #4]
 80063e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e2:	6892      	ldr	r2, [r2, #8]
 80063e4:	4611      	mov	r1, r2
 80063e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f2c0 80aa 	blt.w	8006544 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	3304      	adds	r3, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe f9cb 	bl	800479c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006406:	463b      	mov	r3, r7
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff ff6b 	bl	80062e4 <prvSampleTimeNow>
 800640e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b09      	cmp	r3, #9
 8006414:	f200 8097 	bhi.w	8006546 <prvProcessReceivedCommands+0x19e>
 8006418:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <prvProcessReceivedCommands+0x78>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	08006449 	.word	0x08006449
 8006424:	08006449 	.word	0x08006449
 8006428:	08006449 	.word	0x08006449
 800642c:	080064bd 	.word	0x080064bd
 8006430:	080064d1 	.word	0x080064d1
 8006434:	0800651b 	.word	0x0800651b
 8006438:	08006449 	.word	0x08006449
 800643c:	08006449 	.word	0x08006449
 8006440:	080064bd 	.word	0x080064bd
 8006444:	080064d1 	.word	0x080064d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	b2da      	uxtb	r2, r3
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	18d1      	adds	r1, r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006468:	f7ff ff5c 	bl	8006324 <prvInsertTimerInActiveList>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d069      	beq.n	8006546 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006478:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05e      	beq.n	8006546 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	441a      	add	r2, r3
 8006490:	2300      	movs	r3, #0
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	2100      	movs	r1, #0
 8006498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800649a:	f7ff fe05 	bl	80060a8 <xTimerGenericCommand>
 800649e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d14f      	bne.n	8006546 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	61bb      	str	r3, [r7, #24]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c2:	f023 0301 	bic.w	r3, r3, #1
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80064ce:	e03a      	b.n	8006546 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	617b      	str	r3, [r7, #20]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	18d1      	adds	r1, r2, r3
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006514:	f7ff ff06 	bl	8006324 <prvInsertTimerInActiveList>
					break;
 8006518:	e015      	b.n	8006546 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652a:	f000 fbe1 	bl	8006cf0 <vPortFree>
 800652e:	e00a      	b.n	8006546 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	b2da      	uxtb	r2, r3
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006542:	e000      	b.n	8006546 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006544:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006546:	4b08      	ldr	r3, [pc, #32]	; (8006568 <prvProcessReceivedCommands+0x1c0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	1d39      	adds	r1, r7, #4
 800654c:	2200      	movs	r2, #0
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fbec 	bl	8004d2c <xQueueReceive>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	f47f af2a 	bne.w	80063b0 <prvProcessReceivedCommands+0x8>
	}
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	3730      	adds	r7, #48	; 0x30
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20001024 	.word	0x20001024

0800656c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006572:	e048      	b.n	8006606 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006574:	4b2d      	ldr	r3, [pc, #180]	; (800662c <prvSwitchTimerLists+0xc0>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800657e:	4b2b      	ldr	r3, [pc, #172]	; (800662c <prvSwitchTimerLists+0xc0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3304      	adds	r3, #4
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe f905 	bl	800479c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d02e      	beq.n	8006606 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d90e      	bls.n	80065d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065c6:	4b19      	ldr	r3, [pc, #100]	; (800662c <prvSwitchTimerLists+0xc0>)
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3304      	adds	r3, #4
 80065ce:	4619      	mov	r1, r3
 80065d0:	4610      	mov	r0, r2
 80065d2:	f7fe f8aa 	bl	800472a <vListInsert>
 80065d6:	e016      	b.n	8006606 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065d8:	2300      	movs	r3, #0
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	2300      	movs	r3, #0
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	2100      	movs	r1, #0
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7ff fd60 	bl	80060a8 <xTimerGenericCommand>
 80065e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10a      	bne.n	8006606 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	603b      	str	r3, [r7, #0]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006606:	4b09      	ldr	r3, [pc, #36]	; (800662c <prvSwitchTimerLists+0xc0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1b1      	bne.n	8006574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <prvSwitchTimerLists+0xc0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <prvSwitchTimerLists+0xc4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a04      	ldr	r2, [pc, #16]	; (800662c <prvSwitchTimerLists+0xc0>)
 800661c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800661e:	4a04      	ldr	r2, [pc, #16]	; (8006630 <prvSwitchTimerLists+0xc4>)
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	6013      	str	r3, [r2, #0]
}
 8006624:	bf00      	nop
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	2000101c 	.word	0x2000101c
 8006630:	20001020 	.word	0x20001020

08006634 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800663a:	f000 f96b 	bl	8006914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800663e:	4b15      	ldr	r3, [pc, #84]	; (8006694 <prvCheckForValidListAndQueue+0x60>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d120      	bne.n	8006688 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006646:	4814      	ldr	r0, [pc, #80]	; (8006698 <prvCheckForValidListAndQueue+0x64>)
 8006648:	f7fe f81e 	bl	8004688 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800664c:	4813      	ldr	r0, [pc, #76]	; (800669c <prvCheckForValidListAndQueue+0x68>)
 800664e:	f7fe f81b 	bl	8004688 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006652:	4b13      	ldr	r3, [pc, #76]	; (80066a0 <prvCheckForValidListAndQueue+0x6c>)
 8006654:	4a10      	ldr	r2, [pc, #64]	; (8006698 <prvCheckForValidListAndQueue+0x64>)
 8006656:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006658:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <prvCheckForValidListAndQueue+0x70>)
 800665a:	4a10      	ldr	r2, [pc, #64]	; (800669c <prvCheckForValidListAndQueue+0x68>)
 800665c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800665e:	2300      	movs	r3, #0
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <prvCheckForValidListAndQueue+0x74>)
 8006664:	4a11      	ldr	r2, [pc, #68]	; (80066ac <prvCheckForValidListAndQueue+0x78>)
 8006666:	2110      	movs	r1, #16
 8006668:	200a      	movs	r0, #10
 800666a:	f7fe f929 	bl	80048c0 <xQueueGenericCreateStatic>
 800666e:	4603      	mov	r3, r0
 8006670:	4a08      	ldr	r2, [pc, #32]	; (8006694 <prvCheckForValidListAndQueue+0x60>)
 8006672:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006674:	4b07      	ldr	r3, [pc, #28]	; (8006694 <prvCheckForValidListAndQueue+0x60>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800667c:	4b05      	ldr	r3, [pc, #20]	; (8006694 <prvCheckForValidListAndQueue+0x60>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	490b      	ldr	r1, [pc, #44]	; (80066b0 <prvCheckForValidListAndQueue+0x7c>)
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe fd42 	bl	800510c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006688:	f000 f974 	bl	8006974 <vPortExitCritical>
}
 800668c:	bf00      	nop
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20001024 	.word	0x20001024
 8006698:	20000ff4 	.word	0x20000ff4
 800669c:	20001008 	.word	0x20001008
 80066a0:	2000101c 	.word	0x2000101c
 80066a4:	20001020 	.word	0x20001020
 80066a8:	200010d0 	.word	0x200010d0
 80066ac:	20001030 	.word	0x20001030
 80066b0:	0800af30 	.word	0x0800af30

080066b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3b04      	subs	r3, #4
 80066c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3b04      	subs	r3, #4
 80066d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f023 0201 	bic.w	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3b04      	subs	r3, #4
 80066e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066e4:	4a0c      	ldr	r2, [pc, #48]	; (8006718 <pxPortInitialiseStack+0x64>)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3b14      	subs	r3, #20
 80066ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3b04      	subs	r3, #4
 80066fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f06f 0202 	mvn.w	r2, #2
 8006702:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3b20      	subs	r3, #32
 8006708:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800670a:	68fb      	ldr	r3, [r7, #12]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	0800671d 	.word	0x0800671d

0800671c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006726:	4b12      	ldr	r3, [pc, #72]	; (8006770 <prvTaskExitError+0x54>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d00a      	beq.n	8006746 <prvTaskExitError+0x2a>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	60fb      	str	r3, [r7, #12]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <prvTaskExitError+0x28>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	60bb      	str	r3, [r7, #8]
}
 8006758:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800675a:	bf00      	nop
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0fc      	beq.n	800675c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	20000010 	.word	0x20000010
	...

08006780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006780:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <pxCurrentTCBConst2>)
 8006782:	6819      	ldr	r1, [r3, #0]
 8006784:	6808      	ldr	r0, [r1, #0]
 8006786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678a:	f380 8809 	msr	PSP, r0
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f04f 0000 	mov.w	r0, #0
 8006796:	f380 8811 	msr	BASEPRI, r0
 800679a:	4770      	bx	lr
 800679c:	f3af 8000 	nop.w

080067a0 <pxCurrentTCBConst2>:
 80067a0:	20000af4 	.word	0x20000af4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop

080067a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067a8:	4808      	ldr	r0, [pc, #32]	; (80067cc <prvPortStartFirstTask+0x24>)
 80067aa:	6800      	ldr	r0, [r0, #0]
 80067ac:	6800      	ldr	r0, [r0, #0]
 80067ae:	f380 8808 	msr	MSP, r0
 80067b2:	f04f 0000 	mov.w	r0, #0
 80067b6:	f380 8814 	msr	CONTROL, r0
 80067ba:	b662      	cpsie	i
 80067bc:	b661      	cpsie	f
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	df00      	svc	0
 80067c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067ca:	bf00      	nop
 80067cc:	e000ed08 	.word	0xe000ed08

080067d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067d6:	4b46      	ldr	r3, [pc, #280]	; (80068f0 <xPortStartScheduler+0x120>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a46      	ldr	r2, [pc, #280]	; (80068f4 <xPortStartScheduler+0x124>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10a      	bne.n	80067f6 <xPortStartScheduler+0x26>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	613b      	str	r3, [r7, #16]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067f6:	4b3e      	ldr	r3, [pc, #248]	; (80068f0 <xPortStartScheduler+0x120>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a3f      	ldr	r2, [pc, #252]	; (80068f8 <xPortStartScheduler+0x128>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d10a      	bne.n	8006816 <xPortStartScheduler+0x46>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	60fb      	str	r3, [r7, #12]
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006816:	4b39      	ldr	r3, [pc, #228]	; (80068fc <xPortStartScheduler+0x12c>)
 8006818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	22ff      	movs	r2, #255	; 0xff
 8006826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006838:	b2da      	uxtb	r2, r3
 800683a:	4b31      	ldr	r3, [pc, #196]	; (8006900 <xPortStartScheduler+0x130>)
 800683c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800683e:	4b31      	ldr	r3, [pc, #196]	; (8006904 <xPortStartScheduler+0x134>)
 8006840:	2207      	movs	r2, #7
 8006842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006844:	e009      	b.n	800685a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006846:	4b2f      	ldr	r3, [pc, #188]	; (8006904 <xPortStartScheduler+0x134>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3b01      	subs	r3, #1
 800684c:	4a2d      	ldr	r2, [pc, #180]	; (8006904 <xPortStartScheduler+0x134>)
 800684e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	b2db      	uxtb	r3, r3
 8006858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	2b80      	cmp	r3, #128	; 0x80
 8006864:	d0ef      	beq.n	8006846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006866:	4b27      	ldr	r3, [pc, #156]	; (8006904 <xPortStartScheduler+0x134>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1c3 0307 	rsb	r3, r3, #7
 800686e:	2b04      	cmp	r3, #4
 8006870:	d00a      	beq.n	8006888 <xPortStartScheduler+0xb8>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	60bb      	str	r3, [r7, #8]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006888:	4b1e      	ldr	r3, [pc, #120]	; (8006904 <xPortStartScheduler+0x134>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	4a1d      	ldr	r2, [pc, #116]	; (8006904 <xPortStartScheduler+0x134>)
 8006890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006892:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <xPortStartScheduler+0x134>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800689a:	4a1a      	ldr	r2, [pc, #104]	; (8006904 <xPortStartScheduler+0x134>)
 800689c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068a6:	4b18      	ldr	r3, [pc, #96]	; (8006908 <xPortStartScheduler+0x138>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a17      	ldr	r2, [pc, #92]	; (8006908 <xPortStartScheduler+0x138>)
 80068ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <xPortStartScheduler+0x138>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a14      	ldr	r2, [pc, #80]	; (8006908 <xPortStartScheduler+0x138>)
 80068b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068be:	f000 f8dd 	bl	8006a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068c2:	4b12      	ldr	r3, [pc, #72]	; (800690c <xPortStartScheduler+0x13c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068c8:	f000 f8fc 	bl	8006ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068cc:	4b10      	ldr	r3, [pc, #64]	; (8006910 <xPortStartScheduler+0x140>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a0f      	ldr	r2, [pc, #60]	; (8006910 <xPortStartScheduler+0x140>)
 80068d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068d8:	f7ff ff66 	bl	80067a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068dc:	f7ff f846 	bl	800596c <vTaskSwitchContext>
	prvTaskExitError();
 80068e0:	f7ff ff1c 	bl	800671c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	e000ed00 	.word	0xe000ed00
 80068f4:	410fc271 	.word	0x410fc271
 80068f8:	410fc270 	.word	0x410fc270
 80068fc:	e000e400 	.word	0xe000e400
 8006900:	20001120 	.word	0x20001120
 8006904:	20001124 	.word	0x20001124
 8006908:	e000ed20 	.word	0xe000ed20
 800690c:	20000010 	.word	0x20000010
 8006910:	e000ef34 	.word	0xe000ef34

08006914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	607b      	str	r3, [r7, #4]
}
 800692c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800692e:	4b0f      	ldr	r3, [pc, #60]	; (800696c <vPortEnterCritical+0x58>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3301      	adds	r3, #1
 8006934:	4a0d      	ldr	r2, [pc, #52]	; (800696c <vPortEnterCritical+0x58>)
 8006936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <vPortEnterCritical+0x58>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d10f      	bne.n	8006960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006940:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <vPortEnterCritical+0x5c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <vPortEnterCritical+0x4c>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	603b      	str	r3, [r7, #0]
}
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <vPortEnterCritical+0x4a>
	}
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	20000010 	.word	0x20000010
 8006970:	e000ed04 	.word	0xe000ed04

08006974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800697a:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <vPortExitCritical+0x50>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <vPortExitCritical+0x24>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	607b      	str	r3, [r7, #4]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006998:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <vPortExitCritical+0x50>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3b01      	subs	r3, #1
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <vPortExitCritical+0x50>)
 80069a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069a2:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <vPortExitCritical+0x50>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d105      	bne.n	80069b6 <vPortExitCritical+0x42>
 80069aa:	2300      	movs	r3, #0
 80069ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	f383 8811 	msr	BASEPRI, r3
}
 80069b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20000010 	.word	0x20000010
	...

080069d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069d0:	f3ef 8009 	mrs	r0, PSP
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	4b15      	ldr	r3, [pc, #84]	; (8006a30 <pxCurrentTCBConst>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	f01e 0f10 	tst.w	lr, #16
 80069e0:	bf08      	it	eq
 80069e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ea:	6010      	str	r0, [r2, #0]
 80069ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069f4:	f380 8811 	msr	BASEPRI, r0
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f7fe ffb4 	bl	800596c <vTaskSwitchContext>
 8006a04:	f04f 0000 	mov.w	r0, #0
 8006a08:	f380 8811 	msr	BASEPRI, r0
 8006a0c:	bc09      	pop	{r0, r3}
 8006a0e:	6819      	ldr	r1, [r3, #0]
 8006a10:	6808      	ldr	r0, [r1, #0]
 8006a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a16:	f01e 0f10 	tst.w	lr, #16
 8006a1a:	bf08      	it	eq
 8006a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a20:	f380 8809 	msr	PSP, r0
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	f3af 8000 	nop.w

08006a30 <pxCurrentTCBConst>:
 8006a30:	20000af4 	.word	0x20000af4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop

08006a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	607b      	str	r3, [r7, #4]
}
 8006a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a52:	f7fe fed1 	bl	80057f8 <xTaskIncrementTick>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a5c:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <xPortSysTickHandler+0x40>)
 8006a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	2300      	movs	r3, #0
 8006a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	f383 8811 	msr	BASEPRI, r3
}
 8006a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a70:	bf00      	nop
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a80:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <vPortSetupTimerInterrupt+0x34>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a86:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <vPortSetupTimerInterrupt+0x38>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <vPortSetupTimerInterrupt+0x3c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a0a      	ldr	r2, [pc, #40]	; (8006abc <vPortSetupTimerInterrupt+0x40>)
 8006a92:	fba2 2303 	umull	r2, r3, r2, r3
 8006a96:	099b      	lsrs	r3, r3, #6
 8006a98:	4a09      	ldr	r2, [pc, #36]	; (8006ac0 <vPortSetupTimerInterrupt+0x44>)
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a9e:	4b04      	ldr	r3, [pc, #16]	; (8006ab0 <vPortSetupTimerInterrupt+0x34>)
 8006aa0:	2207      	movs	r2, #7
 8006aa2:	601a      	str	r2, [r3, #0]
}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	e000e010 	.word	0xe000e010
 8006ab4:	e000e018 	.word	0xe000e018
 8006ab8:	20000004 	.word	0x20000004
 8006abc:	10624dd3 	.word	0x10624dd3
 8006ac0:	e000e014 	.word	0xe000e014

08006ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ad4 <vPortEnableVFP+0x10>
 8006ac8:	6801      	ldr	r1, [r0, #0]
 8006aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ace:	6001      	str	r1, [r0, #0]
 8006ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ad2:	bf00      	nop
 8006ad4:	e000ed88 	.word	0xe000ed88

08006ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ade:	f3ef 8305 	mrs	r3, IPSR
 8006ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b0f      	cmp	r3, #15
 8006ae8:	d914      	bls.n	8006b14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aea:	4a17      	ldr	r2, [pc, #92]	; (8006b48 <vPortValidateInterruptPriority+0x70>)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006af4:	4b15      	ldr	r3, [pc, #84]	; (8006b4c <vPortValidateInterruptPriority+0x74>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	7afa      	ldrb	r2, [r7, #11]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d20a      	bcs.n	8006b14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	607b      	str	r3, [r7, #4]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b14:	4b0e      	ldr	r3, [pc, #56]	; (8006b50 <vPortValidateInterruptPriority+0x78>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <vPortValidateInterruptPriority+0x7c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d90a      	bls.n	8006b3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	603b      	str	r3, [r7, #0]
}
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <vPortValidateInterruptPriority+0x60>
	}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	e000e3f0 	.word	0xe000e3f0
 8006b4c:	20001120 	.word	0x20001120
 8006b50:	e000ed0c 	.word	0xe000ed0c
 8006b54:	20001124 	.word	0x20001124

08006b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08a      	sub	sp, #40	; 0x28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b64:	f7fe fd8c 	bl	8005680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b68:	4b5b      	ldr	r3, [pc, #364]	; (8006cd8 <pvPortMalloc+0x180>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b70:	f000 f920 	bl	8006db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b74:	4b59      	ldr	r3, [pc, #356]	; (8006cdc <pvPortMalloc+0x184>)
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f040 8093 	bne.w	8006ca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01d      	beq.n	8006bc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b88:	2208      	movs	r2, #8
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d014      	beq.n	8006bc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f023 0307 	bic.w	r3, r3, #7
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <pvPortMalloc+0x6c>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	617b      	str	r3, [r7, #20]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d06e      	beq.n	8006ca8 <pvPortMalloc+0x150>
 8006bca:	4b45      	ldr	r3, [pc, #276]	; (8006ce0 <pvPortMalloc+0x188>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d869      	bhi.n	8006ca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bd4:	4b43      	ldr	r3, [pc, #268]	; (8006ce4 <pvPortMalloc+0x18c>)
 8006bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bd8:	4b42      	ldr	r3, [pc, #264]	; (8006ce4 <pvPortMalloc+0x18c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bde:	e004      	b.n	8006bea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d903      	bls.n	8006bfc <pvPortMalloc+0xa4>
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1f1      	bne.n	8006be0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bfc:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <pvPortMalloc+0x180>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d050      	beq.n	8006ca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2208      	movs	r2, #8
 8006c0c:	4413      	add	r3, r2
 8006c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	1ad2      	subs	r2, r2, r3
 8006c20:	2308      	movs	r3, #8
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d91f      	bls.n	8006c68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <pvPortMalloc+0xf8>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	613b      	str	r3, [r7, #16]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	1ad2      	subs	r2, r2, r3
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c62:	69b8      	ldr	r0, [r7, #24]
 8006c64:	f000 f908 	bl	8006e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c68:	4b1d      	ldr	r3, [pc, #116]	; (8006ce0 <pvPortMalloc+0x188>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	4a1b      	ldr	r2, [pc, #108]	; (8006ce0 <pvPortMalloc+0x188>)
 8006c74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c76:	4b1a      	ldr	r3, [pc, #104]	; (8006ce0 <pvPortMalloc+0x188>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <pvPortMalloc+0x190>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d203      	bcs.n	8006c8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c82:	4b17      	ldr	r3, [pc, #92]	; (8006ce0 <pvPortMalloc+0x188>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a18      	ldr	r2, [pc, #96]	; (8006ce8 <pvPortMalloc+0x190>)
 8006c88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <pvPortMalloc+0x184>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c9e:	4b13      	ldr	r3, [pc, #76]	; (8006cec <pvPortMalloc+0x194>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	4a11      	ldr	r2, [pc, #68]	; (8006cec <pvPortMalloc+0x194>)
 8006ca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ca8:	f7fe fcf8 	bl	800569c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00a      	beq.n	8006ccc <pvPortMalloc+0x174>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60fb      	str	r3, [r7, #12]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <pvPortMalloc+0x172>
	return pvReturn;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3728      	adds	r7, #40	; 0x28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20004d30 	.word	0x20004d30
 8006cdc:	20004d44 	.word	0x20004d44
 8006ce0:	20004d34 	.word	0x20004d34
 8006ce4:	20004d28 	.word	0x20004d28
 8006ce8:	20004d38 	.word	0x20004d38
 8006cec:	20004d3c 	.word	0x20004d3c

08006cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d04d      	beq.n	8006d9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d02:	2308      	movs	r3, #8
 8006d04:	425b      	negs	r3, r3
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4413      	add	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	4b24      	ldr	r3, [pc, #144]	; (8006da8 <vPortFree+0xb8>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <vPortFree+0x44>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	60fb      	str	r3, [r7, #12]
}
 8006d30:	bf00      	nop
 8006d32:	e7fe      	b.n	8006d32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <vPortFree+0x62>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	60bb      	str	r3, [r7, #8]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	4b14      	ldr	r3, [pc, #80]	; (8006da8 <vPortFree+0xb8>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d01e      	beq.n	8006d9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d11a      	bne.n	8006d9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	4b0e      	ldr	r3, [pc, #56]	; (8006da8 <vPortFree+0xb8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	401a      	ands	r2, r3
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d78:	f7fe fc82 	bl	8005680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <vPortFree+0xbc>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4413      	add	r3, r2
 8006d86:	4a09      	ldr	r2, [pc, #36]	; (8006dac <vPortFree+0xbc>)
 8006d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d8a:	6938      	ldr	r0, [r7, #16]
 8006d8c:	f000 f874 	bl	8006e78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <vPortFree+0xc0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	4a06      	ldr	r2, [pc, #24]	; (8006db0 <vPortFree+0xc0>)
 8006d98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d9a:	f7fe fc7f 	bl	800569c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d9e:	bf00      	nop
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20004d44 	.word	0x20004d44
 8006dac:	20004d34 	.word	0x20004d34
 8006db0:	20004d40 	.word	0x20004d40

08006db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006dc0:	4b27      	ldr	r3, [pc, #156]	; (8006e60 <prvHeapInit+0xac>)
 8006dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00c      	beq.n	8006de8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3307      	adds	r3, #7
 8006dd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 0307 	bic.w	r3, r3, #7
 8006dda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <prvHeapInit+0xac>)
 8006de4:	4413      	add	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dec:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <prvHeapInit+0xb0>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006df2:	4b1c      	ldr	r3, [pc, #112]	; (8006e64 <prvHeapInit+0xb0>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e00:	2208      	movs	r2, #8
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1a9b      	subs	r3, r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0307 	bic.w	r3, r3, #7
 8006e0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4a15      	ldr	r2, [pc, #84]	; (8006e68 <prvHeapInit+0xb4>)
 8006e14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <prvHeapInit+0xb4>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e1e:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <prvHeapInit+0xb4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	1ad2      	subs	r2, r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e34:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <prvHeapInit+0xb4>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4a0a      	ldr	r2, [pc, #40]	; (8006e6c <prvHeapInit+0xb8>)
 8006e42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	4a09      	ldr	r2, [pc, #36]	; (8006e70 <prvHeapInit+0xbc>)
 8006e4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e4c:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <prvHeapInit+0xc0>)
 8006e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e52:	601a      	str	r2, [r3, #0]
}
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	20001128 	.word	0x20001128
 8006e64:	20004d28 	.word	0x20004d28
 8006e68:	20004d30 	.word	0x20004d30
 8006e6c:	20004d38 	.word	0x20004d38
 8006e70:	20004d34 	.word	0x20004d34
 8006e74:	20004d44 	.word	0x20004d44

08006e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e80:	4b28      	ldr	r3, [pc, #160]	; (8006f24 <prvInsertBlockIntoFreeList+0xac>)
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	e002      	b.n	8006e8c <prvInsertBlockIntoFreeList+0x14>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d8f7      	bhi.n	8006e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d108      	bne.n	8006eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	441a      	add	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	441a      	add	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d118      	bne.n	8006f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <prvInsertBlockIntoFreeList+0xb0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d00d      	beq.n	8006ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	441a      	add	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	e008      	b.n	8006f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ef6:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <prvInsertBlockIntoFreeList+0xb0>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e003      	b.n	8006f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d002      	beq.n	8006f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f16:	bf00      	nop
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20004d28 	.word	0x20004d28
 8006f28:	20004d30 	.word	0x20004d30

08006f2c <gcvt>:
 8006f2c:	b530      	push	{r4, r5, lr}
 8006f2e:	2200      	movs	r2, #0
 8006f30:	b085      	sub	sp, #20
 8006f32:	460c      	mov	r4, r1
 8006f34:	4605      	mov	r5, r0
 8006f36:	2300      	movs	r3, #0
 8006f38:	ec51 0b10 	vmov	r0, r1, d0
 8006f3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f40:	f7f9 fdec 	bl	8000b1c <__aeabi_dcmplt>
 8006f44:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006f48:	4622      	mov	r2, r4
 8006f4a:	b118      	cbz	r0, 8006f54 <gcvt+0x28>
 8006f4c:	232d      	movs	r3, #45	; 0x2d
 8006f4e:	f802 3b01 	strb.w	r3, [r2], #1
 8006f52:	3d01      	subs	r5, #1
 8006f54:	2300      	movs	r3, #0
 8006f56:	4806      	ldr	r0, [pc, #24]	; (8006f70 <gcvt+0x44>)
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	2367      	movs	r3, #103	; 0x67
 8006f5e:	6800      	ldr	r0, [r0, #0]
 8006f60:	f001 fe16 	bl	8008b90 <_gcvt>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	bf14      	ite	ne
 8006f68:	4620      	movne	r0, r4
 8006f6a:	2000      	moveq	r0, #0
 8006f6c:	b005      	add	sp, #20
 8006f6e:	bd30      	pop	{r4, r5, pc}
 8006f70:	20000014 	.word	0x20000014

08006f74 <__errno>:
 8006f74:	4b01      	ldr	r3, [pc, #4]	; (8006f7c <__errno+0x8>)
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	20000014 	.word	0x20000014

08006f80 <std>:
 8006f80:	2300      	movs	r3, #0
 8006f82:	b510      	push	{r4, lr}
 8006f84:	4604      	mov	r4, r0
 8006f86:	e9c0 3300 	strd	r3, r3, [r0]
 8006f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f8e:	6083      	str	r3, [r0, #8]
 8006f90:	8181      	strh	r1, [r0, #12]
 8006f92:	6643      	str	r3, [r0, #100]	; 0x64
 8006f94:	81c2      	strh	r2, [r0, #14]
 8006f96:	6183      	str	r3, [r0, #24]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	305c      	adds	r0, #92	; 0x5c
 8006f9e:	f000 f91a 	bl	80071d6 <memset>
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <std+0x38>)
 8006fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <std+0x3c>)
 8006fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <std+0x40>)
 8006fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <std+0x44>)
 8006fb0:	6224      	str	r4, [r4, #32]
 8006fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	bf00      	nop
 8006fb8:	08007cd9 	.word	0x08007cd9
 8006fbc:	08007cfb 	.word	0x08007cfb
 8006fc0:	08007d33 	.word	0x08007d33
 8006fc4:	08007d57 	.word	0x08007d57

08006fc8 <_cleanup_r>:
 8006fc8:	4901      	ldr	r1, [pc, #4]	; (8006fd0 <_cleanup_r+0x8>)
 8006fca:	f000 b8af 	b.w	800712c <_fwalk_reent>
 8006fce:	bf00      	nop
 8006fd0:	08008e1d 	.word	0x08008e1d

08006fd4 <__sfmoreglue>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	2268      	movs	r2, #104	; 0x68
 8006fd8:	1e4d      	subs	r5, r1, #1
 8006fda:	4355      	muls	r5, r2
 8006fdc:	460e      	mov	r6, r1
 8006fde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fe2:	f000 f921 	bl	8007228 <_malloc_r>
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	b140      	cbz	r0, 8006ffc <__sfmoreglue+0x28>
 8006fea:	2100      	movs	r1, #0
 8006fec:	e9c0 1600 	strd	r1, r6, [r0]
 8006ff0:	300c      	adds	r0, #12
 8006ff2:	60a0      	str	r0, [r4, #8]
 8006ff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ff8:	f000 f8ed 	bl	80071d6 <memset>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}

08007000 <__sfp_lock_acquire>:
 8007000:	4801      	ldr	r0, [pc, #4]	; (8007008 <__sfp_lock_acquire+0x8>)
 8007002:	f000 b8d8 	b.w	80071b6 <__retarget_lock_acquire_recursive>
 8007006:	bf00      	nop
 8007008:	20004d49 	.word	0x20004d49

0800700c <__sfp_lock_release>:
 800700c:	4801      	ldr	r0, [pc, #4]	; (8007014 <__sfp_lock_release+0x8>)
 800700e:	f000 b8d3 	b.w	80071b8 <__retarget_lock_release_recursive>
 8007012:	bf00      	nop
 8007014:	20004d49 	.word	0x20004d49

08007018 <__sinit_lock_acquire>:
 8007018:	4801      	ldr	r0, [pc, #4]	; (8007020 <__sinit_lock_acquire+0x8>)
 800701a:	f000 b8cc 	b.w	80071b6 <__retarget_lock_acquire_recursive>
 800701e:	bf00      	nop
 8007020:	20004d4a 	.word	0x20004d4a

08007024 <__sinit_lock_release>:
 8007024:	4801      	ldr	r0, [pc, #4]	; (800702c <__sinit_lock_release+0x8>)
 8007026:	f000 b8c7 	b.w	80071b8 <__retarget_lock_release_recursive>
 800702a:	bf00      	nop
 800702c:	20004d4a 	.word	0x20004d4a

08007030 <__sinit>:
 8007030:	b510      	push	{r4, lr}
 8007032:	4604      	mov	r4, r0
 8007034:	f7ff fff0 	bl	8007018 <__sinit_lock_acquire>
 8007038:	69a3      	ldr	r3, [r4, #24]
 800703a:	b11b      	cbz	r3, 8007044 <__sinit+0x14>
 800703c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007040:	f7ff bff0 	b.w	8007024 <__sinit_lock_release>
 8007044:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007048:	6523      	str	r3, [r4, #80]	; 0x50
 800704a:	4b13      	ldr	r3, [pc, #76]	; (8007098 <__sinit+0x68>)
 800704c:	4a13      	ldr	r2, [pc, #76]	; (800709c <__sinit+0x6c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	62a2      	str	r2, [r4, #40]	; 0x28
 8007052:	42a3      	cmp	r3, r4
 8007054:	bf04      	itt	eq
 8007056:	2301      	moveq	r3, #1
 8007058:	61a3      	streq	r3, [r4, #24]
 800705a:	4620      	mov	r0, r4
 800705c:	f000 f820 	bl	80070a0 <__sfp>
 8007060:	6060      	str	r0, [r4, #4]
 8007062:	4620      	mov	r0, r4
 8007064:	f000 f81c 	bl	80070a0 <__sfp>
 8007068:	60a0      	str	r0, [r4, #8]
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f818 	bl	80070a0 <__sfp>
 8007070:	2200      	movs	r2, #0
 8007072:	60e0      	str	r0, [r4, #12]
 8007074:	2104      	movs	r1, #4
 8007076:	6860      	ldr	r0, [r4, #4]
 8007078:	f7ff ff82 	bl	8006f80 <std>
 800707c:	68a0      	ldr	r0, [r4, #8]
 800707e:	2201      	movs	r2, #1
 8007080:	2109      	movs	r1, #9
 8007082:	f7ff ff7d 	bl	8006f80 <std>
 8007086:	68e0      	ldr	r0, [r4, #12]
 8007088:	2202      	movs	r2, #2
 800708a:	2112      	movs	r1, #18
 800708c:	f7ff ff78 	bl	8006f80 <std>
 8007090:	2301      	movs	r3, #1
 8007092:	61a3      	str	r3, [r4, #24]
 8007094:	e7d2      	b.n	800703c <__sinit+0xc>
 8007096:	bf00      	nop
 8007098:	0800aff8 	.word	0x0800aff8
 800709c:	08006fc9 	.word	0x08006fc9

080070a0 <__sfp>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	4607      	mov	r7, r0
 80070a4:	f7ff ffac 	bl	8007000 <__sfp_lock_acquire>
 80070a8:	4b1e      	ldr	r3, [pc, #120]	; (8007124 <__sfp+0x84>)
 80070aa:	681e      	ldr	r6, [r3, #0]
 80070ac:	69b3      	ldr	r3, [r6, #24]
 80070ae:	b913      	cbnz	r3, 80070b6 <__sfp+0x16>
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff ffbd 	bl	8007030 <__sinit>
 80070b6:	3648      	adds	r6, #72	; 0x48
 80070b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070bc:	3b01      	subs	r3, #1
 80070be:	d503      	bpl.n	80070c8 <__sfp+0x28>
 80070c0:	6833      	ldr	r3, [r6, #0]
 80070c2:	b30b      	cbz	r3, 8007108 <__sfp+0x68>
 80070c4:	6836      	ldr	r6, [r6, #0]
 80070c6:	e7f7      	b.n	80070b8 <__sfp+0x18>
 80070c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070cc:	b9d5      	cbnz	r5, 8007104 <__sfp+0x64>
 80070ce:	4b16      	ldr	r3, [pc, #88]	; (8007128 <__sfp+0x88>)
 80070d0:	60e3      	str	r3, [r4, #12]
 80070d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070d6:	6665      	str	r5, [r4, #100]	; 0x64
 80070d8:	f000 f86c 	bl	80071b4 <__retarget_lock_init_recursive>
 80070dc:	f7ff ff96 	bl	800700c <__sfp_lock_release>
 80070e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070e8:	6025      	str	r5, [r4, #0]
 80070ea:	61a5      	str	r5, [r4, #24]
 80070ec:	2208      	movs	r2, #8
 80070ee:	4629      	mov	r1, r5
 80070f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070f4:	f000 f86f 	bl	80071d6 <memset>
 80070f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007100:	4620      	mov	r0, r4
 8007102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007104:	3468      	adds	r4, #104	; 0x68
 8007106:	e7d9      	b.n	80070bc <__sfp+0x1c>
 8007108:	2104      	movs	r1, #4
 800710a:	4638      	mov	r0, r7
 800710c:	f7ff ff62 	bl	8006fd4 <__sfmoreglue>
 8007110:	4604      	mov	r4, r0
 8007112:	6030      	str	r0, [r6, #0]
 8007114:	2800      	cmp	r0, #0
 8007116:	d1d5      	bne.n	80070c4 <__sfp+0x24>
 8007118:	f7ff ff78 	bl	800700c <__sfp_lock_release>
 800711c:	230c      	movs	r3, #12
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	e7ee      	b.n	8007100 <__sfp+0x60>
 8007122:	bf00      	nop
 8007124:	0800aff8 	.word	0x0800aff8
 8007128:	ffff0001 	.word	0xffff0001

0800712c <_fwalk_reent>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4606      	mov	r6, r0
 8007132:	4688      	mov	r8, r1
 8007134:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007138:	2700      	movs	r7, #0
 800713a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800713e:	f1b9 0901 	subs.w	r9, r9, #1
 8007142:	d505      	bpl.n	8007150 <_fwalk_reent+0x24>
 8007144:	6824      	ldr	r4, [r4, #0]
 8007146:	2c00      	cmp	r4, #0
 8007148:	d1f7      	bne.n	800713a <_fwalk_reent+0xe>
 800714a:	4638      	mov	r0, r7
 800714c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007150:	89ab      	ldrh	r3, [r5, #12]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d907      	bls.n	8007166 <_fwalk_reent+0x3a>
 8007156:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800715a:	3301      	adds	r3, #1
 800715c:	d003      	beq.n	8007166 <_fwalk_reent+0x3a>
 800715e:	4629      	mov	r1, r5
 8007160:	4630      	mov	r0, r6
 8007162:	47c0      	blx	r8
 8007164:	4307      	orrs	r7, r0
 8007166:	3568      	adds	r5, #104	; 0x68
 8007168:	e7e9      	b.n	800713e <_fwalk_reent+0x12>
	...

0800716c <__libc_init_array>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	4d0d      	ldr	r5, [pc, #52]	; (80071a4 <__libc_init_array+0x38>)
 8007170:	4c0d      	ldr	r4, [pc, #52]	; (80071a8 <__libc_init_array+0x3c>)
 8007172:	1b64      	subs	r4, r4, r5
 8007174:	10a4      	asrs	r4, r4, #2
 8007176:	2600      	movs	r6, #0
 8007178:	42a6      	cmp	r6, r4
 800717a:	d109      	bne.n	8007190 <__libc_init_array+0x24>
 800717c:	4d0b      	ldr	r5, [pc, #44]	; (80071ac <__libc_init_array+0x40>)
 800717e:	4c0c      	ldr	r4, [pc, #48]	; (80071b0 <__libc_init_array+0x44>)
 8007180:	f003 feac 	bl	800aedc <_init>
 8007184:	1b64      	subs	r4, r4, r5
 8007186:	10a4      	asrs	r4, r4, #2
 8007188:	2600      	movs	r6, #0
 800718a:	42a6      	cmp	r6, r4
 800718c:	d105      	bne.n	800719a <__libc_init_array+0x2e>
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	f855 3b04 	ldr.w	r3, [r5], #4
 8007194:	4798      	blx	r3
 8007196:	3601      	adds	r6, #1
 8007198:	e7ee      	b.n	8007178 <__libc_init_array+0xc>
 800719a:	f855 3b04 	ldr.w	r3, [r5], #4
 800719e:	4798      	blx	r3
 80071a0:	3601      	adds	r6, #1
 80071a2:	e7f2      	b.n	800718a <__libc_init_array+0x1e>
 80071a4:	0800b558 	.word	0x0800b558
 80071a8:	0800b558 	.word	0x0800b558
 80071ac:	0800b558 	.word	0x0800b558
 80071b0:	0800b55c 	.word	0x0800b55c

080071b4 <__retarget_lock_init_recursive>:
 80071b4:	4770      	bx	lr

080071b6 <__retarget_lock_acquire_recursive>:
 80071b6:	4770      	bx	lr

080071b8 <__retarget_lock_release_recursive>:
 80071b8:	4770      	bx	lr

080071ba <memcpy>:
 80071ba:	440a      	add	r2, r1
 80071bc:	4291      	cmp	r1, r2
 80071be:	f100 33ff 	add.w	r3, r0, #4294967295
 80071c2:	d100      	bne.n	80071c6 <memcpy+0xc>
 80071c4:	4770      	bx	lr
 80071c6:	b510      	push	{r4, lr}
 80071c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d0:	4291      	cmp	r1, r2
 80071d2:	d1f9      	bne.n	80071c8 <memcpy+0xe>
 80071d4:	bd10      	pop	{r4, pc}

080071d6 <memset>:
 80071d6:	4402      	add	r2, r0
 80071d8:	4603      	mov	r3, r0
 80071da:	4293      	cmp	r3, r2
 80071dc:	d100      	bne.n	80071e0 <memset+0xa>
 80071de:	4770      	bx	lr
 80071e0:	f803 1b01 	strb.w	r1, [r3], #1
 80071e4:	e7f9      	b.n	80071da <memset+0x4>
	...

080071e8 <sbrk_aligned>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	4e0e      	ldr	r6, [pc, #56]	; (8007224 <sbrk_aligned+0x3c>)
 80071ec:	460c      	mov	r4, r1
 80071ee:	6831      	ldr	r1, [r6, #0]
 80071f0:	4605      	mov	r5, r0
 80071f2:	b911      	cbnz	r1, 80071fa <sbrk_aligned+0x12>
 80071f4:	f000 fd60 	bl	8007cb8 <_sbrk_r>
 80071f8:	6030      	str	r0, [r6, #0]
 80071fa:	4621      	mov	r1, r4
 80071fc:	4628      	mov	r0, r5
 80071fe:	f000 fd5b 	bl	8007cb8 <_sbrk_r>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d00a      	beq.n	800721c <sbrk_aligned+0x34>
 8007206:	1cc4      	adds	r4, r0, #3
 8007208:	f024 0403 	bic.w	r4, r4, #3
 800720c:	42a0      	cmp	r0, r4
 800720e:	d007      	beq.n	8007220 <sbrk_aligned+0x38>
 8007210:	1a21      	subs	r1, r4, r0
 8007212:	4628      	mov	r0, r5
 8007214:	f000 fd50 	bl	8007cb8 <_sbrk_r>
 8007218:	3001      	adds	r0, #1
 800721a:	d101      	bne.n	8007220 <sbrk_aligned+0x38>
 800721c:	f04f 34ff 	mov.w	r4, #4294967295
 8007220:	4620      	mov	r0, r4
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	20004d50 	.word	0x20004d50

08007228 <_malloc_r>:
 8007228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	1ccd      	adds	r5, r1, #3
 800722e:	f025 0503 	bic.w	r5, r5, #3
 8007232:	3508      	adds	r5, #8
 8007234:	2d0c      	cmp	r5, #12
 8007236:	bf38      	it	cc
 8007238:	250c      	movcc	r5, #12
 800723a:	2d00      	cmp	r5, #0
 800723c:	4607      	mov	r7, r0
 800723e:	db01      	blt.n	8007244 <_malloc_r+0x1c>
 8007240:	42a9      	cmp	r1, r5
 8007242:	d905      	bls.n	8007250 <_malloc_r+0x28>
 8007244:	230c      	movs	r3, #12
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	2600      	movs	r6, #0
 800724a:	4630      	mov	r0, r6
 800724c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007250:	4e2e      	ldr	r6, [pc, #184]	; (800730c <_malloc_r+0xe4>)
 8007252:	f001 fe3d 	bl	8008ed0 <__malloc_lock>
 8007256:	6833      	ldr	r3, [r6, #0]
 8007258:	461c      	mov	r4, r3
 800725a:	bb34      	cbnz	r4, 80072aa <_malloc_r+0x82>
 800725c:	4629      	mov	r1, r5
 800725e:	4638      	mov	r0, r7
 8007260:	f7ff ffc2 	bl	80071e8 <sbrk_aligned>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	4604      	mov	r4, r0
 8007268:	d14d      	bne.n	8007306 <_malloc_r+0xde>
 800726a:	6834      	ldr	r4, [r6, #0]
 800726c:	4626      	mov	r6, r4
 800726e:	2e00      	cmp	r6, #0
 8007270:	d140      	bne.n	80072f4 <_malloc_r+0xcc>
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	4631      	mov	r1, r6
 8007276:	4638      	mov	r0, r7
 8007278:	eb04 0803 	add.w	r8, r4, r3
 800727c:	f000 fd1c 	bl	8007cb8 <_sbrk_r>
 8007280:	4580      	cmp	r8, r0
 8007282:	d13a      	bne.n	80072fa <_malloc_r+0xd2>
 8007284:	6821      	ldr	r1, [r4, #0]
 8007286:	3503      	adds	r5, #3
 8007288:	1a6d      	subs	r5, r5, r1
 800728a:	f025 0503 	bic.w	r5, r5, #3
 800728e:	3508      	adds	r5, #8
 8007290:	2d0c      	cmp	r5, #12
 8007292:	bf38      	it	cc
 8007294:	250c      	movcc	r5, #12
 8007296:	4629      	mov	r1, r5
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff ffa5 	bl	80071e8 <sbrk_aligned>
 800729e:	3001      	adds	r0, #1
 80072a0:	d02b      	beq.n	80072fa <_malloc_r+0xd2>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	442b      	add	r3, r5
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	e00e      	b.n	80072c8 <_malloc_r+0xa0>
 80072aa:	6822      	ldr	r2, [r4, #0]
 80072ac:	1b52      	subs	r2, r2, r5
 80072ae:	d41e      	bmi.n	80072ee <_malloc_r+0xc6>
 80072b0:	2a0b      	cmp	r2, #11
 80072b2:	d916      	bls.n	80072e2 <_malloc_r+0xba>
 80072b4:	1961      	adds	r1, r4, r5
 80072b6:	42a3      	cmp	r3, r4
 80072b8:	6025      	str	r5, [r4, #0]
 80072ba:	bf18      	it	ne
 80072bc:	6059      	strne	r1, [r3, #4]
 80072be:	6863      	ldr	r3, [r4, #4]
 80072c0:	bf08      	it	eq
 80072c2:	6031      	streq	r1, [r6, #0]
 80072c4:	5162      	str	r2, [r4, r5]
 80072c6:	604b      	str	r3, [r1, #4]
 80072c8:	4638      	mov	r0, r7
 80072ca:	f104 060b 	add.w	r6, r4, #11
 80072ce:	f001 fe05 	bl	8008edc <__malloc_unlock>
 80072d2:	f026 0607 	bic.w	r6, r6, #7
 80072d6:	1d23      	adds	r3, r4, #4
 80072d8:	1af2      	subs	r2, r6, r3
 80072da:	d0b6      	beq.n	800724a <_malloc_r+0x22>
 80072dc:	1b9b      	subs	r3, r3, r6
 80072de:	50a3      	str	r3, [r4, r2]
 80072e0:	e7b3      	b.n	800724a <_malloc_r+0x22>
 80072e2:	6862      	ldr	r2, [r4, #4]
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	bf0c      	ite	eq
 80072e8:	6032      	streq	r2, [r6, #0]
 80072ea:	605a      	strne	r2, [r3, #4]
 80072ec:	e7ec      	b.n	80072c8 <_malloc_r+0xa0>
 80072ee:	4623      	mov	r3, r4
 80072f0:	6864      	ldr	r4, [r4, #4]
 80072f2:	e7b2      	b.n	800725a <_malloc_r+0x32>
 80072f4:	4634      	mov	r4, r6
 80072f6:	6876      	ldr	r6, [r6, #4]
 80072f8:	e7b9      	b.n	800726e <_malloc_r+0x46>
 80072fa:	230c      	movs	r3, #12
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	4638      	mov	r0, r7
 8007300:	f001 fdec 	bl	8008edc <__malloc_unlock>
 8007304:	e7a1      	b.n	800724a <_malloc_r+0x22>
 8007306:	6025      	str	r5, [r4, #0]
 8007308:	e7de      	b.n	80072c8 <_malloc_r+0xa0>
 800730a:	bf00      	nop
 800730c:	20004d4c 	.word	0x20004d4c

08007310 <__cvt>:
 8007310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	ec55 4b10 	vmov	r4, r5, d0
 8007318:	2d00      	cmp	r5, #0
 800731a:	460e      	mov	r6, r1
 800731c:	4619      	mov	r1, r3
 800731e:	462b      	mov	r3, r5
 8007320:	bfbb      	ittet	lt
 8007322:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007326:	461d      	movlt	r5, r3
 8007328:	2300      	movge	r3, #0
 800732a:	232d      	movlt	r3, #45	; 0x2d
 800732c:	700b      	strb	r3, [r1, #0]
 800732e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007330:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007334:	4691      	mov	r9, r2
 8007336:	f023 0820 	bic.w	r8, r3, #32
 800733a:	bfbc      	itt	lt
 800733c:	4622      	movlt	r2, r4
 800733e:	4614      	movlt	r4, r2
 8007340:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007344:	d005      	beq.n	8007352 <__cvt+0x42>
 8007346:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800734a:	d100      	bne.n	800734e <__cvt+0x3e>
 800734c:	3601      	adds	r6, #1
 800734e:	2102      	movs	r1, #2
 8007350:	e000      	b.n	8007354 <__cvt+0x44>
 8007352:	2103      	movs	r1, #3
 8007354:	ab03      	add	r3, sp, #12
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	ab02      	add	r3, sp, #8
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	ec45 4b10 	vmov	d0, r4, r5
 8007360:	4653      	mov	r3, sl
 8007362:	4632      	mov	r2, r6
 8007364:	f000 fdac 	bl	8007ec0 <_dtoa_r>
 8007368:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800736c:	4607      	mov	r7, r0
 800736e:	d102      	bne.n	8007376 <__cvt+0x66>
 8007370:	f019 0f01 	tst.w	r9, #1
 8007374:	d022      	beq.n	80073bc <__cvt+0xac>
 8007376:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800737a:	eb07 0906 	add.w	r9, r7, r6
 800737e:	d110      	bne.n	80073a2 <__cvt+0x92>
 8007380:	783b      	ldrb	r3, [r7, #0]
 8007382:	2b30      	cmp	r3, #48	; 0x30
 8007384:	d10a      	bne.n	800739c <__cvt+0x8c>
 8007386:	2200      	movs	r2, #0
 8007388:	2300      	movs	r3, #0
 800738a:	4620      	mov	r0, r4
 800738c:	4629      	mov	r1, r5
 800738e:	f7f9 fbbb 	bl	8000b08 <__aeabi_dcmpeq>
 8007392:	b918      	cbnz	r0, 800739c <__cvt+0x8c>
 8007394:	f1c6 0601 	rsb	r6, r6, #1
 8007398:	f8ca 6000 	str.w	r6, [sl]
 800739c:	f8da 3000 	ldr.w	r3, [sl]
 80073a0:	4499      	add	r9, r3
 80073a2:	2200      	movs	r2, #0
 80073a4:	2300      	movs	r3, #0
 80073a6:	4620      	mov	r0, r4
 80073a8:	4629      	mov	r1, r5
 80073aa:	f7f9 fbad 	bl	8000b08 <__aeabi_dcmpeq>
 80073ae:	b108      	cbz	r0, 80073b4 <__cvt+0xa4>
 80073b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80073b4:	2230      	movs	r2, #48	; 0x30
 80073b6:	9b03      	ldr	r3, [sp, #12]
 80073b8:	454b      	cmp	r3, r9
 80073ba:	d307      	bcc.n	80073cc <__cvt+0xbc>
 80073bc:	9b03      	ldr	r3, [sp, #12]
 80073be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073c0:	1bdb      	subs	r3, r3, r7
 80073c2:	4638      	mov	r0, r7
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	b004      	add	sp, #16
 80073c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073cc:	1c59      	adds	r1, r3, #1
 80073ce:	9103      	str	r1, [sp, #12]
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	e7f0      	b.n	80073b6 <__cvt+0xa6>

080073d4 <__exponent>:
 80073d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073d6:	4603      	mov	r3, r0
 80073d8:	2900      	cmp	r1, #0
 80073da:	bfb8      	it	lt
 80073dc:	4249      	neglt	r1, r1
 80073de:	f803 2b02 	strb.w	r2, [r3], #2
 80073e2:	bfb4      	ite	lt
 80073e4:	222d      	movlt	r2, #45	; 0x2d
 80073e6:	222b      	movge	r2, #43	; 0x2b
 80073e8:	2909      	cmp	r1, #9
 80073ea:	7042      	strb	r2, [r0, #1]
 80073ec:	dd2a      	ble.n	8007444 <__exponent+0x70>
 80073ee:	f10d 0407 	add.w	r4, sp, #7
 80073f2:	46a4      	mov	ip, r4
 80073f4:	270a      	movs	r7, #10
 80073f6:	46a6      	mov	lr, r4
 80073f8:	460a      	mov	r2, r1
 80073fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80073fe:	fb07 1516 	mls	r5, r7, r6, r1
 8007402:	3530      	adds	r5, #48	; 0x30
 8007404:	2a63      	cmp	r2, #99	; 0x63
 8007406:	f104 34ff 	add.w	r4, r4, #4294967295
 800740a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800740e:	4631      	mov	r1, r6
 8007410:	dcf1      	bgt.n	80073f6 <__exponent+0x22>
 8007412:	3130      	adds	r1, #48	; 0x30
 8007414:	f1ae 0502 	sub.w	r5, lr, #2
 8007418:	f804 1c01 	strb.w	r1, [r4, #-1]
 800741c:	1c44      	adds	r4, r0, #1
 800741e:	4629      	mov	r1, r5
 8007420:	4561      	cmp	r1, ip
 8007422:	d30a      	bcc.n	800743a <__exponent+0x66>
 8007424:	f10d 0209 	add.w	r2, sp, #9
 8007428:	eba2 020e 	sub.w	r2, r2, lr
 800742c:	4565      	cmp	r5, ip
 800742e:	bf88      	it	hi
 8007430:	2200      	movhi	r2, #0
 8007432:	4413      	add	r3, r2
 8007434:	1a18      	subs	r0, r3, r0
 8007436:	b003      	add	sp, #12
 8007438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800743a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800743e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007442:	e7ed      	b.n	8007420 <__exponent+0x4c>
 8007444:	2330      	movs	r3, #48	; 0x30
 8007446:	3130      	adds	r1, #48	; 0x30
 8007448:	7083      	strb	r3, [r0, #2]
 800744a:	70c1      	strb	r1, [r0, #3]
 800744c:	1d03      	adds	r3, r0, #4
 800744e:	e7f1      	b.n	8007434 <__exponent+0x60>

08007450 <_printf_float>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	ed2d 8b02 	vpush	{d8}
 8007458:	b08d      	sub	sp, #52	; 0x34
 800745a:	460c      	mov	r4, r1
 800745c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007460:	4616      	mov	r6, r2
 8007462:	461f      	mov	r7, r3
 8007464:	4605      	mov	r5, r0
 8007466:	f001 fd15 	bl	8008e94 <_localeconv_r>
 800746a:	f8d0 a000 	ldr.w	sl, [r0]
 800746e:	4650      	mov	r0, sl
 8007470:	f7f8 fece 	bl	8000210 <strlen>
 8007474:	2300      	movs	r3, #0
 8007476:	930a      	str	r3, [sp, #40]	; 0x28
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	9305      	str	r3, [sp, #20]
 800747c:	f8d8 3000 	ldr.w	r3, [r8]
 8007480:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007484:	3307      	adds	r3, #7
 8007486:	f023 0307 	bic.w	r3, r3, #7
 800748a:	f103 0208 	add.w	r2, r3, #8
 800748e:	f8c8 2000 	str.w	r2, [r8]
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800749a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800749e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074a2:	9307      	str	r3, [sp, #28]
 80074a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80074a8:	ee08 0a10 	vmov	s16, r0
 80074ac:	4b9f      	ldr	r3, [pc, #636]	; (800772c <_printf_float+0x2dc>)
 80074ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	f7f9 fb59 	bl	8000b6c <__aeabi_dcmpun>
 80074ba:	bb88      	cbnz	r0, 8007520 <_printf_float+0xd0>
 80074bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074c0:	4b9a      	ldr	r3, [pc, #616]	; (800772c <_printf_float+0x2dc>)
 80074c2:	f04f 32ff 	mov.w	r2, #4294967295
 80074c6:	f7f9 fb33 	bl	8000b30 <__aeabi_dcmple>
 80074ca:	bb48      	cbnz	r0, 8007520 <_printf_float+0xd0>
 80074cc:	2200      	movs	r2, #0
 80074ce:	2300      	movs	r3, #0
 80074d0:	4640      	mov	r0, r8
 80074d2:	4649      	mov	r1, r9
 80074d4:	f7f9 fb22 	bl	8000b1c <__aeabi_dcmplt>
 80074d8:	b110      	cbz	r0, 80074e0 <_printf_float+0x90>
 80074da:	232d      	movs	r3, #45	; 0x2d
 80074dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e0:	4b93      	ldr	r3, [pc, #588]	; (8007730 <_printf_float+0x2e0>)
 80074e2:	4894      	ldr	r0, [pc, #592]	; (8007734 <_printf_float+0x2e4>)
 80074e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074e8:	bf94      	ite	ls
 80074ea:	4698      	movls	r8, r3
 80074ec:	4680      	movhi	r8, r0
 80074ee:	2303      	movs	r3, #3
 80074f0:	6123      	str	r3, [r4, #16]
 80074f2:	9b05      	ldr	r3, [sp, #20]
 80074f4:	f023 0204 	bic.w	r2, r3, #4
 80074f8:	6022      	str	r2, [r4, #0]
 80074fa:	f04f 0900 	mov.w	r9, #0
 80074fe:	9700      	str	r7, [sp, #0]
 8007500:	4633      	mov	r3, r6
 8007502:	aa0b      	add	r2, sp, #44	; 0x2c
 8007504:	4621      	mov	r1, r4
 8007506:	4628      	mov	r0, r5
 8007508:	f000 f9d8 	bl	80078bc <_printf_common>
 800750c:	3001      	adds	r0, #1
 800750e:	f040 8090 	bne.w	8007632 <_printf_float+0x1e2>
 8007512:	f04f 30ff 	mov.w	r0, #4294967295
 8007516:	b00d      	add	sp, #52	; 0x34
 8007518:	ecbd 8b02 	vpop	{d8}
 800751c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007520:	4642      	mov	r2, r8
 8007522:	464b      	mov	r3, r9
 8007524:	4640      	mov	r0, r8
 8007526:	4649      	mov	r1, r9
 8007528:	f7f9 fb20 	bl	8000b6c <__aeabi_dcmpun>
 800752c:	b140      	cbz	r0, 8007540 <_printf_float+0xf0>
 800752e:	464b      	mov	r3, r9
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfbc      	itt	lt
 8007534:	232d      	movlt	r3, #45	; 0x2d
 8007536:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800753a:	487f      	ldr	r0, [pc, #508]	; (8007738 <_printf_float+0x2e8>)
 800753c:	4b7f      	ldr	r3, [pc, #508]	; (800773c <_printf_float+0x2ec>)
 800753e:	e7d1      	b.n	80074e4 <_printf_float+0x94>
 8007540:	6863      	ldr	r3, [r4, #4]
 8007542:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007546:	9206      	str	r2, [sp, #24]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	d13f      	bne.n	80075cc <_printf_float+0x17c>
 800754c:	2306      	movs	r3, #6
 800754e:	6063      	str	r3, [r4, #4]
 8007550:	9b05      	ldr	r3, [sp, #20]
 8007552:	6861      	ldr	r1, [r4, #4]
 8007554:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007558:	2300      	movs	r3, #0
 800755a:	9303      	str	r3, [sp, #12]
 800755c:	ab0a      	add	r3, sp, #40	; 0x28
 800755e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007562:	ab09      	add	r3, sp, #36	; 0x24
 8007564:	ec49 8b10 	vmov	d0, r8, r9
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	6022      	str	r2, [r4, #0]
 800756c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007570:	4628      	mov	r0, r5
 8007572:	f7ff fecd 	bl	8007310 <__cvt>
 8007576:	9b06      	ldr	r3, [sp, #24]
 8007578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800757a:	2b47      	cmp	r3, #71	; 0x47
 800757c:	4680      	mov	r8, r0
 800757e:	d108      	bne.n	8007592 <_printf_float+0x142>
 8007580:	1cc8      	adds	r0, r1, #3
 8007582:	db02      	blt.n	800758a <_printf_float+0x13a>
 8007584:	6863      	ldr	r3, [r4, #4]
 8007586:	4299      	cmp	r1, r3
 8007588:	dd41      	ble.n	800760e <_printf_float+0x1be>
 800758a:	f1ab 0b02 	sub.w	fp, fp, #2
 800758e:	fa5f fb8b 	uxtb.w	fp, fp
 8007592:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007596:	d820      	bhi.n	80075da <_printf_float+0x18a>
 8007598:	3901      	subs	r1, #1
 800759a:	465a      	mov	r2, fp
 800759c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075a0:	9109      	str	r1, [sp, #36]	; 0x24
 80075a2:	f7ff ff17 	bl	80073d4 <__exponent>
 80075a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075a8:	1813      	adds	r3, r2, r0
 80075aa:	2a01      	cmp	r2, #1
 80075ac:	4681      	mov	r9, r0
 80075ae:	6123      	str	r3, [r4, #16]
 80075b0:	dc02      	bgt.n	80075b8 <_printf_float+0x168>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	07d2      	lsls	r2, r2, #31
 80075b6:	d501      	bpl.n	80075bc <_printf_float+0x16c>
 80075b8:	3301      	adds	r3, #1
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d09c      	beq.n	80074fe <_printf_float+0xae>
 80075c4:	232d      	movs	r3, #45	; 0x2d
 80075c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ca:	e798      	b.n	80074fe <_printf_float+0xae>
 80075cc:	9a06      	ldr	r2, [sp, #24]
 80075ce:	2a47      	cmp	r2, #71	; 0x47
 80075d0:	d1be      	bne.n	8007550 <_printf_float+0x100>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1bc      	bne.n	8007550 <_printf_float+0x100>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e7b9      	b.n	800754e <_printf_float+0xfe>
 80075da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075de:	d118      	bne.n	8007612 <_printf_float+0x1c2>
 80075e0:	2900      	cmp	r1, #0
 80075e2:	6863      	ldr	r3, [r4, #4]
 80075e4:	dd0b      	ble.n	80075fe <_printf_float+0x1ae>
 80075e6:	6121      	str	r1, [r4, #16]
 80075e8:	b913      	cbnz	r3, 80075f0 <_printf_float+0x1a0>
 80075ea:	6822      	ldr	r2, [r4, #0]
 80075ec:	07d0      	lsls	r0, r2, #31
 80075ee:	d502      	bpl.n	80075f6 <_printf_float+0x1a6>
 80075f0:	3301      	adds	r3, #1
 80075f2:	440b      	add	r3, r1
 80075f4:	6123      	str	r3, [r4, #16]
 80075f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80075f8:	f04f 0900 	mov.w	r9, #0
 80075fc:	e7de      	b.n	80075bc <_printf_float+0x16c>
 80075fe:	b913      	cbnz	r3, 8007606 <_printf_float+0x1b6>
 8007600:	6822      	ldr	r2, [r4, #0]
 8007602:	07d2      	lsls	r2, r2, #31
 8007604:	d501      	bpl.n	800760a <_printf_float+0x1ba>
 8007606:	3302      	adds	r3, #2
 8007608:	e7f4      	b.n	80075f4 <_printf_float+0x1a4>
 800760a:	2301      	movs	r3, #1
 800760c:	e7f2      	b.n	80075f4 <_printf_float+0x1a4>
 800760e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007614:	4299      	cmp	r1, r3
 8007616:	db05      	blt.n	8007624 <_printf_float+0x1d4>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	6121      	str	r1, [r4, #16]
 800761c:	07d8      	lsls	r0, r3, #31
 800761e:	d5ea      	bpl.n	80075f6 <_printf_float+0x1a6>
 8007620:	1c4b      	adds	r3, r1, #1
 8007622:	e7e7      	b.n	80075f4 <_printf_float+0x1a4>
 8007624:	2900      	cmp	r1, #0
 8007626:	bfd4      	ite	le
 8007628:	f1c1 0202 	rsble	r2, r1, #2
 800762c:	2201      	movgt	r2, #1
 800762e:	4413      	add	r3, r2
 8007630:	e7e0      	b.n	80075f4 <_printf_float+0x1a4>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	055a      	lsls	r2, r3, #21
 8007636:	d407      	bmi.n	8007648 <_printf_float+0x1f8>
 8007638:	6923      	ldr	r3, [r4, #16]
 800763a:	4642      	mov	r2, r8
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	d12c      	bne.n	80076a0 <_printf_float+0x250>
 8007646:	e764      	b.n	8007512 <_printf_float+0xc2>
 8007648:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800764c:	f240 80e0 	bls.w	8007810 <_printf_float+0x3c0>
 8007650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007654:	2200      	movs	r2, #0
 8007656:	2300      	movs	r3, #0
 8007658:	f7f9 fa56 	bl	8000b08 <__aeabi_dcmpeq>
 800765c:	2800      	cmp	r0, #0
 800765e:	d034      	beq.n	80076ca <_printf_float+0x27a>
 8007660:	4a37      	ldr	r2, [pc, #220]	; (8007740 <_printf_float+0x2f0>)
 8007662:	2301      	movs	r3, #1
 8007664:	4631      	mov	r1, r6
 8007666:	4628      	mov	r0, r5
 8007668:	47b8      	blx	r7
 800766a:	3001      	adds	r0, #1
 800766c:	f43f af51 	beq.w	8007512 <_printf_float+0xc2>
 8007670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007674:	429a      	cmp	r2, r3
 8007676:	db02      	blt.n	800767e <_printf_float+0x22e>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	07d8      	lsls	r0, r3, #31
 800767c:	d510      	bpl.n	80076a0 <_printf_float+0x250>
 800767e:	ee18 3a10 	vmov	r3, s16
 8007682:	4652      	mov	r2, sl
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	47b8      	blx	r7
 800768a:	3001      	adds	r0, #1
 800768c:	f43f af41 	beq.w	8007512 <_printf_float+0xc2>
 8007690:	f04f 0800 	mov.w	r8, #0
 8007694:	f104 091a 	add.w	r9, r4, #26
 8007698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769a:	3b01      	subs	r3, #1
 800769c:	4543      	cmp	r3, r8
 800769e:	dc09      	bgt.n	80076b4 <_printf_float+0x264>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	079b      	lsls	r3, r3, #30
 80076a4:	f100 8105 	bmi.w	80078b2 <_printf_float+0x462>
 80076a8:	68e0      	ldr	r0, [r4, #12]
 80076aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ac:	4298      	cmp	r0, r3
 80076ae:	bfb8      	it	lt
 80076b0:	4618      	movlt	r0, r3
 80076b2:	e730      	b.n	8007516 <_printf_float+0xc6>
 80076b4:	2301      	movs	r3, #1
 80076b6:	464a      	mov	r2, r9
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	f43f af27 	beq.w	8007512 <_printf_float+0xc2>
 80076c4:	f108 0801 	add.w	r8, r8, #1
 80076c8:	e7e6      	b.n	8007698 <_printf_float+0x248>
 80076ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dc39      	bgt.n	8007744 <_printf_float+0x2f4>
 80076d0:	4a1b      	ldr	r2, [pc, #108]	; (8007740 <_printf_float+0x2f0>)
 80076d2:	2301      	movs	r3, #1
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b8      	blx	r7
 80076da:	3001      	adds	r0, #1
 80076dc:	f43f af19 	beq.w	8007512 <_printf_float+0xc2>
 80076e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076e4:	4313      	orrs	r3, r2
 80076e6:	d102      	bne.n	80076ee <_printf_float+0x29e>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	07d9      	lsls	r1, r3, #31
 80076ec:	d5d8      	bpl.n	80076a0 <_printf_float+0x250>
 80076ee:	ee18 3a10 	vmov	r3, s16
 80076f2:	4652      	mov	r2, sl
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	f43f af09 	beq.w	8007512 <_printf_float+0xc2>
 8007700:	f04f 0900 	mov.w	r9, #0
 8007704:	f104 0a1a 	add.w	sl, r4, #26
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	425b      	negs	r3, r3
 800770c:	454b      	cmp	r3, r9
 800770e:	dc01      	bgt.n	8007714 <_printf_float+0x2c4>
 8007710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007712:	e792      	b.n	800763a <_printf_float+0x1ea>
 8007714:	2301      	movs	r3, #1
 8007716:	4652      	mov	r2, sl
 8007718:	4631      	mov	r1, r6
 800771a:	4628      	mov	r0, r5
 800771c:	47b8      	blx	r7
 800771e:	3001      	adds	r0, #1
 8007720:	f43f aef7 	beq.w	8007512 <_printf_float+0xc2>
 8007724:	f109 0901 	add.w	r9, r9, #1
 8007728:	e7ee      	b.n	8007708 <_printf_float+0x2b8>
 800772a:	bf00      	nop
 800772c:	7fefffff 	.word	0x7fefffff
 8007730:	0800affc 	.word	0x0800affc
 8007734:	0800b000 	.word	0x0800b000
 8007738:	0800b008 	.word	0x0800b008
 800773c:	0800b004 	.word	0x0800b004
 8007740:	0800b00c 	.word	0x0800b00c
 8007744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007748:	429a      	cmp	r2, r3
 800774a:	bfa8      	it	ge
 800774c:	461a      	movge	r2, r3
 800774e:	2a00      	cmp	r2, #0
 8007750:	4691      	mov	r9, r2
 8007752:	dc37      	bgt.n	80077c4 <_printf_float+0x374>
 8007754:	f04f 0b00 	mov.w	fp, #0
 8007758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800775c:	f104 021a 	add.w	r2, r4, #26
 8007760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007762:	9305      	str	r3, [sp, #20]
 8007764:	eba3 0309 	sub.w	r3, r3, r9
 8007768:	455b      	cmp	r3, fp
 800776a:	dc33      	bgt.n	80077d4 <_printf_float+0x384>
 800776c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007770:	429a      	cmp	r2, r3
 8007772:	db3b      	blt.n	80077ec <_printf_float+0x39c>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	07da      	lsls	r2, r3, #31
 8007778:	d438      	bmi.n	80077ec <_printf_float+0x39c>
 800777a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777c:	9a05      	ldr	r2, [sp, #20]
 800777e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007780:	1a9a      	subs	r2, r3, r2
 8007782:	eba3 0901 	sub.w	r9, r3, r1
 8007786:	4591      	cmp	r9, r2
 8007788:	bfa8      	it	ge
 800778a:	4691      	movge	r9, r2
 800778c:	f1b9 0f00 	cmp.w	r9, #0
 8007790:	dc35      	bgt.n	80077fe <_printf_float+0x3ae>
 8007792:	f04f 0800 	mov.w	r8, #0
 8007796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800779a:	f104 0a1a 	add.w	sl, r4, #26
 800779e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	eba3 0309 	sub.w	r3, r3, r9
 80077a8:	4543      	cmp	r3, r8
 80077aa:	f77f af79 	ble.w	80076a0 <_printf_float+0x250>
 80077ae:	2301      	movs	r3, #1
 80077b0:	4652      	mov	r2, sl
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	f43f aeaa 	beq.w	8007512 <_printf_float+0xc2>
 80077be:	f108 0801 	add.w	r8, r8, #1
 80077c2:	e7ec      	b.n	800779e <_printf_float+0x34e>
 80077c4:	4613      	mov	r3, r2
 80077c6:	4631      	mov	r1, r6
 80077c8:	4642      	mov	r2, r8
 80077ca:	4628      	mov	r0, r5
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	d1c0      	bne.n	8007754 <_printf_float+0x304>
 80077d2:	e69e      	b.n	8007512 <_printf_float+0xc2>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	9205      	str	r2, [sp, #20]
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	f43f ae97 	beq.w	8007512 <_printf_float+0xc2>
 80077e4:	9a05      	ldr	r2, [sp, #20]
 80077e6:	f10b 0b01 	add.w	fp, fp, #1
 80077ea:	e7b9      	b.n	8007760 <_printf_float+0x310>
 80077ec:	ee18 3a10 	vmov	r3, s16
 80077f0:	4652      	mov	r2, sl
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	d1be      	bne.n	800777a <_printf_float+0x32a>
 80077fc:	e689      	b.n	8007512 <_printf_float+0xc2>
 80077fe:	9a05      	ldr	r2, [sp, #20]
 8007800:	464b      	mov	r3, r9
 8007802:	4442      	add	r2, r8
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	d1c1      	bne.n	8007792 <_printf_float+0x342>
 800780e:	e680      	b.n	8007512 <_printf_float+0xc2>
 8007810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007812:	2a01      	cmp	r2, #1
 8007814:	dc01      	bgt.n	800781a <_printf_float+0x3ca>
 8007816:	07db      	lsls	r3, r3, #31
 8007818:	d538      	bpl.n	800788c <_printf_float+0x43c>
 800781a:	2301      	movs	r3, #1
 800781c:	4642      	mov	r2, r8
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	f43f ae74 	beq.w	8007512 <_printf_float+0xc2>
 800782a:	ee18 3a10 	vmov	r3, s16
 800782e:	4652      	mov	r2, sl
 8007830:	4631      	mov	r1, r6
 8007832:	4628      	mov	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	3001      	adds	r0, #1
 8007838:	f43f ae6b 	beq.w	8007512 <_printf_float+0xc2>
 800783c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007840:	2200      	movs	r2, #0
 8007842:	2300      	movs	r3, #0
 8007844:	f7f9 f960 	bl	8000b08 <__aeabi_dcmpeq>
 8007848:	b9d8      	cbnz	r0, 8007882 <_printf_float+0x432>
 800784a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784c:	f108 0201 	add.w	r2, r8, #1
 8007850:	3b01      	subs	r3, #1
 8007852:	4631      	mov	r1, r6
 8007854:	4628      	mov	r0, r5
 8007856:	47b8      	blx	r7
 8007858:	3001      	adds	r0, #1
 800785a:	d10e      	bne.n	800787a <_printf_float+0x42a>
 800785c:	e659      	b.n	8007512 <_printf_float+0xc2>
 800785e:	2301      	movs	r3, #1
 8007860:	4652      	mov	r2, sl
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	f43f ae52 	beq.w	8007512 <_printf_float+0xc2>
 800786e:	f108 0801 	add.w	r8, r8, #1
 8007872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007874:	3b01      	subs	r3, #1
 8007876:	4543      	cmp	r3, r8
 8007878:	dcf1      	bgt.n	800785e <_printf_float+0x40e>
 800787a:	464b      	mov	r3, r9
 800787c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007880:	e6dc      	b.n	800763c <_printf_float+0x1ec>
 8007882:	f04f 0800 	mov.w	r8, #0
 8007886:	f104 0a1a 	add.w	sl, r4, #26
 800788a:	e7f2      	b.n	8007872 <_printf_float+0x422>
 800788c:	2301      	movs	r3, #1
 800788e:	4642      	mov	r2, r8
 8007890:	e7df      	b.n	8007852 <_printf_float+0x402>
 8007892:	2301      	movs	r3, #1
 8007894:	464a      	mov	r2, r9
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	47b8      	blx	r7
 800789c:	3001      	adds	r0, #1
 800789e:	f43f ae38 	beq.w	8007512 <_printf_float+0xc2>
 80078a2:	f108 0801 	add.w	r8, r8, #1
 80078a6:	68e3      	ldr	r3, [r4, #12]
 80078a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078aa:	1a5b      	subs	r3, r3, r1
 80078ac:	4543      	cmp	r3, r8
 80078ae:	dcf0      	bgt.n	8007892 <_printf_float+0x442>
 80078b0:	e6fa      	b.n	80076a8 <_printf_float+0x258>
 80078b2:	f04f 0800 	mov.w	r8, #0
 80078b6:	f104 0919 	add.w	r9, r4, #25
 80078ba:	e7f4      	b.n	80078a6 <_printf_float+0x456>

080078bc <_printf_common>:
 80078bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c0:	4616      	mov	r6, r2
 80078c2:	4699      	mov	r9, r3
 80078c4:	688a      	ldr	r2, [r1, #8]
 80078c6:	690b      	ldr	r3, [r1, #16]
 80078c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078cc:	4293      	cmp	r3, r2
 80078ce:	bfb8      	it	lt
 80078d0:	4613      	movlt	r3, r2
 80078d2:	6033      	str	r3, [r6, #0]
 80078d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078d8:	4607      	mov	r7, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	b10a      	cbz	r2, 80078e2 <_printf_common+0x26>
 80078de:	3301      	adds	r3, #1
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	0699      	lsls	r1, r3, #26
 80078e6:	bf42      	ittt	mi
 80078e8:	6833      	ldrmi	r3, [r6, #0]
 80078ea:	3302      	addmi	r3, #2
 80078ec:	6033      	strmi	r3, [r6, #0]
 80078ee:	6825      	ldr	r5, [r4, #0]
 80078f0:	f015 0506 	ands.w	r5, r5, #6
 80078f4:	d106      	bne.n	8007904 <_printf_common+0x48>
 80078f6:	f104 0a19 	add.w	sl, r4, #25
 80078fa:	68e3      	ldr	r3, [r4, #12]
 80078fc:	6832      	ldr	r2, [r6, #0]
 80078fe:	1a9b      	subs	r3, r3, r2
 8007900:	42ab      	cmp	r3, r5
 8007902:	dc26      	bgt.n	8007952 <_printf_common+0x96>
 8007904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007908:	1e13      	subs	r3, r2, #0
 800790a:	6822      	ldr	r2, [r4, #0]
 800790c:	bf18      	it	ne
 800790e:	2301      	movne	r3, #1
 8007910:	0692      	lsls	r2, r2, #26
 8007912:	d42b      	bmi.n	800796c <_printf_common+0xb0>
 8007914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007918:	4649      	mov	r1, r9
 800791a:	4638      	mov	r0, r7
 800791c:	47c0      	blx	r8
 800791e:	3001      	adds	r0, #1
 8007920:	d01e      	beq.n	8007960 <_printf_common+0xa4>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	68e5      	ldr	r5, [r4, #12]
 8007926:	6832      	ldr	r2, [r6, #0]
 8007928:	f003 0306 	and.w	r3, r3, #6
 800792c:	2b04      	cmp	r3, #4
 800792e:	bf08      	it	eq
 8007930:	1aad      	subeq	r5, r5, r2
 8007932:	68a3      	ldr	r3, [r4, #8]
 8007934:	6922      	ldr	r2, [r4, #16]
 8007936:	bf0c      	ite	eq
 8007938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800793c:	2500      	movne	r5, #0
 800793e:	4293      	cmp	r3, r2
 8007940:	bfc4      	itt	gt
 8007942:	1a9b      	subgt	r3, r3, r2
 8007944:	18ed      	addgt	r5, r5, r3
 8007946:	2600      	movs	r6, #0
 8007948:	341a      	adds	r4, #26
 800794a:	42b5      	cmp	r5, r6
 800794c:	d11a      	bne.n	8007984 <_printf_common+0xc8>
 800794e:	2000      	movs	r0, #0
 8007950:	e008      	b.n	8007964 <_printf_common+0xa8>
 8007952:	2301      	movs	r3, #1
 8007954:	4652      	mov	r2, sl
 8007956:	4649      	mov	r1, r9
 8007958:	4638      	mov	r0, r7
 800795a:	47c0      	blx	r8
 800795c:	3001      	adds	r0, #1
 800795e:	d103      	bne.n	8007968 <_printf_common+0xac>
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007968:	3501      	adds	r5, #1
 800796a:	e7c6      	b.n	80078fa <_printf_common+0x3e>
 800796c:	18e1      	adds	r1, r4, r3
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	2030      	movs	r0, #48	; 0x30
 8007972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007976:	4422      	add	r2, r4
 8007978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800797c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007980:	3302      	adds	r3, #2
 8007982:	e7c7      	b.n	8007914 <_printf_common+0x58>
 8007984:	2301      	movs	r3, #1
 8007986:	4622      	mov	r2, r4
 8007988:	4649      	mov	r1, r9
 800798a:	4638      	mov	r0, r7
 800798c:	47c0      	blx	r8
 800798e:	3001      	adds	r0, #1
 8007990:	d0e6      	beq.n	8007960 <_printf_common+0xa4>
 8007992:	3601      	adds	r6, #1
 8007994:	e7d9      	b.n	800794a <_printf_common+0x8e>
	...

08007998 <_printf_i>:
 8007998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800799c:	7e0f      	ldrb	r7, [r1, #24]
 800799e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079a0:	2f78      	cmp	r7, #120	; 0x78
 80079a2:	4691      	mov	r9, r2
 80079a4:	4680      	mov	r8, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	469a      	mov	sl, r3
 80079aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079ae:	d807      	bhi.n	80079c0 <_printf_i+0x28>
 80079b0:	2f62      	cmp	r7, #98	; 0x62
 80079b2:	d80a      	bhi.n	80079ca <_printf_i+0x32>
 80079b4:	2f00      	cmp	r7, #0
 80079b6:	f000 80d8 	beq.w	8007b6a <_printf_i+0x1d2>
 80079ba:	2f58      	cmp	r7, #88	; 0x58
 80079bc:	f000 80a3 	beq.w	8007b06 <_printf_i+0x16e>
 80079c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079c8:	e03a      	b.n	8007a40 <_printf_i+0xa8>
 80079ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ce:	2b15      	cmp	r3, #21
 80079d0:	d8f6      	bhi.n	80079c0 <_printf_i+0x28>
 80079d2:	a101      	add	r1, pc, #4	; (adr r1, 80079d8 <_printf_i+0x40>)
 80079d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079d8:	08007a31 	.word	0x08007a31
 80079dc:	08007a45 	.word	0x08007a45
 80079e0:	080079c1 	.word	0x080079c1
 80079e4:	080079c1 	.word	0x080079c1
 80079e8:	080079c1 	.word	0x080079c1
 80079ec:	080079c1 	.word	0x080079c1
 80079f0:	08007a45 	.word	0x08007a45
 80079f4:	080079c1 	.word	0x080079c1
 80079f8:	080079c1 	.word	0x080079c1
 80079fc:	080079c1 	.word	0x080079c1
 8007a00:	080079c1 	.word	0x080079c1
 8007a04:	08007b51 	.word	0x08007b51
 8007a08:	08007a75 	.word	0x08007a75
 8007a0c:	08007b33 	.word	0x08007b33
 8007a10:	080079c1 	.word	0x080079c1
 8007a14:	080079c1 	.word	0x080079c1
 8007a18:	08007b73 	.word	0x08007b73
 8007a1c:	080079c1 	.word	0x080079c1
 8007a20:	08007a75 	.word	0x08007a75
 8007a24:	080079c1 	.word	0x080079c1
 8007a28:	080079c1 	.word	0x080079c1
 8007a2c:	08007b3b 	.word	0x08007b3b
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	1d1a      	adds	r2, r3, #4
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	602a      	str	r2, [r5, #0]
 8007a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a40:	2301      	movs	r3, #1
 8007a42:	e0a3      	b.n	8007b8c <_printf_i+0x1f4>
 8007a44:	6820      	ldr	r0, [r4, #0]
 8007a46:	6829      	ldr	r1, [r5, #0]
 8007a48:	0606      	lsls	r6, r0, #24
 8007a4a:	f101 0304 	add.w	r3, r1, #4
 8007a4e:	d50a      	bpl.n	8007a66 <_printf_i+0xce>
 8007a50:	680e      	ldr	r6, [r1, #0]
 8007a52:	602b      	str	r3, [r5, #0]
 8007a54:	2e00      	cmp	r6, #0
 8007a56:	da03      	bge.n	8007a60 <_printf_i+0xc8>
 8007a58:	232d      	movs	r3, #45	; 0x2d
 8007a5a:	4276      	negs	r6, r6
 8007a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a60:	485e      	ldr	r0, [pc, #376]	; (8007bdc <_printf_i+0x244>)
 8007a62:	230a      	movs	r3, #10
 8007a64:	e019      	b.n	8007a9a <_printf_i+0x102>
 8007a66:	680e      	ldr	r6, [r1, #0]
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a6e:	bf18      	it	ne
 8007a70:	b236      	sxthne	r6, r6
 8007a72:	e7ef      	b.n	8007a54 <_printf_i+0xbc>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	6820      	ldr	r0, [r4, #0]
 8007a78:	1d19      	adds	r1, r3, #4
 8007a7a:	6029      	str	r1, [r5, #0]
 8007a7c:	0601      	lsls	r1, r0, #24
 8007a7e:	d501      	bpl.n	8007a84 <_printf_i+0xec>
 8007a80:	681e      	ldr	r6, [r3, #0]
 8007a82:	e002      	b.n	8007a8a <_printf_i+0xf2>
 8007a84:	0646      	lsls	r6, r0, #25
 8007a86:	d5fb      	bpl.n	8007a80 <_printf_i+0xe8>
 8007a88:	881e      	ldrh	r6, [r3, #0]
 8007a8a:	4854      	ldr	r0, [pc, #336]	; (8007bdc <_printf_i+0x244>)
 8007a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a8e:	bf0c      	ite	eq
 8007a90:	2308      	moveq	r3, #8
 8007a92:	230a      	movne	r3, #10
 8007a94:	2100      	movs	r1, #0
 8007a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a9a:	6865      	ldr	r5, [r4, #4]
 8007a9c:	60a5      	str	r5, [r4, #8]
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	bfa2      	ittt	ge
 8007aa2:	6821      	ldrge	r1, [r4, #0]
 8007aa4:	f021 0104 	bicge.w	r1, r1, #4
 8007aa8:	6021      	strge	r1, [r4, #0]
 8007aaa:	b90e      	cbnz	r6, 8007ab0 <_printf_i+0x118>
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	d04d      	beq.n	8007b4c <_printf_i+0x1b4>
 8007ab0:	4615      	mov	r5, r2
 8007ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8007aba:	5dc7      	ldrb	r7, [r0, r7]
 8007abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ac0:	4637      	mov	r7, r6
 8007ac2:	42bb      	cmp	r3, r7
 8007ac4:	460e      	mov	r6, r1
 8007ac6:	d9f4      	bls.n	8007ab2 <_printf_i+0x11a>
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d10b      	bne.n	8007ae4 <_printf_i+0x14c>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	07de      	lsls	r6, r3, #31
 8007ad0:	d508      	bpl.n	8007ae4 <_printf_i+0x14c>
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	6861      	ldr	r1, [r4, #4]
 8007ad6:	4299      	cmp	r1, r3
 8007ad8:	bfde      	ittt	le
 8007ada:	2330      	movle	r3, #48	; 0x30
 8007adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ae4:	1b52      	subs	r2, r2, r5
 8007ae6:	6122      	str	r2, [r4, #16]
 8007ae8:	f8cd a000 	str.w	sl, [sp]
 8007aec:	464b      	mov	r3, r9
 8007aee:	aa03      	add	r2, sp, #12
 8007af0:	4621      	mov	r1, r4
 8007af2:	4640      	mov	r0, r8
 8007af4:	f7ff fee2 	bl	80078bc <_printf_common>
 8007af8:	3001      	adds	r0, #1
 8007afa:	d14c      	bne.n	8007b96 <_printf_i+0x1fe>
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	b004      	add	sp, #16
 8007b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b06:	4835      	ldr	r0, [pc, #212]	; (8007bdc <_printf_i+0x244>)
 8007b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b0c:	6829      	ldr	r1, [r5, #0]
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b14:	6029      	str	r1, [r5, #0]
 8007b16:	061d      	lsls	r5, r3, #24
 8007b18:	d514      	bpl.n	8007b44 <_printf_i+0x1ac>
 8007b1a:	07df      	lsls	r7, r3, #31
 8007b1c:	bf44      	itt	mi
 8007b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b22:	6023      	strmi	r3, [r4, #0]
 8007b24:	b91e      	cbnz	r6, 8007b2e <_printf_i+0x196>
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	f023 0320 	bic.w	r3, r3, #32
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	2310      	movs	r3, #16
 8007b30:	e7b0      	b.n	8007a94 <_printf_i+0xfc>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	f043 0320 	orr.w	r3, r3, #32
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	2378      	movs	r3, #120	; 0x78
 8007b3c:	4828      	ldr	r0, [pc, #160]	; (8007be0 <_printf_i+0x248>)
 8007b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b42:	e7e3      	b.n	8007b0c <_printf_i+0x174>
 8007b44:	0659      	lsls	r1, r3, #25
 8007b46:	bf48      	it	mi
 8007b48:	b2b6      	uxthmi	r6, r6
 8007b4a:	e7e6      	b.n	8007b1a <_printf_i+0x182>
 8007b4c:	4615      	mov	r5, r2
 8007b4e:	e7bb      	b.n	8007ac8 <_printf_i+0x130>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	6826      	ldr	r6, [r4, #0]
 8007b54:	6961      	ldr	r1, [r4, #20]
 8007b56:	1d18      	adds	r0, r3, #4
 8007b58:	6028      	str	r0, [r5, #0]
 8007b5a:	0635      	lsls	r5, r6, #24
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	d501      	bpl.n	8007b64 <_printf_i+0x1cc>
 8007b60:	6019      	str	r1, [r3, #0]
 8007b62:	e002      	b.n	8007b6a <_printf_i+0x1d2>
 8007b64:	0670      	lsls	r0, r6, #25
 8007b66:	d5fb      	bpl.n	8007b60 <_printf_i+0x1c8>
 8007b68:	8019      	strh	r1, [r3, #0]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	4615      	mov	r5, r2
 8007b70:	e7ba      	b.n	8007ae8 <_printf_i+0x150>
 8007b72:	682b      	ldr	r3, [r5, #0]
 8007b74:	1d1a      	adds	r2, r3, #4
 8007b76:	602a      	str	r2, [r5, #0]
 8007b78:	681d      	ldr	r5, [r3, #0]
 8007b7a:	6862      	ldr	r2, [r4, #4]
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f7f8 fb4e 	bl	8000220 <memchr>
 8007b84:	b108      	cbz	r0, 8007b8a <_printf_i+0x1f2>
 8007b86:	1b40      	subs	r0, r0, r5
 8007b88:	6060      	str	r0, [r4, #4]
 8007b8a:	6863      	ldr	r3, [r4, #4]
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b94:	e7a8      	b.n	8007ae8 <_printf_i+0x150>
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	47d0      	blx	sl
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d0ab      	beq.n	8007afc <_printf_i+0x164>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	079b      	lsls	r3, r3, #30
 8007ba8:	d413      	bmi.n	8007bd2 <_printf_i+0x23a>
 8007baa:	68e0      	ldr	r0, [r4, #12]
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	4298      	cmp	r0, r3
 8007bb0:	bfb8      	it	lt
 8007bb2:	4618      	movlt	r0, r3
 8007bb4:	e7a4      	b.n	8007b00 <_printf_i+0x168>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4632      	mov	r2, r6
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	47d0      	blx	sl
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d09b      	beq.n	8007afc <_printf_i+0x164>
 8007bc4:	3501      	adds	r5, #1
 8007bc6:	68e3      	ldr	r3, [r4, #12]
 8007bc8:	9903      	ldr	r1, [sp, #12]
 8007bca:	1a5b      	subs	r3, r3, r1
 8007bcc:	42ab      	cmp	r3, r5
 8007bce:	dcf2      	bgt.n	8007bb6 <_printf_i+0x21e>
 8007bd0:	e7eb      	b.n	8007baa <_printf_i+0x212>
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	f104 0619 	add.w	r6, r4, #25
 8007bd8:	e7f5      	b.n	8007bc6 <_printf_i+0x22e>
 8007bda:	bf00      	nop
 8007bdc:	0800b00e 	.word	0x0800b00e
 8007be0:	0800b01f 	.word	0x0800b01f

08007be4 <cleanup_glue>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	460c      	mov	r4, r1
 8007be8:	6809      	ldr	r1, [r1, #0]
 8007bea:	4605      	mov	r5, r0
 8007bec:	b109      	cbz	r1, 8007bf2 <cleanup_glue+0xe>
 8007bee:	f7ff fff9 	bl	8007be4 <cleanup_glue>
 8007bf2:	4621      	mov	r1, r4
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bfa:	f001 bd2d 	b.w	8009658 <_free_r>
	...

08007c00 <_reclaim_reent>:
 8007c00:	4b2c      	ldr	r3, [pc, #176]	; (8007cb4 <_reclaim_reent+0xb4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4283      	cmp	r3, r0
 8007c06:	b570      	push	{r4, r5, r6, lr}
 8007c08:	4604      	mov	r4, r0
 8007c0a:	d051      	beq.n	8007cb0 <_reclaim_reent+0xb0>
 8007c0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007c0e:	b143      	cbz	r3, 8007c22 <_reclaim_reent+0x22>
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d14a      	bne.n	8007cac <_reclaim_reent+0xac>
 8007c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	b111      	cbz	r1, 8007c22 <_reclaim_reent+0x22>
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f001 fd1b 	bl	8009658 <_free_r>
 8007c22:	6961      	ldr	r1, [r4, #20]
 8007c24:	b111      	cbz	r1, 8007c2c <_reclaim_reent+0x2c>
 8007c26:	4620      	mov	r0, r4
 8007c28:	f001 fd16 	bl	8009658 <_free_r>
 8007c2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007c2e:	b111      	cbz	r1, 8007c36 <_reclaim_reent+0x36>
 8007c30:	4620      	mov	r0, r4
 8007c32:	f001 fd11 	bl	8009658 <_free_r>
 8007c36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007c38:	b111      	cbz	r1, 8007c40 <_reclaim_reent+0x40>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f001 fd0c 	bl	8009658 <_free_r>
 8007c40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007c42:	b111      	cbz	r1, 8007c4a <_reclaim_reent+0x4a>
 8007c44:	4620      	mov	r0, r4
 8007c46:	f001 fd07 	bl	8009658 <_free_r>
 8007c4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c4c:	b111      	cbz	r1, 8007c54 <_reclaim_reent+0x54>
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f001 fd02 	bl	8009658 <_free_r>
 8007c54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007c56:	b111      	cbz	r1, 8007c5e <_reclaim_reent+0x5e>
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f001 fcfd 	bl	8009658 <_free_r>
 8007c5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007c60:	b111      	cbz	r1, 8007c68 <_reclaim_reent+0x68>
 8007c62:	4620      	mov	r0, r4
 8007c64:	f001 fcf8 	bl	8009658 <_free_r>
 8007c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c6a:	b111      	cbz	r1, 8007c72 <_reclaim_reent+0x72>
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f001 fcf3 	bl	8009658 <_free_r>
 8007c72:	69a3      	ldr	r3, [r4, #24]
 8007c74:	b1e3      	cbz	r3, 8007cb0 <_reclaim_reent+0xb0>
 8007c76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c78:	4620      	mov	r0, r4
 8007c7a:	4798      	blx	r3
 8007c7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c7e:	b1b9      	cbz	r1, 8007cb0 <_reclaim_reent+0xb0>
 8007c80:	4620      	mov	r0, r4
 8007c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c86:	f7ff bfad 	b.w	8007be4 <cleanup_glue>
 8007c8a:	5949      	ldr	r1, [r1, r5]
 8007c8c:	b941      	cbnz	r1, 8007ca0 <_reclaim_reent+0xa0>
 8007c8e:	3504      	adds	r5, #4
 8007c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c92:	2d80      	cmp	r5, #128	; 0x80
 8007c94:	68d9      	ldr	r1, [r3, #12]
 8007c96:	d1f8      	bne.n	8007c8a <_reclaim_reent+0x8a>
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f001 fcdd 	bl	8009658 <_free_r>
 8007c9e:	e7ba      	b.n	8007c16 <_reclaim_reent+0x16>
 8007ca0:	680e      	ldr	r6, [r1, #0]
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f001 fcd8 	bl	8009658 <_free_r>
 8007ca8:	4631      	mov	r1, r6
 8007caa:	e7ef      	b.n	8007c8c <_reclaim_reent+0x8c>
 8007cac:	2500      	movs	r5, #0
 8007cae:	e7ef      	b.n	8007c90 <_reclaim_reent+0x90>
 8007cb0:	bd70      	pop	{r4, r5, r6, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000014 	.word	0x20000014

08007cb8 <_sbrk_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4d06      	ldr	r5, [pc, #24]	; (8007cd4 <_sbrk_r+0x1c>)
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	602b      	str	r3, [r5, #0]
 8007cc4:	f7f9 fefa 	bl	8001abc <_sbrk>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	d102      	bne.n	8007cd2 <_sbrk_r+0x1a>
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	b103      	cbz	r3, 8007cd2 <_sbrk_r+0x1a>
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	20004d54 	.word	0x20004d54

08007cd8 <__sread>:
 8007cd8:	b510      	push	{r4, lr}
 8007cda:	460c      	mov	r4, r1
 8007cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce0:	f001 fd06 	bl	80096f0 <_read_r>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	bfab      	itete	ge
 8007ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cea:	89a3      	ldrhlt	r3, [r4, #12]
 8007cec:	181b      	addge	r3, r3, r0
 8007cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cf2:	bfac      	ite	ge
 8007cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cf6:	81a3      	strhlt	r3, [r4, #12]
 8007cf8:	bd10      	pop	{r4, pc}

08007cfa <__swrite>:
 8007cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfe:	461f      	mov	r7, r3
 8007d00:	898b      	ldrh	r3, [r1, #12]
 8007d02:	05db      	lsls	r3, r3, #23
 8007d04:	4605      	mov	r5, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	4616      	mov	r6, r2
 8007d0a:	d505      	bpl.n	8007d18 <__swrite+0x1e>
 8007d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d10:	2302      	movs	r3, #2
 8007d12:	2200      	movs	r2, #0
 8007d14:	f001 f8c2 	bl	8008e9c <_lseek_r>
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d22:	81a3      	strh	r3, [r4, #12]
 8007d24:	4632      	mov	r2, r6
 8007d26:	463b      	mov	r3, r7
 8007d28:	4628      	mov	r0, r5
 8007d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2e:	f000 b817 	b.w	8007d60 <_write_r>

08007d32 <__sseek>:
 8007d32:	b510      	push	{r4, lr}
 8007d34:	460c      	mov	r4, r1
 8007d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3a:	f001 f8af 	bl	8008e9c <_lseek_r>
 8007d3e:	1c43      	adds	r3, r0, #1
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	bf15      	itete	ne
 8007d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d4e:	81a3      	strheq	r3, [r4, #12]
 8007d50:	bf18      	it	ne
 8007d52:	81a3      	strhne	r3, [r4, #12]
 8007d54:	bd10      	pop	{r4, pc}

08007d56 <__sclose>:
 8007d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5a:	f000 b813 	b.w	8007d84 <_close_r>
	...

08007d60 <_write_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4d07      	ldr	r5, [pc, #28]	; (8007d80 <_write_r+0x20>)
 8007d64:	4604      	mov	r4, r0
 8007d66:	4608      	mov	r0, r1
 8007d68:	4611      	mov	r1, r2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	602a      	str	r2, [r5, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f7f9 fe53 	bl	8001a1a <_write>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	d102      	bne.n	8007d7e <_write_r+0x1e>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	b103      	cbz	r3, 8007d7e <_write_r+0x1e>
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	20004d54 	.word	0x20004d54

08007d84 <_close_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d06      	ldr	r5, [pc, #24]	; (8007da0 <_close_r+0x1c>)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	602b      	str	r3, [r5, #0]
 8007d90:	f7f9 fe5f 	bl	8001a52 <_close>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_close_r+0x1a>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_close_r+0x1a>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20004d54 	.word	0x20004d54

08007da4 <quorem>:
 8007da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da8:	6903      	ldr	r3, [r0, #16]
 8007daa:	690c      	ldr	r4, [r1, #16]
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	4607      	mov	r7, r0
 8007db0:	f2c0 8081 	blt.w	8007eb6 <quorem+0x112>
 8007db4:	3c01      	subs	r4, #1
 8007db6:	f101 0814 	add.w	r8, r1, #20
 8007dba:	f100 0514 	add.w	r5, r0, #20
 8007dbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007dc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007dd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007dd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ddc:	d331      	bcc.n	8007e42 <quorem+0x9e>
 8007dde:	f04f 0e00 	mov.w	lr, #0
 8007de2:	4640      	mov	r0, r8
 8007de4:	46ac      	mov	ip, r5
 8007de6:	46f2      	mov	sl, lr
 8007de8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007dec:	b293      	uxth	r3, r2
 8007dee:	fb06 e303 	mla	r3, r6, r3, lr
 8007df2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	ebaa 0303 	sub.w	r3, sl, r3
 8007dfc:	f8dc a000 	ldr.w	sl, [ip]
 8007e00:	0c12      	lsrs	r2, r2, #16
 8007e02:	fa13 f38a 	uxtah	r3, r3, sl
 8007e06:	fb06 e202 	mla	r2, r6, r2, lr
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	9b00      	ldr	r3, [sp, #0]
 8007e0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e12:	b292      	uxth	r2, r2
 8007e14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e1c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e20:	4581      	cmp	r9, r0
 8007e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e26:	f84c 3b04 	str.w	r3, [ip], #4
 8007e2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e2e:	d2db      	bcs.n	8007de8 <quorem+0x44>
 8007e30:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e34:	b92b      	cbnz	r3, 8007e42 <quorem+0x9e>
 8007e36:	9b01      	ldr	r3, [sp, #4]
 8007e38:	3b04      	subs	r3, #4
 8007e3a:	429d      	cmp	r5, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	d32e      	bcc.n	8007e9e <quorem+0xfa>
 8007e40:	613c      	str	r4, [r7, #16]
 8007e42:	4638      	mov	r0, r7
 8007e44:	f001 fad2 	bl	80093ec <__mcmp>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	db24      	blt.n	8007e96 <quorem+0xf2>
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f04f 0c00 	mov.w	ip, #0
 8007e54:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e58:	f8d0 e000 	ldr.w	lr, [r0]
 8007e5c:	b293      	uxth	r3, r2
 8007e5e:	ebac 0303 	sub.w	r3, ip, r3
 8007e62:	0c12      	lsrs	r2, r2, #16
 8007e64:	fa13 f38e 	uxtah	r3, r3, lr
 8007e68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e76:	45c1      	cmp	r9, r8
 8007e78:	f840 3b04 	str.w	r3, [r0], #4
 8007e7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e80:	d2e8      	bcs.n	8007e54 <quorem+0xb0>
 8007e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e8a:	b922      	cbnz	r2, 8007e96 <quorem+0xf2>
 8007e8c:	3b04      	subs	r3, #4
 8007e8e:	429d      	cmp	r5, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	d30a      	bcc.n	8007eaa <quorem+0x106>
 8007e94:	613c      	str	r4, [r7, #16]
 8007e96:	4630      	mov	r0, r6
 8007e98:	b003      	add	sp, #12
 8007e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	3b04      	subs	r3, #4
 8007ea2:	2a00      	cmp	r2, #0
 8007ea4:	d1cc      	bne.n	8007e40 <quorem+0x9c>
 8007ea6:	3c01      	subs	r4, #1
 8007ea8:	e7c7      	b.n	8007e3a <quorem+0x96>
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	3b04      	subs	r3, #4
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	d1f0      	bne.n	8007e94 <quorem+0xf0>
 8007eb2:	3c01      	subs	r4, #1
 8007eb4:	e7eb      	b.n	8007e8e <quorem+0xea>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	e7ee      	b.n	8007e98 <quorem+0xf4>
 8007eba:	0000      	movs	r0, r0
 8007ebc:	0000      	movs	r0, r0
	...

08007ec0 <_dtoa_r>:
 8007ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	ed2d 8b04 	vpush	{d8-d9}
 8007ec8:	ec57 6b10 	vmov	r6, r7, d0
 8007ecc:	b093      	sub	sp, #76	; 0x4c
 8007ece:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ed0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ed4:	9106      	str	r1, [sp, #24]
 8007ed6:	ee10 aa10 	vmov	sl, s0
 8007eda:	4604      	mov	r4, r0
 8007edc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ede:	930c      	str	r3, [sp, #48]	; 0x30
 8007ee0:	46bb      	mov	fp, r7
 8007ee2:	b975      	cbnz	r5, 8007f02 <_dtoa_r+0x42>
 8007ee4:	2010      	movs	r0, #16
 8007ee6:	f000 ffeb 	bl	8008ec0 <malloc>
 8007eea:	4602      	mov	r2, r0
 8007eec:	6260      	str	r0, [r4, #36]	; 0x24
 8007eee:	b920      	cbnz	r0, 8007efa <_dtoa_r+0x3a>
 8007ef0:	4ba7      	ldr	r3, [pc, #668]	; (8008190 <_dtoa_r+0x2d0>)
 8007ef2:	21ea      	movs	r1, #234	; 0xea
 8007ef4:	48a7      	ldr	r0, [pc, #668]	; (8008194 <_dtoa_r+0x2d4>)
 8007ef6:	f001 fc15 	bl	8009724 <__assert_func>
 8007efa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007efe:	6005      	str	r5, [r0, #0]
 8007f00:	60c5      	str	r5, [r0, #12]
 8007f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f04:	6819      	ldr	r1, [r3, #0]
 8007f06:	b151      	cbz	r1, 8007f1e <_dtoa_r+0x5e>
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	604a      	str	r2, [r1, #4]
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	4093      	lsls	r3, r2
 8007f10:	608b      	str	r3, [r1, #8]
 8007f12:	4620      	mov	r0, r4
 8007f14:	f001 f828 	bl	8008f68 <_Bfree>
 8007f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	1e3b      	subs	r3, r7, #0
 8007f20:	bfaa      	itet	ge
 8007f22:	2300      	movge	r3, #0
 8007f24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007f28:	f8c8 3000 	strge.w	r3, [r8]
 8007f2c:	4b9a      	ldr	r3, [pc, #616]	; (8008198 <_dtoa_r+0x2d8>)
 8007f2e:	bfbc      	itt	lt
 8007f30:	2201      	movlt	r2, #1
 8007f32:	f8c8 2000 	strlt.w	r2, [r8]
 8007f36:	ea33 030b 	bics.w	r3, r3, fp
 8007f3a:	d11b      	bne.n	8007f74 <_dtoa_r+0xb4>
 8007f3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f48:	4333      	orrs	r3, r6
 8007f4a:	f000 8592 	beq.w	8008a72 <_dtoa_r+0xbb2>
 8007f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f50:	b963      	cbnz	r3, 8007f6c <_dtoa_r+0xac>
 8007f52:	4b92      	ldr	r3, [pc, #584]	; (800819c <_dtoa_r+0x2dc>)
 8007f54:	e022      	b.n	8007f9c <_dtoa_r+0xdc>
 8007f56:	4b92      	ldr	r3, [pc, #584]	; (80081a0 <_dtoa_r+0x2e0>)
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	9801      	ldr	r0, [sp, #4]
 8007f62:	b013      	add	sp, #76	; 0x4c
 8007f64:	ecbd 8b04 	vpop	{d8-d9}
 8007f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6c:	4b8b      	ldr	r3, [pc, #556]	; (800819c <_dtoa_r+0x2dc>)
 8007f6e:	9301      	str	r3, [sp, #4]
 8007f70:	3303      	adds	r3, #3
 8007f72:	e7f3      	b.n	8007f5c <_dtoa_r+0x9c>
 8007f74:	2200      	movs	r2, #0
 8007f76:	2300      	movs	r3, #0
 8007f78:	4650      	mov	r0, sl
 8007f7a:	4659      	mov	r1, fp
 8007f7c:	f7f8 fdc4 	bl	8000b08 <__aeabi_dcmpeq>
 8007f80:	ec4b ab19 	vmov	d9, sl, fp
 8007f84:	4680      	mov	r8, r0
 8007f86:	b158      	cbz	r0, 8007fa0 <_dtoa_r+0xe0>
 8007f88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 856b 	beq.w	8008a6c <_dtoa_r+0xbac>
 8007f96:	4883      	ldr	r0, [pc, #524]	; (80081a4 <_dtoa_r+0x2e4>)
 8007f98:	6018      	str	r0, [r3, #0]
 8007f9a:	1e43      	subs	r3, r0, #1
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	e7df      	b.n	8007f60 <_dtoa_r+0xa0>
 8007fa0:	ec4b ab10 	vmov	d0, sl, fp
 8007fa4:	aa10      	add	r2, sp, #64	; 0x40
 8007fa6:	a911      	add	r1, sp, #68	; 0x44
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 fac5 	bl	8009538 <__d2b>
 8007fae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007fb2:	ee08 0a10 	vmov	s16, r0
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	f000 8084 	beq.w	80080c4 <_dtoa_r+0x204>
 8007fbc:	ee19 3a90 	vmov	r3, s19
 8007fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007fc8:	4656      	mov	r6, sl
 8007fca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007fce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007fd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007fd6:	4b74      	ldr	r3, [pc, #464]	; (80081a8 <_dtoa_r+0x2e8>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4630      	mov	r0, r6
 8007fdc:	4639      	mov	r1, r7
 8007fde:	f7f8 f973 	bl	80002c8 <__aeabi_dsub>
 8007fe2:	a365      	add	r3, pc, #404	; (adr r3, 8008178 <_dtoa_r+0x2b8>)
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 fb26 	bl	8000638 <__aeabi_dmul>
 8007fec:	a364      	add	r3, pc, #400	; (adr r3, 8008180 <_dtoa_r+0x2c0>)
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	f7f8 f96b 	bl	80002cc <__adddf3>
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	460f      	mov	r7, r1
 8007ffc:	f7f8 fab2 	bl	8000564 <__aeabi_i2d>
 8008000:	a361      	add	r3, pc, #388	; (adr r3, 8008188 <_dtoa_r+0x2c8>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	f7f8 fb17 	bl	8000638 <__aeabi_dmul>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4630      	mov	r0, r6
 8008010:	4639      	mov	r1, r7
 8008012:	f7f8 f95b 	bl	80002cc <__adddf3>
 8008016:	4606      	mov	r6, r0
 8008018:	460f      	mov	r7, r1
 800801a:	f7f8 fdbd 	bl	8000b98 <__aeabi_d2iz>
 800801e:	2200      	movs	r2, #0
 8008020:	9000      	str	r0, [sp, #0]
 8008022:	2300      	movs	r3, #0
 8008024:	4630      	mov	r0, r6
 8008026:	4639      	mov	r1, r7
 8008028:	f7f8 fd78 	bl	8000b1c <__aeabi_dcmplt>
 800802c:	b150      	cbz	r0, 8008044 <_dtoa_r+0x184>
 800802e:	9800      	ldr	r0, [sp, #0]
 8008030:	f7f8 fa98 	bl	8000564 <__aeabi_i2d>
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	f7f8 fd66 	bl	8000b08 <__aeabi_dcmpeq>
 800803c:	b910      	cbnz	r0, 8008044 <_dtoa_r+0x184>
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	3b01      	subs	r3, #1
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	9b00      	ldr	r3, [sp, #0]
 8008046:	2b16      	cmp	r3, #22
 8008048:	d85a      	bhi.n	8008100 <_dtoa_r+0x240>
 800804a:	9a00      	ldr	r2, [sp, #0]
 800804c:	4b57      	ldr	r3, [pc, #348]	; (80081ac <_dtoa_r+0x2ec>)
 800804e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	ec51 0b19 	vmov	r0, r1, d9
 800805a:	f7f8 fd5f 	bl	8000b1c <__aeabi_dcmplt>
 800805e:	2800      	cmp	r0, #0
 8008060:	d050      	beq.n	8008104 <_dtoa_r+0x244>
 8008062:	9b00      	ldr	r3, [sp, #0]
 8008064:	3b01      	subs	r3, #1
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	2300      	movs	r3, #0
 800806a:	930b      	str	r3, [sp, #44]	; 0x2c
 800806c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800806e:	1b5d      	subs	r5, r3, r5
 8008070:	1e6b      	subs	r3, r5, #1
 8008072:	9305      	str	r3, [sp, #20]
 8008074:	bf45      	ittet	mi
 8008076:	f1c5 0301 	rsbmi	r3, r5, #1
 800807a:	9304      	strmi	r3, [sp, #16]
 800807c:	2300      	movpl	r3, #0
 800807e:	2300      	movmi	r3, #0
 8008080:	bf4c      	ite	mi
 8008082:	9305      	strmi	r3, [sp, #20]
 8008084:	9304      	strpl	r3, [sp, #16]
 8008086:	9b00      	ldr	r3, [sp, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	db3d      	blt.n	8008108 <_dtoa_r+0x248>
 800808c:	9b05      	ldr	r3, [sp, #20]
 800808e:	9a00      	ldr	r2, [sp, #0]
 8008090:	920a      	str	r2, [sp, #40]	; 0x28
 8008092:	4413      	add	r3, r2
 8008094:	9305      	str	r3, [sp, #20]
 8008096:	2300      	movs	r3, #0
 8008098:	9307      	str	r3, [sp, #28]
 800809a:	9b06      	ldr	r3, [sp, #24]
 800809c:	2b09      	cmp	r3, #9
 800809e:	f200 8089 	bhi.w	80081b4 <_dtoa_r+0x2f4>
 80080a2:	2b05      	cmp	r3, #5
 80080a4:	bfc4      	itt	gt
 80080a6:	3b04      	subgt	r3, #4
 80080a8:	9306      	strgt	r3, [sp, #24]
 80080aa:	9b06      	ldr	r3, [sp, #24]
 80080ac:	f1a3 0302 	sub.w	r3, r3, #2
 80080b0:	bfcc      	ite	gt
 80080b2:	2500      	movgt	r5, #0
 80080b4:	2501      	movle	r5, #1
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	f200 8087 	bhi.w	80081ca <_dtoa_r+0x30a>
 80080bc:	e8df f003 	tbb	[pc, r3]
 80080c0:	59383a2d 	.word	0x59383a2d
 80080c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80080c8:	441d      	add	r5, r3
 80080ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	bfc1      	itttt	gt
 80080d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80080da:	fa0b f303 	lslgt.w	r3, fp, r3
 80080de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80080e2:	bfda      	itte	le
 80080e4:	f1c3 0320 	rsble	r3, r3, #32
 80080e8:	fa06 f003 	lslle.w	r0, r6, r3
 80080ec:	4318      	orrgt	r0, r3
 80080ee:	f7f8 fa29 	bl	8000544 <__aeabi_ui2d>
 80080f2:	2301      	movs	r3, #1
 80080f4:	4606      	mov	r6, r0
 80080f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80080fa:	3d01      	subs	r5, #1
 80080fc:	930e      	str	r3, [sp, #56]	; 0x38
 80080fe:	e76a      	b.n	8007fd6 <_dtoa_r+0x116>
 8008100:	2301      	movs	r3, #1
 8008102:	e7b2      	b.n	800806a <_dtoa_r+0x1aa>
 8008104:	900b      	str	r0, [sp, #44]	; 0x2c
 8008106:	e7b1      	b.n	800806c <_dtoa_r+0x1ac>
 8008108:	9b04      	ldr	r3, [sp, #16]
 800810a:	9a00      	ldr	r2, [sp, #0]
 800810c:	1a9b      	subs	r3, r3, r2
 800810e:	9304      	str	r3, [sp, #16]
 8008110:	4253      	negs	r3, r2
 8008112:	9307      	str	r3, [sp, #28]
 8008114:	2300      	movs	r3, #0
 8008116:	930a      	str	r3, [sp, #40]	; 0x28
 8008118:	e7bf      	b.n	800809a <_dtoa_r+0x1da>
 800811a:	2300      	movs	r3, #0
 800811c:	9308      	str	r3, [sp, #32]
 800811e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	dc55      	bgt.n	80081d0 <_dtoa_r+0x310>
 8008124:	2301      	movs	r3, #1
 8008126:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800812a:	461a      	mov	r2, r3
 800812c:	9209      	str	r2, [sp, #36]	; 0x24
 800812e:	e00c      	b.n	800814a <_dtoa_r+0x28a>
 8008130:	2301      	movs	r3, #1
 8008132:	e7f3      	b.n	800811c <_dtoa_r+0x25c>
 8008134:	2300      	movs	r3, #0
 8008136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008138:	9308      	str	r3, [sp, #32]
 800813a:	9b00      	ldr	r3, [sp, #0]
 800813c:	4413      	add	r3, r2
 800813e:	9302      	str	r3, [sp, #8]
 8008140:	3301      	adds	r3, #1
 8008142:	2b01      	cmp	r3, #1
 8008144:	9303      	str	r3, [sp, #12]
 8008146:	bfb8      	it	lt
 8008148:	2301      	movlt	r3, #1
 800814a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800814c:	2200      	movs	r2, #0
 800814e:	6042      	str	r2, [r0, #4]
 8008150:	2204      	movs	r2, #4
 8008152:	f102 0614 	add.w	r6, r2, #20
 8008156:	429e      	cmp	r6, r3
 8008158:	6841      	ldr	r1, [r0, #4]
 800815a:	d93d      	bls.n	80081d8 <_dtoa_r+0x318>
 800815c:	4620      	mov	r0, r4
 800815e:	f000 fec3 	bl	8008ee8 <_Balloc>
 8008162:	9001      	str	r0, [sp, #4]
 8008164:	2800      	cmp	r0, #0
 8008166:	d13b      	bne.n	80081e0 <_dtoa_r+0x320>
 8008168:	4b11      	ldr	r3, [pc, #68]	; (80081b0 <_dtoa_r+0x2f0>)
 800816a:	4602      	mov	r2, r0
 800816c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008170:	e6c0      	b.n	8007ef4 <_dtoa_r+0x34>
 8008172:	2301      	movs	r3, #1
 8008174:	e7df      	b.n	8008136 <_dtoa_r+0x276>
 8008176:	bf00      	nop
 8008178:	636f4361 	.word	0x636f4361
 800817c:	3fd287a7 	.word	0x3fd287a7
 8008180:	8b60c8b3 	.word	0x8b60c8b3
 8008184:	3fc68a28 	.word	0x3fc68a28
 8008188:	509f79fb 	.word	0x509f79fb
 800818c:	3fd34413 	.word	0x3fd34413
 8008190:	0800b03d 	.word	0x0800b03d
 8008194:	0800b054 	.word	0x0800b054
 8008198:	7ff00000 	.word	0x7ff00000
 800819c:	0800b039 	.word	0x0800b039
 80081a0:	0800b030 	.word	0x0800b030
 80081a4:	0800b00d 	.word	0x0800b00d
 80081a8:	3ff80000 	.word	0x3ff80000
 80081ac:	0800b148 	.word	0x0800b148
 80081b0:	0800b0af 	.word	0x0800b0af
 80081b4:	2501      	movs	r5, #1
 80081b6:	2300      	movs	r3, #0
 80081b8:	9306      	str	r3, [sp, #24]
 80081ba:	9508      	str	r5, [sp, #32]
 80081bc:	f04f 33ff 	mov.w	r3, #4294967295
 80081c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081c4:	2200      	movs	r2, #0
 80081c6:	2312      	movs	r3, #18
 80081c8:	e7b0      	b.n	800812c <_dtoa_r+0x26c>
 80081ca:	2301      	movs	r3, #1
 80081cc:	9308      	str	r3, [sp, #32]
 80081ce:	e7f5      	b.n	80081bc <_dtoa_r+0x2fc>
 80081d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081d6:	e7b8      	b.n	800814a <_dtoa_r+0x28a>
 80081d8:	3101      	adds	r1, #1
 80081da:	6041      	str	r1, [r0, #4]
 80081dc:	0052      	lsls	r2, r2, #1
 80081de:	e7b8      	b.n	8008152 <_dtoa_r+0x292>
 80081e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e2:	9a01      	ldr	r2, [sp, #4]
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	9b03      	ldr	r3, [sp, #12]
 80081e8:	2b0e      	cmp	r3, #14
 80081ea:	f200 809d 	bhi.w	8008328 <_dtoa_r+0x468>
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	f000 809a 	beq.w	8008328 <_dtoa_r+0x468>
 80081f4:	9b00      	ldr	r3, [sp, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dd32      	ble.n	8008260 <_dtoa_r+0x3a0>
 80081fa:	4ab7      	ldr	r2, [pc, #732]	; (80084d8 <_dtoa_r+0x618>)
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008204:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008208:	9b00      	ldr	r3, [sp, #0]
 800820a:	05d8      	lsls	r0, r3, #23
 800820c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008210:	d516      	bpl.n	8008240 <_dtoa_r+0x380>
 8008212:	4bb2      	ldr	r3, [pc, #712]	; (80084dc <_dtoa_r+0x61c>)
 8008214:	ec51 0b19 	vmov	r0, r1, d9
 8008218:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800821c:	f7f8 fb36 	bl	800088c <__aeabi_ddiv>
 8008220:	f007 070f 	and.w	r7, r7, #15
 8008224:	4682      	mov	sl, r0
 8008226:	468b      	mov	fp, r1
 8008228:	2503      	movs	r5, #3
 800822a:	4eac      	ldr	r6, [pc, #688]	; (80084dc <_dtoa_r+0x61c>)
 800822c:	b957      	cbnz	r7, 8008244 <_dtoa_r+0x384>
 800822e:	4642      	mov	r2, r8
 8008230:	464b      	mov	r3, r9
 8008232:	4650      	mov	r0, sl
 8008234:	4659      	mov	r1, fp
 8008236:	f7f8 fb29 	bl	800088c <__aeabi_ddiv>
 800823a:	4682      	mov	sl, r0
 800823c:	468b      	mov	fp, r1
 800823e:	e028      	b.n	8008292 <_dtoa_r+0x3d2>
 8008240:	2502      	movs	r5, #2
 8008242:	e7f2      	b.n	800822a <_dtoa_r+0x36a>
 8008244:	07f9      	lsls	r1, r7, #31
 8008246:	d508      	bpl.n	800825a <_dtoa_r+0x39a>
 8008248:	4640      	mov	r0, r8
 800824a:	4649      	mov	r1, r9
 800824c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008250:	f7f8 f9f2 	bl	8000638 <__aeabi_dmul>
 8008254:	3501      	adds	r5, #1
 8008256:	4680      	mov	r8, r0
 8008258:	4689      	mov	r9, r1
 800825a:	107f      	asrs	r7, r7, #1
 800825c:	3608      	adds	r6, #8
 800825e:	e7e5      	b.n	800822c <_dtoa_r+0x36c>
 8008260:	f000 809b 	beq.w	800839a <_dtoa_r+0x4da>
 8008264:	9b00      	ldr	r3, [sp, #0]
 8008266:	4f9d      	ldr	r7, [pc, #628]	; (80084dc <_dtoa_r+0x61c>)
 8008268:	425e      	negs	r6, r3
 800826a:	4b9b      	ldr	r3, [pc, #620]	; (80084d8 <_dtoa_r+0x618>)
 800826c:	f006 020f 	and.w	r2, r6, #15
 8008270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	ec51 0b19 	vmov	r0, r1, d9
 800827c:	f7f8 f9dc 	bl	8000638 <__aeabi_dmul>
 8008280:	1136      	asrs	r6, r6, #4
 8008282:	4682      	mov	sl, r0
 8008284:	468b      	mov	fp, r1
 8008286:	2300      	movs	r3, #0
 8008288:	2502      	movs	r5, #2
 800828a:	2e00      	cmp	r6, #0
 800828c:	d17a      	bne.n	8008384 <_dtoa_r+0x4c4>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1d3      	bne.n	800823a <_dtoa_r+0x37a>
 8008292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 8082 	beq.w	800839e <_dtoa_r+0x4de>
 800829a:	4b91      	ldr	r3, [pc, #580]	; (80084e0 <_dtoa_r+0x620>)
 800829c:	2200      	movs	r2, #0
 800829e:	4650      	mov	r0, sl
 80082a0:	4659      	mov	r1, fp
 80082a2:	f7f8 fc3b 	bl	8000b1c <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d079      	beq.n	800839e <_dtoa_r+0x4de>
 80082aa:	9b03      	ldr	r3, [sp, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d076      	beq.n	800839e <_dtoa_r+0x4de>
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dd36      	ble.n	8008324 <_dtoa_r+0x464>
 80082b6:	9b00      	ldr	r3, [sp, #0]
 80082b8:	4650      	mov	r0, sl
 80082ba:	4659      	mov	r1, fp
 80082bc:	1e5f      	subs	r7, r3, #1
 80082be:	2200      	movs	r2, #0
 80082c0:	4b88      	ldr	r3, [pc, #544]	; (80084e4 <_dtoa_r+0x624>)
 80082c2:	f7f8 f9b9 	bl	8000638 <__aeabi_dmul>
 80082c6:	9e02      	ldr	r6, [sp, #8]
 80082c8:	4682      	mov	sl, r0
 80082ca:	468b      	mov	fp, r1
 80082cc:	3501      	adds	r5, #1
 80082ce:	4628      	mov	r0, r5
 80082d0:	f7f8 f948 	bl	8000564 <__aeabi_i2d>
 80082d4:	4652      	mov	r2, sl
 80082d6:	465b      	mov	r3, fp
 80082d8:	f7f8 f9ae 	bl	8000638 <__aeabi_dmul>
 80082dc:	4b82      	ldr	r3, [pc, #520]	; (80084e8 <_dtoa_r+0x628>)
 80082de:	2200      	movs	r2, #0
 80082e0:	f7f7 fff4 	bl	80002cc <__adddf3>
 80082e4:	46d0      	mov	r8, sl
 80082e6:	46d9      	mov	r9, fp
 80082e8:	4682      	mov	sl, r0
 80082ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80082ee:	2e00      	cmp	r6, #0
 80082f0:	d158      	bne.n	80083a4 <_dtoa_r+0x4e4>
 80082f2:	4b7e      	ldr	r3, [pc, #504]	; (80084ec <_dtoa_r+0x62c>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	4640      	mov	r0, r8
 80082f8:	4649      	mov	r1, r9
 80082fa:	f7f7 ffe5 	bl	80002c8 <__aeabi_dsub>
 80082fe:	4652      	mov	r2, sl
 8008300:	465b      	mov	r3, fp
 8008302:	4680      	mov	r8, r0
 8008304:	4689      	mov	r9, r1
 8008306:	f7f8 fc27 	bl	8000b58 <__aeabi_dcmpgt>
 800830a:	2800      	cmp	r0, #0
 800830c:	f040 8295 	bne.w	800883a <_dtoa_r+0x97a>
 8008310:	4652      	mov	r2, sl
 8008312:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008316:	4640      	mov	r0, r8
 8008318:	4649      	mov	r1, r9
 800831a:	f7f8 fbff 	bl	8000b1c <__aeabi_dcmplt>
 800831e:	2800      	cmp	r0, #0
 8008320:	f040 8289 	bne.w	8008836 <_dtoa_r+0x976>
 8008324:	ec5b ab19 	vmov	sl, fp, d9
 8008328:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800832a:	2b00      	cmp	r3, #0
 800832c:	f2c0 8148 	blt.w	80085c0 <_dtoa_r+0x700>
 8008330:	9a00      	ldr	r2, [sp, #0]
 8008332:	2a0e      	cmp	r2, #14
 8008334:	f300 8144 	bgt.w	80085c0 <_dtoa_r+0x700>
 8008338:	4b67      	ldr	r3, [pc, #412]	; (80084d8 <_dtoa_r+0x618>)
 800833a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800833e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008344:	2b00      	cmp	r3, #0
 8008346:	f280 80d5 	bge.w	80084f4 <_dtoa_r+0x634>
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	f300 80d1 	bgt.w	80084f4 <_dtoa_r+0x634>
 8008352:	f040 826f 	bne.w	8008834 <_dtoa_r+0x974>
 8008356:	4b65      	ldr	r3, [pc, #404]	; (80084ec <_dtoa_r+0x62c>)
 8008358:	2200      	movs	r2, #0
 800835a:	4640      	mov	r0, r8
 800835c:	4649      	mov	r1, r9
 800835e:	f7f8 f96b 	bl	8000638 <__aeabi_dmul>
 8008362:	4652      	mov	r2, sl
 8008364:	465b      	mov	r3, fp
 8008366:	f7f8 fbed 	bl	8000b44 <__aeabi_dcmpge>
 800836a:	9e03      	ldr	r6, [sp, #12]
 800836c:	4637      	mov	r7, r6
 800836e:	2800      	cmp	r0, #0
 8008370:	f040 8245 	bne.w	80087fe <_dtoa_r+0x93e>
 8008374:	9d01      	ldr	r5, [sp, #4]
 8008376:	2331      	movs	r3, #49	; 0x31
 8008378:	f805 3b01 	strb.w	r3, [r5], #1
 800837c:	9b00      	ldr	r3, [sp, #0]
 800837e:	3301      	adds	r3, #1
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	e240      	b.n	8008806 <_dtoa_r+0x946>
 8008384:	07f2      	lsls	r2, r6, #31
 8008386:	d505      	bpl.n	8008394 <_dtoa_r+0x4d4>
 8008388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800838c:	f7f8 f954 	bl	8000638 <__aeabi_dmul>
 8008390:	3501      	adds	r5, #1
 8008392:	2301      	movs	r3, #1
 8008394:	1076      	asrs	r6, r6, #1
 8008396:	3708      	adds	r7, #8
 8008398:	e777      	b.n	800828a <_dtoa_r+0x3ca>
 800839a:	2502      	movs	r5, #2
 800839c:	e779      	b.n	8008292 <_dtoa_r+0x3d2>
 800839e:	9f00      	ldr	r7, [sp, #0]
 80083a0:	9e03      	ldr	r6, [sp, #12]
 80083a2:	e794      	b.n	80082ce <_dtoa_r+0x40e>
 80083a4:	9901      	ldr	r1, [sp, #4]
 80083a6:	4b4c      	ldr	r3, [pc, #304]	; (80084d8 <_dtoa_r+0x618>)
 80083a8:	4431      	add	r1, r6
 80083aa:	910d      	str	r1, [sp, #52]	; 0x34
 80083ac:	9908      	ldr	r1, [sp, #32]
 80083ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80083b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083b6:	2900      	cmp	r1, #0
 80083b8:	d043      	beq.n	8008442 <_dtoa_r+0x582>
 80083ba:	494d      	ldr	r1, [pc, #308]	; (80084f0 <_dtoa_r+0x630>)
 80083bc:	2000      	movs	r0, #0
 80083be:	f7f8 fa65 	bl	800088c <__aeabi_ddiv>
 80083c2:	4652      	mov	r2, sl
 80083c4:	465b      	mov	r3, fp
 80083c6:	f7f7 ff7f 	bl	80002c8 <__aeabi_dsub>
 80083ca:	9d01      	ldr	r5, [sp, #4]
 80083cc:	4682      	mov	sl, r0
 80083ce:	468b      	mov	fp, r1
 80083d0:	4649      	mov	r1, r9
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7f8 fbe0 	bl	8000b98 <__aeabi_d2iz>
 80083d8:	4606      	mov	r6, r0
 80083da:	f7f8 f8c3 	bl	8000564 <__aeabi_i2d>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	f7f7 ff6f 	bl	80002c8 <__aeabi_dsub>
 80083ea:	3630      	adds	r6, #48	; 0x30
 80083ec:	f805 6b01 	strb.w	r6, [r5], #1
 80083f0:	4652      	mov	r2, sl
 80083f2:	465b      	mov	r3, fp
 80083f4:	4680      	mov	r8, r0
 80083f6:	4689      	mov	r9, r1
 80083f8:	f7f8 fb90 	bl	8000b1c <__aeabi_dcmplt>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d163      	bne.n	80084c8 <_dtoa_r+0x608>
 8008400:	4642      	mov	r2, r8
 8008402:	464b      	mov	r3, r9
 8008404:	4936      	ldr	r1, [pc, #216]	; (80084e0 <_dtoa_r+0x620>)
 8008406:	2000      	movs	r0, #0
 8008408:	f7f7 ff5e 	bl	80002c8 <__aeabi_dsub>
 800840c:	4652      	mov	r2, sl
 800840e:	465b      	mov	r3, fp
 8008410:	f7f8 fb84 	bl	8000b1c <__aeabi_dcmplt>
 8008414:	2800      	cmp	r0, #0
 8008416:	f040 80b5 	bne.w	8008584 <_dtoa_r+0x6c4>
 800841a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800841c:	429d      	cmp	r5, r3
 800841e:	d081      	beq.n	8008324 <_dtoa_r+0x464>
 8008420:	4b30      	ldr	r3, [pc, #192]	; (80084e4 <_dtoa_r+0x624>)
 8008422:	2200      	movs	r2, #0
 8008424:	4650      	mov	r0, sl
 8008426:	4659      	mov	r1, fp
 8008428:	f7f8 f906 	bl	8000638 <__aeabi_dmul>
 800842c:	4b2d      	ldr	r3, [pc, #180]	; (80084e4 <_dtoa_r+0x624>)
 800842e:	4682      	mov	sl, r0
 8008430:	468b      	mov	fp, r1
 8008432:	4640      	mov	r0, r8
 8008434:	4649      	mov	r1, r9
 8008436:	2200      	movs	r2, #0
 8008438:	f7f8 f8fe 	bl	8000638 <__aeabi_dmul>
 800843c:	4680      	mov	r8, r0
 800843e:	4689      	mov	r9, r1
 8008440:	e7c6      	b.n	80083d0 <_dtoa_r+0x510>
 8008442:	4650      	mov	r0, sl
 8008444:	4659      	mov	r1, fp
 8008446:	f7f8 f8f7 	bl	8000638 <__aeabi_dmul>
 800844a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800844c:	9d01      	ldr	r5, [sp, #4]
 800844e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008450:	4682      	mov	sl, r0
 8008452:	468b      	mov	fp, r1
 8008454:	4649      	mov	r1, r9
 8008456:	4640      	mov	r0, r8
 8008458:	f7f8 fb9e 	bl	8000b98 <__aeabi_d2iz>
 800845c:	4606      	mov	r6, r0
 800845e:	f7f8 f881 	bl	8000564 <__aeabi_i2d>
 8008462:	3630      	adds	r6, #48	; 0x30
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4640      	mov	r0, r8
 800846a:	4649      	mov	r1, r9
 800846c:	f7f7 ff2c 	bl	80002c8 <__aeabi_dsub>
 8008470:	f805 6b01 	strb.w	r6, [r5], #1
 8008474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008476:	429d      	cmp	r5, r3
 8008478:	4680      	mov	r8, r0
 800847a:	4689      	mov	r9, r1
 800847c:	f04f 0200 	mov.w	r2, #0
 8008480:	d124      	bne.n	80084cc <_dtoa_r+0x60c>
 8008482:	4b1b      	ldr	r3, [pc, #108]	; (80084f0 <_dtoa_r+0x630>)
 8008484:	4650      	mov	r0, sl
 8008486:	4659      	mov	r1, fp
 8008488:	f7f7 ff20 	bl	80002cc <__adddf3>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4640      	mov	r0, r8
 8008492:	4649      	mov	r1, r9
 8008494:	f7f8 fb60 	bl	8000b58 <__aeabi_dcmpgt>
 8008498:	2800      	cmp	r0, #0
 800849a:	d173      	bne.n	8008584 <_dtoa_r+0x6c4>
 800849c:	4652      	mov	r2, sl
 800849e:	465b      	mov	r3, fp
 80084a0:	4913      	ldr	r1, [pc, #76]	; (80084f0 <_dtoa_r+0x630>)
 80084a2:	2000      	movs	r0, #0
 80084a4:	f7f7 ff10 	bl	80002c8 <__aeabi_dsub>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4640      	mov	r0, r8
 80084ae:	4649      	mov	r1, r9
 80084b0:	f7f8 fb34 	bl	8000b1c <__aeabi_dcmplt>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f43f af35 	beq.w	8008324 <_dtoa_r+0x464>
 80084ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80084bc:	1e6b      	subs	r3, r5, #1
 80084be:	930f      	str	r3, [sp, #60]	; 0x3c
 80084c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084c4:	2b30      	cmp	r3, #48	; 0x30
 80084c6:	d0f8      	beq.n	80084ba <_dtoa_r+0x5fa>
 80084c8:	9700      	str	r7, [sp, #0]
 80084ca:	e049      	b.n	8008560 <_dtoa_r+0x6a0>
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <_dtoa_r+0x624>)
 80084ce:	f7f8 f8b3 	bl	8000638 <__aeabi_dmul>
 80084d2:	4680      	mov	r8, r0
 80084d4:	4689      	mov	r9, r1
 80084d6:	e7bd      	b.n	8008454 <_dtoa_r+0x594>
 80084d8:	0800b148 	.word	0x0800b148
 80084dc:	0800b120 	.word	0x0800b120
 80084e0:	3ff00000 	.word	0x3ff00000
 80084e4:	40240000 	.word	0x40240000
 80084e8:	401c0000 	.word	0x401c0000
 80084ec:	40140000 	.word	0x40140000
 80084f0:	3fe00000 	.word	0x3fe00000
 80084f4:	9d01      	ldr	r5, [sp, #4]
 80084f6:	4656      	mov	r6, sl
 80084f8:	465f      	mov	r7, fp
 80084fa:	4642      	mov	r2, r8
 80084fc:	464b      	mov	r3, r9
 80084fe:	4630      	mov	r0, r6
 8008500:	4639      	mov	r1, r7
 8008502:	f7f8 f9c3 	bl	800088c <__aeabi_ddiv>
 8008506:	f7f8 fb47 	bl	8000b98 <__aeabi_d2iz>
 800850a:	4682      	mov	sl, r0
 800850c:	f7f8 f82a 	bl	8000564 <__aeabi_i2d>
 8008510:	4642      	mov	r2, r8
 8008512:	464b      	mov	r3, r9
 8008514:	f7f8 f890 	bl	8000638 <__aeabi_dmul>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4630      	mov	r0, r6
 800851e:	4639      	mov	r1, r7
 8008520:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008524:	f7f7 fed0 	bl	80002c8 <__aeabi_dsub>
 8008528:	f805 6b01 	strb.w	r6, [r5], #1
 800852c:	9e01      	ldr	r6, [sp, #4]
 800852e:	9f03      	ldr	r7, [sp, #12]
 8008530:	1bae      	subs	r6, r5, r6
 8008532:	42b7      	cmp	r7, r6
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	d135      	bne.n	80085a6 <_dtoa_r+0x6e6>
 800853a:	f7f7 fec7 	bl	80002cc <__adddf3>
 800853e:	4642      	mov	r2, r8
 8008540:	464b      	mov	r3, r9
 8008542:	4606      	mov	r6, r0
 8008544:	460f      	mov	r7, r1
 8008546:	f7f8 fb07 	bl	8000b58 <__aeabi_dcmpgt>
 800854a:	b9d0      	cbnz	r0, 8008582 <_dtoa_r+0x6c2>
 800854c:	4642      	mov	r2, r8
 800854e:	464b      	mov	r3, r9
 8008550:	4630      	mov	r0, r6
 8008552:	4639      	mov	r1, r7
 8008554:	f7f8 fad8 	bl	8000b08 <__aeabi_dcmpeq>
 8008558:	b110      	cbz	r0, 8008560 <_dtoa_r+0x6a0>
 800855a:	f01a 0f01 	tst.w	sl, #1
 800855e:	d110      	bne.n	8008582 <_dtoa_r+0x6c2>
 8008560:	4620      	mov	r0, r4
 8008562:	ee18 1a10 	vmov	r1, s16
 8008566:	f000 fcff 	bl	8008f68 <_Bfree>
 800856a:	2300      	movs	r3, #0
 800856c:	9800      	ldr	r0, [sp, #0]
 800856e:	702b      	strb	r3, [r5, #0]
 8008570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008572:	3001      	adds	r0, #1
 8008574:	6018      	str	r0, [r3, #0]
 8008576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008578:	2b00      	cmp	r3, #0
 800857a:	f43f acf1 	beq.w	8007f60 <_dtoa_r+0xa0>
 800857e:	601d      	str	r5, [r3, #0]
 8008580:	e4ee      	b.n	8007f60 <_dtoa_r+0xa0>
 8008582:	9f00      	ldr	r7, [sp, #0]
 8008584:	462b      	mov	r3, r5
 8008586:	461d      	mov	r5, r3
 8008588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800858c:	2a39      	cmp	r2, #57	; 0x39
 800858e:	d106      	bne.n	800859e <_dtoa_r+0x6de>
 8008590:	9a01      	ldr	r2, [sp, #4]
 8008592:	429a      	cmp	r2, r3
 8008594:	d1f7      	bne.n	8008586 <_dtoa_r+0x6c6>
 8008596:	9901      	ldr	r1, [sp, #4]
 8008598:	2230      	movs	r2, #48	; 0x30
 800859a:	3701      	adds	r7, #1
 800859c:	700a      	strb	r2, [r1, #0]
 800859e:	781a      	ldrb	r2, [r3, #0]
 80085a0:	3201      	adds	r2, #1
 80085a2:	701a      	strb	r2, [r3, #0]
 80085a4:	e790      	b.n	80084c8 <_dtoa_r+0x608>
 80085a6:	4ba6      	ldr	r3, [pc, #664]	; (8008840 <_dtoa_r+0x980>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	f7f8 f845 	bl	8000638 <__aeabi_dmul>
 80085ae:	2200      	movs	r2, #0
 80085b0:	2300      	movs	r3, #0
 80085b2:	4606      	mov	r6, r0
 80085b4:	460f      	mov	r7, r1
 80085b6:	f7f8 faa7 	bl	8000b08 <__aeabi_dcmpeq>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d09d      	beq.n	80084fa <_dtoa_r+0x63a>
 80085be:	e7cf      	b.n	8008560 <_dtoa_r+0x6a0>
 80085c0:	9a08      	ldr	r2, [sp, #32]
 80085c2:	2a00      	cmp	r2, #0
 80085c4:	f000 80d7 	beq.w	8008776 <_dtoa_r+0x8b6>
 80085c8:	9a06      	ldr	r2, [sp, #24]
 80085ca:	2a01      	cmp	r2, #1
 80085cc:	f300 80ba 	bgt.w	8008744 <_dtoa_r+0x884>
 80085d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	f000 80b2 	beq.w	800873c <_dtoa_r+0x87c>
 80085d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80085dc:	9e07      	ldr	r6, [sp, #28]
 80085de:	9d04      	ldr	r5, [sp, #16]
 80085e0:	9a04      	ldr	r2, [sp, #16]
 80085e2:	441a      	add	r2, r3
 80085e4:	9204      	str	r2, [sp, #16]
 80085e6:	9a05      	ldr	r2, [sp, #20]
 80085e8:	2101      	movs	r1, #1
 80085ea:	441a      	add	r2, r3
 80085ec:	4620      	mov	r0, r4
 80085ee:	9205      	str	r2, [sp, #20]
 80085f0:	f000 fd72 	bl	80090d8 <__i2b>
 80085f4:	4607      	mov	r7, r0
 80085f6:	2d00      	cmp	r5, #0
 80085f8:	dd0c      	ble.n	8008614 <_dtoa_r+0x754>
 80085fa:	9b05      	ldr	r3, [sp, #20]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dd09      	ble.n	8008614 <_dtoa_r+0x754>
 8008600:	42ab      	cmp	r3, r5
 8008602:	9a04      	ldr	r2, [sp, #16]
 8008604:	bfa8      	it	ge
 8008606:	462b      	movge	r3, r5
 8008608:	1ad2      	subs	r2, r2, r3
 800860a:	9204      	str	r2, [sp, #16]
 800860c:	9a05      	ldr	r2, [sp, #20]
 800860e:	1aed      	subs	r5, r5, r3
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	9305      	str	r3, [sp, #20]
 8008614:	9b07      	ldr	r3, [sp, #28]
 8008616:	b31b      	cbz	r3, 8008660 <_dtoa_r+0x7a0>
 8008618:	9b08      	ldr	r3, [sp, #32]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 80af 	beq.w	800877e <_dtoa_r+0x8be>
 8008620:	2e00      	cmp	r6, #0
 8008622:	dd13      	ble.n	800864c <_dtoa_r+0x78c>
 8008624:	4639      	mov	r1, r7
 8008626:	4632      	mov	r2, r6
 8008628:	4620      	mov	r0, r4
 800862a:	f000 fe15 	bl	8009258 <__pow5mult>
 800862e:	ee18 2a10 	vmov	r2, s16
 8008632:	4601      	mov	r1, r0
 8008634:	4607      	mov	r7, r0
 8008636:	4620      	mov	r0, r4
 8008638:	f000 fd64 	bl	8009104 <__multiply>
 800863c:	ee18 1a10 	vmov	r1, s16
 8008640:	4680      	mov	r8, r0
 8008642:	4620      	mov	r0, r4
 8008644:	f000 fc90 	bl	8008f68 <_Bfree>
 8008648:	ee08 8a10 	vmov	s16, r8
 800864c:	9b07      	ldr	r3, [sp, #28]
 800864e:	1b9a      	subs	r2, r3, r6
 8008650:	d006      	beq.n	8008660 <_dtoa_r+0x7a0>
 8008652:	ee18 1a10 	vmov	r1, s16
 8008656:	4620      	mov	r0, r4
 8008658:	f000 fdfe 	bl	8009258 <__pow5mult>
 800865c:	ee08 0a10 	vmov	s16, r0
 8008660:	2101      	movs	r1, #1
 8008662:	4620      	mov	r0, r4
 8008664:	f000 fd38 	bl	80090d8 <__i2b>
 8008668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800866a:	2b00      	cmp	r3, #0
 800866c:	4606      	mov	r6, r0
 800866e:	f340 8088 	ble.w	8008782 <_dtoa_r+0x8c2>
 8008672:	461a      	mov	r2, r3
 8008674:	4601      	mov	r1, r0
 8008676:	4620      	mov	r0, r4
 8008678:	f000 fdee 	bl	8009258 <__pow5mult>
 800867c:	9b06      	ldr	r3, [sp, #24]
 800867e:	2b01      	cmp	r3, #1
 8008680:	4606      	mov	r6, r0
 8008682:	f340 8081 	ble.w	8008788 <_dtoa_r+0x8c8>
 8008686:	f04f 0800 	mov.w	r8, #0
 800868a:	6933      	ldr	r3, [r6, #16]
 800868c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008690:	6918      	ldr	r0, [r3, #16]
 8008692:	f000 fcd1 	bl	8009038 <__hi0bits>
 8008696:	f1c0 0020 	rsb	r0, r0, #32
 800869a:	9b05      	ldr	r3, [sp, #20]
 800869c:	4418      	add	r0, r3
 800869e:	f010 001f 	ands.w	r0, r0, #31
 80086a2:	f000 8092 	beq.w	80087ca <_dtoa_r+0x90a>
 80086a6:	f1c0 0320 	rsb	r3, r0, #32
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	f340 808a 	ble.w	80087c4 <_dtoa_r+0x904>
 80086b0:	f1c0 001c 	rsb	r0, r0, #28
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	4403      	add	r3, r0
 80086b8:	9304      	str	r3, [sp, #16]
 80086ba:	9b05      	ldr	r3, [sp, #20]
 80086bc:	4403      	add	r3, r0
 80086be:	4405      	add	r5, r0
 80086c0:	9305      	str	r3, [sp, #20]
 80086c2:	9b04      	ldr	r3, [sp, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd07      	ble.n	80086d8 <_dtoa_r+0x818>
 80086c8:	ee18 1a10 	vmov	r1, s16
 80086cc:	461a      	mov	r2, r3
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 fe1c 	bl	800930c <__lshift>
 80086d4:	ee08 0a10 	vmov	s16, r0
 80086d8:	9b05      	ldr	r3, [sp, #20]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dd05      	ble.n	80086ea <_dtoa_r+0x82a>
 80086de:	4631      	mov	r1, r6
 80086e0:	461a      	mov	r2, r3
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 fe12 	bl	800930c <__lshift>
 80086e8:	4606      	mov	r6, r0
 80086ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d06e      	beq.n	80087ce <_dtoa_r+0x90e>
 80086f0:	ee18 0a10 	vmov	r0, s16
 80086f4:	4631      	mov	r1, r6
 80086f6:	f000 fe79 	bl	80093ec <__mcmp>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	da67      	bge.n	80087ce <_dtoa_r+0x90e>
 80086fe:	9b00      	ldr	r3, [sp, #0]
 8008700:	3b01      	subs	r3, #1
 8008702:	ee18 1a10 	vmov	r1, s16
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	220a      	movs	r2, #10
 800870a:	2300      	movs	r3, #0
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fc4d 	bl	8008fac <__multadd>
 8008712:	9b08      	ldr	r3, [sp, #32]
 8008714:	ee08 0a10 	vmov	s16, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 81b1 	beq.w	8008a80 <_dtoa_r+0xbc0>
 800871e:	2300      	movs	r3, #0
 8008720:	4639      	mov	r1, r7
 8008722:	220a      	movs	r2, #10
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fc41 	bl	8008fac <__multadd>
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	4607      	mov	r7, r0
 8008730:	f300 808e 	bgt.w	8008850 <_dtoa_r+0x990>
 8008734:	9b06      	ldr	r3, [sp, #24]
 8008736:	2b02      	cmp	r3, #2
 8008738:	dc51      	bgt.n	80087de <_dtoa_r+0x91e>
 800873a:	e089      	b.n	8008850 <_dtoa_r+0x990>
 800873c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800873e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008742:	e74b      	b.n	80085dc <_dtoa_r+0x71c>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	1e5e      	subs	r6, r3, #1
 8008748:	9b07      	ldr	r3, [sp, #28]
 800874a:	42b3      	cmp	r3, r6
 800874c:	bfbf      	itttt	lt
 800874e:	9b07      	ldrlt	r3, [sp, #28]
 8008750:	9607      	strlt	r6, [sp, #28]
 8008752:	1af2      	sublt	r2, r6, r3
 8008754:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008756:	bfb6      	itet	lt
 8008758:	189b      	addlt	r3, r3, r2
 800875a:	1b9e      	subge	r6, r3, r6
 800875c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	bfb8      	it	lt
 8008762:	2600      	movlt	r6, #0
 8008764:	2b00      	cmp	r3, #0
 8008766:	bfb7      	itett	lt
 8008768:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800876c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008770:	1a9d      	sublt	r5, r3, r2
 8008772:	2300      	movlt	r3, #0
 8008774:	e734      	b.n	80085e0 <_dtoa_r+0x720>
 8008776:	9e07      	ldr	r6, [sp, #28]
 8008778:	9d04      	ldr	r5, [sp, #16]
 800877a:	9f08      	ldr	r7, [sp, #32]
 800877c:	e73b      	b.n	80085f6 <_dtoa_r+0x736>
 800877e:	9a07      	ldr	r2, [sp, #28]
 8008780:	e767      	b.n	8008652 <_dtoa_r+0x792>
 8008782:	9b06      	ldr	r3, [sp, #24]
 8008784:	2b01      	cmp	r3, #1
 8008786:	dc18      	bgt.n	80087ba <_dtoa_r+0x8fa>
 8008788:	f1ba 0f00 	cmp.w	sl, #0
 800878c:	d115      	bne.n	80087ba <_dtoa_r+0x8fa>
 800878e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008792:	b993      	cbnz	r3, 80087ba <_dtoa_r+0x8fa>
 8008794:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008798:	0d1b      	lsrs	r3, r3, #20
 800879a:	051b      	lsls	r3, r3, #20
 800879c:	b183      	cbz	r3, 80087c0 <_dtoa_r+0x900>
 800879e:	9b04      	ldr	r3, [sp, #16]
 80087a0:	3301      	adds	r3, #1
 80087a2:	9304      	str	r3, [sp, #16]
 80087a4:	9b05      	ldr	r3, [sp, #20]
 80087a6:	3301      	adds	r3, #1
 80087a8:	9305      	str	r3, [sp, #20]
 80087aa:	f04f 0801 	mov.w	r8, #1
 80087ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f47f af6a 	bne.w	800868a <_dtoa_r+0x7ca>
 80087b6:	2001      	movs	r0, #1
 80087b8:	e76f      	b.n	800869a <_dtoa_r+0x7da>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	e7f6      	b.n	80087ae <_dtoa_r+0x8ee>
 80087c0:	4698      	mov	r8, r3
 80087c2:	e7f4      	b.n	80087ae <_dtoa_r+0x8ee>
 80087c4:	f43f af7d 	beq.w	80086c2 <_dtoa_r+0x802>
 80087c8:	4618      	mov	r0, r3
 80087ca:	301c      	adds	r0, #28
 80087cc:	e772      	b.n	80086b4 <_dtoa_r+0x7f4>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dc37      	bgt.n	8008844 <_dtoa_r+0x984>
 80087d4:	9b06      	ldr	r3, [sp, #24]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	dd34      	ble.n	8008844 <_dtoa_r+0x984>
 80087da:	9b03      	ldr	r3, [sp, #12]
 80087dc:	9302      	str	r3, [sp, #8]
 80087de:	9b02      	ldr	r3, [sp, #8]
 80087e0:	b96b      	cbnz	r3, 80087fe <_dtoa_r+0x93e>
 80087e2:	4631      	mov	r1, r6
 80087e4:	2205      	movs	r2, #5
 80087e6:	4620      	mov	r0, r4
 80087e8:	f000 fbe0 	bl	8008fac <__multadd>
 80087ec:	4601      	mov	r1, r0
 80087ee:	4606      	mov	r6, r0
 80087f0:	ee18 0a10 	vmov	r0, s16
 80087f4:	f000 fdfa 	bl	80093ec <__mcmp>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	f73f adbb 	bgt.w	8008374 <_dtoa_r+0x4b4>
 80087fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008800:	9d01      	ldr	r5, [sp, #4]
 8008802:	43db      	mvns	r3, r3
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	f04f 0800 	mov.w	r8, #0
 800880a:	4631      	mov	r1, r6
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fbab 	bl	8008f68 <_Bfree>
 8008812:	2f00      	cmp	r7, #0
 8008814:	f43f aea4 	beq.w	8008560 <_dtoa_r+0x6a0>
 8008818:	f1b8 0f00 	cmp.w	r8, #0
 800881c:	d005      	beq.n	800882a <_dtoa_r+0x96a>
 800881e:	45b8      	cmp	r8, r7
 8008820:	d003      	beq.n	800882a <_dtoa_r+0x96a>
 8008822:	4641      	mov	r1, r8
 8008824:	4620      	mov	r0, r4
 8008826:	f000 fb9f 	bl	8008f68 <_Bfree>
 800882a:	4639      	mov	r1, r7
 800882c:	4620      	mov	r0, r4
 800882e:	f000 fb9b 	bl	8008f68 <_Bfree>
 8008832:	e695      	b.n	8008560 <_dtoa_r+0x6a0>
 8008834:	2600      	movs	r6, #0
 8008836:	4637      	mov	r7, r6
 8008838:	e7e1      	b.n	80087fe <_dtoa_r+0x93e>
 800883a:	9700      	str	r7, [sp, #0]
 800883c:	4637      	mov	r7, r6
 800883e:	e599      	b.n	8008374 <_dtoa_r+0x4b4>
 8008840:	40240000 	.word	0x40240000
 8008844:	9b08      	ldr	r3, [sp, #32]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 80ca 	beq.w	80089e0 <_dtoa_r+0xb20>
 800884c:	9b03      	ldr	r3, [sp, #12]
 800884e:	9302      	str	r3, [sp, #8]
 8008850:	2d00      	cmp	r5, #0
 8008852:	dd05      	ble.n	8008860 <_dtoa_r+0x9a0>
 8008854:	4639      	mov	r1, r7
 8008856:	462a      	mov	r2, r5
 8008858:	4620      	mov	r0, r4
 800885a:	f000 fd57 	bl	800930c <__lshift>
 800885e:	4607      	mov	r7, r0
 8008860:	f1b8 0f00 	cmp.w	r8, #0
 8008864:	d05b      	beq.n	800891e <_dtoa_r+0xa5e>
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	4620      	mov	r0, r4
 800886a:	f000 fb3d 	bl	8008ee8 <_Balloc>
 800886e:	4605      	mov	r5, r0
 8008870:	b928      	cbnz	r0, 800887e <_dtoa_r+0x9be>
 8008872:	4b87      	ldr	r3, [pc, #540]	; (8008a90 <_dtoa_r+0xbd0>)
 8008874:	4602      	mov	r2, r0
 8008876:	f240 21ea 	movw	r1, #746	; 0x2ea
 800887a:	f7ff bb3b 	b.w	8007ef4 <_dtoa_r+0x34>
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	3202      	adds	r2, #2
 8008882:	0092      	lsls	r2, r2, #2
 8008884:	f107 010c 	add.w	r1, r7, #12
 8008888:	300c      	adds	r0, #12
 800888a:	f7fe fc96 	bl	80071ba <memcpy>
 800888e:	2201      	movs	r2, #1
 8008890:	4629      	mov	r1, r5
 8008892:	4620      	mov	r0, r4
 8008894:	f000 fd3a 	bl	800930c <__lshift>
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	f103 0901 	add.w	r9, r3, #1
 800889e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80088a2:	4413      	add	r3, r2
 80088a4:	9305      	str	r3, [sp, #20]
 80088a6:	f00a 0301 	and.w	r3, sl, #1
 80088aa:	46b8      	mov	r8, r7
 80088ac:	9304      	str	r3, [sp, #16]
 80088ae:	4607      	mov	r7, r0
 80088b0:	4631      	mov	r1, r6
 80088b2:	ee18 0a10 	vmov	r0, s16
 80088b6:	f7ff fa75 	bl	8007da4 <quorem>
 80088ba:	4641      	mov	r1, r8
 80088bc:	9002      	str	r0, [sp, #8]
 80088be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80088c2:	ee18 0a10 	vmov	r0, s16
 80088c6:	f000 fd91 	bl	80093ec <__mcmp>
 80088ca:	463a      	mov	r2, r7
 80088cc:	9003      	str	r0, [sp, #12]
 80088ce:	4631      	mov	r1, r6
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fda7 	bl	8009424 <__mdiff>
 80088d6:	68c2      	ldr	r2, [r0, #12]
 80088d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80088dc:	4605      	mov	r5, r0
 80088de:	bb02      	cbnz	r2, 8008922 <_dtoa_r+0xa62>
 80088e0:	4601      	mov	r1, r0
 80088e2:	ee18 0a10 	vmov	r0, s16
 80088e6:	f000 fd81 	bl	80093ec <__mcmp>
 80088ea:	4602      	mov	r2, r0
 80088ec:	4629      	mov	r1, r5
 80088ee:	4620      	mov	r0, r4
 80088f0:	9207      	str	r2, [sp, #28]
 80088f2:	f000 fb39 	bl	8008f68 <_Bfree>
 80088f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80088fa:	ea43 0102 	orr.w	r1, r3, r2
 80088fe:	9b04      	ldr	r3, [sp, #16]
 8008900:	430b      	orrs	r3, r1
 8008902:	464d      	mov	r5, r9
 8008904:	d10f      	bne.n	8008926 <_dtoa_r+0xa66>
 8008906:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800890a:	d02a      	beq.n	8008962 <_dtoa_r+0xaa2>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	dd02      	ble.n	8008918 <_dtoa_r+0xa58>
 8008912:	9b02      	ldr	r3, [sp, #8]
 8008914:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008918:	f88b a000 	strb.w	sl, [fp]
 800891c:	e775      	b.n	800880a <_dtoa_r+0x94a>
 800891e:	4638      	mov	r0, r7
 8008920:	e7ba      	b.n	8008898 <_dtoa_r+0x9d8>
 8008922:	2201      	movs	r2, #1
 8008924:	e7e2      	b.n	80088ec <_dtoa_r+0xa2c>
 8008926:	9b03      	ldr	r3, [sp, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	db04      	blt.n	8008936 <_dtoa_r+0xa76>
 800892c:	9906      	ldr	r1, [sp, #24]
 800892e:	430b      	orrs	r3, r1
 8008930:	9904      	ldr	r1, [sp, #16]
 8008932:	430b      	orrs	r3, r1
 8008934:	d122      	bne.n	800897c <_dtoa_r+0xabc>
 8008936:	2a00      	cmp	r2, #0
 8008938:	ddee      	ble.n	8008918 <_dtoa_r+0xa58>
 800893a:	ee18 1a10 	vmov	r1, s16
 800893e:	2201      	movs	r2, #1
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fce3 	bl	800930c <__lshift>
 8008946:	4631      	mov	r1, r6
 8008948:	ee08 0a10 	vmov	s16, r0
 800894c:	f000 fd4e 	bl	80093ec <__mcmp>
 8008950:	2800      	cmp	r0, #0
 8008952:	dc03      	bgt.n	800895c <_dtoa_r+0xa9c>
 8008954:	d1e0      	bne.n	8008918 <_dtoa_r+0xa58>
 8008956:	f01a 0f01 	tst.w	sl, #1
 800895a:	d0dd      	beq.n	8008918 <_dtoa_r+0xa58>
 800895c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008960:	d1d7      	bne.n	8008912 <_dtoa_r+0xa52>
 8008962:	2339      	movs	r3, #57	; 0x39
 8008964:	f88b 3000 	strb.w	r3, [fp]
 8008968:	462b      	mov	r3, r5
 800896a:	461d      	mov	r5, r3
 800896c:	3b01      	subs	r3, #1
 800896e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008972:	2a39      	cmp	r2, #57	; 0x39
 8008974:	d071      	beq.n	8008a5a <_dtoa_r+0xb9a>
 8008976:	3201      	adds	r2, #1
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	e746      	b.n	800880a <_dtoa_r+0x94a>
 800897c:	2a00      	cmp	r2, #0
 800897e:	dd07      	ble.n	8008990 <_dtoa_r+0xad0>
 8008980:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008984:	d0ed      	beq.n	8008962 <_dtoa_r+0xaa2>
 8008986:	f10a 0301 	add.w	r3, sl, #1
 800898a:	f88b 3000 	strb.w	r3, [fp]
 800898e:	e73c      	b.n	800880a <_dtoa_r+0x94a>
 8008990:	9b05      	ldr	r3, [sp, #20]
 8008992:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008996:	4599      	cmp	r9, r3
 8008998:	d047      	beq.n	8008a2a <_dtoa_r+0xb6a>
 800899a:	ee18 1a10 	vmov	r1, s16
 800899e:	2300      	movs	r3, #0
 80089a0:	220a      	movs	r2, #10
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 fb02 	bl	8008fac <__multadd>
 80089a8:	45b8      	cmp	r8, r7
 80089aa:	ee08 0a10 	vmov	s16, r0
 80089ae:	f04f 0300 	mov.w	r3, #0
 80089b2:	f04f 020a 	mov.w	r2, #10
 80089b6:	4641      	mov	r1, r8
 80089b8:	4620      	mov	r0, r4
 80089ba:	d106      	bne.n	80089ca <_dtoa_r+0xb0a>
 80089bc:	f000 faf6 	bl	8008fac <__multadd>
 80089c0:	4680      	mov	r8, r0
 80089c2:	4607      	mov	r7, r0
 80089c4:	f109 0901 	add.w	r9, r9, #1
 80089c8:	e772      	b.n	80088b0 <_dtoa_r+0x9f0>
 80089ca:	f000 faef 	bl	8008fac <__multadd>
 80089ce:	4639      	mov	r1, r7
 80089d0:	4680      	mov	r8, r0
 80089d2:	2300      	movs	r3, #0
 80089d4:	220a      	movs	r2, #10
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 fae8 	bl	8008fac <__multadd>
 80089dc:	4607      	mov	r7, r0
 80089de:	e7f1      	b.n	80089c4 <_dtoa_r+0xb04>
 80089e0:	9b03      	ldr	r3, [sp, #12]
 80089e2:	9302      	str	r3, [sp, #8]
 80089e4:	9d01      	ldr	r5, [sp, #4]
 80089e6:	ee18 0a10 	vmov	r0, s16
 80089ea:	4631      	mov	r1, r6
 80089ec:	f7ff f9da 	bl	8007da4 <quorem>
 80089f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80089f4:	9b01      	ldr	r3, [sp, #4]
 80089f6:	f805 ab01 	strb.w	sl, [r5], #1
 80089fa:	1aea      	subs	r2, r5, r3
 80089fc:	9b02      	ldr	r3, [sp, #8]
 80089fe:	4293      	cmp	r3, r2
 8008a00:	dd09      	ble.n	8008a16 <_dtoa_r+0xb56>
 8008a02:	ee18 1a10 	vmov	r1, s16
 8008a06:	2300      	movs	r3, #0
 8008a08:	220a      	movs	r2, #10
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f000 face 	bl	8008fac <__multadd>
 8008a10:	ee08 0a10 	vmov	s16, r0
 8008a14:	e7e7      	b.n	80089e6 <_dtoa_r+0xb26>
 8008a16:	9b02      	ldr	r3, [sp, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfc8      	it	gt
 8008a1c:	461d      	movgt	r5, r3
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	bfd8      	it	le
 8008a22:	2501      	movle	r5, #1
 8008a24:	441d      	add	r5, r3
 8008a26:	f04f 0800 	mov.w	r8, #0
 8008a2a:	ee18 1a10 	vmov	r1, s16
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4620      	mov	r0, r4
 8008a32:	f000 fc6b 	bl	800930c <__lshift>
 8008a36:	4631      	mov	r1, r6
 8008a38:	ee08 0a10 	vmov	s16, r0
 8008a3c:	f000 fcd6 	bl	80093ec <__mcmp>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	dc91      	bgt.n	8008968 <_dtoa_r+0xaa8>
 8008a44:	d102      	bne.n	8008a4c <_dtoa_r+0xb8c>
 8008a46:	f01a 0f01 	tst.w	sl, #1
 8008a4a:	d18d      	bne.n	8008968 <_dtoa_r+0xaa8>
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	461d      	mov	r5, r3
 8008a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a54:	2a30      	cmp	r2, #48	; 0x30
 8008a56:	d0fa      	beq.n	8008a4e <_dtoa_r+0xb8e>
 8008a58:	e6d7      	b.n	800880a <_dtoa_r+0x94a>
 8008a5a:	9a01      	ldr	r2, [sp, #4]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d184      	bne.n	800896a <_dtoa_r+0xaaa>
 8008a60:	9b00      	ldr	r3, [sp, #0]
 8008a62:	3301      	adds	r3, #1
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	2331      	movs	r3, #49	; 0x31
 8008a68:	7013      	strb	r3, [r2, #0]
 8008a6a:	e6ce      	b.n	800880a <_dtoa_r+0x94a>
 8008a6c:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <_dtoa_r+0xbd4>)
 8008a6e:	f7ff ba95 	b.w	8007f9c <_dtoa_r+0xdc>
 8008a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f47f aa6e 	bne.w	8007f56 <_dtoa_r+0x96>
 8008a7a:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <_dtoa_r+0xbd8>)
 8008a7c:	f7ff ba8e 	b.w	8007f9c <_dtoa_r+0xdc>
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dcae      	bgt.n	80089e4 <_dtoa_r+0xb24>
 8008a86:	9b06      	ldr	r3, [sp, #24]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	f73f aea8 	bgt.w	80087de <_dtoa_r+0x91e>
 8008a8e:	e7a9      	b.n	80089e4 <_dtoa_r+0xb24>
 8008a90:	0800b0af 	.word	0x0800b0af
 8008a94:	0800b00c 	.word	0x0800b00c
 8008a98:	0800b030 	.word	0x0800b030

08008a9c <print_e>:
 8008a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	ec43 2b10 	vmov	d0, r2, r3
 8008aa4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008aa6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8008aaa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008aac:	ab04      	add	r3, sp, #16
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	ab03      	add	r3, sp, #12
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	1c62      	adds	r2, r4, #1
 8008ab6:	ab05      	add	r3, sp, #20
 8008ab8:	460f      	mov	r7, r1
 8008aba:	2102      	movs	r1, #2
 8008abc:	f7ff fa00 	bl	8007ec0 <_dtoa_r>
 8008ac0:	9a05      	ldr	r2, [sp, #20]
 8008ac2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d105      	bne.n	8008ad6 <print_e+0x3a>
 8008aca:	4601      	mov	r1, r0
 8008acc:	4638      	mov	r0, r7
 8008ace:	f000 fe21 	bl	8009714 <strcpy>
 8008ad2:	b007      	add	sp, #28
 8008ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	7801      	ldrb	r1, [r0, #0]
 8008ada:	f803 1b01 	strb.w	r1, [r3], #1
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	bfc8      	it	gt
 8008ae2:	2501      	movgt	r5, #1
 8008ae4:	212e      	movs	r1, #46	; 0x2e
 8008ae6:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8008aea:	b10f      	cbz	r7, 8008af0 <print_e+0x54>
 8008aec:	2c00      	cmp	r4, #0
 8008aee:	dc37      	bgt.n	8008b60 <print_e+0xc4>
 8008af0:	2e67      	cmp	r6, #103	; 0x67
 8008af2:	d046      	beq.n	8008b82 <print_e+0xe6>
 8008af4:	2e47      	cmp	r6, #71	; 0x47
 8008af6:	d046      	beq.n	8008b86 <print_e+0xea>
 8008af8:	212e      	movs	r1, #46	; 0x2e
 8008afa:	2030      	movs	r0, #48	; 0x30
 8008afc:	2c00      	cmp	r4, #0
 8008afe:	dc38      	bgt.n	8008b72 <print_e+0xd6>
 8008b00:	1e51      	subs	r1, r2, #1
 8008b02:	2900      	cmp	r1, #0
 8008b04:	bfb8      	it	lt
 8008b06:	f1c2 0201 	rsblt	r2, r2, #1
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	9105      	str	r1, [sp, #20]
 8008b0e:	bfac      	ite	ge
 8008b10:	222b      	movge	r2, #43	; 0x2b
 8008b12:	9205      	strlt	r2, [sp, #20]
 8008b14:	f800 6b02 	strb.w	r6, [r0], #2
 8008b18:	bfa8      	it	ge
 8008b1a:	705a      	strbge	r2, [r3, #1]
 8008b1c:	9a05      	ldr	r2, [sp, #20]
 8008b1e:	bfbc      	itt	lt
 8008b20:	212d      	movlt	r1, #45	; 0x2d
 8008b22:	7059      	strblt	r1, [r3, #1]
 8008b24:	2a63      	cmp	r2, #99	; 0x63
 8008b26:	dd0b      	ble.n	8008b40 <print_e+0xa4>
 8008b28:	2164      	movs	r1, #100	; 0x64
 8008b2a:	fb92 f1f1 	sdiv	r1, r2, r1
 8008b2e:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8008b32:	1cd8      	adds	r0, r3, #3
 8008b34:	709c      	strb	r4, [r3, #2]
 8008b36:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008b3a:	fb03 2201 	mla	r2, r3, r1, r2
 8008b3e:	9205      	str	r2, [sp, #20]
 8008b40:	9b05      	ldr	r3, [sp, #20]
 8008b42:	220a      	movs	r2, #10
 8008b44:	fb93 f2f2 	sdiv	r2, r3, r2
 8008b48:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8008b4c:	7001      	strb	r1, [r0, #0]
 8008b4e:	f06f 0109 	mvn.w	r1, #9
 8008b52:	fb01 3302 	mla	r3, r1, r2, r3
 8008b56:	3330      	adds	r3, #48	; 0x30
 8008b58:	7043      	strb	r3, [r0, #1]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	7083      	strb	r3, [r0, #2]
 8008b5e:	e7b8      	b.n	8008ad2 <print_e+0x36>
 8008b60:	b10d      	cbz	r5, 8008b66 <print_e+0xca>
 8008b62:	f803 1b01 	strb.w	r1, [r3], #1
 8008b66:	7805      	ldrb	r5, [r0, #0]
 8008b68:	f803 5b01 	strb.w	r5, [r3], #1
 8008b6c:	3c01      	subs	r4, #1
 8008b6e:	2500      	movs	r5, #0
 8008b70:	e7b9      	b.n	8008ae6 <print_e+0x4a>
 8008b72:	b10d      	cbz	r5, 8008b78 <print_e+0xdc>
 8008b74:	f803 1b01 	strb.w	r1, [r3], #1
 8008b78:	f803 0b01 	strb.w	r0, [r3], #1
 8008b7c:	3c01      	subs	r4, #1
 8008b7e:	2500      	movs	r5, #0
 8008b80:	e7bc      	b.n	8008afc <print_e+0x60>
 8008b82:	2665      	movs	r6, #101	; 0x65
 8008b84:	e7bc      	b.n	8008b00 <print_e+0x64>
 8008b86:	2645      	movs	r6, #69	; 0x45
 8008b88:	e7ba      	b.n	8008b00 <print_e+0x64>
 8008b8a:	0000      	movs	r0, r0
 8008b8c:	0000      	movs	r0, r0
	...

08008b90 <_gcvt>:
 8008b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b94:	ec55 4b10 	vmov	r4, r5, d0
 8008b98:	b088      	sub	sp, #32
 8008b9a:	4681      	mov	r9, r0
 8008b9c:	4688      	mov	r8, r1
 8008b9e:	4616      	mov	r6, r2
 8008ba0:	469a      	mov	sl, r3
 8008ba2:	ee10 0a10 	vmov	r0, s0
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4629      	mov	r1, r5
 8008bac:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008bae:	f7f7 ffb5 	bl	8000b1c <__aeabi_dcmplt>
 8008bb2:	b110      	cbz	r0, 8008bba <_gcvt+0x2a>
 8008bb4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008bb8:	461d      	mov	r5, r3
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	f7f7 ffa1 	bl	8000b08 <__aeabi_dcmpeq>
 8008bc6:	b138      	cbz	r0, 8008bd8 <_gcvt+0x48>
 8008bc8:	2330      	movs	r3, #48	; 0x30
 8008bca:	7033      	strb	r3, [r6, #0]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	7073      	strb	r3, [r6, #1]
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	b008      	add	sp, #32
 8008bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd8:	a34b      	add	r3, pc, #300	; (adr r3, 8008d08 <_gcvt+0x178>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 ffa5 	bl	8000b30 <__aeabi_dcmple>
 8008be6:	b158      	cbz	r0, 8008c00 <_gcvt+0x70>
 8008be8:	f108 31ff 	add.w	r1, r8, #4294967295
 8008bec:	9100      	str	r1, [sp, #0]
 8008bee:	e9cd a701 	strd	sl, r7, [sp, #4]
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	462b      	mov	r3, r5
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4648      	mov	r0, r9
 8008bfa:	f7ff ff4f 	bl	8008a9c <print_e>
 8008bfe:	e7e7      	b.n	8008bd0 <_gcvt+0x40>
 8008c00:	4640      	mov	r0, r8
 8008c02:	f000 fcf5 	bl	80095f0 <_mprec_log10>
 8008c06:	4622      	mov	r2, r4
 8008c08:	ec51 0b10 	vmov	r0, r1, d0
 8008c0c:	462b      	mov	r3, r5
 8008c0e:	f7f7 ff8f 	bl	8000b30 <__aeabi_dcmple>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d1e8      	bne.n	8008be8 <_gcvt+0x58>
 8008c16:	ab07      	add	r3, sp, #28
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	ab06      	add	r3, sp, #24
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	4642      	mov	r2, r8
 8008c20:	ab05      	add	r3, sp, #20
 8008c22:	ec45 4b10 	vmov	d0, r4, r5
 8008c26:	2102      	movs	r1, #2
 8008c28:	4648      	mov	r0, r9
 8008c2a:	f7ff f949 	bl	8007ec0 <_dtoa_r>
 8008c2e:	9a05      	ldr	r2, [sp, #20]
 8008c30:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d00e      	beq.n	8008c56 <_gcvt+0xc6>
 8008c38:	4633      	mov	r3, r6
 8008c3a:	44b0      	add	r8, r6
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008c42:	9c05      	ldr	r4, [sp, #20]
 8008c44:	eba8 0203 	sub.w	r2, r8, r3
 8008c48:	b109      	cbz	r1, 8008c4e <_gcvt+0xbe>
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	dc08      	bgt.n	8008c60 <_gcvt+0xd0>
 8008c4e:	2100      	movs	r1, #0
 8008c50:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008c54:	e00d      	b.n	8008c72 <_gcvt+0xe2>
 8008c56:	4601      	mov	r1, r0
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f000 fd5b 	bl	8009714 <strcpy>
 8008c5e:	e7b7      	b.n	8008bd0 <_gcvt+0x40>
 8008c60:	3c01      	subs	r4, #1
 8008c62:	f803 1b01 	strb.w	r1, [r3], #1
 8008c66:	9405      	str	r4, [sp, #20]
 8008c68:	e7e8      	b.n	8008c3c <_gcvt+0xac>
 8008c6a:	f803 cb01 	strb.w	ip, [r3], #1
 8008c6e:	3a01      	subs	r2, #1
 8008c70:	2101      	movs	r1, #1
 8008c72:	2c00      	cmp	r4, #0
 8008c74:	4620      	mov	r0, r4
 8008c76:	dc2a      	bgt.n	8008cce <_gcvt+0x13e>
 8008c78:	b101      	cbz	r1, 8008c7c <_gcvt+0xec>
 8008c7a:	9405      	str	r4, [sp, #20]
 8008c7c:	b90f      	cbnz	r7, 8008c82 <_gcvt+0xf2>
 8008c7e:	7829      	ldrb	r1, [r5, #0]
 8008c80:	b311      	cbz	r1, 8008cc8 <_gcvt+0x138>
 8008c82:	42b3      	cmp	r3, r6
 8008c84:	bf04      	itt	eq
 8008c86:	2130      	moveq	r1, #48	; 0x30
 8008c88:	f803 1b01 	strbeq.w	r1, [r3], #1
 8008c8c:	212e      	movs	r1, #46	; 0x2e
 8008c8e:	7019      	strb	r1, [r3, #0]
 8008c90:	9905      	ldr	r1, [sp, #20]
 8008c92:	4618      	mov	r0, r3
 8008c94:	2400      	movs	r4, #0
 8008c96:	eba1 0c03 	sub.w	ip, r1, r3
 8008c9a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008c9e:	eb1c 0f00 	cmn.w	ip, r0
 8008ca2:	d41c      	bmi.n	8008cde <_gcvt+0x14e>
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	f1c1 0000 	rsb	r0, r1, #0
 8008caa:	bfc8      	it	gt
 8008cac:	2000      	movgt	r0, #0
 8008cae:	f100 0c01 	add.w	ip, r0, #1
 8008cb2:	4463      	add	r3, ip
 8008cb4:	4401      	add	r1, r0
 8008cb6:	b104      	cbz	r4, 8008cba <_gcvt+0x12a>
 8008cb8:	9105      	str	r1, [sp, #20]
 8008cba:	1e69      	subs	r1, r5, #1
 8008cbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008cc0:	b108      	cbz	r0, 8008cc6 <_gcvt+0x136>
 8008cc2:	2a00      	cmp	r2, #0
 8008cc4:	dc0f      	bgt.n	8008ce6 <_gcvt+0x156>
 8008cc6:	b9df      	cbnz	r7, 8008d00 <_gcvt+0x170>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	e780      	b.n	8008bd0 <_gcvt+0x40>
 8008cce:	2a00      	cmp	r2, #0
 8008cd0:	f104 34ff 	add.w	r4, r4, #4294967295
 8008cd4:	dcc9      	bgt.n	8008c6a <_gcvt+0xda>
 8008cd6:	2900      	cmp	r1, #0
 8008cd8:	d0d0      	beq.n	8008c7c <_gcvt+0xec>
 8008cda:	9005      	str	r0, [sp, #20]
 8008cdc:	e7ce      	b.n	8008c7c <_gcvt+0xec>
 8008cde:	f800 ef01 	strb.w	lr, [r0, #1]!
 8008ce2:	2401      	movs	r4, #1
 8008ce4:	e7db      	b.n	8008c9e <_gcvt+0x10e>
 8008ce6:	f803 0b01 	strb.w	r0, [r3], #1
 8008cea:	3a01      	subs	r2, #1
 8008cec:	e7e6      	b.n	8008cbc <_gcvt+0x12c>
 8008cee:	f801 5b01 	strb.w	r5, [r1], #1
 8008cf2:	1a60      	subs	r0, r4, r1
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	dcfa      	bgt.n	8008cee <_gcvt+0x15e>
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	bfa8      	it	ge
 8008cfc:	189b      	addge	r3, r3, r2
 8008cfe:	e7e3      	b.n	8008cc8 <_gcvt+0x138>
 8008d00:	4619      	mov	r1, r3
 8008d02:	189c      	adds	r4, r3, r2
 8008d04:	2530      	movs	r5, #48	; 0x30
 8008d06:	e7f4      	b.n	8008cf2 <_gcvt+0x162>
 8008d08:	eb1c432d 	.word	0xeb1c432d
 8008d0c:	3f1a36e2 	.word	0x3f1a36e2

08008d10 <__sflush_r>:
 8008d10:	898a      	ldrh	r2, [r1, #12]
 8008d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d16:	4605      	mov	r5, r0
 8008d18:	0710      	lsls	r0, r2, #28
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	d458      	bmi.n	8008dd0 <__sflush_r+0xc0>
 8008d1e:	684b      	ldr	r3, [r1, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dc05      	bgt.n	8008d30 <__sflush_r+0x20>
 8008d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dc02      	bgt.n	8008d30 <__sflush_r+0x20>
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d32:	2e00      	cmp	r6, #0
 8008d34:	d0f9      	beq.n	8008d2a <__sflush_r+0x1a>
 8008d36:	2300      	movs	r3, #0
 8008d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d3c:	682f      	ldr	r7, [r5, #0]
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	d032      	beq.n	8008da8 <__sflush_r+0x98>
 8008d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	075a      	lsls	r2, r3, #29
 8008d48:	d505      	bpl.n	8008d56 <__sflush_r+0x46>
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	1ac0      	subs	r0, r0, r3
 8008d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d50:	b10b      	cbz	r3, 8008d56 <__sflush_r+0x46>
 8008d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d54:	1ac0      	subs	r0, r0, r3
 8008d56:	2300      	movs	r3, #0
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d5c:	6a21      	ldr	r1, [r4, #32]
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b0      	blx	r6
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	d106      	bne.n	8008d76 <__sflush_r+0x66>
 8008d68:	6829      	ldr	r1, [r5, #0]
 8008d6a:	291d      	cmp	r1, #29
 8008d6c:	d82c      	bhi.n	8008dc8 <__sflush_r+0xb8>
 8008d6e:	4a2a      	ldr	r2, [pc, #168]	; (8008e18 <__sflush_r+0x108>)
 8008d70:	40ca      	lsrs	r2, r1
 8008d72:	07d6      	lsls	r6, r2, #31
 8008d74:	d528      	bpl.n	8008dc8 <__sflush_r+0xb8>
 8008d76:	2200      	movs	r2, #0
 8008d78:	6062      	str	r2, [r4, #4]
 8008d7a:	04d9      	lsls	r1, r3, #19
 8008d7c:	6922      	ldr	r2, [r4, #16]
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	d504      	bpl.n	8008d8c <__sflush_r+0x7c>
 8008d82:	1c42      	adds	r2, r0, #1
 8008d84:	d101      	bne.n	8008d8a <__sflush_r+0x7a>
 8008d86:	682b      	ldr	r3, [r5, #0]
 8008d88:	b903      	cbnz	r3, 8008d8c <__sflush_r+0x7c>
 8008d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8008d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d8e:	602f      	str	r7, [r5, #0]
 8008d90:	2900      	cmp	r1, #0
 8008d92:	d0ca      	beq.n	8008d2a <__sflush_r+0x1a>
 8008d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d98:	4299      	cmp	r1, r3
 8008d9a:	d002      	beq.n	8008da2 <__sflush_r+0x92>
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	f000 fc5b 	bl	8009658 <_free_r>
 8008da2:	2000      	movs	r0, #0
 8008da4:	6360      	str	r0, [r4, #52]	; 0x34
 8008da6:	e7c1      	b.n	8008d2c <__sflush_r+0x1c>
 8008da8:	6a21      	ldr	r1, [r4, #32]
 8008daa:	2301      	movs	r3, #1
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b0      	blx	r6
 8008db0:	1c41      	adds	r1, r0, #1
 8008db2:	d1c7      	bne.n	8008d44 <__sflush_r+0x34>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0c4      	beq.n	8008d44 <__sflush_r+0x34>
 8008dba:	2b1d      	cmp	r3, #29
 8008dbc:	d001      	beq.n	8008dc2 <__sflush_r+0xb2>
 8008dbe:	2b16      	cmp	r3, #22
 8008dc0:	d101      	bne.n	8008dc6 <__sflush_r+0xb6>
 8008dc2:	602f      	str	r7, [r5, #0]
 8008dc4:	e7b1      	b.n	8008d2a <__sflush_r+0x1a>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	e7ad      	b.n	8008d2c <__sflush_r+0x1c>
 8008dd0:	690f      	ldr	r7, [r1, #16]
 8008dd2:	2f00      	cmp	r7, #0
 8008dd4:	d0a9      	beq.n	8008d2a <__sflush_r+0x1a>
 8008dd6:	0793      	lsls	r3, r2, #30
 8008dd8:	680e      	ldr	r6, [r1, #0]
 8008dda:	bf08      	it	eq
 8008ddc:	694b      	ldreq	r3, [r1, #20]
 8008dde:	600f      	str	r7, [r1, #0]
 8008de0:	bf18      	it	ne
 8008de2:	2300      	movne	r3, #0
 8008de4:	eba6 0807 	sub.w	r8, r6, r7
 8008de8:	608b      	str	r3, [r1, #8]
 8008dea:	f1b8 0f00 	cmp.w	r8, #0
 8008dee:	dd9c      	ble.n	8008d2a <__sflush_r+0x1a>
 8008df0:	6a21      	ldr	r1, [r4, #32]
 8008df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008df4:	4643      	mov	r3, r8
 8008df6:	463a      	mov	r2, r7
 8008df8:	4628      	mov	r0, r5
 8008dfa:	47b0      	blx	r6
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	dc06      	bgt.n	8008e0e <__sflush_r+0xfe>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	e78e      	b.n	8008d2c <__sflush_r+0x1c>
 8008e0e:	4407      	add	r7, r0
 8008e10:	eba8 0800 	sub.w	r8, r8, r0
 8008e14:	e7e9      	b.n	8008dea <__sflush_r+0xda>
 8008e16:	bf00      	nop
 8008e18:	20400001 	.word	0x20400001

08008e1c <_fflush_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	690b      	ldr	r3, [r1, #16]
 8008e20:	4605      	mov	r5, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	b913      	cbnz	r3, 8008e2c <_fflush_r+0x10>
 8008e26:	2500      	movs	r5, #0
 8008e28:	4628      	mov	r0, r5
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	b118      	cbz	r0, 8008e36 <_fflush_r+0x1a>
 8008e2e:	6983      	ldr	r3, [r0, #24]
 8008e30:	b90b      	cbnz	r3, 8008e36 <_fflush_r+0x1a>
 8008e32:	f7fe f8fd 	bl	8007030 <__sinit>
 8008e36:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <_fflush_r+0x6c>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	d11b      	bne.n	8008e74 <_fflush_r+0x58>
 8008e3c:	686c      	ldr	r4, [r5, #4]
 8008e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0ef      	beq.n	8008e26 <_fflush_r+0xa>
 8008e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e48:	07d0      	lsls	r0, r2, #31
 8008e4a:	d404      	bmi.n	8008e56 <_fflush_r+0x3a>
 8008e4c:	0599      	lsls	r1, r3, #22
 8008e4e:	d402      	bmi.n	8008e56 <_fflush_r+0x3a>
 8008e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e52:	f7fe f9b0 	bl	80071b6 <__retarget_lock_acquire_recursive>
 8008e56:	4628      	mov	r0, r5
 8008e58:	4621      	mov	r1, r4
 8008e5a:	f7ff ff59 	bl	8008d10 <__sflush_r>
 8008e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e60:	07da      	lsls	r2, r3, #31
 8008e62:	4605      	mov	r5, r0
 8008e64:	d4e0      	bmi.n	8008e28 <_fflush_r+0xc>
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	059b      	lsls	r3, r3, #22
 8008e6a:	d4dd      	bmi.n	8008e28 <_fflush_r+0xc>
 8008e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e6e:	f7fe f9a3 	bl	80071b8 <__retarget_lock_release_recursive>
 8008e72:	e7d9      	b.n	8008e28 <_fflush_r+0xc>
 8008e74:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <_fflush_r+0x70>)
 8008e76:	429c      	cmp	r4, r3
 8008e78:	d101      	bne.n	8008e7e <_fflush_r+0x62>
 8008e7a:	68ac      	ldr	r4, [r5, #8]
 8008e7c:	e7df      	b.n	8008e3e <_fflush_r+0x22>
 8008e7e:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <_fflush_r+0x74>)
 8008e80:	429c      	cmp	r4, r3
 8008e82:	bf08      	it	eq
 8008e84:	68ec      	ldreq	r4, [r5, #12]
 8008e86:	e7da      	b.n	8008e3e <_fflush_r+0x22>
 8008e88:	0800afb8 	.word	0x0800afb8
 8008e8c:	0800afd8 	.word	0x0800afd8
 8008e90:	0800af98 	.word	0x0800af98

08008e94 <_localeconv_r>:
 8008e94:	4800      	ldr	r0, [pc, #0]	; (8008e98 <_localeconv_r+0x4>)
 8008e96:	4770      	bx	lr
 8008e98:	20000168 	.word	0x20000168

08008e9c <_lseek_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4d07      	ldr	r5, [pc, #28]	; (8008ebc <_lseek_r+0x20>)
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	4608      	mov	r0, r1
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	602a      	str	r2, [r5, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f7f8 fdf8 	bl	8001aa0 <_lseek>
 8008eb0:	1c43      	adds	r3, r0, #1
 8008eb2:	d102      	bne.n	8008eba <_lseek_r+0x1e>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b103      	cbz	r3, 8008eba <_lseek_r+0x1e>
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	bd38      	pop	{r3, r4, r5, pc}
 8008ebc:	20004d54 	.word	0x20004d54

08008ec0 <malloc>:
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <malloc+0xc>)
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	6818      	ldr	r0, [r3, #0]
 8008ec6:	f7fe b9af 	b.w	8007228 <_malloc_r>
 8008eca:	bf00      	nop
 8008ecc:	20000014 	.word	0x20000014

08008ed0 <__malloc_lock>:
 8008ed0:	4801      	ldr	r0, [pc, #4]	; (8008ed8 <__malloc_lock+0x8>)
 8008ed2:	f7fe b970 	b.w	80071b6 <__retarget_lock_acquire_recursive>
 8008ed6:	bf00      	nop
 8008ed8:	20004d48 	.word	0x20004d48

08008edc <__malloc_unlock>:
 8008edc:	4801      	ldr	r0, [pc, #4]	; (8008ee4 <__malloc_unlock+0x8>)
 8008ede:	f7fe b96b 	b.w	80071b8 <__retarget_lock_release_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	20004d48 	.word	0x20004d48

08008ee8 <_Balloc>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008eec:	4604      	mov	r4, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	b976      	cbnz	r6, 8008f10 <_Balloc+0x28>
 8008ef2:	2010      	movs	r0, #16
 8008ef4:	f7ff ffe4 	bl	8008ec0 <malloc>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	6260      	str	r0, [r4, #36]	; 0x24
 8008efc:	b920      	cbnz	r0, 8008f08 <_Balloc+0x20>
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <_Balloc+0x78>)
 8008f00:	4818      	ldr	r0, [pc, #96]	; (8008f64 <_Balloc+0x7c>)
 8008f02:	2166      	movs	r1, #102	; 0x66
 8008f04:	f000 fc0e 	bl	8009724 <__assert_func>
 8008f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f0c:	6006      	str	r6, [r0, #0]
 8008f0e:	60c6      	str	r6, [r0, #12]
 8008f10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f12:	68f3      	ldr	r3, [r6, #12]
 8008f14:	b183      	cbz	r3, 8008f38 <_Balloc+0x50>
 8008f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f1e:	b9b8      	cbnz	r0, 8008f50 <_Balloc+0x68>
 8008f20:	2101      	movs	r1, #1
 8008f22:	fa01 f605 	lsl.w	r6, r1, r5
 8008f26:	1d72      	adds	r2, r6, #5
 8008f28:	0092      	lsls	r2, r2, #2
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fb7e 	bl	800962c <_calloc_r>
 8008f30:	b160      	cbz	r0, 8008f4c <_Balloc+0x64>
 8008f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f36:	e00e      	b.n	8008f56 <_Balloc+0x6e>
 8008f38:	2221      	movs	r2, #33	; 0x21
 8008f3a:	2104      	movs	r1, #4
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fb75 	bl	800962c <_calloc_r>
 8008f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f44:	60f0      	str	r0, [r6, #12]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e4      	bne.n	8008f16 <_Balloc+0x2e>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	6802      	ldr	r2, [r0, #0]
 8008f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f56:	2300      	movs	r3, #0
 8008f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f5c:	e7f7      	b.n	8008f4e <_Balloc+0x66>
 8008f5e:	bf00      	nop
 8008f60:	0800b03d 	.word	0x0800b03d
 8008f64:	0800b0c0 	.word	0x0800b0c0

08008f68 <_Bfree>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	460c      	mov	r4, r1
 8008f70:	b976      	cbnz	r6, 8008f90 <_Bfree+0x28>
 8008f72:	2010      	movs	r0, #16
 8008f74:	f7ff ffa4 	bl	8008ec0 <malloc>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	6268      	str	r0, [r5, #36]	; 0x24
 8008f7c:	b920      	cbnz	r0, 8008f88 <_Bfree+0x20>
 8008f7e:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <_Bfree+0x3c>)
 8008f80:	4809      	ldr	r0, [pc, #36]	; (8008fa8 <_Bfree+0x40>)
 8008f82:	218a      	movs	r1, #138	; 0x8a
 8008f84:	f000 fbce 	bl	8009724 <__assert_func>
 8008f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f8c:	6006      	str	r6, [r0, #0]
 8008f8e:	60c6      	str	r6, [r0, #12]
 8008f90:	b13c      	cbz	r4, 8008fa2 <_Bfree+0x3a>
 8008f92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f94:	6862      	ldr	r2, [r4, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f9c:	6021      	str	r1, [r4, #0]
 8008f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	0800b03d 	.word	0x0800b03d
 8008fa8:	0800b0c0 	.word	0x0800b0c0

08008fac <__multadd>:
 8008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	690d      	ldr	r5, [r1, #16]
 8008fb2:	4607      	mov	r7, r0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	461e      	mov	r6, r3
 8008fb8:	f101 0c14 	add.w	ip, r1, #20
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	f8dc 3000 	ldr.w	r3, [ip]
 8008fc2:	b299      	uxth	r1, r3
 8008fc4:	fb02 6101 	mla	r1, r2, r1, r6
 8008fc8:	0c1e      	lsrs	r6, r3, #16
 8008fca:	0c0b      	lsrs	r3, r1, #16
 8008fcc:	fb02 3306 	mla	r3, r2, r6, r3
 8008fd0:	b289      	uxth	r1, r1
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fd8:	4285      	cmp	r5, r0
 8008fda:	f84c 1b04 	str.w	r1, [ip], #4
 8008fde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fe2:	dcec      	bgt.n	8008fbe <__multadd+0x12>
 8008fe4:	b30e      	cbz	r6, 800902a <__multadd+0x7e>
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	42ab      	cmp	r3, r5
 8008fea:	dc19      	bgt.n	8009020 <__multadd+0x74>
 8008fec:	6861      	ldr	r1, [r4, #4]
 8008fee:	4638      	mov	r0, r7
 8008ff0:	3101      	adds	r1, #1
 8008ff2:	f7ff ff79 	bl	8008ee8 <_Balloc>
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	b928      	cbnz	r0, 8009006 <__multadd+0x5a>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	4b0c      	ldr	r3, [pc, #48]	; (8009030 <__multadd+0x84>)
 8008ffe:	480d      	ldr	r0, [pc, #52]	; (8009034 <__multadd+0x88>)
 8009000:	21b5      	movs	r1, #181	; 0xb5
 8009002:	f000 fb8f 	bl	8009724 <__assert_func>
 8009006:	6922      	ldr	r2, [r4, #16]
 8009008:	3202      	adds	r2, #2
 800900a:	f104 010c 	add.w	r1, r4, #12
 800900e:	0092      	lsls	r2, r2, #2
 8009010:	300c      	adds	r0, #12
 8009012:	f7fe f8d2 	bl	80071ba <memcpy>
 8009016:	4621      	mov	r1, r4
 8009018:	4638      	mov	r0, r7
 800901a:	f7ff ffa5 	bl	8008f68 <_Bfree>
 800901e:	4644      	mov	r4, r8
 8009020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009024:	3501      	adds	r5, #1
 8009026:	615e      	str	r6, [r3, #20]
 8009028:	6125      	str	r5, [r4, #16]
 800902a:	4620      	mov	r0, r4
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	0800b0af 	.word	0x0800b0af
 8009034:	0800b0c0 	.word	0x0800b0c0

08009038 <__hi0bits>:
 8009038:	0c03      	lsrs	r3, r0, #16
 800903a:	041b      	lsls	r3, r3, #16
 800903c:	b9d3      	cbnz	r3, 8009074 <__hi0bits+0x3c>
 800903e:	0400      	lsls	r0, r0, #16
 8009040:	2310      	movs	r3, #16
 8009042:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009046:	bf04      	itt	eq
 8009048:	0200      	lsleq	r0, r0, #8
 800904a:	3308      	addeq	r3, #8
 800904c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009050:	bf04      	itt	eq
 8009052:	0100      	lsleq	r0, r0, #4
 8009054:	3304      	addeq	r3, #4
 8009056:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800905a:	bf04      	itt	eq
 800905c:	0080      	lsleq	r0, r0, #2
 800905e:	3302      	addeq	r3, #2
 8009060:	2800      	cmp	r0, #0
 8009062:	db05      	blt.n	8009070 <__hi0bits+0x38>
 8009064:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009068:	f103 0301 	add.w	r3, r3, #1
 800906c:	bf08      	it	eq
 800906e:	2320      	moveq	r3, #32
 8009070:	4618      	mov	r0, r3
 8009072:	4770      	bx	lr
 8009074:	2300      	movs	r3, #0
 8009076:	e7e4      	b.n	8009042 <__hi0bits+0xa>

08009078 <__lo0bits>:
 8009078:	6803      	ldr	r3, [r0, #0]
 800907a:	f013 0207 	ands.w	r2, r3, #7
 800907e:	4601      	mov	r1, r0
 8009080:	d00b      	beq.n	800909a <__lo0bits+0x22>
 8009082:	07da      	lsls	r2, r3, #31
 8009084:	d423      	bmi.n	80090ce <__lo0bits+0x56>
 8009086:	0798      	lsls	r0, r3, #30
 8009088:	bf49      	itett	mi
 800908a:	085b      	lsrmi	r3, r3, #1
 800908c:	089b      	lsrpl	r3, r3, #2
 800908e:	2001      	movmi	r0, #1
 8009090:	600b      	strmi	r3, [r1, #0]
 8009092:	bf5c      	itt	pl
 8009094:	600b      	strpl	r3, [r1, #0]
 8009096:	2002      	movpl	r0, #2
 8009098:	4770      	bx	lr
 800909a:	b298      	uxth	r0, r3
 800909c:	b9a8      	cbnz	r0, 80090ca <__lo0bits+0x52>
 800909e:	0c1b      	lsrs	r3, r3, #16
 80090a0:	2010      	movs	r0, #16
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	b90a      	cbnz	r2, 80090aa <__lo0bits+0x32>
 80090a6:	3008      	adds	r0, #8
 80090a8:	0a1b      	lsrs	r3, r3, #8
 80090aa:	071a      	lsls	r2, r3, #28
 80090ac:	bf04      	itt	eq
 80090ae:	091b      	lsreq	r3, r3, #4
 80090b0:	3004      	addeq	r0, #4
 80090b2:	079a      	lsls	r2, r3, #30
 80090b4:	bf04      	itt	eq
 80090b6:	089b      	lsreq	r3, r3, #2
 80090b8:	3002      	addeq	r0, #2
 80090ba:	07da      	lsls	r2, r3, #31
 80090bc:	d403      	bmi.n	80090c6 <__lo0bits+0x4e>
 80090be:	085b      	lsrs	r3, r3, #1
 80090c0:	f100 0001 	add.w	r0, r0, #1
 80090c4:	d005      	beq.n	80090d2 <__lo0bits+0x5a>
 80090c6:	600b      	str	r3, [r1, #0]
 80090c8:	4770      	bx	lr
 80090ca:	4610      	mov	r0, r2
 80090cc:	e7e9      	b.n	80090a2 <__lo0bits+0x2a>
 80090ce:	2000      	movs	r0, #0
 80090d0:	4770      	bx	lr
 80090d2:	2020      	movs	r0, #32
 80090d4:	4770      	bx	lr
	...

080090d8 <__i2b>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	460c      	mov	r4, r1
 80090dc:	2101      	movs	r1, #1
 80090de:	f7ff ff03 	bl	8008ee8 <_Balloc>
 80090e2:	4602      	mov	r2, r0
 80090e4:	b928      	cbnz	r0, 80090f2 <__i2b+0x1a>
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <__i2b+0x24>)
 80090e8:	4805      	ldr	r0, [pc, #20]	; (8009100 <__i2b+0x28>)
 80090ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090ee:	f000 fb19 	bl	8009724 <__assert_func>
 80090f2:	2301      	movs	r3, #1
 80090f4:	6144      	str	r4, [r0, #20]
 80090f6:	6103      	str	r3, [r0, #16]
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	bf00      	nop
 80090fc:	0800b0af 	.word	0x0800b0af
 8009100:	0800b0c0 	.word	0x0800b0c0

08009104 <__multiply>:
 8009104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009108:	4691      	mov	r9, r2
 800910a:	690a      	ldr	r2, [r1, #16]
 800910c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009110:	429a      	cmp	r2, r3
 8009112:	bfb8      	it	lt
 8009114:	460b      	movlt	r3, r1
 8009116:	460c      	mov	r4, r1
 8009118:	bfbc      	itt	lt
 800911a:	464c      	movlt	r4, r9
 800911c:	4699      	movlt	r9, r3
 800911e:	6927      	ldr	r7, [r4, #16]
 8009120:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009124:	68a3      	ldr	r3, [r4, #8]
 8009126:	6861      	ldr	r1, [r4, #4]
 8009128:	eb07 060a 	add.w	r6, r7, sl
 800912c:	42b3      	cmp	r3, r6
 800912e:	b085      	sub	sp, #20
 8009130:	bfb8      	it	lt
 8009132:	3101      	addlt	r1, #1
 8009134:	f7ff fed8 	bl	8008ee8 <_Balloc>
 8009138:	b930      	cbnz	r0, 8009148 <__multiply+0x44>
 800913a:	4602      	mov	r2, r0
 800913c:	4b44      	ldr	r3, [pc, #272]	; (8009250 <__multiply+0x14c>)
 800913e:	4845      	ldr	r0, [pc, #276]	; (8009254 <__multiply+0x150>)
 8009140:	f240 115d 	movw	r1, #349	; 0x15d
 8009144:	f000 faee 	bl	8009724 <__assert_func>
 8009148:	f100 0514 	add.w	r5, r0, #20
 800914c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009150:	462b      	mov	r3, r5
 8009152:	2200      	movs	r2, #0
 8009154:	4543      	cmp	r3, r8
 8009156:	d321      	bcc.n	800919c <__multiply+0x98>
 8009158:	f104 0314 	add.w	r3, r4, #20
 800915c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009160:	f109 0314 	add.w	r3, r9, #20
 8009164:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009168:	9202      	str	r2, [sp, #8]
 800916a:	1b3a      	subs	r2, r7, r4
 800916c:	3a15      	subs	r2, #21
 800916e:	f022 0203 	bic.w	r2, r2, #3
 8009172:	3204      	adds	r2, #4
 8009174:	f104 0115 	add.w	r1, r4, #21
 8009178:	428f      	cmp	r7, r1
 800917a:	bf38      	it	cc
 800917c:	2204      	movcc	r2, #4
 800917e:	9201      	str	r2, [sp, #4]
 8009180:	9a02      	ldr	r2, [sp, #8]
 8009182:	9303      	str	r3, [sp, #12]
 8009184:	429a      	cmp	r2, r3
 8009186:	d80c      	bhi.n	80091a2 <__multiply+0x9e>
 8009188:	2e00      	cmp	r6, #0
 800918a:	dd03      	ble.n	8009194 <__multiply+0x90>
 800918c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009190:	2b00      	cmp	r3, #0
 8009192:	d05a      	beq.n	800924a <__multiply+0x146>
 8009194:	6106      	str	r6, [r0, #16]
 8009196:	b005      	add	sp, #20
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	f843 2b04 	str.w	r2, [r3], #4
 80091a0:	e7d8      	b.n	8009154 <__multiply+0x50>
 80091a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80091a6:	f1ba 0f00 	cmp.w	sl, #0
 80091aa:	d024      	beq.n	80091f6 <__multiply+0xf2>
 80091ac:	f104 0e14 	add.w	lr, r4, #20
 80091b0:	46a9      	mov	r9, r5
 80091b2:	f04f 0c00 	mov.w	ip, #0
 80091b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091ba:	f8d9 1000 	ldr.w	r1, [r9]
 80091be:	fa1f fb82 	uxth.w	fp, r2
 80091c2:	b289      	uxth	r1, r1
 80091c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80091c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091cc:	f8d9 2000 	ldr.w	r2, [r9]
 80091d0:	4461      	add	r1, ip
 80091d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80091da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091de:	b289      	uxth	r1, r1
 80091e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091e4:	4577      	cmp	r7, lr
 80091e6:	f849 1b04 	str.w	r1, [r9], #4
 80091ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091ee:	d8e2      	bhi.n	80091b6 <__multiply+0xb2>
 80091f0:	9a01      	ldr	r2, [sp, #4]
 80091f2:	f845 c002 	str.w	ip, [r5, r2]
 80091f6:	9a03      	ldr	r2, [sp, #12]
 80091f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091fc:	3304      	adds	r3, #4
 80091fe:	f1b9 0f00 	cmp.w	r9, #0
 8009202:	d020      	beq.n	8009246 <__multiply+0x142>
 8009204:	6829      	ldr	r1, [r5, #0]
 8009206:	f104 0c14 	add.w	ip, r4, #20
 800920a:	46ae      	mov	lr, r5
 800920c:	f04f 0a00 	mov.w	sl, #0
 8009210:	f8bc b000 	ldrh.w	fp, [ip]
 8009214:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009218:	fb09 220b 	mla	r2, r9, fp, r2
 800921c:	4492      	add	sl, r2
 800921e:	b289      	uxth	r1, r1
 8009220:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009224:	f84e 1b04 	str.w	r1, [lr], #4
 8009228:	f85c 2b04 	ldr.w	r2, [ip], #4
 800922c:	f8be 1000 	ldrh.w	r1, [lr]
 8009230:	0c12      	lsrs	r2, r2, #16
 8009232:	fb09 1102 	mla	r1, r9, r2, r1
 8009236:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800923a:	4567      	cmp	r7, ip
 800923c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009240:	d8e6      	bhi.n	8009210 <__multiply+0x10c>
 8009242:	9a01      	ldr	r2, [sp, #4]
 8009244:	50a9      	str	r1, [r5, r2]
 8009246:	3504      	adds	r5, #4
 8009248:	e79a      	b.n	8009180 <__multiply+0x7c>
 800924a:	3e01      	subs	r6, #1
 800924c:	e79c      	b.n	8009188 <__multiply+0x84>
 800924e:	bf00      	nop
 8009250:	0800b0af 	.word	0x0800b0af
 8009254:	0800b0c0 	.word	0x0800b0c0

08009258 <__pow5mult>:
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800925c:	4615      	mov	r5, r2
 800925e:	f012 0203 	ands.w	r2, r2, #3
 8009262:	4606      	mov	r6, r0
 8009264:	460f      	mov	r7, r1
 8009266:	d007      	beq.n	8009278 <__pow5mult+0x20>
 8009268:	4c25      	ldr	r4, [pc, #148]	; (8009300 <__pow5mult+0xa8>)
 800926a:	3a01      	subs	r2, #1
 800926c:	2300      	movs	r3, #0
 800926e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009272:	f7ff fe9b 	bl	8008fac <__multadd>
 8009276:	4607      	mov	r7, r0
 8009278:	10ad      	asrs	r5, r5, #2
 800927a:	d03d      	beq.n	80092f8 <__pow5mult+0xa0>
 800927c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800927e:	b97c      	cbnz	r4, 80092a0 <__pow5mult+0x48>
 8009280:	2010      	movs	r0, #16
 8009282:	f7ff fe1d 	bl	8008ec0 <malloc>
 8009286:	4602      	mov	r2, r0
 8009288:	6270      	str	r0, [r6, #36]	; 0x24
 800928a:	b928      	cbnz	r0, 8009298 <__pow5mult+0x40>
 800928c:	4b1d      	ldr	r3, [pc, #116]	; (8009304 <__pow5mult+0xac>)
 800928e:	481e      	ldr	r0, [pc, #120]	; (8009308 <__pow5mult+0xb0>)
 8009290:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009294:	f000 fa46 	bl	8009724 <__assert_func>
 8009298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800929c:	6004      	str	r4, [r0, #0]
 800929e:	60c4      	str	r4, [r0, #12]
 80092a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092a8:	b94c      	cbnz	r4, 80092be <__pow5mult+0x66>
 80092aa:	f240 2171 	movw	r1, #625	; 0x271
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7ff ff12 	bl	80090d8 <__i2b>
 80092b4:	2300      	movs	r3, #0
 80092b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092ba:	4604      	mov	r4, r0
 80092bc:	6003      	str	r3, [r0, #0]
 80092be:	f04f 0900 	mov.w	r9, #0
 80092c2:	07eb      	lsls	r3, r5, #31
 80092c4:	d50a      	bpl.n	80092dc <__pow5mult+0x84>
 80092c6:	4639      	mov	r1, r7
 80092c8:	4622      	mov	r2, r4
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ff1a 	bl	8009104 <__multiply>
 80092d0:	4639      	mov	r1, r7
 80092d2:	4680      	mov	r8, r0
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff fe47 	bl	8008f68 <_Bfree>
 80092da:	4647      	mov	r7, r8
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	d00b      	beq.n	80092f8 <__pow5mult+0xa0>
 80092e0:	6820      	ldr	r0, [r4, #0]
 80092e2:	b938      	cbnz	r0, 80092f4 <__pow5mult+0x9c>
 80092e4:	4622      	mov	r2, r4
 80092e6:	4621      	mov	r1, r4
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff ff0b 	bl	8009104 <__multiply>
 80092ee:	6020      	str	r0, [r4, #0]
 80092f0:	f8c0 9000 	str.w	r9, [r0]
 80092f4:	4604      	mov	r4, r0
 80092f6:	e7e4      	b.n	80092c2 <__pow5mult+0x6a>
 80092f8:	4638      	mov	r0, r7
 80092fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fe:	bf00      	nop
 8009300:	0800b210 	.word	0x0800b210
 8009304:	0800b03d 	.word	0x0800b03d
 8009308:	0800b0c0 	.word	0x0800b0c0

0800930c <__lshift>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	460c      	mov	r4, r1
 8009312:	6849      	ldr	r1, [r1, #4]
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	4607      	mov	r7, r0
 800931e:	4691      	mov	r9, r2
 8009320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009324:	f108 0601 	add.w	r6, r8, #1
 8009328:	42b3      	cmp	r3, r6
 800932a:	db0b      	blt.n	8009344 <__lshift+0x38>
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff fddb 	bl	8008ee8 <_Balloc>
 8009332:	4605      	mov	r5, r0
 8009334:	b948      	cbnz	r0, 800934a <__lshift+0x3e>
 8009336:	4602      	mov	r2, r0
 8009338:	4b2a      	ldr	r3, [pc, #168]	; (80093e4 <__lshift+0xd8>)
 800933a:	482b      	ldr	r0, [pc, #172]	; (80093e8 <__lshift+0xdc>)
 800933c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009340:	f000 f9f0 	bl	8009724 <__assert_func>
 8009344:	3101      	adds	r1, #1
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	e7ee      	b.n	8009328 <__lshift+0x1c>
 800934a:	2300      	movs	r3, #0
 800934c:	f100 0114 	add.w	r1, r0, #20
 8009350:	f100 0210 	add.w	r2, r0, #16
 8009354:	4618      	mov	r0, r3
 8009356:	4553      	cmp	r3, sl
 8009358:	db37      	blt.n	80093ca <__lshift+0xbe>
 800935a:	6920      	ldr	r0, [r4, #16]
 800935c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009360:	f104 0314 	add.w	r3, r4, #20
 8009364:	f019 091f 	ands.w	r9, r9, #31
 8009368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800936c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009370:	d02f      	beq.n	80093d2 <__lshift+0xc6>
 8009372:	f1c9 0e20 	rsb	lr, r9, #32
 8009376:	468a      	mov	sl, r1
 8009378:	f04f 0c00 	mov.w	ip, #0
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	fa02 f209 	lsl.w	r2, r2, r9
 8009382:	ea42 020c 	orr.w	r2, r2, ip
 8009386:	f84a 2b04 	str.w	r2, [sl], #4
 800938a:	f853 2b04 	ldr.w	r2, [r3], #4
 800938e:	4298      	cmp	r0, r3
 8009390:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009394:	d8f2      	bhi.n	800937c <__lshift+0x70>
 8009396:	1b03      	subs	r3, r0, r4
 8009398:	3b15      	subs	r3, #21
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	3304      	adds	r3, #4
 80093a0:	f104 0215 	add.w	r2, r4, #21
 80093a4:	4290      	cmp	r0, r2
 80093a6:	bf38      	it	cc
 80093a8:	2304      	movcc	r3, #4
 80093aa:	f841 c003 	str.w	ip, [r1, r3]
 80093ae:	f1bc 0f00 	cmp.w	ip, #0
 80093b2:	d001      	beq.n	80093b8 <__lshift+0xac>
 80093b4:	f108 0602 	add.w	r6, r8, #2
 80093b8:	3e01      	subs	r6, #1
 80093ba:	4638      	mov	r0, r7
 80093bc:	612e      	str	r6, [r5, #16]
 80093be:	4621      	mov	r1, r4
 80093c0:	f7ff fdd2 	bl	8008f68 <_Bfree>
 80093c4:	4628      	mov	r0, r5
 80093c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80093ce:	3301      	adds	r3, #1
 80093d0:	e7c1      	b.n	8009356 <__lshift+0x4a>
 80093d2:	3904      	subs	r1, #4
 80093d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80093dc:	4298      	cmp	r0, r3
 80093de:	d8f9      	bhi.n	80093d4 <__lshift+0xc8>
 80093e0:	e7ea      	b.n	80093b8 <__lshift+0xac>
 80093e2:	bf00      	nop
 80093e4:	0800b0af 	.word	0x0800b0af
 80093e8:	0800b0c0 	.word	0x0800b0c0

080093ec <__mcmp>:
 80093ec:	b530      	push	{r4, r5, lr}
 80093ee:	6902      	ldr	r2, [r0, #16]
 80093f0:	690c      	ldr	r4, [r1, #16]
 80093f2:	1b12      	subs	r2, r2, r4
 80093f4:	d10e      	bne.n	8009414 <__mcmp+0x28>
 80093f6:	f100 0314 	add.w	r3, r0, #20
 80093fa:	3114      	adds	r1, #20
 80093fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009400:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009404:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009408:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800940c:	42a5      	cmp	r5, r4
 800940e:	d003      	beq.n	8009418 <__mcmp+0x2c>
 8009410:	d305      	bcc.n	800941e <__mcmp+0x32>
 8009412:	2201      	movs	r2, #1
 8009414:	4610      	mov	r0, r2
 8009416:	bd30      	pop	{r4, r5, pc}
 8009418:	4283      	cmp	r3, r0
 800941a:	d3f3      	bcc.n	8009404 <__mcmp+0x18>
 800941c:	e7fa      	b.n	8009414 <__mcmp+0x28>
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	e7f7      	b.n	8009414 <__mcmp+0x28>

08009424 <__mdiff>:
 8009424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009428:	460c      	mov	r4, r1
 800942a:	4606      	mov	r6, r0
 800942c:	4611      	mov	r1, r2
 800942e:	4620      	mov	r0, r4
 8009430:	4690      	mov	r8, r2
 8009432:	f7ff ffdb 	bl	80093ec <__mcmp>
 8009436:	1e05      	subs	r5, r0, #0
 8009438:	d110      	bne.n	800945c <__mdiff+0x38>
 800943a:	4629      	mov	r1, r5
 800943c:	4630      	mov	r0, r6
 800943e:	f7ff fd53 	bl	8008ee8 <_Balloc>
 8009442:	b930      	cbnz	r0, 8009452 <__mdiff+0x2e>
 8009444:	4b3a      	ldr	r3, [pc, #232]	; (8009530 <__mdiff+0x10c>)
 8009446:	4602      	mov	r2, r0
 8009448:	f240 2132 	movw	r1, #562	; 0x232
 800944c:	4839      	ldr	r0, [pc, #228]	; (8009534 <__mdiff+0x110>)
 800944e:	f000 f969 	bl	8009724 <__assert_func>
 8009452:	2301      	movs	r3, #1
 8009454:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945c:	bfa4      	itt	ge
 800945e:	4643      	movge	r3, r8
 8009460:	46a0      	movge	r8, r4
 8009462:	4630      	mov	r0, r6
 8009464:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009468:	bfa6      	itte	ge
 800946a:	461c      	movge	r4, r3
 800946c:	2500      	movge	r5, #0
 800946e:	2501      	movlt	r5, #1
 8009470:	f7ff fd3a 	bl	8008ee8 <_Balloc>
 8009474:	b920      	cbnz	r0, 8009480 <__mdiff+0x5c>
 8009476:	4b2e      	ldr	r3, [pc, #184]	; (8009530 <__mdiff+0x10c>)
 8009478:	4602      	mov	r2, r0
 800947a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800947e:	e7e5      	b.n	800944c <__mdiff+0x28>
 8009480:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009484:	6926      	ldr	r6, [r4, #16]
 8009486:	60c5      	str	r5, [r0, #12]
 8009488:	f104 0914 	add.w	r9, r4, #20
 800948c:	f108 0514 	add.w	r5, r8, #20
 8009490:	f100 0e14 	add.w	lr, r0, #20
 8009494:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800949c:	f108 0210 	add.w	r2, r8, #16
 80094a0:	46f2      	mov	sl, lr
 80094a2:	2100      	movs	r1, #0
 80094a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80094a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094ac:	fa1f f883 	uxth.w	r8, r3
 80094b0:	fa11 f18b 	uxtah	r1, r1, fp
 80094b4:	0c1b      	lsrs	r3, r3, #16
 80094b6:	eba1 0808 	sub.w	r8, r1, r8
 80094ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094c2:	fa1f f888 	uxth.w	r8, r8
 80094c6:	1419      	asrs	r1, r3, #16
 80094c8:	454e      	cmp	r6, r9
 80094ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094ce:	f84a 3b04 	str.w	r3, [sl], #4
 80094d2:	d8e7      	bhi.n	80094a4 <__mdiff+0x80>
 80094d4:	1b33      	subs	r3, r6, r4
 80094d6:	3b15      	subs	r3, #21
 80094d8:	f023 0303 	bic.w	r3, r3, #3
 80094dc:	3304      	adds	r3, #4
 80094de:	3415      	adds	r4, #21
 80094e0:	42a6      	cmp	r6, r4
 80094e2:	bf38      	it	cc
 80094e4:	2304      	movcc	r3, #4
 80094e6:	441d      	add	r5, r3
 80094e8:	4473      	add	r3, lr
 80094ea:	469e      	mov	lr, r3
 80094ec:	462e      	mov	r6, r5
 80094ee:	4566      	cmp	r6, ip
 80094f0:	d30e      	bcc.n	8009510 <__mdiff+0xec>
 80094f2:	f10c 0203 	add.w	r2, ip, #3
 80094f6:	1b52      	subs	r2, r2, r5
 80094f8:	f022 0203 	bic.w	r2, r2, #3
 80094fc:	3d03      	subs	r5, #3
 80094fe:	45ac      	cmp	ip, r5
 8009500:	bf38      	it	cc
 8009502:	2200      	movcc	r2, #0
 8009504:	441a      	add	r2, r3
 8009506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800950a:	b17b      	cbz	r3, 800952c <__mdiff+0x108>
 800950c:	6107      	str	r7, [r0, #16]
 800950e:	e7a3      	b.n	8009458 <__mdiff+0x34>
 8009510:	f856 8b04 	ldr.w	r8, [r6], #4
 8009514:	fa11 f288 	uxtah	r2, r1, r8
 8009518:	1414      	asrs	r4, r2, #16
 800951a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800951e:	b292      	uxth	r2, r2
 8009520:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009524:	f84e 2b04 	str.w	r2, [lr], #4
 8009528:	1421      	asrs	r1, r4, #16
 800952a:	e7e0      	b.n	80094ee <__mdiff+0xca>
 800952c:	3f01      	subs	r7, #1
 800952e:	e7ea      	b.n	8009506 <__mdiff+0xe2>
 8009530:	0800b0af 	.word	0x0800b0af
 8009534:	0800b0c0 	.word	0x0800b0c0

08009538 <__d2b>:
 8009538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800953c:	4689      	mov	r9, r1
 800953e:	2101      	movs	r1, #1
 8009540:	ec57 6b10 	vmov	r6, r7, d0
 8009544:	4690      	mov	r8, r2
 8009546:	f7ff fccf 	bl	8008ee8 <_Balloc>
 800954a:	4604      	mov	r4, r0
 800954c:	b930      	cbnz	r0, 800955c <__d2b+0x24>
 800954e:	4602      	mov	r2, r0
 8009550:	4b25      	ldr	r3, [pc, #148]	; (80095e8 <__d2b+0xb0>)
 8009552:	4826      	ldr	r0, [pc, #152]	; (80095ec <__d2b+0xb4>)
 8009554:	f240 310a 	movw	r1, #778	; 0x30a
 8009558:	f000 f8e4 	bl	8009724 <__assert_func>
 800955c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009564:	bb35      	cbnz	r5, 80095b4 <__d2b+0x7c>
 8009566:	2e00      	cmp	r6, #0
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	d028      	beq.n	80095be <__d2b+0x86>
 800956c:	4668      	mov	r0, sp
 800956e:	9600      	str	r6, [sp, #0]
 8009570:	f7ff fd82 	bl	8009078 <__lo0bits>
 8009574:	9900      	ldr	r1, [sp, #0]
 8009576:	b300      	cbz	r0, 80095ba <__d2b+0x82>
 8009578:	9a01      	ldr	r2, [sp, #4]
 800957a:	f1c0 0320 	rsb	r3, r0, #32
 800957e:	fa02 f303 	lsl.w	r3, r2, r3
 8009582:	430b      	orrs	r3, r1
 8009584:	40c2      	lsrs	r2, r0
 8009586:	6163      	str	r3, [r4, #20]
 8009588:	9201      	str	r2, [sp, #4]
 800958a:	9b01      	ldr	r3, [sp, #4]
 800958c:	61a3      	str	r3, [r4, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	bf14      	ite	ne
 8009592:	2202      	movne	r2, #2
 8009594:	2201      	moveq	r2, #1
 8009596:	6122      	str	r2, [r4, #16]
 8009598:	b1d5      	cbz	r5, 80095d0 <__d2b+0x98>
 800959a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800959e:	4405      	add	r5, r0
 80095a0:	f8c9 5000 	str.w	r5, [r9]
 80095a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095a8:	f8c8 0000 	str.w	r0, [r8]
 80095ac:	4620      	mov	r0, r4
 80095ae:	b003      	add	sp, #12
 80095b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095b8:	e7d5      	b.n	8009566 <__d2b+0x2e>
 80095ba:	6161      	str	r1, [r4, #20]
 80095bc:	e7e5      	b.n	800958a <__d2b+0x52>
 80095be:	a801      	add	r0, sp, #4
 80095c0:	f7ff fd5a 	bl	8009078 <__lo0bits>
 80095c4:	9b01      	ldr	r3, [sp, #4]
 80095c6:	6163      	str	r3, [r4, #20]
 80095c8:	2201      	movs	r2, #1
 80095ca:	6122      	str	r2, [r4, #16]
 80095cc:	3020      	adds	r0, #32
 80095ce:	e7e3      	b.n	8009598 <__d2b+0x60>
 80095d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095d8:	f8c9 0000 	str.w	r0, [r9]
 80095dc:	6918      	ldr	r0, [r3, #16]
 80095de:	f7ff fd2b 	bl	8009038 <__hi0bits>
 80095e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095e6:	e7df      	b.n	80095a8 <__d2b+0x70>
 80095e8:	0800b0af 	.word	0x0800b0af
 80095ec:	0800b0c0 	.word	0x0800b0c0

080095f0 <_mprec_log10>:
 80095f0:	2817      	cmp	r0, #23
 80095f2:	b5d0      	push	{r4, r6, r7, lr}
 80095f4:	4604      	mov	r4, r0
 80095f6:	dc07      	bgt.n	8009608 <_mprec_log10+0x18>
 80095f8:	4809      	ldr	r0, [pc, #36]	; (8009620 <_mprec_log10+0x30>)
 80095fa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80095fe:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009602:	ec41 0b10 	vmov	d0, r0, r1
 8009606:	bdd0      	pop	{r4, r6, r7, pc}
 8009608:	4906      	ldr	r1, [pc, #24]	; (8009624 <_mprec_log10+0x34>)
 800960a:	4f07      	ldr	r7, [pc, #28]	; (8009628 <_mprec_log10+0x38>)
 800960c:	2000      	movs	r0, #0
 800960e:	2600      	movs	r6, #0
 8009610:	4632      	mov	r2, r6
 8009612:	463b      	mov	r3, r7
 8009614:	f7f7 f810 	bl	8000638 <__aeabi_dmul>
 8009618:	3c01      	subs	r4, #1
 800961a:	d1f9      	bne.n	8009610 <_mprec_log10+0x20>
 800961c:	e7f1      	b.n	8009602 <_mprec_log10+0x12>
 800961e:	bf00      	nop
 8009620:	0800b148 	.word	0x0800b148
 8009624:	3ff00000 	.word	0x3ff00000
 8009628:	40240000 	.word	0x40240000

0800962c <_calloc_r>:
 800962c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800962e:	fba1 2402 	umull	r2, r4, r1, r2
 8009632:	b94c      	cbnz	r4, 8009648 <_calloc_r+0x1c>
 8009634:	4611      	mov	r1, r2
 8009636:	9201      	str	r2, [sp, #4]
 8009638:	f7fd fdf6 	bl	8007228 <_malloc_r>
 800963c:	9a01      	ldr	r2, [sp, #4]
 800963e:	4605      	mov	r5, r0
 8009640:	b930      	cbnz	r0, 8009650 <_calloc_r+0x24>
 8009642:	4628      	mov	r0, r5
 8009644:	b003      	add	sp, #12
 8009646:	bd30      	pop	{r4, r5, pc}
 8009648:	220c      	movs	r2, #12
 800964a:	6002      	str	r2, [r0, #0]
 800964c:	2500      	movs	r5, #0
 800964e:	e7f8      	b.n	8009642 <_calloc_r+0x16>
 8009650:	4621      	mov	r1, r4
 8009652:	f7fd fdc0 	bl	80071d6 <memset>
 8009656:	e7f4      	b.n	8009642 <_calloc_r+0x16>

08009658 <_free_r>:
 8009658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800965a:	2900      	cmp	r1, #0
 800965c:	d044      	beq.n	80096e8 <_free_r+0x90>
 800965e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009662:	9001      	str	r0, [sp, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	f1a1 0404 	sub.w	r4, r1, #4
 800966a:	bfb8      	it	lt
 800966c:	18e4      	addlt	r4, r4, r3
 800966e:	f7ff fc2f 	bl	8008ed0 <__malloc_lock>
 8009672:	4a1e      	ldr	r2, [pc, #120]	; (80096ec <_free_r+0x94>)
 8009674:	9801      	ldr	r0, [sp, #4]
 8009676:	6813      	ldr	r3, [r2, #0]
 8009678:	b933      	cbnz	r3, 8009688 <_free_r+0x30>
 800967a:	6063      	str	r3, [r4, #4]
 800967c:	6014      	str	r4, [r2, #0]
 800967e:	b003      	add	sp, #12
 8009680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009684:	f7ff bc2a 	b.w	8008edc <__malloc_unlock>
 8009688:	42a3      	cmp	r3, r4
 800968a:	d908      	bls.n	800969e <_free_r+0x46>
 800968c:	6825      	ldr	r5, [r4, #0]
 800968e:	1961      	adds	r1, r4, r5
 8009690:	428b      	cmp	r3, r1
 8009692:	bf01      	itttt	eq
 8009694:	6819      	ldreq	r1, [r3, #0]
 8009696:	685b      	ldreq	r3, [r3, #4]
 8009698:	1949      	addeq	r1, r1, r5
 800969a:	6021      	streq	r1, [r4, #0]
 800969c:	e7ed      	b.n	800967a <_free_r+0x22>
 800969e:	461a      	mov	r2, r3
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	b10b      	cbz	r3, 80096a8 <_free_r+0x50>
 80096a4:	42a3      	cmp	r3, r4
 80096a6:	d9fa      	bls.n	800969e <_free_r+0x46>
 80096a8:	6811      	ldr	r1, [r2, #0]
 80096aa:	1855      	adds	r5, r2, r1
 80096ac:	42a5      	cmp	r5, r4
 80096ae:	d10b      	bne.n	80096c8 <_free_r+0x70>
 80096b0:	6824      	ldr	r4, [r4, #0]
 80096b2:	4421      	add	r1, r4
 80096b4:	1854      	adds	r4, r2, r1
 80096b6:	42a3      	cmp	r3, r4
 80096b8:	6011      	str	r1, [r2, #0]
 80096ba:	d1e0      	bne.n	800967e <_free_r+0x26>
 80096bc:	681c      	ldr	r4, [r3, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	6053      	str	r3, [r2, #4]
 80096c2:	4421      	add	r1, r4
 80096c4:	6011      	str	r1, [r2, #0]
 80096c6:	e7da      	b.n	800967e <_free_r+0x26>
 80096c8:	d902      	bls.n	80096d0 <_free_r+0x78>
 80096ca:	230c      	movs	r3, #12
 80096cc:	6003      	str	r3, [r0, #0]
 80096ce:	e7d6      	b.n	800967e <_free_r+0x26>
 80096d0:	6825      	ldr	r5, [r4, #0]
 80096d2:	1961      	adds	r1, r4, r5
 80096d4:	428b      	cmp	r3, r1
 80096d6:	bf04      	itt	eq
 80096d8:	6819      	ldreq	r1, [r3, #0]
 80096da:	685b      	ldreq	r3, [r3, #4]
 80096dc:	6063      	str	r3, [r4, #4]
 80096de:	bf04      	itt	eq
 80096e0:	1949      	addeq	r1, r1, r5
 80096e2:	6021      	streq	r1, [r4, #0]
 80096e4:	6054      	str	r4, [r2, #4]
 80096e6:	e7ca      	b.n	800967e <_free_r+0x26>
 80096e8:	b003      	add	sp, #12
 80096ea:	bd30      	pop	{r4, r5, pc}
 80096ec:	20004d4c 	.word	0x20004d4c

080096f0 <_read_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d07      	ldr	r5, [pc, #28]	; (8009710 <_read_r+0x20>)
 80096f4:	4604      	mov	r4, r0
 80096f6:	4608      	mov	r0, r1
 80096f8:	4611      	mov	r1, r2
 80096fa:	2200      	movs	r2, #0
 80096fc:	602a      	str	r2, [r5, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	f7f8 f96e 	bl	80019e0 <_read>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_read_r+0x1e>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_read_r+0x1e>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	20004d54 	.word	0x20004d54

08009714 <strcpy>:
 8009714:	4603      	mov	r3, r0
 8009716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800971a:	f803 2b01 	strb.w	r2, [r3], #1
 800971e:	2a00      	cmp	r2, #0
 8009720:	d1f9      	bne.n	8009716 <strcpy+0x2>
 8009722:	4770      	bx	lr

08009724 <__assert_func>:
 8009724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009726:	4614      	mov	r4, r2
 8009728:	461a      	mov	r2, r3
 800972a:	4b09      	ldr	r3, [pc, #36]	; (8009750 <__assert_func+0x2c>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4605      	mov	r5, r0
 8009730:	68d8      	ldr	r0, [r3, #12]
 8009732:	b14c      	cbz	r4, 8009748 <__assert_func+0x24>
 8009734:	4b07      	ldr	r3, [pc, #28]	; (8009754 <__assert_func+0x30>)
 8009736:	9100      	str	r1, [sp, #0]
 8009738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800973c:	4906      	ldr	r1, [pc, #24]	; (8009758 <__assert_func+0x34>)
 800973e:	462b      	mov	r3, r5
 8009740:	f000 f80e 	bl	8009760 <fiprintf>
 8009744:	f000 fa58 	bl	8009bf8 <abort>
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <__assert_func+0x38>)
 800974a:	461c      	mov	r4, r3
 800974c:	e7f3      	b.n	8009736 <__assert_func+0x12>
 800974e:	bf00      	nop
 8009750:	20000014 	.word	0x20000014
 8009754:	0800b21c 	.word	0x0800b21c
 8009758:	0800b229 	.word	0x0800b229
 800975c:	0800b257 	.word	0x0800b257

08009760 <fiprintf>:
 8009760:	b40e      	push	{r1, r2, r3}
 8009762:	b503      	push	{r0, r1, lr}
 8009764:	4601      	mov	r1, r0
 8009766:	ab03      	add	r3, sp, #12
 8009768:	4805      	ldr	r0, [pc, #20]	; (8009780 <fiprintf+0x20>)
 800976a:	f853 2b04 	ldr.w	r2, [r3], #4
 800976e:	6800      	ldr	r0, [r0, #0]
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	f000 f843 	bl	80097fc <_vfiprintf_r>
 8009776:	b002      	add	sp, #8
 8009778:	f85d eb04 	ldr.w	lr, [sp], #4
 800977c:	b003      	add	sp, #12
 800977e:	4770      	bx	lr
 8009780:	20000014 	.word	0x20000014

08009784 <__ascii_mbtowc>:
 8009784:	b082      	sub	sp, #8
 8009786:	b901      	cbnz	r1, 800978a <__ascii_mbtowc+0x6>
 8009788:	a901      	add	r1, sp, #4
 800978a:	b142      	cbz	r2, 800979e <__ascii_mbtowc+0x1a>
 800978c:	b14b      	cbz	r3, 80097a2 <__ascii_mbtowc+0x1e>
 800978e:	7813      	ldrb	r3, [r2, #0]
 8009790:	600b      	str	r3, [r1, #0]
 8009792:	7812      	ldrb	r2, [r2, #0]
 8009794:	1e10      	subs	r0, r2, #0
 8009796:	bf18      	it	ne
 8009798:	2001      	movne	r0, #1
 800979a:	b002      	add	sp, #8
 800979c:	4770      	bx	lr
 800979e:	4610      	mov	r0, r2
 80097a0:	e7fb      	b.n	800979a <__ascii_mbtowc+0x16>
 80097a2:	f06f 0001 	mvn.w	r0, #1
 80097a6:	e7f8      	b.n	800979a <__ascii_mbtowc+0x16>

080097a8 <__sfputc_r>:
 80097a8:	6893      	ldr	r3, [r2, #8]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	b410      	push	{r4}
 80097b0:	6093      	str	r3, [r2, #8]
 80097b2:	da08      	bge.n	80097c6 <__sfputc_r+0x1e>
 80097b4:	6994      	ldr	r4, [r2, #24]
 80097b6:	42a3      	cmp	r3, r4
 80097b8:	db01      	blt.n	80097be <__sfputc_r+0x16>
 80097ba:	290a      	cmp	r1, #10
 80097bc:	d103      	bne.n	80097c6 <__sfputc_r+0x1e>
 80097be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097c2:	f000 b94b 	b.w	8009a5c <__swbuf_r>
 80097c6:	6813      	ldr	r3, [r2, #0]
 80097c8:	1c58      	adds	r0, r3, #1
 80097ca:	6010      	str	r0, [r2, #0]
 80097cc:	7019      	strb	r1, [r3, #0]
 80097ce:	4608      	mov	r0, r1
 80097d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <__sfputs_r>:
 80097d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d8:	4606      	mov	r6, r0
 80097da:	460f      	mov	r7, r1
 80097dc:	4614      	mov	r4, r2
 80097de:	18d5      	adds	r5, r2, r3
 80097e0:	42ac      	cmp	r4, r5
 80097e2:	d101      	bne.n	80097e8 <__sfputs_r+0x12>
 80097e4:	2000      	movs	r0, #0
 80097e6:	e007      	b.n	80097f8 <__sfputs_r+0x22>
 80097e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ec:	463a      	mov	r2, r7
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7ff ffda 	bl	80097a8 <__sfputc_r>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d1f3      	bne.n	80097e0 <__sfputs_r+0xa>
 80097f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097fc <_vfiprintf_r>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	460d      	mov	r5, r1
 8009802:	b09d      	sub	sp, #116	; 0x74
 8009804:	4614      	mov	r4, r2
 8009806:	4698      	mov	r8, r3
 8009808:	4606      	mov	r6, r0
 800980a:	b118      	cbz	r0, 8009814 <_vfiprintf_r+0x18>
 800980c:	6983      	ldr	r3, [r0, #24]
 800980e:	b90b      	cbnz	r3, 8009814 <_vfiprintf_r+0x18>
 8009810:	f7fd fc0e 	bl	8007030 <__sinit>
 8009814:	4b89      	ldr	r3, [pc, #548]	; (8009a3c <_vfiprintf_r+0x240>)
 8009816:	429d      	cmp	r5, r3
 8009818:	d11b      	bne.n	8009852 <_vfiprintf_r+0x56>
 800981a:	6875      	ldr	r5, [r6, #4]
 800981c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800981e:	07d9      	lsls	r1, r3, #31
 8009820:	d405      	bmi.n	800982e <_vfiprintf_r+0x32>
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	059a      	lsls	r2, r3, #22
 8009826:	d402      	bmi.n	800982e <_vfiprintf_r+0x32>
 8009828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800982a:	f7fd fcc4 	bl	80071b6 <__retarget_lock_acquire_recursive>
 800982e:	89ab      	ldrh	r3, [r5, #12]
 8009830:	071b      	lsls	r3, r3, #28
 8009832:	d501      	bpl.n	8009838 <_vfiprintf_r+0x3c>
 8009834:	692b      	ldr	r3, [r5, #16]
 8009836:	b9eb      	cbnz	r3, 8009874 <_vfiprintf_r+0x78>
 8009838:	4629      	mov	r1, r5
 800983a:	4630      	mov	r0, r6
 800983c:	f000 f96e 	bl	8009b1c <__swsetup_r>
 8009840:	b1c0      	cbz	r0, 8009874 <_vfiprintf_r+0x78>
 8009842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009844:	07dc      	lsls	r4, r3, #31
 8009846:	d50e      	bpl.n	8009866 <_vfiprintf_r+0x6a>
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	b01d      	add	sp, #116	; 0x74
 800984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009852:	4b7b      	ldr	r3, [pc, #492]	; (8009a40 <_vfiprintf_r+0x244>)
 8009854:	429d      	cmp	r5, r3
 8009856:	d101      	bne.n	800985c <_vfiprintf_r+0x60>
 8009858:	68b5      	ldr	r5, [r6, #8]
 800985a:	e7df      	b.n	800981c <_vfiprintf_r+0x20>
 800985c:	4b79      	ldr	r3, [pc, #484]	; (8009a44 <_vfiprintf_r+0x248>)
 800985e:	429d      	cmp	r5, r3
 8009860:	bf08      	it	eq
 8009862:	68f5      	ldreq	r5, [r6, #12]
 8009864:	e7da      	b.n	800981c <_vfiprintf_r+0x20>
 8009866:	89ab      	ldrh	r3, [r5, #12]
 8009868:	0598      	lsls	r0, r3, #22
 800986a:	d4ed      	bmi.n	8009848 <_vfiprintf_r+0x4c>
 800986c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800986e:	f7fd fca3 	bl	80071b8 <__retarget_lock_release_recursive>
 8009872:	e7e9      	b.n	8009848 <_vfiprintf_r+0x4c>
 8009874:	2300      	movs	r3, #0
 8009876:	9309      	str	r3, [sp, #36]	; 0x24
 8009878:	2320      	movs	r3, #32
 800987a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800987e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009882:	2330      	movs	r3, #48	; 0x30
 8009884:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a48 <_vfiprintf_r+0x24c>
 8009888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800988c:	f04f 0901 	mov.w	r9, #1
 8009890:	4623      	mov	r3, r4
 8009892:	469a      	mov	sl, r3
 8009894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009898:	b10a      	cbz	r2, 800989e <_vfiprintf_r+0xa2>
 800989a:	2a25      	cmp	r2, #37	; 0x25
 800989c:	d1f9      	bne.n	8009892 <_vfiprintf_r+0x96>
 800989e:	ebba 0b04 	subs.w	fp, sl, r4
 80098a2:	d00b      	beq.n	80098bc <_vfiprintf_r+0xc0>
 80098a4:	465b      	mov	r3, fp
 80098a6:	4622      	mov	r2, r4
 80098a8:	4629      	mov	r1, r5
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7ff ff93 	bl	80097d6 <__sfputs_r>
 80098b0:	3001      	adds	r0, #1
 80098b2:	f000 80aa 	beq.w	8009a0a <_vfiprintf_r+0x20e>
 80098b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b8:	445a      	add	r2, fp
 80098ba:	9209      	str	r2, [sp, #36]	; 0x24
 80098bc:	f89a 3000 	ldrb.w	r3, [sl]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 80a2 	beq.w	8009a0a <_vfiprintf_r+0x20e>
 80098c6:	2300      	movs	r3, #0
 80098c8:	f04f 32ff 	mov.w	r2, #4294967295
 80098cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098d0:	f10a 0a01 	add.w	sl, sl, #1
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	9307      	str	r3, [sp, #28]
 80098d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098dc:	931a      	str	r3, [sp, #104]	; 0x68
 80098de:	4654      	mov	r4, sl
 80098e0:	2205      	movs	r2, #5
 80098e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e6:	4858      	ldr	r0, [pc, #352]	; (8009a48 <_vfiprintf_r+0x24c>)
 80098e8:	f7f6 fc9a 	bl	8000220 <memchr>
 80098ec:	9a04      	ldr	r2, [sp, #16]
 80098ee:	b9d8      	cbnz	r0, 8009928 <_vfiprintf_r+0x12c>
 80098f0:	06d1      	lsls	r1, r2, #27
 80098f2:	bf44      	itt	mi
 80098f4:	2320      	movmi	r3, #32
 80098f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fa:	0713      	lsls	r3, r2, #28
 80098fc:	bf44      	itt	mi
 80098fe:	232b      	movmi	r3, #43	; 0x2b
 8009900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009904:	f89a 3000 	ldrb.w	r3, [sl]
 8009908:	2b2a      	cmp	r3, #42	; 0x2a
 800990a:	d015      	beq.n	8009938 <_vfiprintf_r+0x13c>
 800990c:	9a07      	ldr	r2, [sp, #28]
 800990e:	4654      	mov	r4, sl
 8009910:	2000      	movs	r0, #0
 8009912:	f04f 0c0a 	mov.w	ip, #10
 8009916:	4621      	mov	r1, r4
 8009918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800991c:	3b30      	subs	r3, #48	; 0x30
 800991e:	2b09      	cmp	r3, #9
 8009920:	d94e      	bls.n	80099c0 <_vfiprintf_r+0x1c4>
 8009922:	b1b0      	cbz	r0, 8009952 <_vfiprintf_r+0x156>
 8009924:	9207      	str	r2, [sp, #28]
 8009926:	e014      	b.n	8009952 <_vfiprintf_r+0x156>
 8009928:	eba0 0308 	sub.w	r3, r0, r8
 800992c:	fa09 f303 	lsl.w	r3, r9, r3
 8009930:	4313      	orrs	r3, r2
 8009932:	9304      	str	r3, [sp, #16]
 8009934:	46a2      	mov	sl, r4
 8009936:	e7d2      	b.n	80098de <_vfiprintf_r+0xe2>
 8009938:	9b03      	ldr	r3, [sp, #12]
 800993a:	1d19      	adds	r1, r3, #4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	9103      	str	r1, [sp, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	bfbb      	ittet	lt
 8009944:	425b      	neglt	r3, r3
 8009946:	f042 0202 	orrlt.w	r2, r2, #2
 800994a:	9307      	strge	r3, [sp, #28]
 800994c:	9307      	strlt	r3, [sp, #28]
 800994e:	bfb8      	it	lt
 8009950:	9204      	strlt	r2, [sp, #16]
 8009952:	7823      	ldrb	r3, [r4, #0]
 8009954:	2b2e      	cmp	r3, #46	; 0x2e
 8009956:	d10c      	bne.n	8009972 <_vfiprintf_r+0x176>
 8009958:	7863      	ldrb	r3, [r4, #1]
 800995a:	2b2a      	cmp	r3, #42	; 0x2a
 800995c:	d135      	bne.n	80099ca <_vfiprintf_r+0x1ce>
 800995e:	9b03      	ldr	r3, [sp, #12]
 8009960:	1d1a      	adds	r2, r3, #4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	9203      	str	r2, [sp, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	bfb8      	it	lt
 800996a:	f04f 33ff 	movlt.w	r3, #4294967295
 800996e:	3402      	adds	r4, #2
 8009970:	9305      	str	r3, [sp, #20]
 8009972:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a58 <_vfiprintf_r+0x25c>
 8009976:	7821      	ldrb	r1, [r4, #0]
 8009978:	2203      	movs	r2, #3
 800997a:	4650      	mov	r0, sl
 800997c:	f7f6 fc50 	bl	8000220 <memchr>
 8009980:	b140      	cbz	r0, 8009994 <_vfiprintf_r+0x198>
 8009982:	2340      	movs	r3, #64	; 0x40
 8009984:	eba0 000a 	sub.w	r0, r0, sl
 8009988:	fa03 f000 	lsl.w	r0, r3, r0
 800998c:	9b04      	ldr	r3, [sp, #16]
 800998e:	4303      	orrs	r3, r0
 8009990:	3401      	adds	r4, #1
 8009992:	9304      	str	r3, [sp, #16]
 8009994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009998:	482c      	ldr	r0, [pc, #176]	; (8009a4c <_vfiprintf_r+0x250>)
 800999a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800999e:	2206      	movs	r2, #6
 80099a0:	f7f6 fc3e 	bl	8000220 <memchr>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d03f      	beq.n	8009a28 <_vfiprintf_r+0x22c>
 80099a8:	4b29      	ldr	r3, [pc, #164]	; (8009a50 <_vfiprintf_r+0x254>)
 80099aa:	bb1b      	cbnz	r3, 80099f4 <_vfiprintf_r+0x1f8>
 80099ac:	9b03      	ldr	r3, [sp, #12]
 80099ae:	3307      	adds	r3, #7
 80099b0:	f023 0307 	bic.w	r3, r3, #7
 80099b4:	3308      	adds	r3, #8
 80099b6:	9303      	str	r3, [sp, #12]
 80099b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ba:	443b      	add	r3, r7
 80099bc:	9309      	str	r3, [sp, #36]	; 0x24
 80099be:	e767      	b.n	8009890 <_vfiprintf_r+0x94>
 80099c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c4:	460c      	mov	r4, r1
 80099c6:	2001      	movs	r0, #1
 80099c8:	e7a5      	b.n	8009916 <_vfiprintf_r+0x11a>
 80099ca:	2300      	movs	r3, #0
 80099cc:	3401      	adds	r4, #1
 80099ce:	9305      	str	r3, [sp, #20]
 80099d0:	4619      	mov	r1, r3
 80099d2:	f04f 0c0a 	mov.w	ip, #10
 80099d6:	4620      	mov	r0, r4
 80099d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099dc:	3a30      	subs	r2, #48	; 0x30
 80099de:	2a09      	cmp	r2, #9
 80099e0:	d903      	bls.n	80099ea <_vfiprintf_r+0x1ee>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0c5      	beq.n	8009972 <_vfiprintf_r+0x176>
 80099e6:	9105      	str	r1, [sp, #20]
 80099e8:	e7c3      	b.n	8009972 <_vfiprintf_r+0x176>
 80099ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ee:	4604      	mov	r4, r0
 80099f0:	2301      	movs	r3, #1
 80099f2:	e7f0      	b.n	80099d6 <_vfiprintf_r+0x1da>
 80099f4:	ab03      	add	r3, sp, #12
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	462a      	mov	r2, r5
 80099fa:	4b16      	ldr	r3, [pc, #88]	; (8009a54 <_vfiprintf_r+0x258>)
 80099fc:	a904      	add	r1, sp, #16
 80099fe:	4630      	mov	r0, r6
 8009a00:	f7fd fd26 	bl	8007450 <_printf_float>
 8009a04:	4607      	mov	r7, r0
 8009a06:	1c78      	adds	r0, r7, #1
 8009a08:	d1d6      	bne.n	80099b8 <_vfiprintf_r+0x1bc>
 8009a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a0c:	07d9      	lsls	r1, r3, #31
 8009a0e:	d405      	bmi.n	8009a1c <_vfiprintf_r+0x220>
 8009a10:	89ab      	ldrh	r3, [r5, #12]
 8009a12:	059a      	lsls	r2, r3, #22
 8009a14:	d402      	bmi.n	8009a1c <_vfiprintf_r+0x220>
 8009a16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a18:	f7fd fbce 	bl	80071b8 <__retarget_lock_release_recursive>
 8009a1c:	89ab      	ldrh	r3, [r5, #12]
 8009a1e:	065b      	lsls	r3, r3, #25
 8009a20:	f53f af12 	bmi.w	8009848 <_vfiprintf_r+0x4c>
 8009a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a26:	e711      	b.n	800984c <_vfiprintf_r+0x50>
 8009a28:	ab03      	add	r3, sp, #12
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	462a      	mov	r2, r5
 8009a2e:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <_vfiprintf_r+0x258>)
 8009a30:	a904      	add	r1, sp, #16
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7fd ffb0 	bl	8007998 <_printf_i>
 8009a38:	e7e4      	b.n	8009a04 <_vfiprintf_r+0x208>
 8009a3a:	bf00      	nop
 8009a3c:	0800afb8 	.word	0x0800afb8
 8009a40:	0800afd8 	.word	0x0800afd8
 8009a44:	0800af98 	.word	0x0800af98
 8009a48:	0800b262 	.word	0x0800b262
 8009a4c:	0800b26c 	.word	0x0800b26c
 8009a50:	08007451 	.word	0x08007451
 8009a54:	080097d7 	.word	0x080097d7
 8009a58:	0800b268 	.word	0x0800b268

08009a5c <__swbuf_r>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	460e      	mov	r6, r1
 8009a60:	4614      	mov	r4, r2
 8009a62:	4605      	mov	r5, r0
 8009a64:	b118      	cbz	r0, 8009a6e <__swbuf_r+0x12>
 8009a66:	6983      	ldr	r3, [r0, #24]
 8009a68:	b90b      	cbnz	r3, 8009a6e <__swbuf_r+0x12>
 8009a6a:	f7fd fae1 	bl	8007030 <__sinit>
 8009a6e:	4b21      	ldr	r3, [pc, #132]	; (8009af4 <__swbuf_r+0x98>)
 8009a70:	429c      	cmp	r4, r3
 8009a72:	d12b      	bne.n	8009acc <__swbuf_r+0x70>
 8009a74:	686c      	ldr	r4, [r5, #4]
 8009a76:	69a3      	ldr	r3, [r4, #24]
 8009a78:	60a3      	str	r3, [r4, #8]
 8009a7a:	89a3      	ldrh	r3, [r4, #12]
 8009a7c:	071a      	lsls	r2, r3, #28
 8009a7e:	d52f      	bpl.n	8009ae0 <__swbuf_r+0x84>
 8009a80:	6923      	ldr	r3, [r4, #16]
 8009a82:	b36b      	cbz	r3, 8009ae0 <__swbuf_r+0x84>
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	6820      	ldr	r0, [r4, #0]
 8009a88:	1ac0      	subs	r0, r0, r3
 8009a8a:	6963      	ldr	r3, [r4, #20]
 8009a8c:	b2f6      	uxtb	r6, r6
 8009a8e:	4283      	cmp	r3, r0
 8009a90:	4637      	mov	r7, r6
 8009a92:	dc04      	bgt.n	8009a9e <__swbuf_r+0x42>
 8009a94:	4621      	mov	r1, r4
 8009a96:	4628      	mov	r0, r5
 8009a98:	f7ff f9c0 	bl	8008e1c <_fflush_r>
 8009a9c:	bb30      	cbnz	r0, 8009aec <__swbuf_r+0x90>
 8009a9e:	68a3      	ldr	r3, [r4, #8]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	60a3      	str	r3, [r4, #8]
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	6022      	str	r2, [r4, #0]
 8009aaa:	701e      	strb	r6, [r3, #0]
 8009aac:	6963      	ldr	r3, [r4, #20]
 8009aae:	3001      	adds	r0, #1
 8009ab0:	4283      	cmp	r3, r0
 8009ab2:	d004      	beq.n	8009abe <__swbuf_r+0x62>
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	07db      	lsls	r3, r3, #31
 8009ab8:	d506      	bpl.n	8009ac8 <__swbuf_r+0x6c>
 8009aba:	2e0a      	cmp	r6, #10
 8009abc:	d104      	bne.n	8009ac8 <__swbuf_r+0x6c>
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f7ff f9ab 	bl	8008e1c <_fflush_r>
 8009ac6:	b988      	cbnz	r0, 8009aec <__swbuf_r+0x90>
 8009ac8:	4638      	mov	r0, r7
 8009aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009acc:	4b0a      	ldr	r3, [pc, #40]	; (8009af8 <__swbuf_r+0x9c>)
 8009ace:	429c      	cmp	r4, r3
 8009ad0:	d101      	bne.n	8009ad6 <__swbuf_r+0x7a>
 8009ad2:	68ac      	ldr	r4, [r5, #8]
 8009ad4:	e7cf      	b.n	8009a76 <__swbuf_r+0x1a>
 8009ad6:	4b09      	ldr	r3, [pc, #36]	; (8009afc <__swbuf_r+0xa0>)
 8009ad8:	429c      	cmp	r4, r3
 8009ada:	bf08      	it	eq
 8009adc:	68ec      	ldreq	r4, [r5, #12]
 8009ade:	e7ca      	b.n	8009a76 <__swbuf_r+0x1a>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 f81a 	bl	8009b1c <__swsetup_r>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d0cb      	beq.n	8009a84 <__swbuf_r+0x28>
 8009aec:	f04f 37ff 	mov.w	r7, #4294967295
 8009af0:	e7ea      	b.n	8009ac8 <__swbuf_r+0x6c>
 8009af2:	bf00      	nop
 8009af4:	0800afb8 	.word	0x0800afb8
 8009af8:	0800afd8 	.word	0x0800afd8
 8009afc:	0800af98 	.word	0x0800af98

08009b00 <__ascii_wctomb>:
 8009b00:	b149      	cbz	r1, 8009b16 <__ascii_wctomb+0x16>
 8009b02:	2aff      	cmp	r2, #255	; 0xff
 8009b04:	bf85      	ittet	hi
 8009b06:	238a      	movhi	r3, #138	; 0x8a
 8009b08:	6003      	strhi	r3, [r0, #0]
 8009b0a:	700a      	strbls	r2, [r1, #0]
 8009b0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b10:	bf98      	it	ls
 8009b12:	2001      	movls	r0, #1
 8009b14:	4770      	bx	lr
 8009b16:	4608      	mov	r0, r1
 8009b18:	4770      	bx	lr
	...

08009b1c <__swsetup_r>:
 8009b1c:	4b32      	ldr	r3, [pc, #200]	; (8009be8 <__swsetup_r+0xcc>)
 8009b1e:	b570      	push	{r4, r5, r6, lr}
 8009b20:	681d      	ldr	r5, [r3, #0]
 8009b22:	4606      	mov	r6, r0
 8009b24:	460c      	mov	r4, r1
 8009b26:	b125      	cbz	r5, 8009b32 <__swsetup_r+0x16>
 8009b28:	69ab      	ldr	r3, [r5, #24]
 8009b2a:	b913      	cbnz	r3, 8009b32 <__swsetup_r+0x16>
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f7fd fa7f 	bl	8007030 <__sinit>
 8009b32:	4b2e      	ldr	r3, [pc, #184]	; (8009bec <__swsetup_r+0xd0>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	d10f      	bne.n	8009b58 <__swsetup_r+0x3c>
 8009b38:	686c      	ldr	r4, [r5, #4]
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b40:	0719      	lsls	r1, r3, #28
 8009b42:	d42c      	bmi.n	8009b9e <__swsetup_r+0x82>
 8009b44:	06dd      	lsls	r5, r3, #27
 8009b46:	d411      	bmi.n	8009b6c <__swsetup_r+0x50>
 8009b48:	2309      	movs	r3, #9
 8009b4a:	6033      	str	r3, [r6, #0]
 8009b4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b50:	81a3      	strh	r3, [r4, #12]
 8009b52:	f04f 30ff 	mov.w	r0, #4294967295
 8009b56:	e03e      	b.n	8009bd6 <__swsetup_r+0xba>
 8009b58:	4b25      	ldr	r3, [pc, #148]	; (8009bf0 <__swsetup_r+0xd4>)
 8009b5a:	429c      	cmp	r4, r3
 8009b5c:	d101      	bne.n	8009b62 <__swsetup_r+0x46>
 8009b5e:	68ac      	ldr	r4, [r5, #8]
 8009b60:	e7eb      	b.n	8009b3a <__swsetup_r+0x1e>
 8009b62:	4b24      	ldr	r3, [pc, #144]	; (8009bf4 <__swsetup_r+0xd8>)
 8009b64:	429c      	cmp	r4, r3
 8009b66:	bf08      	it	eq
 8009b68:	68ec      	ldreq	r4, [r5, #12]
 8009b6a:	e7e6      	b.n	8009b3a <__swsetup_r+0x1e>
 8009b6c:	0758      	lsls	r0, r3, #29
 8009b6e:	d512      	bpl.n	8009b96 <__swsetup_r+0x7a>
 8009b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b72:	b141      	cbz	r1, 8009b86 <__swsetup_r+0x6a>
 8009b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b78:	4299      	cmp	r1, r3
 8009b7a:	d002      	beq.n	8009b82 <__swsetup_r+0x66>
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff fd6b 	bl	8009658 <_free_r>
 8009b82:	2300      	movs	r3, #0
 8009b84:	6363      	str	r3, [r4, #52]	; 0x34
 8009b86:	89a3      	ldrh	r3, [r4, #12]
 8009b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b8c:	81a3      	strh	r3, [r4, #12]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	6063      	str	r3, [r4, #4]
 8009b92:	6923      	ldr	r3, [r4, #16]
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	f043 0308 	orr.w	r3, r3, #8
 8009b9c:	81a3      	strh	r3, [r4, #12]
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	b94b      	cbnz	r3, 8009bb6 <__swsetup_r+0x9a>
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bac:	d003      	beq.n	8009bb6 <__swsetup_r+0x9a>
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f000 f84d 	bl	8009c50 <__smakebuf_r>
 8009bb6:	89a0      	ldrh	r0, [r4, #12]
 8009bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bbc:	f010 0301 	ands.w	r3, r0, #1
 8009bc0:	d00a      	beq.n	8009bd8 <__swsetup_r+0xbc>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60a3      	str	r3, [r4, #8]
 8009bc6:	6963      	ldr	r3, [r4, #20]
 8009bc8:	425b      	negs	r3, r3
 8009bca:	61a3      	str	r3, [r4, #24]
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	b943      	cbnz	r3, 8009be2 <__swsetup_r+0xc6>
 8009bd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bd4:	d1ba      	bne.n	8009b4c <__swsetup_r+0x30>
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}
 8009bd8:	0781      	lsls	r1, r0, #30
 8009bda:	bf58      	it	pl
 8009bdc:	6963      	ldrpl	r3, [r4, #20]
 8009bde:	60a3      	str	r3, [r4, #8]
 8009be0:	e7f4      	b.n	8009bcc <__swsetup_r+0xb0>
 8009be2:	2000      	movs	r0, #0
 8009be4:	e7f7      	b.n	8009bd6 <__swsetup_r+0xba>
 8009be6:	bf00      	nop
 8009be8:	20000014 	.word	0x20000014
 8009bec:	0800afb8 	.word	0x0800afb8
 8009bf0:	0800afd8 	.word	0x0800afd8
 8009bf4:	0800af98 	.word	0x0800af98

08009bf8 <abort>:
 8009bf8:	b508      	push	{r3, lr}
 8009bfa:	2006      	movs	r0, #6
 8009bfc:	f000 f890 	bl	8009d20 <raise>
 8009c00:	2001      	movs	r0, #1
 8009c02:	f7f7 fee3 	bl	80019cc <_exit>

08009c06 <__swhatbuf_r>:
 8009c06:	b570      	push	{r4, r5, r6, lr}
 8009c08:	460e      	mov	r6, r1
 8009c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c0e:	2900      	cmp	r1, #0
 8009c10:	b096      	sub	sp, #88	; 0x58
 8009c12:	4614      	mov	r4, r2
 8009c14:	461d      	mov	r5, r3
 8009c16:	da08      	bge.n	8009c2a <__swhatbuf_r+0x24>
 8009c18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	602a      	str	r2, [r5, #0]
 8009c20:	061a      	lsls	r2, r3, #24
 8009c22:	d410      	bmi.n	8009c46 <__swhatbuf_r+0x40>
 8009c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c28:	e00e      	b.n	8009c48 <__swhatbuf_r+0x42>
 8009c2a:	466a      	mov	r2, sp
 8009c2c:	f000 f894 	bl	8009d58 <_fstat_r>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dbf1      	blt.n	8009c18 <__swhatbuf_r+0x12>
 8009c34:	9a01      	ldr	r2, [sp, #4]
 8009c36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c3e:	425a      	negs	r2, r3
 8009c40:	415a      	adcs	r2, r3
 8009c42:	602a      	str	r2, [r5, #0]
 8009c44:	e7ee      	b.n	8009c24 <__swhatbuf_r+0x1e>
 8009c46:	2340      	movs	r3, #64	; 0x40
 8009c48:	2000      	movs	r0, #0
 8009c4a:	6023      	str	r3, [r4, #0]
 8009c4c:	b016      	add	sp, #88	; 0x58
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}

08009c50 <__smakebuf_r>:
 8009c50:	898b      	ldrh	r3, [r1, #12]
 8009c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c54:	079d      	lsls	r5, r3, #30
 8009c56:	4606      	mov	r6, r0
 8009c58:	460c      	mov	r4, r1
 8009c5a:	d507      	bpl.n	8009c6c <__smakebuf_r+0x1c>
 8009c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	6123      	str	r3, [r4, #16]
 8009c64:	2301      	movs	r3, #1
 8009c66:	6163      	str	r3, [r4, #20]
 8009c68:	b002      	add	sp, #8
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	ab01      	add	r3, sp, #4
 8009c6e:	466a      	mov	r2, sp
 8009c70:	f7ff ffc9 	bl	8009c06 <__swhatbuf_r>
 8009c74:	9900      	ldr	r1, [sp, #0]
 8009c76:	4605      	mov	r5, r0
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f7fd fad5 	bl	8007228 <_malloc_r>
 8009c7e:	b948      	cbnz	r0, 8009c94 <__smakebuf_r+0x44>
 8009c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c84:	059a      	lsls	r2, r3, #22
 8009c86:	d4ef      	bmi.n	8009c68 <__smakebuf_r+0x18>
 8009c88:	f023 0303 	bic.w	r3, r3, #3
 8009c8c:	f043 0302 	orr.w	r3, r3, #2
 8009c90:	81a3      	strh	r3, [r4, #12]
 8009c92:	e7e3      	b.n	8009c5c <__smakebuf_r+0xc>
 8009c94:	4b0d      	ldr	r3, [pc, #52]	; (8009ccc <__smakebuf_r+0x7c>)
 8009c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	6020      	str	r0, [r4, #0]
 8009c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	9b00      	ldr	r3, [sp, #0]
 8009ca4:	6163      	str	r3, [r4, #20]
 8009ca6:	9b01      	ldr	r3, [sp, #4]
 8009ca8:	6120      	str	r0, [r4, #16]
 8009caa:	b15b      	cbz	r3, 8009cc4 <__smakebuf_r+0x74>
 8009cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f000 f863 	bl	8009d7c <_isatty_r>
 8009cb6:	b128      	cbz	r0, 8009cc4 <__smakebuf_r+0x74>
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	f023 0303 	bic.w	r3, r3, #3
 8009cbe:	f043 0301 	orr.w	r3, r3, #1
 8009cc2:	81a3      	strh	r3, [r4, #12]
 8009cc4:	89a0      	ldrh	r0, [r4, #12]
 8009cc6:	4305      	orrs	r5, r0
 8009cc8:	81a5      	strh	r5, [r4, #12]
 8009cca:	e7cd      	b.n	8009c68 <__smakebuf_r+0x18>
 8009ccc:	08006fc9 	.word	0x08006fc9

08009cd0 <_raise_r>:
 8009cd0:	291f      	cmp	r1, #31
 8009cd2:	b538      	push	{r3, r4, r5, lr}
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	460d      	mov	r5, r1
 8009cd8:	d904      	bls.n	8009ce4 <_raise_r+0x14>
 8009cda:	2316      	movs	r3, #22
 8009cdc:	6003      	str	r3, [r0, #0]
 8009cde:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
 8009ce4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ce6:	b112      	cbz	r2, 8009cee <_raise_r+0x1e>
 8009ce8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cec:	b94b      	cbnz	r3, 8009d02 <_raise_r+0x32>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 f830 	bl	8009d54 <_getpid_r>
 8009cf4:	462a      	mov	r2, r5
 8009cf6:	4601      	mov	r1, r0
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cfe:	f000 b817 	b.w	8009d30 <_kill_r>
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d00a      	beq.n	8009d1c <_raise_r+0x4c>
 8009d06:	1c59      	adds	r1, r3, #1
 8009d08:	d103      	bne.n	8009d12 <_raise_r+0x42>
 8009d0a:	2316      	movs	r3, #22
 8009d0c:	6003      	str	r3, [r0, #0]
 8009d0e:	2001      	movs	r0, #1
 8009d10:	e7e7      	b.n	8009ce2 <_raise_r+0x12>
 8009d12:	2400      	movs	r4, #0
 8009d14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d18:	4628      	mov	r0, r5
 8009d1a:	4798      	blx	r3
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	e7e0      	b.n	8009ce2 <_raise_r+0x12>

08009d20 <raise>:
 8009d20:	4b02      	ldr	r3, [pc, #8]	; (8009d2c <raise+0xc>)
 8009d22:	4601      	mov	r1, r0
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	f7ff bfd3 	b.w	8009cd0 <_raise_r>
 8009d2a:	bf00      	nop
 8009d2c:	20000014 	.word	0x20000014

08009d30 <_kill_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4d07      	ldr	r5, [pc, #28]	; (8009d50 <_kill_r+0x20>)
 8009d34:	2300      	movs	r3, #0
 8009d36:	4604      	mov	r4, r0
 8009d38:	4608      	mov	r0, r1
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	602b      	str	r3, [r5, #0]
 8009d3e:	f7f7 fe35 	bl	80019ac <_kill>
 8009d42:	1c43      	adds	r3, r0, #1
 8009d44:	d102      	bne.n	8009d4c <_kill_r+0x1c>
 8009d46:	682b      	ldr	r3, [r5, #0]
 8009d48:	b103      	cbz	r3, 8009d4c <_kill_r+0x1c>
 8009d4a:	6023      	str	r3, [r4, #0]
 8009d4c:	bd38      	pop	{r3, r4, r5, pc}
 8009d4e:	bf00      	nop
 8009d50:	20004d54 	.word	0x20004d54

08009d54 <_getpid_r>:
 8009d54:	f7f7 be22 	b.w	800199c <_getpid>

08009d58 <_fstat_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d07      	ldr	r5, [pc, #28]	; (8009d78 <_fstat_r+0x20>)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	4611      	mov	r1, r2
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	f7f7 fe80 	bl	8001a6a <_fstat>
 8009d6a:	1c43      	adds	r3, r0, #1
 8009d6c:	d102      	bne.n	8009d74 <_fstat_r+0x1c>
 8009d6e:	682b      	ldr	r3, [r5, #0]
 8009d70:	b103      	cbz	r3, 8009d74 <_fstat_r+0x1c>
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	bd38      	pop	{r3, r4, r5, pc}
 8009d76:	bf00      	nop
 8009d78:	20004d54 	.word	0x20004d54

08009d7c <_isatty_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d06      	ldr	r5, [pc, #24]	; (8009d98 <_isatty_r+0x1c>)
 8009d80:	2300      	movs	r3, #0
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	f7f7 fe7f 	bl	8001a8a <_isatty>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d102      	bne.n	8009d96 <_isatty_r+0x1a>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b103      	cbz	r3, 8009d96 <_isatty_r+0x1a>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	20004d54 	.word	0x20004d54
 8009d9c:	00000000 	.word	0x00000000

08009da0 <cos>:
 8009da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009da2:	ec53 2b10 	vmov	r2, r3, d0
 8009da6:	4826      	ldr	r0, [pc, #152]	; (8009e40 <cos+0xa0>)
 8009da8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009dac:	4281      	cmp	r1, r0
 8009dae:	dc06      	bgt.n	8009dbe <cos+0x1e>
 8009db0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009e38 <cos+0x98>
 8009db4:	b005      	add	sp, #20
 8009db6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dba:	f000 baa9 	b.w	800a310 <__kernel_cos>
 8009dbe:	4821      	ldr	r0, [pc, #132]	; (8009e44 <cos+0xa4>)
 8009dc0:	4281      	cmp	r1, r0
 8009dc2:	dd09      	ble.n	8009dd8 <cos+0x38>
 8009dc4:	ee10 0a10 	vmov	r0, s0
 8009dc8:	4619      	mov	r1, r3
 8009dca:	f7f6 fa7d 	bl	80002c8 <__aeabi_dsub>
 8009dce:	ec41 0b10 	vmov	d0, r0, r1
 8009dd2:	b005      	add	sp, #20
 8009dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009dd8:	4668      	mov	r0, sp
 8009dda:	f000 f88d 	bl	8009ef8 <__ieee754_rem_pio2>
 8009dde:	f000 0003 	and.w	r0, r0, #3
 8009de2:	2801      	cmp	r0, #1
 8009de4:	d00b      	beq.n	8009dfe <cos+0x5e>
 8009de6:	2802      	cmp	r0, #2
 8009de8:	d016      	beq.n	8009e18 <cos+0x78>
 8009dea:	b9e0      	cbnz	r0, 8009e26 <cos+0x86>
 8009dec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009df0:	ed9d 0b00 	vldr	d0, [sp]
 8009df4:	f000 fa8c 	bl	800a310 <__kernel_cos>
 8009df8:	ec51 0b10 	vmov	r0, r1, d0
 8009dfc:	e7e7      	b.n	8009dce <cos+0x2e>
 8009dfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e02:	ed9d 0b00 	vldr	d0, [sp]
 8009e06:	f000 fe9b 	bl	800ab40 <__kernel_sin>
 8009e0a:	ec53 2b10 	vmov	r2, r3, d0
 8009e0e:	ee10 0a10 	vmov	r0, s0
 8009e12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009e16:	e7da      	b.n	8009dce <cos+0x2e>
 8009e18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e1c:	ed9d 0b00 	vldr	d0, [sp]
 8009e20:	f000 fa76 	bl	800a310 <__kernel_cos>
 8009e24:	e7f1      	b.n	8009e0a <cos+0x6a>
 8009e26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e2a:	ed9d 0b00 	vldr	d0, [sp]
 8009e2e:	2001      	movs	r0, #1
 8009e30:	f000 fe86 	bl	800ab40 <__kernel_sin>
 8009e34:	e7e0      	b.n	8009df8 <cos+0x58>
 8009e36:	bf00      	nop
	...
 8009e40:	3fe921fb 	.word	0x3fe921fb
 8009e44:	7fefffff 	.word	0x7fefffff

08009e48 <sin>:
 8009e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e4a:	ec53 2b10 	vmov	r2, r3, d0
 8009e4e:	4828      	ldr	r0, [pc, #160]	; (8009ef0 <sin+0xa8>)
 8009e50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e54:	4281      	cmp	r1, r0
 8009e56:	dc07      	bgt.n	8009e68 <sin+0x20>
 8009e58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009ee8 <sin+0xa0>
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	b005      	add	sp, #20
 8009e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e64:	f000 be6c 	b.w	800ab40 <__kernel_sin>
 8009e68:	4822      	ldr	r0, [pc, #136]	; (8009ef4 <sin+0xac>)
 8009e6a:	4281      	cmp	r1, r0
 8009e6c:	dd09      	ble.n	8009e82 <sin+0x3a>
 8009e6e:	ee10 0a10 	vmov	r0, s0
 8009e72:	4619      	mov	r1, r3
 8009e74:	f7f6 fa28 	bl	80002c8 <__aeabi_dsub>
 8009e78:	ec41 0b10 	vmov	d0, r0, r1
 8009e7c:	b005      	add	sp, #20
 8009e7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e82:	4668      	mov	r0, sp
 8009e84:	f000 f838 	bl	8009ef8 <__ieee754_rem_pio2>
 8009e88:	f000 0003 	and.w	r0, r0, #3
 8009e8c:	2801      	cmp	r0, #1
 8009e8e:	d00c      	beq.n	8009eaa <sin+0x62>
 8009e90:	2802      	cmp	r0, #2
 8009e92:	d011      	beq.n	8009eb8 <sin+0x70>
 8009e94:	b9f0      	cbnz	r0, 8009ed4 <sin+0x8c>
 8009e96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e9a:	ed9d 0b00 	vldr	d0, [sp]
 8009e9e:	2001      	movs	r0, #1
 8009ea0:	f000 fe4e 	bl	800ab40 <__kernel_sin>
 8009ea4:	ec51 0b10 	vmov	r0, r1, d0
 8009ea8:	e7e6      	b.n	8009e78 <sin+0x30>
 8009eaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009eae:	ed9d 0b00 	vldr	d0, [sp]
 8009eb2:	f000 fa2d 	bl	800a310 <__kernel_cos>
 8009eb6:	e7f5      	b.n	8009ea4 <sin+0x5c>
 8009eb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ebc:	ed9d 0b00 	vldr	d0, [sp]
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	f000 fe3d 	bl	800ab40 <__kernel_sin>
 8009ec6:	ec53 2b10 	vmov	r2, r3, d0
 8009eca:	ee10 0a10 	vmov	r0, s0
 8009ece:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ed2:	e7d1      	b.n	8009e78 <sin+0x30>
 8009ed4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ed8:	ed9d 0b00 	vldr	d0, [sp]
 8009edc:	f000 fa18 	bl	800a310 <__kernel_cos>
 8009ee0:	e7f1      	b.n	8009ec6 <sin+0x7e>
 8009ee2:	bf00      	nop
 8009ee4:	f3af 8000 	nop.w
	...
 8009ef0:	3fe921fb 	.word	0x3fe921fb
 8009ef4:	7fefffff 	.word	0x7fefffff

08009ef8 <__ieee754_rem_pio2>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	ed2d 8b02 	vpush	{d8}
 8009f00:	ec55 4b10 	vmov	r4, r5, d0
 8009f04:	4bca      	ldr	r3, [pc, #808]	; (800a230 <__ieee754_rem_pio2+0x338>)
 8009f06:	b08b      	sub	sp, #44	; 0x2c
 8009f08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009f0c:	4598      	cmp	r8, r3
 8009f0e:	4682      	mov	sl, r0
 8009f10:	9502      	str	r5, [sp, #8]
 8009f12:	dc08      	bgt.n	8009f26 <__ieee754_rem_pio2+0x2e>
 8009f14:	2200      	movs	r2, #0
 8009f16:	2300      	movs	r3, #0
 8009f18:	ed80 0b00 	vstr	d0, [r0]
 8009f1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009f20:	f04f 0b00 	mov.w	fp, #0
 8009f24:	e028      	b.n	8009f78 <__ieee754_rem_pio2+0x80>
 8009f26:	4bc3      	ldr	r3, [pc, #780]	; (800a234 <__ieee754_rem_pio2+0x33c>)
 8009f28:	4598      	cmp	r8, r3
 8009f2a:	dc78      	bgt.n	800a01e <__ieee754_rem_pio2+0x126>
 8009f2c:	9b02      	ldr	r3, [sp, #8]
 8009f2e:	4ec2      	ldr	r6, [pc, #776]	; (800a238 <__ieee754_rem_pio2+0x340>)
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	ee10 0a10 	vmov	r0, s0
 8009f36:	a3b0      	add	r3, pc, #704	; (adr r3, 800a1f8 <__ieee754_rem_pio2+0x300>)
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	dd39      	ble.n	8009fb4 <__ieee754_rem_pio2+0xbc>
 8009f40:	f7f6 f9c2 	bl	80002c8 <__aeabi_dsub>
 8009f44:	45b0      	cmp	r8, r6
 8009f46:	4604      	mov	r4, r0
 8009f48:	460d      	mov	r5, r1
 8009f4a:	d01b      	beq.n	8009f84 <__ieee754_rem_pio2+0x8c>
 8009f4c:	a3ac      	add	r3, pc, #688	; (adr r3, 800a200 <__ieee754_rem_pio2+0x308>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	f7f6 f9b9 	bl	80002c8 <__aeabi_dsub>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	e9ca 2300 	strd	r2, r3, [sl]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	f7f6 f9b1 	bl	80002c8 <__aeabi_dsub>
 8009f66:	a3a6      	add	r3, pc, #664	; (adr r3, 800a200 <__ieee754_rem_pio2+0x308>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f7f6 f9ac 	bl	80002c8 <__aeabi_dsub>
 8009f70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f74:	f04f 0b01 	mov.w	fp, #1
 8009f78:	4658      	mov	r0, fp
 8009f7a:	b00b      	add	sp, #44	; 0x2c
 8009f7c:	ecbd 8b02 	vpop	{d8}
 8009f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f84:	a3a0      	add	r3, pc, #640	; (adr r3, 800a208 <__ieee754_rem_pio2+0x310>)
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	f7f6 f99d 	bl	80002c8 <__aeabi_dsub>
 8009f8e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a210 <__ieee754_rem_pio2+0x318>)
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	4604      	mov	r4, r0
 8009f96:	460d      	mov	r5, r1
 8009f98:	f7f6 f996 	bl	80002c8 <__aeabi_dsub>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	e9ca 2300 	strd	r2, r3, [sl]
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	f7f6 f98e 	bl	80002c8 <__aeabi_dsub>
 8009fac:	a398      	add	r3, pc, #608	; (adr r3, 800a210 <__ieee754_rem_pio2+0x318>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	e7db      	b.n	8009f6c <__ieee754_rem_pio2+0x74>
 8009fb4:	f7f6 f98a 	bl	80002cc <__adddf3>
 8009fb8:	45b0      	cmp	r8, r6
 8009fba:	4604      	mov	r4, r0
 8009fbc:	460d      	mov	r5, r1
 8009fbe:	d016      	beq.n	8009fee <__ieee754_rem_pio2+0xf6>
 8009fc0:	a38f      	add	r3, pc, #572	; (adr r3, 800a200 <__ieee754_rem_pio2+0x308>)
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	f7f6 f981 	bl	80002cc <__adddf3>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	e9ca 2300 	strd	r2, r3, [sl]
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	f7f6 f977 	bl	80002c8 <__aeabi_dsub>
 8009fda:	a389      	add	r3, pc, #548	; (adr r3, 800a200 <__ieee754_rem_pio2+0x308>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 f974 	bl	80002cc <__adddf3>
 8009fe4:	f04f 3bff 	mov.w	fp, #4294967295
 8009fe8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009fec:	e7c4      	b.n	8009f78 <__ieee754_rem_pio2+0x80>
 8009fee:	a386      	add	r3, pc, #536	; (adr r3, 800a208 <__ieee754_rem_pio2+0x310>)
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	f7f6 f96a 	bl	80002cc <__adddf3>
 8009ff8:	a385      	add	r3, pc, #532	; (adr r3, 800a210 <__ieee754_rem_pio2+0x318>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	4604      	mov	r4, r0
 800a000:	460d      	mov	r5, r1
 800a002:	f7f6 f963 	bl	80002cc <__adddf3>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	e9ca 2300 	strd	r2, r3, [sl]
 800a00e:	4620      	mov	r0, r4
 800a010:	4629      	mov	r1, r5
 800a012:	f7f6 f959 	bl	80002c8 <__aeabi_dsub>
 800a016:	a37e      	add	r3, pc, #504	; (adr r3, 800a210 <__ieee754_rem_pio2+0x318>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	e7e0      	b.n	8009fe0 <__ieee754_rem_pio2+0xe8>
 800a01e:	4b87      	ldr	r3, [pc, #540]	; (800a23c <__ieee754_rem_pio2+0x344>)
 800a020:	4598      	cmp	r8, r3
 800a022:	f300 80d9 	bgt.w	800a1d8 <__ieee754_rem_pio2+0x2e0>
 800a026:	f000 fe49 	bl	800acbc <fabs>
 800a02a:	ec55 4b10 	vmov	r4, r5, d0
 800a02e:	ee10 0a10 	vmov	r0, s0
 800a032:	a379      	add	r3, pc, #484	; (adr r3, 800a218 <__ieee754_rem_pio2+0x320>)
 800a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a038:	4629      	mov	r1, r5
 800a03a:	f7f6 fafd 	bl	8000638 <__aeabi_dmul>
 800a03e:	4b80      	ldr	r3, [pc, #512]	; (800a240 <__ieee754_rem_pio2+0x348>)
 800a040:	2200      	movs	r2, #0
 800a042:	f7f6 f943 	bl	80002cc <__adddf3>
 800a046:	f7f6 fda7 	bl	8000b98 <__aeabi_d2iz>
 800a04a:	4683      	mov	fp, r0
 800a04c:	f7f6 fa8a 	bl	8000564 <__aeabi_i2d>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	ec43 2b18 	vmov	d8, r2, r3
 800a058:	a367      	add	r3, pc, #412	; (adr r3, 800a1f8 <__ieee754_rem_pio2+0x300>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	f7f6 faeb 	bl	8000638 <__aeabi_dmul>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4620      	mov	r0, r4
 800a068:	4629      	mov	r1, r5
 800a06a:	f7f6 f92d 	bl	80002c8 <__aeabi_dsub>
 800a06e:	a364      	add	r3, pc, #400	; (adr r3, 800a200 <__ieee754_rem_pio2+0x308>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	4606      	mov	r6, r0
 800a076:	460f      	mov	r7, r1
 800a078:	ec51 0b18 	vmov	r0, r1, d8
 800a07c:	f7f6 fadc 	bl	8000638 <__aeabi_dmul>
 800a080:	f1bb 0f1f 	cmp.w	fp, #31
 800a084:	4604      	mov	r4, r0
 800a086:	460d      	mov	r5, r1
 800a088:	dc0d      	bgt.n	800a0a6 <__ieee754_rem_pio2+0x1ae>
 800a08a:	4b6e      	ldr	r3, [pc, #440]	; (800a244 <__ieee754_rem_pio2+0x34c>)
 800a08c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a094:	4543      	cmp	r3, r8
 800a096:	d006      	beq.n	800a0a6 <__ieee754_rem_pio2+0x1ae>
 800a098:	4622      	mov	r2, r4
 800a09a:	462b      	mov	r3, r5
 800a09c:	4630      	mov	r0, r6
 800a09e:	4639      	mov	r1, r7
 800a0a0:	f7f6 f912 	bl	80002c8 <__aeabi_dsub>
 800a0a4:	e00f      	b.n	800a0c6 <__ieee754_rem_pio2+0x1ce>
 800a0a6:	462b      	mov	r3, r5
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	f7f6 f90b 	bl	80002c8 <__aeabi_dsub>
 800a0b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a0b6:	9303      	str	r3, [sp, #12]
 800a0b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a0bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a0c0:	f1b8 0f10 	cmp.w	r8, #16
 800a0c4:	dc02      	bgt.n	800a0cc <__ieee754_rem_pio2+0x1d4>
 800a0c6:	e9ca 0100 	strd	r0, r1, [sl]
 800a0ca:	e039      	b.n	800a140 <__ieee754_rem_pio2+0x248>
 800a0cc:	a34e      	add	r3, pc, #312	; (adr r3, 800a208 <__ieee754_rem_pio2+0x310>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	ec51 0b18 	vmov	r0, r1, d8
 800a0d6:	f7f6 faaf 	bl	8000638 <__aeabi_dmul>
 800a0da:	4604      	mov	r4, r0
 800a0dc:	460d      	mov	r5, r1
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	f7f6 f8ef 	bl	80002c8 <__aeabi_dsub>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4680      	mov	r8, r0
 800a0f0:	4689      	mov	r9, r1
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	f7f6 f8e7 	bl	80002c8 <__aeabi_dsub>
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	462b      	mov	r3, r5
 800a0fe:	f7f6 f8e3 	bl	80002c8 <__aeabi_dsub>
 800a102:	a343      	add	r3, pc, #268	; (adr r3, 800a210 <__ieee754_rem_pio2+0x318>)
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	4604      	mov	r4, r0
 800a10a:	460d      	mov	r5, r1
 800a10c:	ec51 0b18 	vmov	r0, r1, d8
 800a110:	f7f6 fa92 	bl	8000638 <__aeabi_dmul>
 800a114:	4622      	mov	r2, r4
 800a116:	462b      	mov	r3, r5
 800a118:	f7f6 f8d6 	bl	80002c8 <__aeabi_dsub>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4604      	mov	r4, r0
 800a122:	460d      	mov	r5, r1
 800a124:	4640      	mov	r0, r8
 800a126:	4649      	mov	r1, r9
 800a128:	f7f6 f8ce 	bl	80002c8 <__aeabi_dsub>
 800a12c:	9a03      	ldr	r2, [sp, #12]
 800a12e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	2b31      	cmp	r3, #49	; 0x31
 800a136:	dc24      	bgt.n	800a182 <__ieee754_rem_pio2+0x28a>
 800a138:	e9ca 0100 	strd	r0, r1, [sl]
 800a13c:	4646      	mov	r6, r8
 800a13e:	464f      	mov	r7, r9
 800a140:	e9da 8900 	ldrd	r8, r9, [sl]
 800a144:	4630      	mov	r0, r6
 800a146:	4642      	mov	r2, r8
 800a148:	464b      	mov	r3, r9
 800a14a:	4639      	mov	r1, r7
 800a14c:	f7f6 f8bc 	bl	80002c8 <__aeabi_dsub>
 800a150:	462b      	mov	r3, r5
 800a152:	4622      	mov	r2, r4
 800a154:	f7f6 f8b8 	bl	80002c8 <__aeabi_dsub>
 800a158:	9b02      	ldr	r3, [sp, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a160:	f6bf af0a 	bge.w	8009f78 <__ieee754_rem_pio2+0x80>
 800a164:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a168:	f8ca 3004 	str.w	r3, [sl, #4]
 800a16c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a170:	f8ca 8000 	str.w	r8, [sl]
 800a174:	f8ca 0008 	str.w	r0, [sl, #8]
 800a178:	f8ca 300c 	str.w	r3, [sl, #12]
 800a17c:	f1cb 0b00 	rsb	fp, fp, #0
 800a180:	e6fa      	b.n	8009f78 <__ieee754_rem_pio2+0x80>
 800a182:	a327      	add	r3, pc, #156	; (adr r3, 800a220 <__ieee754_rem_pio2+0x328>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	ec51 0b18 	vmov	r0, r1, d8
 800a18c:	f7f6 fa54 	bl	8000638 <__aeabi_dmul>
 800a190:	4604      	mov	r4, r0
 800a192:	460d      	mov	r5, r1
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4640      	mov	r0, r8
 800a19a:	4649      	mov	r1, r9
 800a19c:	f7f6 f894 	bl	80002c8 <__aeabi_dsub>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	460f      	mov	r7, r1
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	f7f6 f88c 	bl	80002c8 <__aeabi_dsub>
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	462b      	mov	r3, r5
 800a1b4:	f7f6 f888 	bl	80002c8 <__aeabi_dsub>
 800a1b8:	a31b      	add	r3, pc, #108	; (adr r3, 800a228 <__ieee754_rem_pio2+0x330>)
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	4604      	mov	r4, r0
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	ec51 0b18 	vmov	r0, r1, d8
 800a1c6:	f7f6 fa37 	bl	8000638 <__aeabi_dmul>
 800a1ca:	4622      	mov	r2, r4
 800a1cc:	462b      	mov	r3, r5
 800a1ce:	f7f6 f87b 	bl	80002c8 <__aeabi_dsub>
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	460d      	mov	r5, r1
 800a1d6:	e75f      	b.n	800a098 <__ieee754_rem_pio2+0x1a0>
 800a1d8:	4b1b      	ldr	r3, [pc, #108]	; (800a248 <__ieee754_rem_pio2+0x350>)
 800a1da:	4598      	cmp	r8, r3
 800a1dc:	dd36      	ble.n	800a24c <__ieee754_rem_pio2+0x354>
 800a1de:	ee10 2a10 	vmov	r2, s0
 800a1e2:	462b      	mov	r3, r5
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	f7f6 f86e 	bl	80002c8 <__aeabi_dsub>
 800a1ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a1f0:	e9ca 0100 	strd	r0, r1, [sl]
 800a1f4:	e694      	b.n	8009f20 <__ieee754_rem_pio2+0x28>
 800a1f6:	bf00      	nop
 800a1f8:	54400000 	.word	0x54400000
 800a1fc:	3ff921fb 	.word	0x3ff921fb
 800a200:	1a626331 	.word	0x1a626331
 800a204:	3dd0b461 	.word	0x3dd0b461
 800a208:	1a600000 	.word	0x1a600000
 800a20c:	3dd0b461 	.word	0x3dd0b461
 800a210:	2e037073 	.word	0x2e037073
 800a214:	3ba3198a 	.word	0x3ba3198a
 800a218:	6dc9c883 	.word	0x6dc9c883
 800a21c:	3fe45f30 	.word	0x3fe45f30
 800a220:	2e000000 	.word	0x2e000000
 800a224:	3ba3198a 	.word	0x3ba3198a
 800a228:	252049c1 	.word	0x252049c1
 800a22c:	397b839a 	.word	0x397b839a
 800a230:	3fe921fb 	.word	0x3fe921fb
 800a234:	4002d97b 	.word	0x4002d97b
 800a238:	3ff921fb 	.word	0x3ff921fb
 800a23c:	413921fb 	.word	0x413921fb
 800a240:	3fe00000 	.word	0x3fe00000
 800a244:	0800b374 	.word	0x0800b374
 800a248:	7fefffff 	.word	0x7fefffff
 800a24c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a250:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a254:	ee10 0a10 	vmov	r0, s0
 800a258:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a25c:	ee10 6a10 	vmov	r6, s0
 800a260:	460f      	mov	r7, r1
 800a262:	f7f6 fc99 	bl	8000b98 <__aeabi_d2iz>
 800a266:	f7f6 f97d 	bl	8000564 <__aeabi_i2d>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4630      	mov	r0, r6
 800a270:	4639      	mov	r1, r7
 800a272:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a276:	f7f6 f827 	bl	80002c8 <__aeabi_dsub>
 800a27a:	4b23      	ldr	r3, [pc, #140]	; (800a308 <__ieee754_rem_pio2+0x410>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	f7f6 f9db 	bl	8000638 <__aeabi_dmul>
 800a282:	460f      	mov	r7, r1
 800a284:	4606      	mov	r6, r0
 800a286:	f7f6 fc87 	bl	8000b98 <__aeabi_d2iz>
 800a28a:	f7f6 f96b 	bl	8000564 <__aeabi_i2d>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a29a:	f7f6 f815 	bl	80002c8 <__aeabi_dsub>
 800a29e:	4b1a      	ldr	r3, [pc, #104]	; (800a308 <__ieee754_rem_pio2+0x410>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f7f6 f9c9 	bl	8000638 <__aeabi_dmul>
 800a2a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2aa:	ad04      	add	r5, sp, #16
 800a2ac:	f04f 0803 	mov.w	r8, #3
 800a2b0:	46a9      	mov	r9, r5
 800a2b2:	2600      	movs	r6, #0
 800a2b4:	2700      	movs	r7, #0
 800a2b6:	4632      	mov	r2, r6
 800a2b8:	463b      	mov	r3, r7
 800a2ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a2be:	46c3      	mov	fp, r8
 800a2c0:	3d08      	subs	r5, #8
 800a2c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2c6:	f7f6 fc1f 	bl	8000b08 <__aeabi_dcmpeq>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d1f3      	bne.n	800a2b6 <__ieee754_rem_pio2+0x3be>
 800a2ce:	4b0f      	ldr	r3, [pc, #60]	; (800a30c <__ieee754_rem_pio2+0x414>)
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	465b      	mov	r3, fp
 800a2da:	4651      	mov	r1, sl
 800a2dc:	4648      	mov	r0, r9
 800a2de:	f000 f8df 	bl	800a4a0 <__kernel_rem_pio2>
 800a2e2:	9b02      	ldr	r3, [sp, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	4683      	mov	fp, r0
 800a2e8:	f6bf ae46 	bge.w	8009f78 <__ieee754_rem_pio2+0x80>
 800a2ec:	e9da 2100 	ldrd	r2, r1, [sl]
 800a2f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2f4:	e9ca 2300 	strd	r2, r3, [sl]
 800a2f8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a2fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a300:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a304:	e73a      	b.n	800a17c <__ieee754_rem_pio2+0x284>
 800a306:	bf00      	nop
 800a308:	41700000 	.word	0x41700000
 800a30c:	0800b3f4 	.word	0x0800b3f4

0800a310 <__kernel_cos>:
 800a310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	ec57 6b10 	vmov	r6, r7, d0
 800a318:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a31c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a320:	ed8d 1b00 	vstr	d1, [sp]
 800a324:	da07      	bge.n	800a336 <__kernel_cos+0x26>
 800a326:	ee10 0a10 	vmov	r0, s0
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f6 fc34 	bl	8000b98 <__aeabi_d2iz>
 800a330:	2800      	cmp	r0, #0
 800a332:	f000 8088 	beq.w	800a446 <__kernel_cos+0x136>
 800a336:	4632      	mov	r2, r6
 800a338:	463b      	mov	r3, r7
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f6 f97b 	bl	8000638 <__aeabi_dmul>
 800a342:	4b51      	ldr	r3, [pc, #324]	; (800a488 <__kernel_cos+0x178>)
 800a344:	2200      	movs	r2, #0
 800a346:	4604      	mov	r4, r0
 800a348:	460d      	mov	r5, r1
 800a34a:	f7f6 f975 	bl	8000638 <__aeabi_dmul>
 800a34e:	a340      	add	r3, pc, #256	; (adr r3, 800a450 <__kernel_cos+0x140>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	4682      	mov	sl, r0
 800a356:	468b      	mov	fp, r1
 800a358:	4620      	mov	r0, r4
 800a35a:	4629      	mov	r1, r5
 800a35c:	f7f6 f96c 	bl	8000638 <__aeabi_dmul>
 800a360:	a33d      	add	r3, pc, #244	; (adr r3, 800a458 <__kernel_cos+0x148>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f5 ffb1 	bl	80002cc <__adddf3>
 800a36a:	4622      	mov	r2, r4
 800a36c:	462b      	mov	r3, r5
 800a36e:	f7f6 f963 	bl	8000638 <__aeabi_dmul>
 800a372:	a33b      	add	r3, pc, #236	; (adr r3, 800a460 <__kernel_cos+0x150>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f7f5 ffa6 	bl	80002c8 <__aeabi_dsub>
 800a37c:	4622      	mov	r2, r4
 800a37e:	462b      	mov	r3, r5
 800a380:	f7f6 f95a 	bl	8000638 <__aeabi_dmul>
 800a384:	a338      	add	r3, pc, #224	; (adr r3, 800a468 <__kernel_cos+0x158>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f5 ff9f 	bl	80002cc <__adddf3>
 800a38e:	4622      	mov	r2, r4
 800a390:	462b      	mov	r3, r5
 800a392:	f7f6 f951 	bl	8000638 <__aeabi_dmul>
 800a396:	a336      	add	r3, pc, #216	; (adr r3, 800a470 <__kernel_cos+0x160>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f5 ff94 	bl	80002c8 <__aeabi_dsub>
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	462b      	mov	r3, r5
 800a3a4:	f7f6 f948 	bl	8000638 <__aeabi_dmul>
 800a3a8:	a333      	add	r3, pc, #204	; (adr r3, 800a478 <__kernel_cos+0x168>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	f7f5 ff8d 	bl	80002cc <__adddf3>
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	462b      	mov	r3, r5
 800a3b6:	f7f6 f93f 	bl	8000638 <__aeabi_dmul>
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	462b      	mov	r3, r5
 800a3be:	f7f6 f93b 	bl	8000638 <__aeabi_dmul>
 800a3c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	460d      	mov	r5, r1
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	4639      	mov	r1, r7
 800a3ce:	f7f6 f933 	bl	8000638 <__aeabi_dmul>
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f7f5 ff75 	bl	80002c8 <__aeabi_dsub>
 800a3de:	4b2b      	ldr	r3, [pc, #172]	; (800a48c <__kernel_cos+0x17c>)
 800a3e0:	4598      	cmp	r8, r3
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	460f      	mov	r7, r1
 800a3e6:	dc10      	bgt.n	800a40a <__kernel_cos+0xfa>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4650      	mov	r0, sl
 800a3ee:	4659      	mov	r1, fp
 800a3f0:	f7f5 ff6a 	bl	80002c8 <__aeabi_dsub>
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4926      	ldr	r1, [pc, #152]	; (800a490 <__kernel_cos+0x180>)
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	f7f5 ff64 	bl	80002c8 <__aeabi_dsub>
 800a400:	ec41 0b10 	vmov	d0, r0, r1
 800a404:	b003      	add	sp, #12
 800a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40a:	4b22      	ldr	r3, [pc, #136]	; (800a494 <__kernel_cos+0x184>)
 800a40c:	4920      	ldr	r1, [pc, #128]	; (800a490 <__kernel_cos+0x180>)
 800a40e:	4598      	cmp	r8, r3
 800a410:	bfcc      	ite	gt
 800a412:	4d21      	ldrgt	r5, [pc, #132]	; (800a498 <__kernel_cos+0x188>)
 800a414:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a418:	2400      	movs	r4, #0
 800a41a:	4622      	mov	r2, r4
 800a41c:	462b      	mov	r3, r5
 800a41e:	2000      	movs	r0, #0
 800a420:	f7f5 ff52 	bl	80002c8 <__aeabi_dsub>
 800a424:	4622      	mov	r2, r4
 800a426:	4680      	mov	r8, r0
 800a428:	4689      	mov	r9, r1
 800a42a:	462b      	mov	r3, r5
 800a42c:	4650      	mov	r0, sl
 800a42e:	4659      	mov	r1, fp
 800a430:	f7f5 ff4a 	bl	80002c8 <__aeabi_dsub>
 800a434:	4632      	mov	r2, r6
 800a436:	463b      	mov	r3, r7
 800a438:	f7f5 ff46 	bl	80002c8 <__aeabi_dsub>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4640      	mov	r0, r8
 800a442:	4649      	mov	r1, r9
 800a444:	e7da      	b.n	800a3fc <__kernel_cos+0xec>
 800a446:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a480 <__kernel_cos+0x170>
 800a44a:	e7db      	b.n	800a404 <__kernel_cos+0xf4>
 800a44c:	f3af 8000 	nop.w
 800a450:	be8838d4 	.word	0xbe8838d4
 800a454:	bda8fae9 	.word	0xbda8fae9
 800a458:	bdb4b1c4 	.word	0xbdb4b1c4
 800a45c:	3e21ee9e 	.word	0x3e21ee9e
 800a460:	809c52ad 	.word	0x809c52ad
 800a464:	3e927e4f 	.word	0x3e927e4f
 800a468:	19cb1590 	.word	0x19cb1590
 800a46c:	3efa01a0 	.word	0x3efa01a0
 800a470:	16c15177 	.word	0x16c15177
 800a474:	3f56c16c 	.word	0x3f56c16c
 800a478:	5555554c 	.word	0x5555554c
 800a47c:	3fa55555 	.word	0x3fa55555
 800a480:	00000000 	.word	0x00000000
 800a484:	3ff00000 	.word	0x3ff00000
 800a488:	3fe00000 	.word	0x3fe00000
 800a48c:	3fd33332 	.word	0x3fd33332
 800a490:	3ff00000 	.word	0x3ff00000
 800a494:	3fe90000 	.word	0x3fe90000
 800a498:	3fd20000 	.word	0x3fd20000
 800a49c:	00000000 	.word	0x00000000

0800a4a0 <__kernel_rem_pio2>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	ed2d 8b02 	vpush	{d8}
 800a4a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a4ac:	f112 0f14 	cmn.w	r2, #20
 800a4b0:	9308      	str	r3, [sp, #32]
 800a4b2:	9101      	str	r1, [sp, #4]
 800a4b4:	4bc4      	ldr	r3, [pc, #784]	; (800a7c8 <__kernel_rem_pio2+0x328>)
 800a4b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a4b8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4be:	9302      	str	r3, [sp, #8]
 800a4c0:	9b08      	ldr	r3, [sp, #32]
 800a4c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4c6:	bfa8      	it	ge
 800a4c8:	1ed4      	subge	r4, r2, #3
 800a4ca:	9306      	str	r3, [sp, #24]
 800a4cc:	bfb2      	itee	lt
 800a4ce:	2400      	movlt	r4, #0
 800a4d0:	2318      	movge	r3, #24
 800a4d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800a4d6:	f06f 0317 	mvn.w	r3, #23
 800a4da:	fb04 3303 	mla	r3, r4, r3, r3
 800a4de:	eb03 0a02 	add.w	sl, r3, r2
 800a4e2:	9b02      	ldr	r3, [sp, #8]
 800a4e4:	9a06      	ldr	r2, [sp, #24]
 800a4e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a7b8 <__kernel_rem_pio2+0x318>
 800a4ea:	eb03 0802 	add.w	r8, r3, r2
 800a4ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a4f0:	1aa7      	subs	r7, r4, r2
 800a4f2:	ae22      	add	r6, sp, #136	; 0x88
 800a4f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a4f8:	2500      	movs	r5, #0
 800a4fa:	4545      	cmp	r5, r8
 800a4fc:	dd13      	ble.n	800a526 <__kernel_rem_pio2+0x86>
 800a4fe:	9b08      	ldr	r3, [sp, #32]
 800a500:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a7b8 <__kernel_rem_pio2+0x318>
 800a504:	aa22      	add	r2, sp, #136	; 0x88
 800a506:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a50a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a50e:	f04f 0800 	mov.w	r8, #0
 800a512:	9b02      	ldr	r3, [sp, #8]
 800a514:	4598      	cmp	r8, r3
 800a516:	dc2f      	bgt.n	800a578 <__kernel_rem_pio2+0xd8>
 800a518:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a51c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a520:	462f      	mov	r7, r5
 800a522:	2600      	movs	r6, #0
 800a524:	e01b      	b.n	800a55e <__kernel_rem_pio2+0xbe>
 800a526:	42ef      	cmn	r7, r5
 800a528:	d407      	bmi.n	800a53a <__kernel_rem_pio2+0x9a>
 800a52a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a52e:	f7f6 f819 	bl	8000564 <__aeabi_i2d>
 800a532:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a536:	3501      	adds	r5, #1
 800a538:	e7df      	b.n	800a4fa <__kernel_rem_pio2+0x5a>
 800a53a:	ec51 0b18 	vmov	r0, r1, d8
 800a53e:	e7f8      	b.n	800a532 <__kernel_rem_pio2+0x92>
 800a540:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a544:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a548:	f7f6 f876 	bl	8000638 <__aeabi_dmul>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a554:	f7f5 feba 	bl	80002cc <__adddf3>
 800a558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a55c:	3601      	adds	r6, #1
 800a55e:	9b06      	ldr	r3, [sp, #24]
 800a560:	429e      	cmp	r6, r3
 800a562:	f1a7 0708 	sub.w	r7, r7, #8
 800a566:	ddeb      	ble.n	800a540 <__kernel_rem_pio2+0xa0>
 800a568:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a56c:	f108 0801 	add.w	r8, r8, #1
 800a570:	ecab 7b02 	vstmia	fp!, {d7}
 800a574:	3508      	adds	r5, #8
 800a576:	e7cc      	b.n	800a512 <__kernel_rem_pio2+0x72>
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	aa0e      	add	r2, sp, #56	; 0x38
 800a57c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a580:	930d      	str	r3, [sp, #52]	; 0x34
 800a582:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a584:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a588:	9c02      	ldr	r4, [sp, #8]
 800a58a:	930c      	str	r3, [sp, #48]	; 0x30
 800a58c:	00e3      	lsls	r3, r4, #3
 800a58e:	930a      	str	r3, [sp, #40]	; 0x28
 800a590:	ab9a      	add	r3, sp, #616	; 0x268
 800a592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a596:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a59a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a59e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a5a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a5a4:	46c3      	mov	fp, r8
 800a5a6:	46a1      	mov	r9, r4
 800a5a8:	f1b9 0f00 	cmp.w	r9, #0
 800a5ac:	f1a5 0508 	sub.w	r5, r5, #8
 800a5b0:	dc77      	bgt.n	800a6a2 <__kernel_rem_pio2+0x202>
 800a5b2:	ec47 6b10 	vmov	d0, r6, r7
 800a5b6:	4650      	mov	r0, sl
 800a5b8:	f000 fc0a 	bl	800add0 <scalbn>
 800a5bc:	ec57 6b10 	vmov	r6, r7, d0
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a5c6:	ee10 0a10 	vmov	r0, s0
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	f7f6 f834 	bl	8000638 <__aeabi_dmul>
 800a5d0:	ec41 0b10 	vmov	d0, r0, r1
 800a5d4:	f000 fb7c 	bl	800acd0 <floor>
 800a5d8:	4b7c      	ldr	r3, [pc, #496]	; (800a7cc <__kernel_rem_pio2+0x32c>)
 800a5da:	ec51 0b10 	vmov	r0, r1, d0
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f7f6 f82a 	bl	8000638 <__aeabi_dmul>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	f7f5 fe6c 	bl	80002c8 <__aeabi_dsub>
 800a5f0:	460f      	mov	r7, r1
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	f7f6 fad0 	bl	8000b98 <__aeabi_d2iz>
 800a5f8:	9004      	str	r0, [sp, #16]
 800a5fa:	f7f5 ffb3 	bl	8000564 <__aeabi_i2d>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	4630      	mov	r0, r6
 800a604:	4639      	mov	r1, r7
 800a606:	f7f5 fe5f 	bl	80002c8 <__aeabi_dsub>
 800a60a:	f1ba 0f00 	cmp.w	sl, #0
 800a60e:	4606      	mov	r6, r0
 800a610:	460f      	mov	r7, r1
 800a612:	dd6d      	ble.n	800a6f0 <__kernel_rem_pio2+0x250>
 800a614:	1e62      	subs	r2, r4, #1
 800a616:	ab0e      	add	r3, sp, #56	; 0x38
 800a618:	9d04      	ldr	r5, [sp, #16]
 800a61a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a61e:	f1ca 0118 	rsb	r1, sl, #24
 800a622:	fa40 f301 	asr.w	r3, r0, r1
 800a626:	441d      	add	r5, r3
 800a628:	408b      	lsls	r3, r1
 800a62a:	1ac0      	subs	r0, r0, r3
 800a62c:	ab0e      	add	r3, sp, #56	; 0x38
 800a62e:	9504      	str	r5, [sp, #16]
 800a630:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a634:	f1ca 0317 	rsb	r3, sl, #23
 800a638:	fa40 fb03 	asr.w	fp, r0, r3
 800a63c:	f1bb 0f00 	cmp.w	fp, #0
 800a640:	dd65      	ble.n	800a70e <__kernel_rem_pio2+0x26e>
 800a642:	9b04      	ldr	r3, [sp, #16]
 800a644:	2200      	movs	r2, #0
 800a646:	3301      	adds	r3, #1
 800a648:	9304      	str	r3, [sp, #16]
 800a64a:	4615      	mov	r5, r2
 800a64c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a650:	4294      	cmp	r4, r2
 800a652:	f300 809c 	bgt.w	800a78e <__kernel_rem_pio2+0x2ee>
 800a656:	f1ba 0f00 	cmp.w	sl, #0
 800a65a:	dd07      	ble.n	800a66c <__kernel_rem_pio2+0x1cc>
 800a65c:	f1ba 0f01 	cmp.w	sl, #1
 800a660:	f000 80c0 	beq.w	800a7e4 <__kernel_rem_pio2+0x344>
 800a664:	f1ba 0f02 	cmp.w	sl, #2
 800a668:	f000 80c6 	beq.w	800a7f8 <__kernel_rem_pio2+0x358>
 800a66c:	f1bb 0f02 	cmp.w	fp, #2
 800a670:	d14d      	bne.n	800a70e <__kernel_rem_pio2+0x26e>
 800a672:	4632      	mov	r2, r6
 800a674:	463b      	mov	r3, r7
 800a676:	4956      	ldr	r1, [pc, #344]	; (800a7d0 <__kernel_rem_pio2+0x330>)
 800a678:	2000      	movs	r0, #0
 800a67a:	f7f5 fe25 	bl	80002c8 <__aeabi_dsub>
 800a67e:	4606      	mov	r6, r0
 800a680:	460f      	mov	r7, r1
 800a682:	2d00      	cmp	r5, #0
 800a684:	d043      	beq.n	800a70e <__kernel_rem_pio2+0x26e>
 800a686:	4650      	mov	r0, sl
 800a688:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a7c0 <__kernel_rem_pio2+0x320>
 800a68c:	f000 fba0 	bl	800add0 <scalbn>
 800a690:	4630      	mov	r0, r6
 800a692:	4639      	mov	r1, r7
 800a694:	ec53 2b10 	vmov	r2, r3, d0
 800a698:	f7f5 fe16 	bl	80002c8 <__aeabi_dsub>
 800a69c:	4606      	mov	r6, r0
 800a69e:	460f      	mov	r7, r1
 800a6a0:	e035      	b.n	800a70e <__kernel_rem_pio2+0x26e>
 800a6a2:	4b4c      	ldr	r3, [pc, #304]	; (800a7d4 <__kernel_rem_pio2+0x334>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	f7f5 ffc5 	bl	8000638 <__aeabi_dmul>
 800a6ae:	f7f6 fa73 	bl	8000b98 <__aeabi_d2iz>
 800a6b2:	f7f5 ff57 	bl	8000564 <__aeabi_i2d>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	ec43 2b18 	vmov	d8, r2, r3
 800a6be:	4b46      	ldr	r3, [pc, #280]	; (800a7d8 <__kernel_rem_pio2+0x338>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f7f5 ffb9 	bl	8000638 <__aeabi_dmul>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	f7f5 fdfb 	bl	80002c8 <__aeabi_dsub>
 800a6d2:	f7f6 fa61 	bl	8000b98 <__aeabi_d2iz>
 800a6d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6da:	f84b 0b04 	str.w	r0, [fp], #4
 800a6de:	ec51 0b18 	vmov	r0, r1, d8
 800a6e2:	f7f5 fdf3 	bl	80002cc <__adddf3>
 800a6e6:	f109 39ff 	add.w	r9, r9, #4294967295
 800a6ea:	4606      	mov	r6, r0
 800a6ec:	460f      	mov	r7, r1
 800a6ee:	e75b      	b.n	800a5a8 <__kernel_rem_pio2+0x108>
 800a6f0:	d106      	bne.n	800a700 <__kernel_rem_pio2+0x260>
 800a6f2:	1e63      	subs	r3, r4, #1
 800a6f4:	aa0e      	add	r2, sp, #56	; 0x38
 800a6f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a6fa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a6fe:	e79d      	b.n	800a63c <__kernel_rem_pio2+0x19c>
 800a700:	4b36      	ldr	r3, [pc, #216]	; (800a7dc <__kernel_rem_pio2+0x33c>)
 800a702:	2200      	movs	r2, #0
 800a704:	f7f6 fa1e 	bl	8000b44 <__aeabi_dcmpge>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d13d      	bne.n	800a788 <__kernel_rem_pio2+0x2e8>
 800a70c:	4683      	mov	fp, r0
 800a70e:	2200      	movs	r2, #0
 800a710:	2300      	movs	r3, #0
 800a712:	4630      	mov	r0, r6
 800a714:	4639      	mov	r1, r7
 800a716:	f7f6 f9f7 	bl	8000b08 <__aeabi_dcmpeq>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f000 80c0 	beq.w	800a8a0 <__kernel_rem_pio2+0x400>
 800a720:	1e65      	subs	r5, r4, #1
 800a722:	462b      	mov	r3, r5
 800a724:	2200      	movs	r2, #0
 800a726:	9902      	ldr	r1, [sp, #8]
 800a728:	428b      	cmp	r3, r1
 800a72a:	da6c      	bge.n	800a806 <__kernel_rem_pio2+0x366>
 800a72c:	2a00      	cmp	r2, #0
 800a72e:	f000 8089 	beq.w	800a844 <__kernel_rem_pio2+0x3a4>
 800a732:	ab0e      	add	r3, sp, #56	; 0x38
 800a734:	f1aa 0a18 	sub.w	sl, sl, #24
 800a738:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 80ad 	beq.w	800a89c <__kernel_rem_pio2+0x3fc>
 800a742:	4650      	mov	r0, sl
 800a744:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a7c0 <__kernel_rem_pio2+0x320>
 800a748:	f000 fb42 	bl	800add0 <scalbn>
 800a74c:	ab9a      	add	r3, sp, #616	; 0x268
 800a74e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a752:	ec57 6b10 	vmov	r6, r7, d0
 800a756:	00ec      	lsls	r4, r5, #3
 800a758:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a75c:	46aa      	mov	sl, r5
 800a75e:	f1ba 0f00 	cmp.w	sl, #0
 800a762:	f280 80d6 	bge.w	800a912 <__kernel_rem_pio2+0x472>
 800a766:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a7b8 <__kernel_rem_pio2+0x318>
 800a76a:	462e      	mov	r6, r5
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	f2c0 8104 	blt.w	800a97a <__kernel_rem_pio2+0x4da>
 800a772:	ab72      	add	r3, sp, #456	; 0x1c8
 800a774:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a778:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a7e0 <__kernel_rem_pio2+0x340>
 800a77c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a780:	f04f 0800 	mov.w	r8, #0
 800a784:	1baf      	subs	r7, r5, r6
 800a786:	e0ea      	b.n	800a95e <__kernel_rem_pio2+0x4be>
 800a788:	f04f 0b02 	mov.w	fp, #2
 800a78c:	e759      	b.n	800a642 <__kernel_rem_pio2+0x1a2>
 800a78e:	f8d8 3000 	ldr.w	r3, [r8]
 800a792:	b955      	cbnz	r5, 800a7aa <__kernel_rem_pio2+0x30a>
 800a794:	b123      	cbz	r3, 800a7a0 <__kernel_rem_pio2+0x300>
 800a796:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a79a:	f8c8 3000 	str.w	r3, [r8]
 800a79e:	2301      	movs	r3, #1
 800a7a0:	3201      	adds	r2, #1
 800a7a2:	f108 0804 	add.w	r8, r8, #4
 800a7a6:	461d      	mov	r5, r3
 800a7a8:	e752      	b.n	800a650 <__kernel_rem_pio2+0x1b0>
 800a7aa:	1acb      	subs	r3, r1, r3
 800a7ac:	f8c8 3000 	str.w	r3, [r8]
 800a7b0:	462b      	mov	r3, r5
 800a7b2:	e7f5      	b.n	800a7a0 <__kernel_rem_pio2+0x300>
 800a7b4:	f3af 8000 	nop.w
	...
 800a7c4:	3ff00000 	.word	0x3ff00000
 800a7c8:	0800b540 	.word	0x0800b540
 800a7cc:	40200000 	.word	0x40200000
 800a7d0:	3ff00000 	.word	0x3ff00000
 800a7d4:	3e700000 	.word	0x3e700000
 800a7d8:	41700000 	.word	0x41700000
 800a7dc:	3fe00000 	.word	0x3fe00000
 800a7e0:	0800b500 	.word	0x0800b500
 800a7e4:	1e62      	subs	r2, r4, #1
 800a7e6:	ab0e      	add	r3, sp, #56	; 0x38
 800a7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a7f0:	a90e      	add	r1, sp, #56	; 0x38
 800a7f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a7f6:	e739      	b.n	800a66c <__kernel_rem_pio2+0x1cc>
 800a7f8:	1e62      	subs	r2, r4, #1
 800a7fa:	ab0e      	add	r3, sp, #56	; 0x38
 800a7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a800:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a804:	e7f4      	b.n	800a7f0 <__kernel_rem_pio2+0x350>
 800a806:	a90e      	add	r1, sp, #56	; 0x38
 800a808:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	430a      	orrs	r2, r1
 800a810:	e789      	b.n	800a726 <__kernel_rem_pio2+0x286>
 800a812:	3301      	adds	r3, #1
 800a814:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a818:	2900      	cmp	r1, #0
 800a81a:	d0fa      	beq.n	800a812 <__kernel_rem_pio2+0x372>
 800a81c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a81e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a822:	446a      	add	r2, sp
 800a824:	3a98      	subs	r2, #152	; 0x98
 800a826:	920a      	str	r2, [sp, #40]	; 0x28
 800a828:	9a08      	ldr	r2, [sp, #32]
 800a82a:	18e3      	adds	r3, r4, r3
 800a82c:	18a5      	adds	r5, r4, r2
 800a82e:	aa22      	add	r2, sp, #136	; 0x88
 800a830:	f104 0801 	add.w	r8, r4, #1
 800a834:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a838:	9304      	str	r3, [sp, #16]
 800a83a:	9b04      	ldr	r3, [sp, #16]
 800a83c:	4543      	cmp	r3, r8
 800a83e:	da04      	bge.n	800a84a <__kernel_rem_pio2+0x3aa>
 800a840:	461c      	mov	r4, r3
 800a842:	e6a3      	b.n	800a58c <__kernel_rem_pio2+0xec>
 800a844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a846:	2301      	movs	r3, #1
 800a848:	e7e4      	b.n	800a814 <__kernel_rem_pio2+0x374>
 800a84a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a84c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a850:	f7f5 fe88 	bl	8000564 <__aeabi_i2d>
 800a854:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a85a:	46ab      	mov	fp, r5
 800a85c:	461c      	mov	r4, r3
 800a85e:	f04f 0900 	mov.w	r9, #0
 800a862:	2600      	movs	r6, #0
 800a864:	2700      	movs	r7, #0
 800a866:	9b06      	ldr	r3, [sp, #24]
 800a868:	4599      	cmp	r9, r3
 800a86a:	dd06      	ble.n	800a87a <__kernel_rem_pio2+0x3da>
 800a86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a86e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a872:	f108 0801 	add.w	r8, r8, #1
 800a876:	930a      	str	r3, [sp, #40]	; 0x28
 800a878:	e7df      	b.n	800a83a <__kernel_rem_pio2+0x39a>
 800a87a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a87e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a882:	f7f5 fed9 	bl	8000638 <__aeabi_dmul>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	4630      	mov	r0, r6
 800a88c:	4639      	mov	r1, r7
 800a88e:	f7f5 fd1d 	bl	80002cc <__adddf3>
 800a892:	f109 0901 	add.w	r9, r9, #1
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	e7e4      	b.n	800a866 <__kernel_rem_pio2+0x3c6>
 800a89c:	3d01      	subs	r5, #1
 800a89e:	e748      	b.n	800a732 <__kernel_rem_pio2+0x292>
 800a8a0:	ec47 6b10 	vmov	d0, r6, r7
 800a8a4:	f1ca 0000 	rsb	r0, sl, #0
 800a8a8:	f000 fa92 	bl	800add0 <scalbn>
 800a8ac:	ec57 6b10 	vmov	r6, r7, d0
 800a8b0:	4ba0      	ldr	r3, [pc, #640]	; (800ab34 <__kernel_rem_pio2+0x694>)
 800a8b2:	ee10 0a10 	vmov	r0, s0
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	4639      	mov	r1, r7
 800a8ba:	f7f6 f943 	bl	8000b44 <__aeabi_dcmpge>
 800a8be:	b1f8      	cbz	r0, 800a900 <__kernel_rem_pio2+0x460>
 800a8c0:	4b9d      	ldr	r3, [pc, #628]	; (800ab38 <__kernel_rem_pio2+0x698>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	f7f5 feb6 	bl	8000638 <__aeabi_dmul>
 800a8cc:	f7f6 f964 	bl	8000b98 <__aeabi_d2iz>
 800a8d0:	4680      	mov	r8, r0
 800a8d2:	f7f5 fe47 	bl	8000564 <__aeabi_i2d>
 800a8d6:	4b97      	ldr	r3, [pc, #604]	; (800ab34 <__kernel_rem_pio2+0x694>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f7f5 fead 	bl	8000638 <__aeabi_dmul>
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	f7f5 fcef 	bl	80002c8 <__aeabi_dsub>
 800a8ea:	f7f6 f955 	bl	8000b98 <__aeabi_d2iz>
 800a8ee:	1c65      	adds	r5, r4, #1
 800a8f0:	ab0e      	add	r3, sp, #56	; 0x38
 800a8f2:	f10a 0a18 	add.w	sl, sl, #24
 800a8f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a8fa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a8fe:	e720      	b.n	800a742 <__kernel_rem_pio2+0x2a2>
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f6 f948 	bl	8000b98 <__aeabi_d2iz>
 800a908:	ab0e      	add	r3, sp, #56	; 0x38
 800a90a:	4625      	mov	r5, r4
 800a90c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a910:	e717      	b.n	800a742 <__kernel_rem_pio2+0x2a2>
 800a912:	ab0e      	add	r3, sp, #56	; 0x38
 800a914:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a918:	f7f5 fe24 	bl	8000564 <__aeabi_i2d>
 800a91c:	4632      	mov	r2, r6
 800a91e:	463b      	mov	r3, r7
 800a920:	f7f5 fe8a 	bl	8000638 <__aeabi_dmul>
 800a924:	4b84      	ldr	r3, [pc, #528]	; (800ab38 <__kernel_rem_pio2+0x698>)
 800a926:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a92a:	2200      	movs	r2, #0
 800a92c:	4630      	mov	r0, r6
 800a92e:	4639      	mov	r1, r7
 800a930:	f7f5 fe82 	bl	8000638 <__aeabi_dmul>
 800a934:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a938:	4606      	mov	r6, r0
 800a93a:	460f      	mov	r7, r1
 800a93c:	e70f      	b.n	800a75e <__kernel_rem_pio2+0x2be>
 800a93e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a942:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a946:	f7f5 fe77 	bl	8000638 <__aeabi_dmul>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a952:	f7f5 fcbb 	bl	80002cc <__adddf3>
 800a956:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a95a:	f108 0801 	add.w	r8, r8, #1
 800a95e:	9b02      	ldr	r3, [sp, #8]
 800a960:	4598      	cmp	r8, r3
 800a962:	dc01      	bgt.n	800a968 <__kernel_rem_pio2+0x4c8>
 800a964:	45b8      	cmp	r8, r7
 800a966:	ddea      	ble.n	800a93e <__kernel_rem_pio2+0x49e>
 800a968:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a96c:	ab4a      	add	r3, sp, #296	; 0x128
 800a96e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a972:	ed87 7b00 	vstr	d7, [r7]
 800a976:	3e01      	subs	r6, #1
 800a978:	e6f8      	b.n	800a76c <__kernel_rem_pio2+0x2cc>
 800a97a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	dc0b      	bgt.n	800a998 <__kernel_rem_pio2+0x4f8>
 800a980:	2b00      	cmp	r3, #0
 800a982:	dc35      	bgt.n	800a9f0 <__kernel_rem_pio2+0x550>
 800a984:	d059      	beq.n	800aa3a <__kernel_rem_pio2+0x59a>
 800a986:	9b04      	ldr	r3, [sp, #16]
 800a988:	f003 0007 	and.w	r0, r3, #7
 800a98c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a990:	ecbd 8b02 	vpop	{d8}
 800a994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a998:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d1f3      	bne.n	800a986 <__kernel_rem_pio2+0x4e6>
 800a99e:	ab4a      	add	r3, sp, #296	; 0x128
 800a9a0:	4423      	add	r3, r4
 800a9a2:	9306      	str	r3, [sp, #24]
 800a9a4:	461c      	mov	r4, r3
 800a9a6:	469a      	mov	sl, r3
 800a9a8:	9502      	str	r5, [sp, #8]
 800a9aa:	9b02      	ldr	r3, [sp, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f1aa 0a08 	sub.w	sl, sl, #8
 800a9b2:	dc6b      	bgt.n	800aa8c <__kernel_rem_pio2+0x5ec>
 800a9b4:	46aa      	mov	sl, r5
 800a9b6:	f1ba 0f01 	cmp.w	sl, #1
 800a9ba:	f1a4 0408 	sub.w	r4, r4, #8
 800a9be:	f300 8085 	bgt.w	800aacc <__kernel_rem_pio2+0x62c>
 800a9c2:	9c06      	ldr	r4, [sp, #24]
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	3408      	adds	r4, #8
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	2d01      	cmp	r5, #1
 800a9cc:	f300 809d 	bgt.w	800ab0a <__kernel_rem_pio2+0x66a>
 800a9d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a9d4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a9d8:	f1bb 0f00 	cmp.w	fp, #0
 800a9dc:	f040 809b 	bne.w	800ab16 <__kernel_rem_pio2+0x676>
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	e9c3 5600 	strd	r5, r6, [r3]
 800a9e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a9ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a9ee:	e7ca      	b.n	800a986 <__kernel_rem_pio2+0x4e6>
 800a9f0:	3408      	adds	r4, #8
 800a9f2:	ab4a      	add	r3, sp, #296	; 0x128
 800a9f4:	441c      	add	r4, r3
 800a9f6:	462e      	mov	r6, r5
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	2e00      	cmp	r6, #0
 800a9fe:	da36      	bge.n	800aa6e <__kernel_rem_pio2+0x5ce>
 800aa00:	f1bb 0f00 	cmp.w	fp, #0
 800aa04:	d039      	beq.n	800aa7a <__kernel_rem_pio2+0x5da>
 800aa06:	4602      	mov	r2, r0
 800aa08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa0c:	9c01      	ldr	r4, [sp, #4]
 800aa0e:	e9c4 2300 	strd	r2, r3, [r4]
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800aa1a:	f7f5 fc55 	bl	80002c8 <__aeabi_dsub>
 800aa1e:	ae4c      	add	r6, sp, #304	; 0x130
 800aa20:	2401      	movs	r4, #1
 800aa22:	42a5      	cmp	r5, r4
 800aa24:	da2c      	bge.n	800aa80 <__kernel_rem_pio2+0x5e0>
 800aa26:	f1bb 0f00 	cmp.w	fp, #0
 800aa2a:	d002      	beq.n	800aa32 <__kernel_rem_pio2+0x592>
 800aa2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa30:	4619      	mov	r1, r3
 800aa32:	9b01      	ldr	r3, [sp, #4]
 800aa34:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aa38:	e7a5      	b.n	800a986 <__kernel_rem_pio2+0x4e6>
 800aa3a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800aa3e:	eb0d 0403 	add.w	r4, sp, r3
 800aa42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800aa46:	2000      	movs	r0, #0
 800aa48:	2100      	movs	r1, #0
 800aa4a:	2d00      	cmp	r5, #0
 800aa4c:	da09      	bge.n	800aa62 <__kernel_rem_pio2+0x5c2>
 800aa4e:	f1bb 0f00 	cmp.w	fp, #0
 800aa52:	d002      	beq.n	800aa5a <__kernel_rem_pio2+0x5ba>
 800aa54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa58:	4619      	mov	r1, r3
 800aa5a:	9b01      	ldr	r3, [sp, #4]
 800aa5c:	e9c3 0100 	strd	r0, r1, [r3]
 800aa60:	e791      	b.n	800a986 <__kernel_rem_pio2+0x4e6>
 800aa62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa66:	f7f5 fc31 	bl	80002cc <__adddf3>
 800aa6a:	3d01      	subs	r5, #1
 800aa6c:	e7ed      	b.n	800aa4a <__kernel_rem_pio2+0x5aa>
 800aa6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa72:	f7f5 fc2b 	bl	80002cc <__adddf3>
 800aa76:	3e01      	subs	r6, #1
 800aa78:	e7c0      	b.n	800a9fc <__kernel_rem_pio2+0x55c>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	e7c5      	b.n	800aa0c <__kernel_rem_pio2+0x56c>
 800aa80:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800aa84:	f7f5 fc22 	bl	80002cc <__adddf3>
 800aa88:	3401      	adds	r4, #1
 800aa8a:	e7ca      	b.n	800aa22 <__kernel_rem_pio2+0x582>
 800aa8c:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa90:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800aa94:	9b02      	ldr	r3, [sp, #8]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	9302      	str	r3, [sp, #8]
 800aa9a:	4632      	mov	r2, r6
 800aa9c:	463b      	mov	r3, r7
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	f7f5 fc13 	bl	80002cc <__adddf3>
 800aaa6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	f7f5 fc09 	bl	80002c8 <__aeabi_dsub>
 800aab6:	4632      	mov	r2, r6
 800aab8:	463b      	mov	r3, r7
 800aaba:	f7f5 fc07 	bl	80002cc <__adddf3>
 800aabe:	ed9d 7b08 	vldr	d7, [sp, #32]
 800aac2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aac6:	ed8a 7b00 	vstr	d7, [sl]
 800aaca:	e76e      	b.n	800a9aa <__kernel_rem_pio2+0x50a>
 800aacc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aad0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800aad4:	4640      	mov	r0, r8
 800aad6:	4632      	mov	r2, r6
 800aad8:	463b      	mov	r3, r7
 800aada:	4649      	mov	r1, r9
 800aadc:	f7f5 fbf6 	bl	80002cc <__adddf3>
 800aae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4640      	mov	r0, r8
 800aaea:	4649      	mov	r1, r9
 800aaec:	f7f5 fbec 	bl	80002c8 <__aeabi_dsub>
 800aaf0:	4632      	mov	r2, r6
 800aaf2:	463b      	mov	r3, r7
 800aaf4:	f7f5 fbea 	bl	80002cc <__adddf3>
 800aaf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aafc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab00:	ed84 7b00 	vstr	d7, [r4]
 800ab04:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab08:	e755      	b.n	800a9b6 <__kernel_rem_pio2+0x516>
 800ab0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ab0e:	f7f5 fbdd 	bl	80002cc <__adddf3>
 800ab12:	3d01      	subs	r5, #1
 800ab14:	e759      	b.n	800a9ca <__kernel_rem_pio2+0x52a>
 800ab16:	9b01      	ldr	r3, [sp, #4]
 800ab18:	9a01      	ldr	r2, [sp, #4]
 800ab1a:	601d      	str	r5, [r3, #0]
 800ab1c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ab20:	605c      	str	r4, [r3, #4]
 800ab22:	609f      	str	r7, [r3, #8]
 800ab24:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ab28:	60d3      	str	r3, [r2, #12]
 800ab2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab2e:	6110      	str	r0, [r2, #16]
 800ab30:	6153      	str	r3, [r2, #20]
 800ab32:	e728      	b.n	800a986 <__kernel_rem_pio2+0x4e6>
 800ab34:	41700000 	.word	0x41700000
 800ab38:	3e700000 	.word	0x3e700000
 800ab3c:	00000000 	.word	0x00000000

0800ab40 <__kernel_sin>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	ed2d 8b04 	vpush	{d8-d9}
 800ab48:	eeb0 8a41 	vmov.f32	s16, s2
 800ab4c:	eef0 8a61 	vmov.f32	s17, s3
 800ab50:	ec55 4b10 	vmov	r4, r5, d0
 800ab54:	b083      	sub	sp, #12
 800ab56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab5e:	9001      	str	r0, [sp, #4]
 800ab60:	da06      	bge.n	800ab70 <__kernel_sin+0x30>
 800ab62:	ee10 0a10 	vmov	r0, s0
 800ab66:	4629      	mov	r1, r5
 800ab68:	f7f6 f816 	bl	8000b98 <__aeabi_d2iz>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d051      	beq.n	800ac14 <__kernel_sin+0xd4>
 800ab70:	4622      	mov	r2, r4
 800ab72:	462b      	mov	r3, r5
 800ab74:	4620      	mov	r0, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	f7f5 fd5e 	bl	8000638 <__aeabi_dmul>
 800ab7c:	4682      	mov	sl, r0
 800ab7e:	468b      	mov	fp, r1
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4620      	mov	r0, r4
 800ab86:	4629      	mov	r1, r5
 800ab88:	f7f5 fd56 	bl	8000638 <__aeabi_dmul>
 800ab8c:	a341      	add	r3, pc, #260	; (adr r3, 800ac94 <__kernel_sin+0x154>)
 800ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab92:	4680      	mov	r8, r0
 800ab94:	4689      	mov	r9, r1
 800ab96:	4650      	mov	r0, sl
 800ab98:	4659      	mov	r1, fp
 800ab9a:	f7f5 fd4d 	bl	8000638 <__aeabi_dmul>
 800ab9e:	a33f      	add	r3, pc, #252	; (adr r3, 800ac9c <__kernel_sin+0x15c>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	f7f5 fb90 	bl	80002c8 <__aeabi_dsub>
 800aba8:	4652      	mov	r2, sl
 800abaa:	465b      	mov	r3, fp
 800abac:	f7f5 fd44 	bl	8000638 <__aeabi_dmul>
 800abb0:	a33c      	add	r3, pc, #240	; (adr r3, 800aca4 <__kernel_sin+0x164>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	f7f5 fb89 	bl	80002cc <__adddf3>
 800abba:	4652      	mov	r2, sl
 800abbc:	465b      	mov	r3, fp
 800abbe:	f7f5 fd3b 	bl	8000638 <__aeabi_dmul>
 800abc2:	a33a      	add	r3, pc, #232	; (adr r3, 800acac <__kernel_sin+0x16c>)
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	f7f5 fb7e 	bl	80002c8 <__aeabi_dsub>
 800abcc:	4652      	mov	r2, sl
 800abce:	465b      	mov	r3, fp
 800abd0:	f7f5 fd32 	bl	8000638 <__aeabi_dmul>
 800abd4:	a337      	add	r3, pc, #220	; (adr r3, 800acb4 <__kernel_sin+0x174>)
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	f7f5 fb77 	bl	80002cc <__adddf3>
 800abde:	9b01      	ldr	r3, [sp, #4]
 800abe0:	4606      	mov	r6, r0
 800abe2:	460f      	mov	r7, r1
 800abe4:	b9eb      	cbnz	r3, 800ac22 <__kernel_sin+0xe2>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	4650      	mov	r0, sl
 800abec:	4659      	mov	r1, fp
 800abee:	f7f5 fd23 	bl	8000638 <__aeabi_dmul>
 800abf2:	a325      	add	r3, pc, #148	; (adr r3, 800ac88 <__kernel_sin+0x148>)
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	f7f5 fb66 	bl	80002c8 <__aeabi_dsub>
 800abfc:	4642      	mov	r2, r8
 800abfe:	464b      	mov	r3, r9
 800ac00:	f7f5 fd1a 	bl	8000638 <__aeabi_dmul>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4620      	mov	r0, r4
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	f7f5 fb5e 	bl	80002cc <__adddf3>
 800ac10:	4604      	mov	r4, r0
 800ac12:	460d      	mov	r5, r1
 800ac14:	ec45 4b10 	vmov	d0, r4, r5
 800ac18:	b003      	add	sp, #12
 800ac1a:	ecbd 8b04 	vpop	{d8-d9}
 800ac1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac22:	4b1b      	ldr	r3, [pc, #108]	; (800ac90 <__kernel_sin+0x150>)
 800ac24:	ec51 0b18 	vmov	r0, r1, d8
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f7f5 fd05 	bl	8000638 <__aeabi_dmul>
 800ac2e:	4632      	mov	r2, r6
 800ac30:	ec41 0b19 	vmov	d9, r0, r1
 800ac34:	463b      	mov	r3, r7
 800ac36:	4640      	mov	r0, r8
 800ac38:	4649      	mov	r1, r9
 800ac3a:	f7f5 fcfd 	bl	8000638 <__aeabi_dmul>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	ec51 0b19 	vmov	r0, r1, d9
 800ac46:	f7f5 fb3f 	bl	80002c8 <__aeabi_dsub>
 800ac4a:	4652      	mov	r2, sl
 800ac4c:	465b      	mov	r3, fp
 800ac4e:	f7f5 fcf3 	bl	8000638 <__aeabi_dmul>
 800ac52:	ec53 2b18 	vmov	r2, r3, d8
 800ac56:	f7f5 fb37 	bl	80002c8 <__aeabi_dsub>
 800ac5a:	a30b      	add	r3, pc, #44	; (adr r3, 800ac88 <__kernel_sin+0x148>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	4606      	mov	r6, r0
 800ac62:	460f      	mov	r7, r1
 800ac64:	4640      	mov	r0, r8
 800ac66:	4649      	mov	r1, r9
 800ac68:	f7f5 fce6 	bl	8000638 <__aeabi_dmul>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4630      	mov	r0, r6
 800ac72:	4639      	mov	r1, r7
 800ac74:	f7f5 fb2a 	bl	80002cc <__adddf3>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	4629      	mov	r1, r5
 800ac80:	f7f5 fb22 	bl	80002c8 <__aeabi_dsub>
 800ac84:	e7c4      	b.n	800ac10 <__kernel_sin+0xd0>
 800ac86:	bf00      	nop
 800ac88:	55555549 	.word	0x55555549
 800ac8c:	3fc55555 	.word	0x3fc55555
 800ac90:	3fe00000 	.word	0x3fe00000
 800ac94:	5acfd57c 	.word	0x5acfd57c
 800ac98:	3de5d93a 	.word	0x3de5d93a
 800ac9c:	8a2b9ceb 	.word	0x8a2b9ceb
 800aca0:	3e5ae5e6 	.word	0x3e5ae5e6
 800aca4:	57b1fe7d 	.word	0x57b1fe7d
 800aca8:	3ec71de3 	.word	0x3ec71de3
 800acac:	19c161d5 	.word	0x19c161d5
 800acb0:	3f2a01a0 	.word	0x3f2a01a0
 800acb4:	1110f8a6 	.word	0x1110f8a6
 800acb8:	3f811111 	.word	0x3f811111

0800acbc <fabs>:
 800acbc:	ec51 0b10 	vmov	r0, r1, d0
 800acc0:	ee10 2a10 	vmov	r2, s0
 800acc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acc8:	ec43 2b10 	vmov	d0, r2, r3
 800accc:	4770      	bx	lr
	...

0800acd0 <floor>:
 800acd0:	ec51 0b10 	vmov	r0, r1, d0
 800acd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800acdc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ace0:	2e13      	cmp	r6, #19
 800ace2:	ee10 5a10 	vmov	r5, s0
 800ace6:	ee10 8a10 	vmov	r8, s0
 800acea:	460c      	mov	r4, r1
 800acec:	dc32      	bgt.n	800ad54 <floor+0x84>
 800acee:	2e00      	cmp	r6, #0
 800acf0:	da14      	bge.n	800ad1c <floor+0x4c>
 800acf2:	a333      	add	r3, pc, #204	; (adr r3, 800adc0 <floor+0xf0>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fae8 	bl	80002cc <__adddf3>
 800acfc:	2200      	movs	r2, #0
 800acfe:	2300      	movs	r3, #0
 800ad00:	f7f5 ff2a 	bl	8000b58 <__aeabi_dcmpgt>
 800ad04:	b138      	cbz	r0, 800ad16 <floor+0x46>
 800ad06:	2c00      	cmp	r4, #0
 800ad08:	da57      	bge.n	800adba <floor+0xea>
 800ad0a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ad0e:	431d      	orrs	r5, r3
 800ad10:	d001      	beq.n	800ad16 <floor+0x46>
 800ad12:	4c2d      	ldr	r4, [pc, #180]	; (800adc8 <floor+0xf8>)
 800ad14:	2500      	movs	r5, #0
 800ad16:	4621      	mov	r1, r4
 800ad18:	4628      	mov	r0, r5
 800ad1a:	e025      	b.n	800ad68 <floor+0x98>
 800ad1c:	4f2b      	ldr	r7, [pc, #172]	; (800adcc <floor+0xfc>)
 800ad1e:	4137      	asrs	r7, r6
 800ad20:	ea01 0307 	and.w	r3, r1, r7
 800ad24:	4303      	orrs	r3, r0
 800ad26:	d01f      	beq.n	800ad68 <floor+0x98>
 800ad28:	a325      	add	r3, pc, #148	; (adr r3, 800adc0 <floor+0xf0>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	f7f5 facd 	bl	80002cc <__adddf3>
 800ad32:	2200      	movs	r2, #0
 800ad34:	2300      	movs	r3, #0
 800ad36:	f7f5 ff0f 	bl	8000b58 <__aeabi_dcmpgt>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d0eb      	beq.n	800ad16 <floor+0x46>
 800ad3e:	2c00      	cmp	r4, #0
 800ad40:	bfbe      	ittt	lt
 800ad42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ad46:	fa43 f606 	asrlt.w	r6, r3, r6
 800ad4a:	19a4      	addlt	r4, r4, r6
 800ad4c:	ea24 0407 	bic.w	r4, r4, r7
 800ad50:	2500      	movs	r5, #0
 800ad52:	e7e0      	b.n	800ad16 <floor+0x46>
 800ad54:	2e33      	cmp	r6, #51	; 0x33
 800ad56:	dd0b      	ble.n	800ad70 <floor+0xa0>
 800ad58:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ad5c:	d104      	bne.n	800ad68 <floor+0x98>
 800ad5e:	ee10 2a10 	vmov	r2, s0
 800ad62:	460b      	mov	r3, r1
 800ad64:	f7f5 fab2 	bl	80002cc <__adddf3>
 800ad68:	ec41 0b10 	vmov	d0, r0, r1
 800ad6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad70:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ad74:	f04f 33ff 	mov.w	r3, #4294967295
 800ad78:	fa23 f707 	lsr.w	r7, r3, r7
 800ad7c:	4207      	tst	r7, r0
 800ad7e:	d0f3      	beq.n	800ad68 <floor+0x98>
 800ad80:	a30f      	add	r3, pc, #60	; (adr r3, 800adc0 <floor+0xf0>)
 800ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad86:	f7f5 faa1 	bl	80002cc <__adddf3>
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f7f5 fee3 	bl	8000b58 <__aeabi_dcmpgt>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d0bf      	beq.n	800ad16 <floor+0x46>
 800ad96:	2c00      	cmp	r4, #0
 800ad98:	da02      	bge.n	800ada0 <floor+0xd0>
 800ad9a:	2e14      	cmp	r6, #20
 800ad9c:	d103      	bne.n	800ada6 <floor+0xd6>
 800ad9e:	3401      	adds	r4, #1
 800ada0:	ea25 0507 	bic.w	r5, r5, r7
 800ada4:	e7b7      	b.n	800ad16 <floor+0x46>
 800ada6:	2301      	movs	r3, #1
 800ada8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800adac:	fa03 f606 	lsl.w	r6, r3, r6
 800adb0:	4435      	add	r5, r6
 800adb2:	4545      	cmp	r5, r8
 800adb4:	bf38      	it	cc
 800adb6:	18e4      	addcc	r4, r4, r3
 800adb8:	e7f2      	b.n	800ada0 <floor+0xd0>
 800adba:	2500      	movs	r5, #0
 800adbc:	462c      	mov	r4, r5
 800adbe:	e7aa      	b.n	800ad16 <floor+0x46>
 800adc0:	8800759c 	.word	0x8800759c
 800adc4:	7e37e43c 	.word	0x7e37e43c
 800adc8:	bff00000 	.word	0xbff00000
 800adcc:	000fffff 	.word	0x000fffff

0800add0 <scalbn>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	ec55 4b10 	vmov	r4, r5, d0
 800add6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800adda:	4606      	mov	r6, r0
 800addc:	462b      	mov	r3, r5
 800adde:	b99a      	cbnz	r2, 800ae08 <scalbn+0x38>
 800ade0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ade4:	4323      	orrs	r3, r4
 800ade6:	d036      	beq.n	800ae56 <scalbn+0x86>
 800ade8:	4b39      	ldr	r3, [pc, #228]	; (800aed0 <scalbn+0x100>)
 800adea:	4629      	mov	r1, r5
 800adec:	ee10 0a10 	vmov	r0, s0
 800adf0:	2200      	movs	r2, #0
 800adf2:	f7f5 fc21 	bl	8000638 <__aeabi_dmul>
 800adf6:	4b37      	ldr	r3, [pc, #220]	; (800aed4 <scalbn+0x104>)
 800adf8:	429e      	cmp	r6, r3
 800adfa:	4604      	mov	r4, r0
 800adfc:	460d      	mov	r5, r1
 800adfe:	da10      	bge.n	800ae22 <scalbn+0x52>
 800ae00:	a32b      	add	r3, pc, #172	; (adr r3, 800aeb0 <scalbn+0xe0>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	e03a      	b.n	800ae7e <scalbn+0xae>
 800ae08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ae0c:	428a      	cmp	r2, r1
 800ae0e:	d10c      	bne.n	800ae2a <scalbn+0x5a>
 800ae10:	ee10 2a10 	vmov	r2, s0
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fa58 	bl	80002cc <__adddf3>
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	460d      	mov	r5, r1
 800ae20:	e019      	b.n	800ae56 <scalbn+0x86>
 800ae22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ae26:	460b      	mov	r3, r1
 800ae28:	3a36      	subs	r2, #54	; 0x36
 800ae2a:	4432      	add	r2, r6
 800ae2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ae30:	428a      	cmp	r2, r1
 800ae32:	dd08      	ble.n	800ae46 <scalbn+0x76>
 800ae34:	2d00      	cmp	r5, #0
 800ae36:	a120      	add	r1, pc, #128	; (adr r1, 800aeb8 <scalbn+0xe8>)
 800ae38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae3c:	da1c      	bge.n	800ae78 <scalbn+0xa8>
 800ae3e:	a120      	add	r1, pc, #128	; (adr r1, 800aec0 <scalbn+0xf0>)
 800ae40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae44:	e018      	b.n	800ae78 <scalbn+0xa8>
 800ae46:	2a00      	cmp	r2, #0
 800ae48:	dd08      	ble.n	800ae5c <scalbn+0x8c>
 800ae4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae56:	ec45 4b10 	vmov	d0, r4, r5
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}
 800ae5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ae60:	da19      	bge.n	800ae96 <scalbn+0xc6>
 800ae62:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae66:	429e      	cmp	r6, r3
 800ae68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ae6c:	dd0a      	ble.n	800ae84 <scalbn+0xb4>
 800ae6e:	a112      	add	r1, pc, #72	; (adr r1, 800aeb8 <scalbn+0xe8>)
 800ae70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e2      	bne.n	800ae3e <scalbn+0x6e>
 800ae78:	a30f      	add	r3, pc, #60	; (adr r3, 800aeb8 <scalbn+0xe8>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	f7f5 fbdb 	bl	8000638 <__aeabi_dmul>
 800ae82:	e7cb      	b.n	800ae1c <scalbn+0x4c>
 800ae84:	a10a      	add	r1, pc, #40	; (adr r1, 800aeb0 <scalbn+0xe0>)
 800ae86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0b8      	beq.n	800ae00 <scalbn+0x30>
 800ae8e:	a10e      	add	r1, pc, #56	; (adr r1, 800aec8 <scalbn+0xf8>)
 800ae90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae94:	e7b4      	b.n	800ae00 <scalbn+0x30>
 800ae96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae9a:	3236      	adds	r2, #54	; 0x36
 800ae9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aea0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800aea4:	4620      	mov	r0, r4
 800aea6:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <scalbn+0x108>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	e7e8      	b.n	800ae7e <scalbn+0xae>
 800aeac:	f3af 8000 	nop.w
 800aeb0:	c2f8f359 	.word	0xc2f8f359
 800aeb4:	01a56e1f 	.word	0x01a56e1f
 800aeb8:	8800759c 	.word	0x8800759c
 800aebc:	7e37e43c 	.word	0x7e37e43c
 800aec0:	8800759c 	.word	0x8800759c
 800aec4:	fe37e43c 	.word	0xfe37e43c
 800aec8:	c2f8f359 	.word	0xc2f8f359
 800aecc:	81a56e1f 	.word	0x81a56e1f
 800aed0:	43500000 	.word	0x43500000
 800aed4:	ffff3cb0 	.word	0xffff3cb0
 800aed8:	3c900000 	.word	0x3c900000

0800aedc <_init>:
 800aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aede:	bf00      	nop
 800aee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee2:	bc08      	pop	{r3}
 800aee4:	469e      	mov	lr, r3
 800aee6:	4770      	bx	lr

0800aee8 <_fini>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	bf00      	nop
 800aeec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeee:	bc08      	pop	{r3}
 800aef0:	469e      	mov	lr, r3
 800aef2:	4770      	bx	lr
