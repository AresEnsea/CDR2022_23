
Test OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800625c  0800625c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800625c  0800625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006264  08006264  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800626c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  20000074  080062e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bcc  080062e0  00024bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bc0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a9  00000000  00000000  00039c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0003d110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0003e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032f8  00000000  00000000  0003f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016757  00000000  00000000  00042c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e01  00000000  00000000  00059377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2178  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a0c  00000000  00000000  000e21c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006148 	.word	0x08006148

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006148 	.word	0x08006148

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <send_deftask>:





void send_deftask(float x){
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t data[] = "Hello \t";
 800051e:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <send_deftask+0x40>)
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000528:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t value = (char)x;
 800052c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000534:	edc7 7a00 	vstr	s15, [r7]
 8000538:	783b      	ldrb	r3, [r7, #0]
 800053a:	75fb      	strb	r3, [r7, #23]

	HAL_UART_Transmit(&huart2, value, sizeof(data), 500);
 800053c:	7dfb      	ldrb	r3, [r7, #23]
 800053e:	4619      	mov	r1, r3
 8000540:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000544:	2208      	movs	r2, #8
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <send_deftask+0x44>)
 8000548:	f001 ff7b 	bl	8002442 <HAL_UART_Transmit>
}
 800054c:	bf00      	nop
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	0800617c 	.word	0x0800617c
 8000558:	2000011c 	.word	0x2000011c

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fb32 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f82a 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f928 	bl	80007bc <MX_GPIO_Init>
  MX_TIM5_Init();
 800056c:	f000 f884 	bl	8000678 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000570:	f000 f8d0 	bl	8000714 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000574:	f000 f8f8 	bl	8000768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int true;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000578:	f002 ff6e 	bl	8003458 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of checkDistance */
  checkDistanceHandle = osThreadNew(StartDefaultTask, NULL, &checkDistance_attributes);
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <main+0x48>)
 800057e:	2100      	movs	r1, #0
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <main+0x4c>)
 8000582:	f002 ffb3 	bl	80034ec <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <main+0x50>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800058c:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <main+0x54>)
 800058e:	2100      	movs	r1, #0
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <main+0x58>)
 8000592:	f002 ffab 	bl	80034ec <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <main+0x5c>)
 800059a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f002 ff80 	bl	80034a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <main+0x44>
 80005a2:	bf00      	nop
 80005a4:	0800619c 	.word	0x0800619c
 80005a8:	08000821 	.word	0x08000821
 80005ac:	20000160 	.word	0x20000160
 80005b0:	080061c0 	.word	0x080061c0
 80005b4:	0800085d 	.word	0x0800085d
 80005b8:	20000164 	.word	0x20000164

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fcf2 	bl	8005fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xb4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xb4>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xb4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <SystemClock_Config+0xb8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <SystemClock_Config+0xb8>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <SystemClock_Config+0xb8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f001 f83b 	bl	80016a8 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000638:	f000 f930 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fe14 	bl	8001284 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000662:	f000 f91b 	bl	800089c <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_TIM5_Init+0x94>)
 8000696:	4a1e      	ldr	r2, [pc, #120]	; (8000710 <MX_TIM5_Init+0x98>)
 8000698:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 249;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_TIM5_Init+0x94>)
 800069c:	22f9      	movs	r2, #249	; 0xf9
 800069e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_TIM5_Init+0x94>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_TIM5_Init+0x94>)
 80006a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_TIM5_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_TIM5_Init+0x94>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80006ba:	4814      	ldr	r0, [pc, #80]	; (800070c <MX_TIM5_Init+0x94>)
 80006bc:	f001 fa78 	bl	8001bb0 <HAL_TIM_Base_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f8e9 	bl	800089c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4619      	mov	r1, r3
 80006d6:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_TIM5_Init+0x94>)
 80006d8:	f001 fc10 	bl	8001efc <HAL_TIM_ConfigClockSource>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80006e2:	f000 f8db 	bl	800089c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_TIM5_Init+0x94>)
 80006f4:	f001 fdea 	bl	80022cc <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80006fe:	f000 f8cd 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000090 	.word	0x20000090
 8000710:	40000c00 	.word	0x40000c00

08000714 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART1_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART1_UART_Init+0x4c>)
 800074c:	f001 fe2c 	bl	80023a8 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f8a1 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000d8 	.word	0x200000d8
 8000764:	40011000 	.word	0x40011000

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f001 fe02 	bl	80023a8 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f877 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000011c 	.word	0x2000011c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_GPIO_Init+0x5c>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <MX_GPIO_Init+0x5c>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6313      	str	r3, [r2, #48]	; 0x30
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_GPIO_Init+0x5c>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2120      	movs	r1, #32
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <MX_GPIO_Init+0x60>)
 80007f2:	f000 fd13 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007f6:	2320      	movs	r3, #32
 80007f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_GPIO_Init+0x60>)
 800080c:	f000 fb92 	bl	8000f34 <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000

08000820 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t n = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	75fb      	strb	r3, [r7, #23]
	int dist = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	613b      	str	r3, [r7, #16]
	float angle = 90;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <StartDefaultTask+0x34>)
 8000832:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  n+= 10;
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	330a      	adds	r3, #10
 8000838:	75fb      	strb	r3, [r7, #23]
	  //double * distance = positionRelative(n, dist, angle);
	  if(n > 100) HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	2b64      	cmp	r3, #100	; 0x64
 800083e:	d903      	bls.n	8000848 <StartDefaultTask+0x28>
 8000840:	2120      	movs	r1, #32
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <StartDefaultTask+0x38>)
 8000844:	f000 fd03 	bl	800124e <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084c:	f002 fee0 	bl	8003610 <osDelay>
	  n+= 10;
 8000850:	e7f0      	b.n	8000834 <StartDefaultTask+0x14>
 8000852:	bf00      	nop
 8000854:	42b40000 	.word	0x42b40000
 8000858:	40020000 	.word	0x40020000

0800085c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  send_deftask(12);
 8000864:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8000868:	f7ff fe54 	bl	8000514 <send_deftask>
    osDelay(500);
 800086c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000870:	f002 fece 	bl	8003610 <osDelay>
	  send_deftask(12);
 8000874:	e7f6      	b.n	8000864 <StartTask02+0x8>
	...

08000878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d101      	bne.n	800088e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800088a:	f000 f9bf 	bl	8000c0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40010000 	.word	0x40010000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x54>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_MspInit+0x54>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x54>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_MspInit+0x54>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_MspInit+0x54>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x54>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	210f      	movs	r1, #15
 80008ea:	f06f 0001 	mvn.w	r0, #1
 80008ee:	f000 fa65 	bl	8000dbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0b      	ldr	r2, [pc, #44]	; (800093c <HAL_TIM_Base_MspInit+0x3c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d10d      	bne.n	800092e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_TIM_Base_MspInit+0x40>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a09      	ldr	r2, [pc, #36]	; (8000940 <HAL_TIM_Base_MspInit+0x40>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_TIM_Base_MspInit+0x40>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40000c00 	.word	0x40000c00
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a36      	ldr	r2, [pc, #216]	; (8000a3c <HAL_UART_MspInit+0xf8>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12d      	bne.n	80009c2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a34      	ldr	r2, [pc, #208]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b32      	ldr	r3, [pc, #200]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800099e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b0:	2307      	movs	r3, #7
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4822      	ldr	r0, [pc, #136]	; (8000a44 <HAL_UART_MspInit+0x100>)
 80009bc:	f000 faba 	bl	8000f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c0:	e038      	b.n	8000a34 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <HAL_UART_MspInit+0x104>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d133      	bne.n	8000a34 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a1a      	ldr	r2, [pc, #104]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_UART_MspInit+0xfc>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a04:	230c      	movs	r3, #12
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a14:	2307      	movs	r3, #7
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4809      	ldr	r0, [pc, #36]	; (8000a44 <HAL_UART_MspInit+0x100>)
 8000a20:	f000 fa88 	bl	8000f34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2105      	movs	r1, #5
 8000a28:	2026      	movs	r0, #38	; 0x26
 8000a2a:	f000 f9c7 	bl	8000dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a2e:	2026      	movs	r0, #38	; 0x26
 8000a30:	f000 f9e0 	bl	8000df4 <HAL_NVIC_EnableIRQ>
}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40011000 	.word	0x40011000
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40004400 	.word	0x40004400

08000a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	2019      	movs	r0, #25
 8000a62:	f000 f9ab 	bl	8000dbc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a66:	2019      	movs	r0, #25
 8000a68:	f000 f9c4 	bl	8000df4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <HAL_InitTick+0xa0>)
 8000a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a74:	4a1d      	ldr	r2, [pc, #116]	; (8000aec <HAL_InitTick+0xa0>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <HAL_InitTick+0xa0>)
 8000a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a88:	f107 0210 	add.w	r2, r7, #16
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fdd6 	bl	8001644 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a98:	f000 fdc0 	bl	800161c <HAL_RCC_GetPCLK2Freq>
 8000a9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <HAL_InitTick+0xa4>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	0c9b      	lsrs	r3, r3, #18
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_InitTick+0xa8>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <HAL_InitTick+0xac>)
 8000ab0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_InitTick+0xa8>)
 8000ab4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_InitTick+0xa8>)
 8000abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000abe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_InitTick+0xa8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_InitTick+0xa8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <HAL_InitTick+0xa8>)
 8000ace:	f001 f86f 	bl	8001bb0 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d104      	bne.n	8000ae2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <HAL_InitTick+0xa8>)
 8000ada:	f001 f8b9 	bl	8001c50 <HAL_TIM_Base_Start_IT>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3730      	adds	r7, #48	; 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800
 8000af0:	431bde83 	.word	0x431bde83
 8000af4:	20000168 	.word	0x20000168
 8000af8:	40010000 	.word	0x40010000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <TIM1_UP_IRQHandler+0x10>)
 8000b2e:	f001 f8dd 	bl	8001cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000168 	.word	0x20000168

08000b3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <USART2_IRQHandler+0x10>)
 8000b42:	f001 fd11 	bl	8002568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000011c 	.word	0x2000011c

08000b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b7a:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b90:	4c0b      	ldr	r4, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9e:	f7ff ffd7 	bl	8000b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f005 f9d3 	bl	8005f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba6:	f7ff fcd9 	bl	800055c <main>
  bx  lr    
 8000baa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bb8:	0800626c 	.word	0x0800626c
  ldr r2, =_sbss
 8000bbc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bc0:	20004bcc 	.word	0x20004bcc

08000bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <HAL_Init+0x40>)
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_Init+0x40>)
 8000bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x40>)
 8000bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f8d8 	bl	8000da6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f7ff ff28 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fe54 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023c00 	.word	0x40023c00

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200001b0 	.word	0x200001b0

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200001b0 	.word	0x200001b0

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db0b      	blt.n	8000cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 021f 	and.w	r2, r3, #31
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <__NVIC_EnableIRQ+0x38>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ff4c 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dce:	f7ff ff61 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000dd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	6978      	ldr	r0, [r7, #20]
 8000dda:	f7ff ffb1 	bl	8000d40 <NVIC_EncodePriority>
 8000dde:	4602      	mov	r2, r0
 8000de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff80 	bl	8000cec <__NVIC_SetPriority>
}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff54 	bl	8000cb0 <__NVIC_EnableIRQ>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e1e:	f7ff ff09 	bl	8000c34 <HAL_GetTick>
 8000e22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d008      	beq.n	8000e42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e052      	b.n	8000ee8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0216 	bic.w	r2, r2, #22
 8000e50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	695a      	ldr	r2, [r3, #20]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d103      	bne.n	8000e72 <HAL_DMA_Abort+0x62>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0208 	bic.w	r2, r2, #8
 8000e80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0201 	bic.w	r2, r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e92:	e013      	b.n	8000ebc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e94:	f7ff fece 	bl	8000c34 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	d90c      	bls.n	8000ebc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e015      	b.n	8000ee8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1e4      	bne.n	8000e94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ece:	223f      	movs	r2, #63	; 0x3f
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d004      	beq.n	8000f0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00c      	b.n	8000f28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2205      	movs	r2, #5
 8000f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0201 	bic.w	r2, r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e14d      	b.n	80011ec <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 813c 	bne.w	80011e6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d005      	beq.n	8000f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d130      	bne.n	8000fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 0201 	and.w	r2, r3, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d017      	beq.n	8001024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d123      	bne.n	8001078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0203 	and.w	r2, r3, #3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 8096 	beq.w	80011e6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b51      	ldr	r3, [pc, #324]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b4e      	ldr	r3, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d6:	4a4c      	ldr	r2, [pc, #304]	; (8001208 <HAL_GPIO_Init+0x2d4>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a43      	ldr	r2, [pc, #268]	; (800120c <HAL_GPIO_Init+0x2d8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x1ea>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a42      	ldr	r2, [pc, #264]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x1e6>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a41      	ldr	r2, [pc, #260]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x1e2>
 8001112:	2302      	movs	r3, #2
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x1ec>
 8001116:	2307      	movs	r3, #7
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x1ec>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x1ec>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	; (8001208 <HAL_GPIO_Init+0x2d4>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <HAL_GPIO_Init+0x2e4>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <HAL_GPIO_Init+0x2e4>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <HAL_GPIO_Init+0x2e4>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a22      	ldr	r2, [pc, #136]	; (8001218 <HAL_GPIO_Init+0x2e4>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <HAL_GPIO_Init+0x2e4>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a18      	ldr	r2, [pc, #96]	; (8001218 <HAL_GPIO_Init+0x2e4>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_GPIO_Init+0x2e4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_GPIO_Init+0x2e4>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f aeae 	bls.w	8000f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001260:	887a      	ldrh	r2, [r7, #2]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4013      	ands	r3, r2
 8001266:	041a      	lsls	r2, r3, #16
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43d9      	mvns	r1, r3
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	400b      	ands	r3, r1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0cc      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001298:	4b68      	ldr	r3, [pc, #416]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d90c      	bls.n	80012c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a6:	4b65      	ldr	r3, [pc, #404]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	4b63      	ldr	r3, [pc, #396]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0b8      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d020      	beq.n	800130e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d8:	4b59      	ldr	r3, [pc, #356]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a58      	ldr	r2, [pc, #352]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f0:	4b53      	ldr	r3, [pc, #332]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012fc:	4b50      	ldr	r3, [pc, #320]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	494d      	ldr	r1, [pc, #308]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d044      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d119      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e07f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d003      	beq.n	8001342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800133e:	2b03      	cmp	r3, #3
 8001340:	d107      	bne.n	8001352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001342:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d109      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e06f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e067      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f023 0203 	bic.w	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4934      	ldr	r1, [pc, #208]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	4313      	orrs	r3, r2
 8001372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001374:	f7ff fc5e 	bl	8000c34 <HAL_GetTick>
 8001378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	e00a      	b.n	8001392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800137c:	f7ff fc5a 	bl	8000c34 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f241 3288 	movw	r2, #5000	; 0x1388
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e04f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 020c 	and.w	r2, r3, #12
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d1eb      	bne.n	800137c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d20c      	bcs.n	80013cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e032      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4916      	ldr	r1, [pc, #88]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	490e      	ldr	r1, [pc, #56]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	4313      	orrs	r3, r2
 8001408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800140a:	f000 f821 	bl	8001450 <HAL_RCC_GetSysClockFreq>
 800140e:	4602      	mov	r2, r0
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	490a      	ldr	r1, [pc, #40]	; (8001444 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	5ccb      	ldrb	r3, [r1, r3]
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_ClockConfig+0x1c8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fb0e 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00
 8001440:	40023800 	.word	0x40023800
 8001444:	080061e4 	.word	0x080061e4
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001454:	b090      	sub	sp, #64	; 0x40
 8001456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
 800145c:	2300      	movs	r3, #0
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001460:	2300      	movs	r3, #0
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b08      	cmp	r3, #8
 8001472:	d00d      	beq.n	8001490 <HAL_RCC_GetSysClockFreq+0x40>
 8001474:	2b08      	cmp	r3, #8
 8001476:	f200 80a1 	bhi.w	80015bc <HAL_RCC_GetSysClockFreq+0x16c>
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <HAL_RCC_GetSysClockFreq+0x34>
 800147e:	2b04      	cmp	r3, #4
 8001480:	d003      	beq.n	800148a <HAL_RCC_GetSysClockFreq+0x3a>
 8001482:	e09b      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001484:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001488:	e09b      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800148a:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800148c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800148e:	e098      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001490:	4b4f      	ldr	r3, [pc, #316]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800149a:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d028      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	099b      	lsrs	r3, r3, #6
 80014ac:	2200      	movs	r2, #0
 80014ae:	623b      	str	r3, [r7, #32]
 80014b0:	627a      	str	r2, [r7, #36]	; 0x24
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80014b8:	2100      	movs	r1, #0
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80014bc:	fb03 f201 	mul.w	r2, r3, r1
 80014c0:	2300      	movs	r3, #0
 80014c2:	fb00 f303 	mul.w	r3, r0, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	4a43      	ldr	r2, [pc, #268]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80014ca:	fba0 1202 	umull	r1, r2, r0, r2
 80014ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014d0:	460a      	mov	r2, r1
 80014d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80014d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d6:	4413      	add	r3, r2
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014dc:	2200      	movs	r2, #0
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	61fa      	str	r2, [r7, #28]
 80014e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014ea:	f7fe fe91 	bl	8000210 <__aeabi_uldivmod>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4613      	mov	r3, r2
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014f6:	e053      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f8:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	2200      	movs	r2, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	617a      	str	r2, [r7, #20]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800150a:	f04f 0b00 	mov.w	fp, #0
 800150e:	4652      	mov	r2, sl
 8001510:	465b      	mov	r3, fp
 8001512:	f04f 0000 	mov.w	r0, #0
 8001516:	f04f 0100 	mov.w	r1, #0
 800151a:	0159      	lsls	r1, r3, #5
 800151c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001520:	0150      	lsls	r0, r2, #5
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	ebb2 080a 	subs.w	r8, r2, sl
 800152a:	eb63 090b 	sbc.w	r9, r3, fp
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800153a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800153e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001542:	ebb2 0408 	subs.w	r4, r2, r8
 8001546:	eb63 0509 	sbc.w	r5, r3, r9
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	00eb      	lsls	r3, r5, #3
 8001554:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001558:	00e2      	lsls	r2, r4, #3
 800155a:	4614      	mov	r4, r2
 800155c:	461d      	mov	r5, r3
 800155e:	eb14 030a 	adds.w	r3, r4, sl
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	eb45 030b 	adc.w	r3, r5, fp
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001576:	4629      	mov	r1, r5
 8001578:	028b      	lsls	r3, r1, #10
 800157a:	4621      	mov	r1, r4
 800157c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001580:	4621      	mov	r1, r4
 8001582:	028a      	lsls	r2, r1, #10
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158a:	2200      	movs	r2, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	60fa      	str	r2, [r7, #12]
 8001590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001594:	f7fe fe3c 	bl	8000210 <__aeabi_uldivmod>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4613      	mov	r3, r2
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	0c1b      	lsrs	r3, r3, #16
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	3301      	adds	r3, #1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80015b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015ba:	e002      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3740      	adds	r7, #64	; 0x40
 80015c8:	46bd      	mov	sp, r7
 80015ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	00f42400 	.word	0x00f42400
 80015d8:	017d7840 	.word	0x017d7840

080015dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000000 	.word	0x20000000

080015f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015f8:	f7ff fff0 	bl	80015dc <HAL_RCC_GetHCLKFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	0a9b      	lsrs	r3, r3, #10
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	4903      	ldr	r1, [pc, #12]	; (8001618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	080061f4 	.word	0x080061f4

0800161c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001620:	f7ff ffdc 	bl	80015dc <HAL_RCC_GetHCLKFreq>
 8001624:	4602      	mov	r2, r0
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	0b5b      	lsrs	r3, r3, #13
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	4903      	ldr	r1, [pc, #12]	; (8001640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001632:	5ccb      	ldrb	r3, [r1, r3]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	080061f4 	.word	0x080061f4

08001644 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	220f      	movs	r2, #15
 8001652:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_RCC_GetClockConfig+0x5c>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_RCC_GetClockConfig+0x5c>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <HAL_RCC_GetClockConfig+0x60>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0207 	and.w	r2, r3, #7
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	601a      	str	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40023c00 	.word	0x40023c00

080016a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e273      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d075      	beq.n	80017b2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016c6:	4b88      	ldr	r3, [pc, #544]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d00c      	beq.n	80016ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d2:	4b85      	ldr	r3, [pc, #532]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d112      	bne.n	8001704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016de:	4b82      	ldr	r3, [pc, #520]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ea:	d10b      	bne.n	8001704 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	4b7e      	ldr	r3, [pc, #504]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d05b      	beq.n	80017b0 <HAL_RCC_OscConfig+0x108>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d157      	bne.n	80017b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e24e      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170c:	d106      	bne.n	800171c <HAL_RCC_OscConfig+0x74>
 800170e:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a75      	ldr	r2, [pc, #468]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xb0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x98>
 8001726:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a6f      	ldr	r2, [pc, #444]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6c      	ldr	r2, [pc, #432]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xb0>
 8001740:	4b69      	ldr	r3, [pc, #420]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a68      	ldr	r2, [pc, #416]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a65      	ldr	r2, [pc, #404]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fa68 	bl	8000c34 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fa64 	bl	8000c34 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e213      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xc0>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fa54 	bl	8000c34 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fa50 	bl	8000c34 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1ff      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b51      	ldr	r3, [pc, #324]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0xe8>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017be:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d6:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x152>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1d3      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4937      	ldr	r1, [pc, #220]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_RCC_OscConfig+0x244>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fa09 	bl	8000c34 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fa05 	bl	8000c34 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1b4      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4925      	ldr	r1, [pc, #148]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_OscConfig+0x244>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff f9e8 	bl	8000c34 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff f9e4 	bl	8000c34 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e193      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d036      	beq.n	8001900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d016      	beq.n	80018c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_RCC_OscConfig+0x248>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff f9c8 	bl	8000c34 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff f9c4 	bl	8000c34 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e173      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_OscConfig+0x240>)
 80018bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x200>
 80018c6:	e01b      	b.n	8001900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_OscConfig+0x248>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff f9b1 	bl	8000c34 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d4:	e00e      	b.n	80018f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d6:	f7ff f9ad 	bl	8000c34 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d907      	bls.n	80018f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e15c      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
 80018e8:	40023800 	.word	0x40023800
 80018ec:	42470000 	.word	0x42470000
 80018f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	4b8a      	ldr	r3, [pc, #552]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 80018f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ea      	bne.n	80018d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8097 	beq.w	8001a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001912:	4b83      	ldr	r3, [pc, #524]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10f      	bne.n	800193e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b7f      	ldr	r3, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a7e      	ldr	r2, [pc, #504]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193a:	2301      	movs	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b79      	ldr	r3, [pc, #484]	; (8001b24 <HAL_RCC_OscConfig+0x47c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d118      	bne.n	800197c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x47c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a75      	ldr	r2, [pc, #468]	; (8001b24 <HAL_RCC_OscConfig+0x47c>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7ff f96d 	bl	8000c34 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff f969 	bl	8000c34 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e118      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4b6c      	ldr	r3, [pc, #432]	; (8001b24 <HAL_RCC_OscConfig+0x47c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x2ea>
 8001984:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a65      	ldr	r2, [pc, #404]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
 8001990:	e01c      	b.n	80019cc <HAL_RCC_OscConfig+0x324>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b05      	cmp	r3, #5
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x30c>
 800199a:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a60      	ldr	r2, [pc, #384]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
 80019a6:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a5d      	ldr	r2, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0x324>
 80019b4:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	4a59      	ldr	r2, [pc, #356]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	6713      	str	r3, [r2, #112]	; 0x70
 80019c0:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4a56      	ldr	r2, [pc, #344]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 80019c6:	f023 0304 	bic.w	r3, r3, #4
 80019ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d015      	beq.n	8001a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff f92e 	bl	8000c34 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f92a 	bl	8000c34 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e0d7      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0ee      	beq.n	80019dc <HAL_RCC_OscConfig+0x334>
 80019fe:	e014      	b.n	8001a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7ff f918 	bl	8000c34 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f914 	bl	8000c34 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e0c1      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1e:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ee      	bne.n	8001a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a3a      	ldr	r2, [pc, #232]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80ad 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a46:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d060      	beq.n	8001b14 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d145      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5a:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <HAL_RCC_OscConfig+0x480>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff f8e8 	bl	8000c34 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff f8e4 	bl	8000c34 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e093      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7a:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	019b      	lsls	r3, r3, #6
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	085b      	lsrs	r3, r3, #1
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	061b      	lsls	r3, r3, #24
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	071b      	lsls	r3, r3, #28
 8001ab2:	491b      	ldr	r1, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x480>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff f8b9 	bl	8000c34 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff f8b5 	bl	8000c34 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e064      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x41e>
 8001ae4:	e05c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_RCC_OscConfig+0x480>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f8a2 	bl	8000c34 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f89e 	bl	8000c34 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e04d      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_RCC_OscConfig+0x478>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x44c>
 8001b12:	e045      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e040      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40007000 	.word	0x40007000
 8001b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d030      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d129      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d122      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d119      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	3b01      	subs	r3, #1
 8001b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d10f      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e041      	b.n	8001c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fe92 	bl	8000900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3304      	adds	r3, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f000 fa74 	bl	80020dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d001      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e035      	b.n	8001cd4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <HAL_TIM_Base_Start_IT+0x90>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d009      	beq.n	8001c9e <HAL_TIM_Base_Start_IT+0x4e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <HAL_TIM_Base_Start_IT+0x94>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d004      	beq.n	8001c9e <HAL_TIM_Base_Start_IT+0x4e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <HAL_TIM_Base_Start_IT+0x98>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d111      	bne.n	8001cc2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b06      	cmp	r3, #6
 8001cae:	d010      	beq.n	8001cd2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc0:	e007      	b.n	8001cd2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40000c00 	.word	0x40000c00
 8001ce8:	40014000 	.word	0x40014000

08001cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d122      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d11b      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0202 	mvn.w	r2, #2
 8001d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f9b5 	bl	800209e <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f9a7 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f9b8 	bl	80020b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0204 	mvn.w	r2, #4
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f98b 	bl	800209e <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f97d 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f98e 	bl	80020b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d122      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d11b      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0208 	mvn.w	r2, #8
 8001dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f961 	bl	800209e <HAL_TIM_IC_CaptureCallback>
 8001ddc:	e005      	b.n	8001dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f953 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f964 	bl	80020b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d122      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d11b      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0210 	mvn.w	r2, #16
 8001e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2208      	movs	r2, #8
 8001e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f937 	bl	800209e <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f929 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f93a 	bl	80020b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0201 	mvn.w	r2, #1
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fd04 	bl	8000878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	2b80      	cmp	r3, #128	; 0x80
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e88:	2b80      	cmp	r3, #128	; 0x80
 8001e8a:	d107      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fa7c 	bl	8002394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	2b40      	cmp	r3, #64	; 0x40
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b40      	cmp	r3, #64	; 0x40
 8001eb6:	d107      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8ff 	bl	80020c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	d107      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0220 	mvn.w	r2, #32
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fa46 	bl	8002380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_TIM_ConfigClockSource+0x1c>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e0b4      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x186>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f50:	d03e      	beq.n	8001fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8001f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f56:	f200 8087 	bhi.w	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5e:	f000 8086 	beq.w	800206e <HAL_TIM_ConfigClockSource+0x172>
 8001f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f66:	d87f      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f68:	2b70      	cmp	r3, #112	; 0x70
 8001f6a:	d01a      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0xa6>
 8001f6c:	2b70      	cmp	r3, #112	; 0x70
 8001f6e:	d87b      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f70:	2b60      	cmp	r3, #96	; 0x60
 8001f72:	d050      	beq.n	8002016 <HAL_TIM_ConfigClockSource+0x11a>
 8001f74:	2b60      	cmp	r3, #96	; 0x60
 8001f76:	d877      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f78:	2b50      	cmp	r3, #80	; 0x50
 8001f7a:	d03c      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0xfa>
 8001f7c:	2b50      	cmp	r3, #80	; 0x50
 8001f7e:	d873      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d058      	beq.n	8002036 <HAL_TIM_ConfigClockSource+0x13a>
 8001f84:	2b40      	cmp	r3, #64	; 0x40
 8001f86:	d86f      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f88:	2b30      	cmp	r3, #48	; 0x30
 8001f8a:	d064      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f8c:	2b30      	cmp	r3, #48	; 0x30
 8001f8e:	d86b      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d060      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d867      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05c      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d05a      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001fa0:	e062      	b.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f000 f96b 	bl	800228c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	609a      	str	r2, [r3, #8]
      break;
 8001fce:	e04f      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6899      	ldr	r1, [r3, #8]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f000 f954 	bl	800228c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ff2:	609a      	str	r2, [r3, #8]
      break;
 8001ff4:	e03c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6859      	ldr	r1, [r3, #4]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	461a      	mov	r2, r3
 8002004:	f000 f8c8 	bl	8002198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2150      	movs	r1, #80	; 0x50
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f921 	bl	8002256 <TIM_ITRx_SetConfig>
      break;
 8002014:	e02c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	461a      	mov	r2, r3
 8002024:	f000 f8e7 	bl	80021f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2160      	movs	r1, #96	; 0x60
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f911 	bl	8002256 <TIM_ITRx_SetConfig>
      break;
 8002034:	e01c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	461a      	mov	r2, r3
 8002044:	f000 f8a8 	bl	8002198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2140      	movs	r1, #64	; 0x40
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f901 	bl	8002256 <TIM_ITRx_SetConfig>
      break;
 8002054:	e00c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f000 f8f8 	bl	8002256 <TIM_ITRx_SetConfig>
      break;
 8002066:	e003      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      break;
 800206c:	e000      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800206e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a26      	ldr	r2, [pc, #152]	; (8002188 <TIM_Base_SetConfig+0xac>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0x20>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a25      	ldr	r2, [pc, #148]	; (800218c <TIM_Base_SetConfig+0xb0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d108      	bne.n	800210e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <TIM_Base_SetConfig+0xac>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00b      	beq.n	800212e <TIM_Base_SetConfig+0x52>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1c      	ldr	r2, [pc, #112]	; (800218c <TIM_Base_SetConfig+0xb0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <TIM_Base_SetConfig+0x52>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <TIM_Base_SetConfig+0xb4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d003      	beq.n	800212e <TIM_Base_SetConfig+0x52>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <TIM_Base_SetConfig+0xb8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d108      	bne.n	8002140 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <TIM_Base_SetConfig+0xac>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d103      	bne.n	8002174 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	615a      	str	r2, [r3, #20]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40010000 	.word	0x40010000
 800218c:	40000c00 	.word	0x40000c00
 8002190:	40014000 	.word	0x40014000
 8002194:	40014800 	.word	0x40014800

08002198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	f023 0201 	bic.w	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 030a 	bic.w	r3, r3, #10
 80021d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	621a      	str	r2, [r3, #32]
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b087      	sub	sp, #28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f023 0210 	bic.w	r2, r3, #16
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	031b      	lsls	r3, r3, #12
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	621a      	str	r2, [r3, #32]
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	f043 0307 	orr.w	r3, r3, #7
 8002278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	021a      	lsls	r2, r3, #8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e041      	b.n	8002368 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a14      	ldr	r2, [pc, #80]	; (8002374 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a12      	ldr	r2, [pc, #72]	; (8002378 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d004      	beq.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a11      	ldr	r2, [pc, #68]	; (800237c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d10c      	bne.n	8002356 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002342:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	4313      	orrs	r3, r2
 800234c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40010000 	.word	0x40010000
 8002378:	40000c00 	.word	0x40000c00
 800237c:	40014000 	.word	0x40014000

08002380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e03f      	b.n	800243a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fab8 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2224      	movs	r2, #36	; 0x24
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fd7b 	bl	8002ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b08a      	sub	sp, #40	; 0x28
 8002446:	af02      	add	r7, sp, #8
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b20      	cmp	r3, #32
 8002460:	d17c      	bne.n	800255c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_UART_Transmit+0x2c>
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e075      	b.n	800255e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_UART_Transmit+0x3e>
 800247c:	2302      	movs	r3, #2
 800247e:	e06e      	b.n	800255e <HAL_UART_Transmit+0x11c>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2221      	movs	r2, #33	; 0x21
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002496:	f7fe fbcd 	bl	8000c34 <HAL_GetTick>
 800249a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	88fa      	ldrh	r2, [r7, #6]
 80024a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	88fa      	ldrh	r2, [r7, #6]
 80024a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b0:	d108      	bne.n	80024c4 <HAL_UART_Transmit+0x82>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d104      	bne.n	80024c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	e003      	b.n	80024cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024d4:	e02a      	b.n	800252c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	2180      	movs	r1, #128	; 0x80
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 faf9 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e036      	b.n	800255e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10b      	bne.n	800250e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	3302      	adds	r3, #2
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	e007      	b.n	800251e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3301      	adds	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1cf      	bne.n	80024d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2200      	movs	r2, #0
 800253e:	2140      	movs	r1, #64	; 0x40
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fac9 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e006      	b.n	800255e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b0ba      	sub	sp, #232	; 0xe8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800259a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_UART_IRQHandler+0x66>
 80025ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fbd3 	bl	8002d72 <UART_Receive_IT>
      return;
 80025cc:	e256      	b.n	8002a7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80de 	beq.w	8002794 <HAL_UART_IRQHandler+0x22c>
 80025d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d106      	bne.n	80025f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80d1 	beq.w	8002794 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_UART_IRQHandler+0xae>
 80025fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_UART_IRQHandler+0xd2>
 8002622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f043 0202 	orr.w	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800263a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_UART_IRQHandler+0xf6>
 8002646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f043 0204 	orr.w	r2, r3, #4
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800265e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d011      	beq.n	800268e <HAL_UART_IRQHandler+0x126>
 800266a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f043 0208 	orr.w	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 81ed 	beq.w	8002a72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_UART_IRQHandler+0x14e>
 80026a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fb5e 	bl	8002d72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <HAL_UART_IRQHandler+0x17a>
 80026da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d04f      	beq.n	8002782 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fa66 	bl	8002bb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d141      	bne.n	800277a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3314      	adds	r3, #20
 80026fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002704:	e853 3f00 	ldrex	r3, [r3]
 8002708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800270c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3314      	adds	r3, #20
 800271e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002722:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800272e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800273a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1d9      	bne.n	80026f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	2b00      	cmp	r3, #0
 8002748:	d013      	beq.n	8002772 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	4a7d      	ldr	r2, [pc, #500]	; (8002944 <HAL_UART_IRQHandler+0x3dc>)
 8002750:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fbca 	bl	8000ef0 <HAL_DMA_Abort_IT>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800276c:	4610      	mov	r0, r2
 800276e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002770:	e00e      	b.n	8002790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f99a 	bl	8002aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002778:	e00a      	b.n	8002790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f996 	bl	8002aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002780:	e006      	b.n	8002790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f992 	bl	8002aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800278e:	e170      	b.n	8002a72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002790:	bf00      	nop
    return;
 8002792:	e16e      	b.n	8002a72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	2b01      	cmp	r3, #1
 800279a:	f040 814a 	bne.w	8002a32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800279e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8143 	beq.w	8002a32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 813c 	beq.w	8002a32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	f040 80b4 	bne.w	8002948 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8140 	beq.w	8002a76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027fe:	429a      	cmp	r2, r3
 8002800:	f080 8139 	bcs.w	8002a76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800280a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002816:	f000 8088 	beq.w	800292a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	330c      	adds	r3, #12
 8002820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002828:	e853 3f00 	ldrex	r3, [r3]
 800282c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002846:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800284a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002852:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002856:	e841 2300 	strex	r3, r2, [r1]
 800285a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800285e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1d9      	bne.n	800281a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3314      	adds	r3, #20
 800286c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002870:	e853 3f00 	ldrex	r3, [r3]
 8002874:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3314      	adds	r3, #20
 8002886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800288a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800288e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002890:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002892:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800289c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e1      	bne.n	8002866 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3314      	adds	r3, #20
 80028a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3314      	adds	r3, #20
 80028c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e3      	bne.n	80028a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fa:	f023 0310 	bic.w	r3, r3, #16
 80028fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	330c      	adds	r3, #12
 8002908:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800290c:	65ba      	str	r2, [r7, #88]	; 0x58
 800290e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002910:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002912:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002914:	e841 2300 	strex	r3, r2, [r1]
 8002918:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800291a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e3      	bne.n	80028e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fa73 	bl	8000e10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002932:	b29b      	uxth	r3, r3
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	b29b      	uxth	r3, r3
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8c0 	bl	8002ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002940:	e099      	b.n	8002a76 <HAL_UART_IRQHandler+0x50e>
 8002942:	bf00      	nop
 8002944:	08002c7b 	.word	0x08002c7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002950:	b29b      	uxth	r3, r3
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 808b 	beq.w	8002a7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8086 	beq.w	8002a7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800297e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002984:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002992:	647a      	str	r2, [r7, #68]	; 0x44
 8002994:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002996:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800299a:	e841 2300 	strex	r3, r2, [r1]
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e3      	bne.n	800296e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3314      	adds	r3, #20
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	623b      	str	r3, [r7, #32]
   return(result);
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3314      	adds	r3, #20
 80029c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029ca:	633a      	str	r2, [r7, #48]	; 0x30
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e3      	bne.n	80029a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	330c      	adds	r3, #12
 80029f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	e853 3f00 	ldrex	r3, [r3]
 80029fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0310 	bic.w	r3, r3, #16
 8002a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	330c      	adds	r3, #12
 8002a0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a10:	61fa      	str	r2, [r7, #28]
 8002a12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	69b9      	ldr	r1, [r7, #24]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e3      	bne.n	80029ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f848 	bl	8002ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a30:	e023      	b.n	8002a7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_UART_IRQHandler+0x4ea>
 8002a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f929 	bl	8002ca2 <UART_Transmit_IT>
    return;
 8002a50:	e014      	b.n	8002a7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00e      	beq.n	8002a7c <HAL_UART_IRQHandler+0x514>
 8002a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f969 	bl	8002d42 <UART_EndTransmit_IT>
    return;
 8002a70:	e004      	b.n	8002a7c <HAL_UART_IRQHandler+0x514>
    return;
 8002a72:	bf00      	nop
 8002a74:	e002      	b.n	8002a7c <HAL_UART_IRQHandler+0x514>
      return;
 8002a76:	bf00      	nop
 8002a78:	e000      	b.n	8002a7c <HAL_UART_IRQHandler+0x514>
      return;
 8002a7a:	bf00      	nop
  }
}
 8002a7c:	37e8      	adds	r7, #232	; 0xe8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop

08002a84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b090      	sub	sp, #64	; 0x40
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae8:	e050      	b.n	8002b8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d04c      	beq.n	8002b8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002af8:	f7fe f89c 	bl	8000c34 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d241      	bcs.n	8002b8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	e853 3f00 	ldrex	r3, [r3]
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b28:	637a      	str	r2, [r7, #52]	; 0x34
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b30:	e841 2300 	strex	r3, r2, [r1]
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e5      	bne.n	8002b08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3314      	adds	r3, #20
 8002b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	e853 3f00 	ldrex	r3, [r3]
 8002b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3314      	adds	r3, #20
 8002b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b5c:	623a      	str	r2, [r7, #32]
 8002b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b60:	69f9      	ldr	r1, [r7, #28]
 8002b62:	6a3a      	ldr	r2, [r7, #32]
 8002b64:	e841 2300 	strex	r3, r2, [r1]
 8002b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e5      	bne.n	8002b3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e00f      	b.n	8002bac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4013      	ands	r3, r2
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d09f      	beq.n	8002aea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3740      	adds	r7, #64	; 0x40
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b095      	sub	sp, #84	; 0x54
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bdc:	643a      	str	r2, [r7, #64]	; 0x40
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e5      	bne.n	8002bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3314      	adds	r3, #20
 8002bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3314      	adds	r3, #20
 8002c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c18:	e841 2300 	strex	r3, r2, [r1]
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e5      	bne.n	8002bf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d119      	bne.n	8002c60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f023 0310 	bic.w	r3, r3, #16
 8002c42:	647b      	str	r3, [r7, #68]	; 0x44
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c4c:	61ba      	str	r2, [r7, #24]
 8002c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	613b      	str	r3, [r7, #16]
   return(result);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e5      	bne.n	8002c2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c6e:	bf00      	nop
 8002c70:	3754      	adds	r7, #84	; 0x54
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff ff09 	bl	8002aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b21      	cmp	r3, #33	; 0x21
 8002cb4:	d13e      	bne.n	8002d34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbe:	d114      	bne.n	8002cea <UART_Transmit_IT+0x48>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d110      	bne.n	8002cea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cdc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	1c9a      	adds	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	621a      	str	r2, [r3, #32]
 8002ce8:	e008      	b.n	8002cfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	1c59      	adds	r1, r3, #1
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6211      	str	r1, [r2, #32]
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10f      	bne.n	8002d30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fe8e 	bl	8002a84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b08c      	sub	sp, #48	; 0x30
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b22      	cmp	r3, #34	; 0x22
 8002d84:	f040 80ab 	bne.w	8002ede <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d90:	d117      	bne.n	8002dc2 <UART_Receive_IT+0x50>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d113      	bne.n	8002dc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	1c9a      	adds	r2, r3, #2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8002dc0:	e026      	b.n	8002e10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd4:	d007      	beq.n	8002de6 <UART_Receive_IT+0x74>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <UART_Receive_IT+0x82>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e008      	b.n	8002e06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d15a      	bne.n	8002eda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0220 	bic.w	r2, r2, #32
 8002e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d135      	bne.n	8002ed0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	e853 3f00 	ldrex	r3, [r3]
 8002e78:	613b      	str	r3, [r7, #16]
   return(result);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f023 0310 	bic.w	r3, r3, #16
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330c      	adds	r3, #12
 8002e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8a:	623a      	str	r2, [r7, #32]
 8002e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	69f9      	ldr	r1, [r7, #28]
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	e841 2300 	strex	r3, r2, [r1]
 8002e96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e5      	bne.n	8002e6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d10a      	bne.n	8002ec2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fdf9 	bl	8002ac0 <HAL_UARTEx_RxEventCallback>
 8002ece:	e002      	b.n	8002ed6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fde1 	bl	8002a98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e002      	b.n	8002ee0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3730      	adds	r7, #48	; 0x30
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b0c0      	sub	sp, #256	; 0x100
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	68d9      	ldr	r1, [r3, #12]
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	ea40 0301 	orr.w	r3, r0, r1
 8002f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f40:	f021 010c 	bic.w	r1, r1, #12
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	6999      	ldr	r1, [r3, #24]
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	ea40 0301 	orr.w	r3, r0, r1
 8002f6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b8f      	ldr	r3, [pc, #572]	; (80031b4 <UART_SetConfig+0x2cc>)
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d005      	beq.n	8002f88 <UART_SetConfig+0xa0>
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4b8d      	ldr	r3, [pc, #564]	; (80031b8 <UART_SetConfig+0x2d0>)
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d104      	bne.n	8002f92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f88:	f7fe fb48 	bl	800161c <HAL_RCC_GetPCLK2Freq>
 8002f8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f90:	e003      	b.n	8002f9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f92:	f7fe fb2f 	bl	80015f4 <HAL_RCC_GetPCLK1Freq>
 8002f96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa4:	f040 810c 	bne.w	80031c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fba:	4622      	mov	r2, r4
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	1891      	adds	r1, r2, r2
 8002fc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fc2:	415b      	adcs	r3, r3
 8002fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fca:	4621      	mov	r1, r4
 8002fcc:	eb12 0801 	adds.w	r8, r2, r1
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	eb43 0901 	adc.w	r9, r3, r1
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fea:	4690      	mov	r8, r2
 8002fec:	4699      	mov	r9, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	eb18 0303 	adds.w	r3, r8, r3
 8002ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	eb49 0303 	adc.w	r3, r9, r3
 8002ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800300e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003016:	460b      	mov	r3, r1
 8003018:	18db      	adds	r3, r3, r3
 800301a:	653b      	str	r3, [r7, #80]	; 0x50
 800301c:	4613      	mov	r3, r2
 800301e:	eb42 0303 	adc.w	r3, r2, r3
 8003022:	657b      	str	r3, [r7, #84]	; 0x54
 8003024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800302c:	f7fd f8f0 	bl	8000210 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4b61      	ldr	r3, [pc, #388]	; (80031bc <UART_SetConfig+0x2d4>)
 8003036:	fba3 2302 	umull	r2, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	011c      	lsls	r4, r3, #4
 800303e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003042:	2200      	movs	r2, #0
 8003044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003048:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800304c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003050:	4642      	mov	r2, r8
 8003052:	464b      	mov	r3, r9
 8003054:	1891      	adds	r1, r2, r2
 8003056:	64b9      	str	r1, [r7, #72]	; 0x48
 8003058:	415b      	adcs	r3, r3
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800305c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003060:	4641      	mov	r1, r8
 8003062:	eb12 0a01 	adds.w	sl, r2, r1
 8003066:	4649      	mov	r1, r9
 8003068:	eb43 0b01 	adc.w	fp, r3, r1
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800307c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003080:	4692      	mov	sl, r2
 8003082:	469b      	mov	fp, r3
 8003084:	4643      	mov	r3, r8
 8003086:	eb1a 0303 	adds.w	r3, sl, r3
 800308a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800308e:	464b      	mov	r3, r9
 8003090:	eb4b 0303 	adc.w	r3, fp, r3
 8003094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030ac:	460b      	mov	r3, r1
 80030ae:	18db      	adds	r3, r3, r3
 80030b0:	643b      	str	r3, [r7, #64]	; 0x40
 80030b2:	4613      	mov	r3, r2
 80030b4:	eb42 0303 	adc.w	r3, r2, r3
 80030b8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030c2:	f7fd f8a5 	bl	8000210 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <UART_SetConfig+0x2d4>)
 80030ce:	fba3 2301 	umull	r2, r3, r3, r1
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2264      	movs	r2, #100	; 0x64
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	1acb      	subs	r3, r1, r3
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <UART_SetConfig+0x2d4>)
 80030e4:	fba3 2302 	umull	r2, r3, r3, r2
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030f0:	441c      	add	r4, r3
 80030f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003104:	4642      	mov	r2, r8
 8003106:	464b      	mov	r3, r9
 8003108:	1891      	adds	r1, r2, r2
 800310a:	63b9      	str	r1, [r7, #56]	; 0x38
 800310c:	415b      	adcs	r3, r3
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003114:	4641      	mov	r1, r8
 8003116:	1851      	adds	r1, r2, r1
 8003118:	6339      	str	r1, [r7, #48]	; 0x30
 800311a:	4649      	mov	r1, r9
 800311c:	414b      	adcs	r3, r1
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800312c:	4659      	mov	r1, fp
 800312e:	00cb      	lsls	r3, r1, #3
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003136:	4651      	mov	r1, sl
 8003138:	00ca      	lsls	r2, r1, #3
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	4603      	mov	r3, r0
 8003140:	4642      	mov	r2, r8
 8003142:	189b      	adds	r3, r3, r2
 8003144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003148:	464b      	mov	r3, r9
 800314a:	460a      	mov	r2, r1
 800314c:	eb42 0303 	adc.w	r3, r2, r3
 8003150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003160:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003168:	460b      	mov	r3, r1
 800316a:	18db      	adds	r3, r3, r3
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
 800316e:	4613      	mov	r3, r2
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800317a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800317e:	f7fd f847 	bl	8000210 <__aeabi_uldivmod>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <UART_SetConfig+0x2d4>)
 8003188:	fba3 1302 	umull	r1, r3, r3, r2
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	2164      	movs	r1, #100	; 0x64
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3332      	adds	r3, #50	; 0x32
 800319a:	4a08      	ldr	r2, [pc, #32]	; (80031bc <UART_SetConfig+0x2d4>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	f003 0207 	and.w	r2, r3, #7
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4422      	add	r2, r4
 80031ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031b0:	e105      	b.n	80033be <UART_SetConfig+0x4d6>
 80031b2:	bf00      	nop
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031d2:	4642      	mov	r2, r8
 80031d4:	464b      	mov	r3, r9
 80031d6:	1891      	adds	r1, r2, r2
 80031d8:	6239      	str	r1, [r7, #32]
 80031da:	415b      	adcs	r3, r3
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031e2:	4641      	mov	r1, r8
 80031e4:	1854      	adds	r4, r2, r1
 80031e6:	4649      	mov	r1, r9
 80031e8:	eb43 0501 	adc.w	r5, r3, r1
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	00eb      	lsls	r3, r5, #3
 80031f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fa:	00e2      	lsls	r2, r4, #3
 80031fc:	4614      	mov	r4, r2
 80031fe:	461d      	mov	r5, r3
 8003200:	4643      	mov	r3, r8
 8003202:	18e3      	adds	r3, r4, r3
 8003204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003208:	464b      	mov	r3, r9
 800320a:	eb45 0303 	adc.w	r3, r5, r3
 800320e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800321e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800322e:	4629      	mov	r1, r5
 8003230:	008b      	lsls	r3, r1, #2
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003238:	4621      	mov	r1, r4
 800323a:	008a      	lsls	r2, r1, #2
 800323c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003240:	f7fc ffe6 	bl	8000210 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4b60      	ldr	r3, [pc, #384]	; (80033cc <UART_SetConfig+0x4e4>)
 800324a:	fba3 2302 	umull	r2, r3, r3, r2
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	011c      	lsls	r4, r3, #4
 8003252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800325c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003264:	4642      	mov	r2, r8
 8003266:	464b      	mov	r3, r9
 8003268:	1891      	adds	r1, r2, r2
 800326a:	61b9      	str	r1, [r7, #24]
 800326c:	415b      	adcs	r3, r3
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003274:	4641      	mov	r1, r8
 8003276:	1851      	adds	r1, r2, r1
 8003278:	6139      	str	r1, [r7, #16]
 800327a:	4649      	mov	r1, r9
 800327c:	414b      	adcs	r3, r1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800328c:	4659      	mov	r1, fp
 800328e:	00cb      	lsls	r3, r1, #3
 8003290:	4651      	mov	r1, sl
 8003292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003296:	4651      	mov	r1, sl
 8003298:	00ca      	lsls	r2, r1, #3
 800329a:	4610      	mov	r0, r2
 800329c:	4619      	mov	r1, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	4642      	mov	r2, r8
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032a8:	464b      	mov	r3, r9
 80032aa:	460a      	mov	r2, r1
 80032ac:	eb42 0303 	adc.w	r3, r2, r3
 80032b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80032be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032cc:	4649      	mov	r1, r9
 80032ce:	008b      	lsls	r3, r1, #2
 80032d0:	4641      	mov	r1, r8
 80032d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d6:	4641      	mov	r1, r8
 80032d8:	008a      	lsls	r2, r1, #2
 80032da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032de:	f7fc ff97 	bl	8000210 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4b39      	ldr	r3, [pc, #228]	; (80033cc <UART_SetConfig+0x4e4>)
 80032e8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	2164      	movs	r1, #100	; 0x64
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	3332      	adds	r3, #50	; 0x32
 80032fa:	4a34      	ldr	r2, [pc, #208]	; (80033cc <UART_SetConfig+0x4e4>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003306:	441c      	add	r4, r3
 8003308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330c:	2200      	movs	r2, #0
 800330e:	673b      	str	r3, [r7, #112]	; 0x70
 8003310:	677a      	str	r2, [r7, #116]	; 0x74
 8003312:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003316:	4642      	mov	r2, r8
 8003318:	464b      	mov	r3, r9
 800331a:	1891      	adds	r1, r2, r2
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	415b      	adcs	r3, r3
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003326:	4641      	mov	r1, r8
 8003328:	1851      	adds	r1, r2, r1
 800332a:	6039      	str	r1, [r7, #0]
 800332c:	4649      	mov	r1, r9
 800332e:	414b      	adcs	r3, r1
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800333e:	4659      	mov	r1, fp
 8003340:	00cb      	lsls	r3, r1, #3
 8003342:	4651      	mov	r1, sl
 8003344:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003348:	4651      	mov	r1, sl
 800334a:	00ca      	lsls	r2, r1, #3
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	4603      	mov	r3, r0
 8003352:	4642      	mov	r2, r8
 8003354:	189b      	adds	r3, r3, r2
 8003356:	66bb      	str	r3, [r7, #104]	; 0x68
 8003358:	464b      	mov	r3, r9
 800335a:	460a      	mov	r2, r1
 800335c:	eb42 0303 	adc.w	r3, r2, r3
 8003360:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	663b      	str	r3, [r7, #96]	; 0x60
 800336c:	667a      	str	r2, [r7, #100]	; 0x64
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800337a:	4649      	mov	r1, r9
 800337c:	008b      	lsls	r3, r1, #2
 800337e:	4641      	mov	r1, r8
 8003380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003384:	4641      	mov	r1, r8
 8003386:	008a      	lsls	r2, r1, #2
 8003388:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800338c:	f7fc ff40 	bl	8000210 <__aeabi_uldivmod>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <UART_SetConfig+0x4e4>)
 8003396:	fba3 1302 	umull	r1, r3, r3, r2
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2164      	movs	r1, #100	; 0x64
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	3332      	adds	r3, #50	; 0x32
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <UART_SetConfig+0x4e4>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4422      	add	r2, r4
 80033bc:	609a      	str	r2, [r3, #8]
}
 80033be:	bf00      	nop
 80033c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ca:	bf00      	nop
 80033cc:	51eb851f 	.word	0x51eb851f

080033d0 <__NVIC_SetPriority>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	6039      	str	r1, [r7, #0]
 80033da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	db0a      	blt.n	80033fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	490c      	ldr	r1, [pc, #48]	; (800341c <__NVIC_SetPriority+0x4c>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	0112      	lsls	r2, r2, #4
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	440b      	add	r3, r1
 80033f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033f8:	e00a      	b.n	8003410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4908      	ldr	r1, [pc, #32]	; (8003420 <__NVIC_SetPriority+0x50>)
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	3b04      	subs	r3, #4
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	440b      	add	r3, r1
 800340e:	761a      	strb	r2, [r3, #24]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000e100 	.word	0xe000e100
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <SysTick_Handler+0x1c>)
 800342a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800342c:	f001 fd28 	bl	8004e80 <xTaskGetSchedulerState>
 8003430:	4603      	mov	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d001      	beq.n	800343a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003436:	f002 fb0f 	bl	8005a58 <xPortSysTickHandler>
  }
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	e000e010 	.word	0xe000e010

08003444 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003448:	2100      	movs	r1, #0
 800344a:	f06f 0004 	mvn.w	r0, #4
 800344e:	f7ff ffbf 	bl	80033d0 <__NVIC_SetPriority>
#endif
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800345e:	f3ef 8305 	mrs	r3, IPSR
 8003462:	603b      	str	r3, [r7, #0]
  return(result);
 8003464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800346a:	f06f 0305 	mvn.w	r3, #5
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	e00c      	b.n	800348c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <osKernelInitialize+0x44>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <osKernelInitialize+0x44>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003480:	2300      	movs	r3, #0
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	e002      	b.n	800348c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800348c:	687b      	ldr	r3, [r7, #4]
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	200001b4 	.word	0x200001b4

080034a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034a6:	f3ef 8305 	mrs	r3, IPSR
 80034aa:	603b      	str	r3, [r7, #0]
  return(result);
 80034ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80034b2:	f06f 0305 	mvn.w	r3, #5
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	e010      	b.n	80034dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <osKernelStart+0x48>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d109      	bne.n	80034d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80034c2:	f7ff ffbf 	bl	8003444 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <osKernelStart+0x48>)
 80034c8:	2202      	movs	r2, #2
 80034ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034cc:	f001 f87c 	bl	80045c8 <vTaskStartScheduler>
      stat = osOK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	e002      	b.n	80034dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034dc:	687b      	ldr	r3, [r7, #4]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200001b4 	.word	0x200001b4

080034ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08e      	sub	sp, #56	; 0x38
 80034f0:	af04      	add	r7, sp, #16
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034fc:	f3ef 8305 	mrs	r3, IPSR
 8003500:	617b      	str	r3, [r7, #20]
  return(result);
 8003502:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003504:	2b00      	cmp	r3, #0
 8003506:	d17e      	bne.n	8003606 <osThreadNew+0x11a>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d07b      	beq.n	8003606 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003512:	2318      	movs	r3, #24
 8003514:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d045      	beq.n	80035b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <osThreadNew+0x48>
        name = attr->name;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <osThreadNew+0x6e>
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b38      	cmp	r3, #56	; 0x38
 800354c:	d805      	bhi.n	800355a <osThreadNew+0x6e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <osThreadNew+0x72>
        return (NULL);
 800355a:	2300      	movs	r3, #0
 800355c:	e054      	b.n	8003608 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <osThreadNew+0xa8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2bbb      	cmp	r3, #187	; 0xbb
 800357c:	d90a      	bls.n	8003594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <osThreadNew+0xa8>
        mem = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	e010      	b.n	80035b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10c      	bne.n	80035b6 <osThreadNew+0xca>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d108      	bne.n	80035b6 <osThreadNew+0xca>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <osThreadNew+0xca>
          mem = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	e001      	b.n	80035b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d110      	bne.n	80035de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035c4:	9202      	str	r2, [sp, #8]
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	6a3a      	ldr	r2, [r7, #32]
 80035d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fe0c 	bl	80041f0 <xTaskCreateStatic>
 80035d8:	4603      	mov	r3, r0
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e013      	b.n	8003606 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d110      	bne.n	8003606 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fe57 	bl	80042aa <xTaskCreate>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d001      	beq.n	8003606 <osThreadNew+0x11a>
            hTask = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003606:	693b      	ldr	r3, [r7, #16]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3728      	adds	r7, #40	; 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003618:	f3ef 8305 	mrs	r3, IPSR
 800361c:	60bb      	str	r3, [r7, #8]
  return(result);
 800361e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <osDelay+0x1c>
    stat = osErrorISR;
 8003624:	f06f 0305 	mvn.w	r3, #5
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e007      	b.n	800363c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 ff92 	bl	8004560 <vTaskDelay>
    }
  }

  return (stat);
 800363c:	68fb      	ldr	r3, [r7, #12]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a07      	ldr	r2, [pc, #28]	; (8003674 <vApplicationGetIdleTaskMemory+0x2c>)
 8003658:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4a06      	ldr	r2, [pc, #24]	; (8003678 <vApplicationGetIdleTaskMemory+0x30>)
 800365e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2280      	movs	r2, #128	; 0x80
 8003664:	601a      	str	r2, [r3, #0]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	200001b8 	.word	0x200001b8
 8003678:	20000274 	.word	0x20000274

0800367c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4a07      	ldr	r2, [pc, #28]	; (80036a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800368c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4a06      	ldr	r2, [pc, #24]	; (80036ac <vApplicationGetTimerTaskMemory+0x30>)
 8003692:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800369a:	601a      	str	r2, [r3, #0]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	20000474 	.word	0x20000474
 80036ac:	20000530 	.word	0x20000530

080036b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f103 0208 	add.w	r2, r3, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295
 80036c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f103 0208 	add.w	r2, r3, #8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f103 0208 	add.w	r2, r3, #8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	601a      	str	r2, [r3, #0]
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d103      	bne.n	8003772 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	e00c      	b.n	800378c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3308      	adds	r3, #8
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e002      	b.n	8003780 <vListInsert+0x2e>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	429a      	cmp	r2, r3
 800378a:	d2f6      	bcs.n	800377a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6892      	ldr	r2, [r2, #8]
 80037da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6852      	ldr	r2, [r2, #4]
 80037e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d103      	bne.n	80037f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	1e5a      	subs	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800383e:	bf00      	nop
 8003840:	e7fe      	b.n	8003840 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003842:	f002 f877 	bl	8005934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	68f9      	ldr	r1, [r7, #12]
 8003850:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	441a      	add	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	3b01      	subs	r3, #1
 8003874:	68f9      	ldr	r1, [r7, #12]
 8003876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	441a      	add	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	22ff      	movs	r2, #255	; 0xff
 8003886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	22ff      	movs	r2, #255	; 0xff
 800388e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d114      	bne.n	80038c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01a      	beq.n	80038d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3310      	adds	r3, #16
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 f929 	bl	8004afc <xTaskRemoveFromEventList>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d012      	beq.n	80038d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <xQueueGenericReset+0xcc>)
 80038b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	e009      	b.n	80038d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3310      	adds	r3, #16
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff fef2 	bl	80036b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3324      	adds	r3, #36	; 0x24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff feed 	bl	80036b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038d6:	f002 f85d 	bl	8005994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038da:	2301      	movs	r3, #1
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	; 0x38
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
}
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <xQueueGenericCreateStatic+0x52>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <xQueueGenericCreateStatic+0x56>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <xQueueGenericCreateStatic+0x58>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	623b      	str	r3, [r7, #32]
}
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d102      	bne.n	8003966 <xQueueGenericCreateStatic+0x7e>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <xQueueGenericCreateStatic+0x82>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <xQueueGenericCreateStatic+0x84>
 800396a:	2300      	movs	r3, #0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	61fb      	str	r3, [r7, #28]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003986:	2350      	movs	r3, #80	; 0x50
 8003988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b50      	cmp	r3, #80	; 0x50
 800398e:	d00a      	beq.n	80039a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	61bb      	str	r3, [r7, #24]
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f805 	bl	80039d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3730      	adds	r7, #48	; 0x30
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e002      	b.n	80039fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a06:	2101      	movs	r1, #1
 8003a08:	69b8      	ldr	r0, [r7, #24]
 8003a0a:	f7ff ff05 	bl	8003818 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08e      	sub	sp, #56	; 0x38
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <xQueueGenericSend+0x32>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <xQueueGenericSend+0x40>
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <xQueueGenericSend+0x44>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <xQueueGenericSend+0x46>
 8003a64:	2300      	movs	r3, #0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <xQueueGenericSend+0x60>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a7c:	bf00      	nop
 8003a7e:	e7fe      	b.n	8003a7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d103      	bne.n	8003a8e <xQueueGenericSend+0x6e>
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <xQueueGenericSend+0x72>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <xQueueGenericSend+0x74>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <xQueueGenericSend+0x8e>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	623b      	str	r3, [r7, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aae:	f001 f9e7 	bl	8004e80 <xTaskGetSchedulerState>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <xQueueGenericSend+0x9e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <xQueueGenericSend+0xa2>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <xQueueGenericSend+0xa4>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <xQueueGenericSend+0xbe>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	61fb      	str	r3, [r7, #28]
}
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ade:	f001 ff29 	bl	8005934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <xQueueGenericSend+0xd4>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d129      	bne.n	8003b48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003afa:	f000 fa0b 	bl	8003f14 <prvCopyDataToQueue>
 8003afe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	3324      	adds	r3, #36	; 0x24
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fff5 	bl	8004afc <xTaskRemoveFromEventList>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d013      	beq.n	8003b40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b18:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <xQueueGenericSend+0x1f8>)
 8003b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	e00a      	b.n	8003b40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <xQueueGenericSend+0x1f8>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b40:	f001 ff28 	bl	8005994 <vPortExitCritical>
				return pdPASS;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e063      	b.n	8003c10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b4e:	f001 ff21 	bl	8005994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e05c      	b.n	8003c10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	4618      	mov	r0, r3
 8003b62:	f001 f82f 	bl	8004bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b66:	2301      	movs	r3, #1
 8003b68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b6a:	f001 ff13 	bl	8005994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b6e:	f000 fd9b 	bl	80046a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b72:	f001 fedf 	bl	8005934 <vPortEnterCritical>
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b7c:	b25b      	sxtb	r3, r3
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d103      	bne.n	8003b8c <xQueueGenericSend+0x16c>
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b92:	b25b      	sxtb	r3, r3
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d103      	bne.n	8003ba2 <xQueueGenericSend+0x182>
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ba2:	f001 fef7 	bl	8005994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ba6:	1d3a      	adds	r2, r7, #4
 8003ba8:	f107 0314 	add.w	r3, r7, #20
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 f81e 	bl	8004bf0 <xTaskCheckForTimeOut>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d124      	bne.n	8003c04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bbc:	f000 faa2 	bl	8004104 <prvIsQueueFull>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d018      	beq.n	8003bf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	3310      	adds	r3, #16
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 ff44 	bl	8004a5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd6:	f000 fa2d 	bl	8004034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bda:	f000 fd73 	bl	80046c4 <xTaskResumeAll>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f47f af7c 	bne.w	8003ade <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <xQueueGenericSend+0x1f8>)
 8003be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	e772      	b.n	8003ade <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bfa:	f000 fa1b 	bl	8004034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bfe:	f000 fd61 	bl	80046c4 <xTaskResumeAll>
 8003c02:	e76c      	b.n	8003ade <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c06:	f000 fa15 	bl	8004034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c0a:	f000 fd5b 	bl	80046c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3738      	adds	r7, #56	; 0x38
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b090      	sub	sp, #64	; 0x40
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <xQueueGenericSendFromISR+0x3c>
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <xQueueGenericSendFromISR+0x40>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <xQueueGenericSendFromISR+0x42>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d103      	bne.n	8003c86 <xQueueGenericSendFromISR+0x6a>
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <xQueueGenericSendFromISR+0x6e>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <xQueueGenericSendFromISR+0x70>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	623b      	str	r3, [r7, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ca6:	f001 ff27 	bl	8005af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003caa:	f3ef 8211 	mrs	r2, BASEPRI
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	61fa      	str	r2, [r7, #28]
 8003cc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <xQueueGenericSendFromISR+0xbc>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d12f      	bne.n	8003d38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cee:	f000 f911 	bl	8003f14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cf2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d112      	bne.n	8003d22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	3324      	adds	r3, #36	; 0x24
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fef7 	bl	8004afc <xTaskRemoveFromEventList>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00e      	beq.n	8003d32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e007      	b.n	8003d32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d26:	3301      	adds	r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b25a      	sxtb	r2, r3
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d32:	2301      	movs	r3, #1
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003d36:	e001      	b.n	8003d3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3740      	adds	r7, #64	; 0x40
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	; 0x30
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <xQueueReceive+0x30>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	623b      	str	r3, [r7, #32]
}
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <xQueueReceive+0x3e>
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <xQueueReceive+0x42>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <xQueueReceive+0x44>
 8003d96:	2300      	movs	r3, #0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xQueueReceive+0x5e>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	61fb      	str	r3, [r7, #28]
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003db2:	f001 f865 	bl	8004e80 <xTaskGetSchedulerState>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <xQueueReceive+0x6e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <xQueueReceive+0x72>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <xQueueReceive+0x74>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xQueueReceive+0x8e>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	61bb      	str	r3, [r7, #24]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003de2:	f001 fda7 	bl	8005934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d01f      	beq.n	8003e32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df6:	f000 f8f7 	bl	8003fe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	1e5a      	subs	r2, r3, #1
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00f      	beq.n	8003e2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	3310      	adds	r3, #16
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fe74 	bl	8004afc <xTaskRemoveFromEventList>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <xQueueReceive+0x1bc>)
 8003e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e2a:	f001 fdb3 	bl	8005994 <vPortExitCritical>
				return pdPASS;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e069      	b.n	8003f06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e38:	f001 fdac 	bl	8005994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e062      	b.n	8003f06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e46:	f107 0310 	add.w	r3, r7, #16
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 feba 	bl	8004bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e54:	f001 fd9e 	bl	8005994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e58:	f000 fc26 	bl	80046a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e5c:	f001 fd6a 	bl	8005934 <vPortEnterCritical>
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d103      	bne.n	8003e76 <xQueueReceive+0x122>
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e7c:	b25b      	sxtb	r3, r3
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d103      	bne.n	8003e8c <xQueueReceive+0x138>
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e8c:	f001 fd82 	bl	8005994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e90:	1d3a      	adds	r2, r7, #4
 8003e92:	f107 0310 	add.w	r3, r7, #16
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fea9 	bl	8004bf0 <xTaskCheckForTimeOut>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d123      	bne.n	8003eec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea6:	f000 f917 	bl	80040d8 <prvIsQueueEmpty>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d017      	beq.n	8003ee0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	3324      	adds	r3, #36	; 0x24
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fdcf 	bl	8004a5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec0:	f000 f8b8 	bl	8004034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ec4:	f000 fbfe 	bl	80046c4 <xTaskResumeAll>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d189      	bne.n	8003de2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <xQueueReceive+0x1bc>)
 8003ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	e780      	b.n	8003de2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee2:	f000 f8a7 	bl	8004034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ee6:	f000 fbed 	bl	80046c4 <xTaskResumeAll>
 8003eea:	e77a      	b.n	8003de2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eee:	f000 f8a1 	bl	8004034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ef2:	f000 fbe7 	bl	80046c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef8:	f000 f8ee 	bl	80040d8 <prvIsQueueEmpty>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f43f af6f 	beq.w	8003de2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3730      	adds	r7, #48	; 0x30
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10d      	bne.n	8003f4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d14d      	bne.n	8003fd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 ffbc 	bl	8004ebc <xTaskPriorityDisinherit>
 8003f44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	e043      	b.n	8003fd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d119      	bne.n	8003f88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6858      	ldr	r0, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	f002 f81a 	bl	8005f98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d32b      	bcc.n	8003fd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	e026      	b.n	8003fd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68d8      	ldr	r0, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	461a      	mov	r2, r3
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	f002 f800 	bl	8005f98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d207      	bcs.n	8003fc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	425b      	negs	r3, r3
 8003fbe:	441a      	add	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d105      	bne.n	8003fd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fde:	697b      	ldr	r3, [r7, #20]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d018      	beq.n	800402c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	441a      	add	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d303      	bcc.n	800401c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68d9      	ldr	r1, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	461a      	mov	r2, r3
 8004026:	6838      	ldr	r0, [r7, #0]
 8004028:	f001 ffb6 	bl	8005f98 <memcpy>
	}
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800403c:	f001 fc7a 	bl	8005934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004048:	e011      	b.n	800406e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d012      	beq.n	8004078 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3324      	adds	r3, #36	; 0x24
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fd50 	bl	8004afc <xTaskRemoveFromEventList>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004062:	f000 fe27 	bl	8004cb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	3b01      	subs	r3, #1
 800406a:	b2db      	uxtb	r3, r3
 800406c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800406e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	dce9      	bgt.n	800404a <prvUnlockQueue+0x16>
 8004076:	e000      	b.n	800407a <prvUnlockQueue+0x46>
					break;
 8004078:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	22ff      	movs	r2, #255	; 0xff
 800407e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004082:	f001 fc87 	bl	8005994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004086:	f001 fc55 	bl	8005934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004090:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004092:	e011      	b.n	80040b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d012      	beq.n	80040c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3310      	adds	r3, #16
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fd2b 	bl	8004afc <xTaskRemoveFromEventList>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040ac:	f000 fe02 	bl	8004cb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040b0:	7bbb      	ldrb	r3, [r7, #14]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	dce9      	bgt.n	8004094 <prvUnlockQueue+0x60>
 80040c0:	e000      	b.n	80040c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	22ff      	movs	r2, #255	; 0xff
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040cc:	f001 fc62 	bl	8005994 <vPortExitCritical>
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040e0:	f001 fc28 	bl	8005934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e001      	b.n	80040f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040f6:	f001 fc4d 	bl	8005994 <vPortExitCritical>

	return xReturn;
 80040fa:	68fb      	ldr	r3, [r7, #12]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800410c:	f001 fc12 	bl	8005934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	429a      	cmp	r2, r3
 800411a:	d102      	bne.n	8004122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	e001      	b.n	8004126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004126:	f001 fc35 	bl	8005994 <vPortExitCritical>

	return xReturn;
 800412a:	68fb      	ldr	r3, [r7, #12]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e014      	b.n	800416e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004144:	4a0f      	ldr	r2, [pc, #60]	; (8004184 <vQueueAddToRegistry+0x50>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004150:	490c      	ldr	r1, [pc, #48]	; (8004184 <vQueueAddToRegistry+0x50>)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <vQueueAddToRegistry+0x50>)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4413      	add	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004166:	e006      	b.n	8004176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3301      	adds	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b07      	cmp	r3, #7
 8004172:	d9e7      	bls.n	8004144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000930 	.word	0x20000930

08004188 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004198:	f001 fbcc 	bl	8005934 <vPortEnterCritical>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041a2:	b25b      	sxtb	r3, r3
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d103      	bne.n	80041b2 <vQueueWaitForMessageRestricted+0x2a>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041b8:	b25b      	sxtb	r3, r3
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d103      	bne.n	80041c8 <vQueueWaitForMessageRestricted+0x40>
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c8:	f001 fbe4 	bl	8005994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3324      	adds	r3, #36	; 0x24
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fc61 	bl	8004aa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041e2:	6978      	ldr	r0, [r7, #20]
 80041e4:	f7ff ff26 	bl	8004034 <prvUnlockQueue>
	}
 80041e8:	bf00      	nop
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08e      	sub	sp, #56	; 0x38
 80041f4:	af04      	add	r7, sp, #16
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	623b      	str	r3, [r7, #32]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <xTaskCreateStatic+0x46>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	61fb      	str	r3, [r7, #28]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004236:	23bc      	movs	r3, #188	; 0xbc
 8004238:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2bbc      	cmp	r3, #188	; 0xbc
 800423e:	d00a      	beq.n	8004256 <xTaskCreateStatic+0x66>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	61bb      	str	r3, [r7, #24]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004256:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01e      	beq.n	800429c <xTaskCreateStatic+0xac>
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01b      	beq.n	800429c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800426c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	2202      	movs	r2, #2
 8004272:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004276:	2300      	movs	r3, #0
 8004278:	9303      	str	r3, [sp, #12]
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	9302      	str	r3, [sp, #8]
 800427e:	f107 0314 	add.w	r3, r7, #20
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f850 	bl	8004334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004296:	f000 f8f3 	bl	8004480 <prvAddNewTaskToReadyList>
 800429a:	e001      	b.n	80042a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042a0:	697b      	ldr	r3, [r7, #20]
	}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3728      	adds	r7, #40	; 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b08c      	sub	sp, #48	; 0x30
 80042ae:	af04      	add	r7, sp, #16
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	603b      	str	r3, [r7, #0]
 80042b6:	4613      	mov	r3, r2
 80042b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 fc5a 	bl	8005b78 <pvPortMalloc>
 80042c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00e      	beq.n	80042ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042cc:	20bc      	movs	r0, #188	; 0xbc
 80042ce:	f001 fc53 	bl	8005b78 <pvPortMalloc>
 80042d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
 80042e0:	e005      	b.n	80042ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042e2:	6978      	ldr	r0, [r7, #20]
 80042e4:	f001 fd14 	bl	8005d10 <vPortFree>
 80042e8:	e001      	b.n	80042ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d017      	beq.n	8004324 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	2300      	movs	r3, #0
 8004300:	9303      	str	r3, [sp, #12]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	9302      	str	r3, [sp, #8]
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f80e 	bl	8004334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004318:	69f8      	ldr	r0, [r7, #28]
 800431a:	f000 f8b1 	bl	8004480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800431e:	2301      	movs	r3, #1
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	e002      	b.n	800432a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004324:	f04f 33ff 	mov.w	r3, #4294967295
 8004328:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800432a:	69bb      	ldr	r3, [r7, #24]
	}
 800432c:	4618      	mov	r0, r3
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	461a      	mov	r2, r3
 800434c:	21a5      	movs	r1, #165	; 0xa5
 800434e:	f001 fe31 	bl	8005fb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800435c:	3b01      	subs	r3, #1
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f023 0307 	bic.w	r3, r3, #7
 800436a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	617b      	str	r3, [r7, #20]
}
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01f      	beq.n	80043d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	e012      	b.n	80043be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	7819      	ldrb	r1, [r3, #0]
 80043a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	3334      	adds	r3, #52	; 0x34
 80043a8:	460a      	mov	r2, r1
 80043aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d006      	beq.n	80043c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	3301      	adds	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2b0f      	cmp	r3, #15
 80043c2:	d9e9      	bls.n	8004398 <prvInitialiseNewTask+0x64>
 80043c4:	e000      	b.n	80043c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80043c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d0:	e003      	b.n	80043da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	2b37      	cmp	r3, #55	; 0x37
 80043de:	d901      	bls.n	80043e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043e0:	2337      	movs	r3, #55	; 0x37
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	2200      	movs	r2, #0
 80043f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	3304      	adds	r3, #4
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f978 	bl	80036f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	3318      	adds	r3, #24
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff f973 	bl	80036f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	2200      	movs	r2, #0
 8004424:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	2200      	movs	r2, #0
 800442c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	3354      	adds	r3, #84	; 0x54
 8004434:	2260      	movs	r2, #96	; 0x60
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f001 fdbb 	bl	8005fb4 <memset>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	4a0c      	ldr	r2, [pc, #48]	; (8004474 <prvInitialiseNewTask+0x140>)
 8004442:	659a      	str	r2, [r3, #88]	; 0x58
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <prvInitialiseNewTask+0x144>)
 8004448:	65da      	str	r2, [r3, #92]	; 0x5c
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	4a0b      	ldr	r2, [pc, #44]	; (800447c <prvInitialiseNewTask+0x148>)
 800444e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	69b8      	ldr	r0, [r7, #24]
 8004456:	f001 f941 	bl	80056dc <pxPortInitialiseStack>
 800445a:	4602      	mov	r2, r0
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800446c:	bf00      	nop
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	0800621c 	.word	0x0800621c
 8004478:	0800623c 	.word	0x0800623c
 800447c:	080061fc 	.word	0x080061fc

08004480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004488:	f001 fa54 	bl	8005934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800448c:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <prvAddNewTaskToReadyList+0xc4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	4a2c      	ldr	r2, [pc, #176]	; (8004544 <prvAddNewTaskToReadyList+0xc4>)
 8004494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004496:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <prvAddNewTaskToReadyList+0xc8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800449e:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <prvAddNewTaskToReadyList+0xc8>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044a4:	4b27      	ldr	r3, [pc, #156]	; (8004544 <prvAddNewTaskToReadyList+0xc4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d110      	bne.n	80044ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044ac:	f000 fc26 	bl	8004cfc <prvInitialiseTaskLists>
 80044b0:	e00d      	b.n	80044ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <prvAddNewTaskToReadyList+0xcc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044ba:	4b23      	ldr	r3, [pc, #140]	; (8004548 <prvAddNewTaskToReadyList+0xc8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d802      	bhi.n	80044ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044c8:	4a1f      	ldr	r2, [pc, #124]	; (8004548 <prvAddNewTaskToReadyList+0xc8>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044ce:	4b20      	ldr	r3, [pc, #128]	; (8004550 <prvAddNewTaskToReadyList+0xd0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3301      	adds	r3, #1
 80044d4:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <prvAddNewTaskToReadyList+0xd0>)
 80044d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044d8:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <prvAddNewTaskToReadyList+0xd0>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e4:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <prvAddNewTaskToReadyList+0xd4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d903      	bls.n	80044f4 <prvAddNewTaskToReadyList+0x74>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4a18      	ldr	r2, [pc, #96]	; (8004554 <prvAddNewTaskToReadyList+0xd4>)
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4a15      	ldr	r2, [pc, #84]	; (8004558 <prvAddNewTaskToReadyList+0xd8>)
 8004502:	441a      	add	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f7ff f8fd 	bl	800370a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004510:	f001 fa40 	bl	8005994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004514:	4b0d      	ldr	r3, [pc, #52]	; (800454c <prvAddNewTaskToReadyList+0xcc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00e      	beq.n	800453a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <prvAddNewTaskToReadyList+0xc8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	429a      	cmp	r2, r3
 8004528:	d207      	bcs.n	800453a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800452a:	4b0c      	ldr	r3, [pc, #48]	; (800455c <prvAddNewTaskToReadyList+0xdc>)
 800452c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000e44 	.word	0x20000e44
 8004548:	20000970 	.word	0x20000970
 800454c:	20000e50 	.word	0x20000e50
 8004550:	20000e60 	.word	0x20000e60
 8004554:	20000e4c 	.word	0x20000e4c
 8004558:	20000974 	.word	0x20000974
 800455c:	e000ed04 	.word	0xe000ed04

08004560 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d017      	beq.n	80045a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004572:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <vTaskDelay+0x60>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <vTaskDelay+0x30>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	60bb      	str	r3, [r7, #8]
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004590:	f000 f88a 	bl	80046a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004594:	2100      	movs	r1, #0
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fcfe 	bl	8004f98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800459c:	f000 f892 	bl	80046c4 <xTaskResumeAll>
 80045a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <vTaskDelay+0x64>)
 80045aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20000e6c 	.word	0x20000e6c
 80045c4:	e000ed04 	.word	0xe000ed04

080045c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045d6:	463a      	mov	r2, r7
 80045d8:	1d39      	adds	r1, r7, #4
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff f832 	bl	8003648 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045e4:	6839      	ldr	r1, [r7, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	9202      	str	r2, [sp, #8]
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	2300      	movs	r3, #0
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	2300      	movs	r3, #0
 80045f4:	460a      	mov	r2, r1
 80045f6:	4924      	ldr	r1, [pc, #144]	; (8004688 <vTaskStartScheduler+0xc0>)
 80045f8:	4824      	ldr	r0, [pc, #144]	; (800468c <vTaskStartScheduler+0xc4>)
 80045fa:	f7ff fdf9 	bl	80041f0 <xTaskCreateStatic>
 80045fe:	4603      	mov	r3, r0
 8004600:	4a23      	ldr	r2, [pc, #140]	; (8004690 <vTaskStartScheduler+0xc8>)
 8004602:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004604:	4b22      	ldr	r3, [pc, #136]	; (8004690 <vTaskStartScheduler+0xc8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800460c:	2301      	movs	r3, #1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e001      	b.n	8004616 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d102      	bne.n	8004622 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800461c:	f000 fd10 	bl	8005040 <xTimerCreateTimerTask>
 8004620:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d11b      	bne.n	8004660 <vTaskStartScheduler+0x98>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	613b      	str	r3, [r7, #16]
}
 800463a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800463c:	4b15      	ldr	r3, [pc, #84]	; (8004694 <vTaskStartScheduler+0xcc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3354      	adds	r3, #84	; 0x54
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <vTaskStartScheduler+0xd0>)
 8004644:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004646:	4b15      	ldr	r3, [pc, #84]	; (800469c <vTaskStartScheduler+0xd4>)
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <vTaskStartScheduler+0xd8>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <vTaskStartScheduler+0xdc>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800465a:	f001 f8c9 	bl	80057f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800465e:	e00e      	b.n	800467e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d10a      	bne.n	800467e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	60fb      	str	r3, [r7, #12]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <vTaskStartScheduler+0xb4>
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	08006184 	.word	0x08006184
 800468c:	08004ccd 	.word	0x08004ccd
 8004690:	20000e68 	.word	0x20000e68
 8004694:	20000970 	.word	0x20000970
 8004698:	20000010 	.word	0x20000010
 800469c:	20000e64 	.word	0x20000e64
 80046a0:	20000e50 	.word	0x20000e50
 80046a4:	20000e48 	.word	0x20000e48

080046a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046ac:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <vTaskSuspendAll+0x18>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3301      	adds	r3, #1
 80046b2:	4a03      	ldr	r2, [pc, #12]	; (80046c0 <vTaskSuspendAll+0x18>)
 80046b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046b6:	bf00      	nop
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	20000e6c 	.word	0x20000e6c

080046c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046d2:	4b42      	ldr	r3, [pc, #264]	; (80047dc <xTaskResumeAll+0x118>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	603b      	str	r3, [r7, #0]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046f0:	f001 f920 	bl	8005934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046f4:	4b39      	ldr	r3, [pc, #228]	; (80047dc <xTaskResumeAll+0x118>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	4a38      	ldr	r2, [pc, #224]	; (80047dc <xTaskResumeAll+0x118>)
 80046fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046fe:	4b37      	ldr	r3, [pc, #220]	; (80047dc <xTaskResumeAll+0x118>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d162      	bne.n	80047cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004706:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <xTaskResumeAll+0x11c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d05e      	beq.n	80047cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800470e:	e02f      	b.n	8004770 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004710:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <xTaskResumeAll+0x120>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3318      	adds	r3, #24
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff f851 	bl	80037c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3304      	adds	r3, #4
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff f84c 	bl	80037c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004730:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <xTaskResumeAll+0x124>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d903      	bls.n	8004740 <xTaskResumeAll+0x7c>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <xTaskResumeAll+0x124>)
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4a27      	ldr	r2, [pc, #156]	; (80047ec <xTaskResumeAll+0x128>)
 800474e:	441a      	add	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f7fe ffd7 	bl	800370a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	4b23      	ldr	r3, [pc, #140]	; (80047f0 <xTaskResumeAll+0x12c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	429a      	cmp	r2, r3
 8004768:	d302      	bcc.n	8004770 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800476a:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <xTaskResumeAll+0x130>)
 800476c:	2201      	movs	r2, #1
 800476e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004770:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <xTaskResumeAll+0x120>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1cb      	bne.n	8004710 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800477e:	f000 fb5f 	bl	8004e40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <xTaskResumeAll+0x134>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d010      	beq.n	80047b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800478e:	f000 f847 	bl	8004820 <xTaskIncrementTick>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004798:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <xTaskResumeAll+0x130>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f1      	bne.n	800478e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <xTaskResumeAll+0x134>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <xTaskResumeAll+0x130>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047b8:	2301      	movs	r3, #1
 80047ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <xTaskResumeAll+0x138>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047cc:	f001 f8e2 	bl	8005994 <vPortExitCritical>

	return xAlreadyYielded;
 80047d0:	68bb      	ldr	r3, [r7, #8]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000e6c 	.word	0x20000e6c
 80047e0:	20000e44 	.word	0x20000e44
 80047e4:	20000e04 	.word	0x20000e04
 80047e8:	20000e4c 	.word	0x20000e4c
 80047ec:	20000974 	.word	0x20000974
 80047f0:	20000970 	.word	0x20000970
 80047f4:	20000e58 	.word	0x20000e58
 80047f8:	20000e54 	.word	0x20000e54
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <xTaskGetTickCount+0x1c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800480c:	687b      	ldr	r3, [r7, #4]
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000e48 	.word	0x20000e48

08004820 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800482a:	4b4f      	ldr	r3, [pc, #316]	; (8004968 <xTaskIncrementTick+0x148>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 808f 	bne.w	8004952 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004834:	4b4d      	ldr	r3, [pc, #308]	; (800496c <xTaskIncrementTick+0x14c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800483c:	4a4b      	ldr	r2, [pc, #300]	; (800496c <xTaskIncrementTick+0x14c>)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d120      	bne.n	800488a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004848:	4b49      	ldr	r3, [pc, #292]	; (8004970 <xTaskIncrementTick+0x150>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <xTaskIncrementTick+0x48>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	603b      	str	r3, [r7, #0]
}
 8004864:	bf00      	nop
 8004866:	e7fe      	b.n	8004866 <xTaskIncrementTick+0x46>
 8004868:	4b41      	ldr	r3, [pc, #260]	; (8004970 <xTaskIncrementTick+0x150>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	4b41      	ldr	r3, [pc, #260]	; (8004974 <xTaskIncrementTick+0x154>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a3f      	ldr	r2, [pc, #252]	; (8004970 <xTaskIncrementTick+0x150>)
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	4a3f      	ldr	r2, [pc, #252]	; (8004974 <xTaskIncrementTick+0x154>)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b3e      	ldr	r3, [pc, #248]	; (8004978 <xTaskIncrementTick+0x158>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	4a3d      	ldr	r2, [pc, #244]	; (8004978 <xTaskIncrementTick+0x158>)
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	f000 fadb 	bl	8004e40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800488a:	4b3c      	ldr	r3, [pc, #240]	; (800497c <xTaskIncrementTick+0x15c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	429a      	cmp	r2, r3
 8004892:	d349      	bcc.n	8004928 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004894:	4b36      	ldr	r3, [pc, #216]	; (8004970 <xTaskIncrementTick+0x150>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d104      	bne.n	80048a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800489e:	4b37      	ldr	r3, [pc, #220]	; (800497c <xTaskIncrementTick+0x15c>)
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	601a      	str	r2, [r3, #0]
					break;
 80048a6:	e03f      	b.n	8004928 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a8:	4b31      	ldr	r3, [pc, #196]	; (8004970 <xTaskIncrementTick+0x150>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d203      	bcs.n	80048c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048c0:	4a2e      	ldr	r2, [pc, #184]	; (800497c <xTaskIncrementTick+0x15c>)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048c6:	e02f      	b.n	8004928 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe ff79 	bl	80037c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d004      	beq.n	80048e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	3318      	adds	r3, #24
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe ff70 	bl	80037c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <xTaskIncrementTick+0x160>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d903      	bls.n	80048f8 <xTaskIncrementTick+0xd8>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	4a22      	ldr	r2, [pc, #136]	; (8004980 <xTaskIncrementTick+0x160>)
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4a1f      	ldr	r2, [pc, #124]	; (8004984 <xTaskIncrementTick+0x164>)
 8004906:	441a      	add	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f7fe fefb 	bl	800370a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <xTaskIncrementTick+0x168>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	429a      	cmp	r2, r3
 8004920:	d3b8      	bcc.n	8004894 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004922:	2301      	movs	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004926:	e7b5      	b.n	8004894 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004928:	4b17      	ldr	r3, [pc, #92]	; (8004988 <xTaskIncrementTick+0x168>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492e:	4915      	ldr	r1, [pc, #84]	; (8004984 <xTaskIncrementTick+0x164>)
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d901      	bls.n	8004944 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004944:	4b11      	ldr	r3, [pc, #68]	; (800498c <xTaskIncrementTick+0x16c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e004      	b.n	800495c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004952:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <xTaskIncrementTick+0x170>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3301      	adds	r3, #1
 8004958:	4a0d      	ldr	r2, [pc, #52]	; (8004990 <xTaskIncrementTick+0x170>)
 800495a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800495c:	697b      	ldr	r3, [r7, #20]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000e6c 	.word	0x20000e6c
 800496c:	20000e48 	.word	0x20000e48
 8004970:	20000dfc 	.word	0x20000dfc
 8004974:	20000e00 	.word	0x20000e00
 8004978:	20000e5c 	.word	0x20000e5c
 800497c:	20000e64 	.word	0x20000e64
 8004980:	20000e4c 	.word	0x20000e4c
 8004984:	20000974 	.word	0x20000974
 8004988:	20000970 	.word	0x20000970
 800498c:	20000e58 	.word	0x20000e58
 8004990:	20000e54 	.word	0x20000e54

08004994 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800499a:	4b2a      	ldr	r3, [pc, #168]	; (8004a44 <vTaskSwitchContext+0xb0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049a2:	4b29      	ldr	r3, [pc, #164]	; (8004a48 <vTaskSwitchContext+0xb4>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049a8:	e046      	b.n	8004a38 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80049aa:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <vTaskSwitchContext+0xb4>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b0:	4b26      	ldr	r3, [pc, #152]	; (8004a4c <vTaskSwitchContext+0xb8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e010      	b.n	80049da <vTaskSwitchContext+0x46>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	607b      	str	r3, [r7, #4]
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <vTaskSwitchContext+0x3e>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	491d      	ldr	r1, [pc, #116]	; (8004a50 <vTaskSwitchContext+0xbc>)
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0e4      	beq.n	80049b8 <vTaskSwitchContext+0x24>
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <vTaskSwitchContext+0xbc>)
 80049fa:	4413      	add	r3, r2
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d104      	bne.n	8004a1e <vTaskSwitchContext+0x8a>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <vTaskSwitchContext+0xc0>)
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <vTaskSwitchContext+0xb8>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <vTaskSwitchContext+0xc0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3354      	adds	r3, #84	; 0x54
 8004a34:	4a08      	ldr	r2, [pc, #32]	; (8004a58 <vTaskSwitchContext+0xc4>)
 8004a36:	6013      	str	r3, [r2, #0]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	20000e6c 	.word	0x20000e6c
 8004a48:	20000e58 	.word	0x20000e58
 8004a4c:	20000e4c 	.word	0x20000e4c
 8004a50:	20000974 	.word	0x20000974
 8004a54:	20000970 	.word	0x20000970
 8004a58:	20000010 	.word	0x20000010

08004a5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60fb      	str	r3, [r7, #12]
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a82:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <vTaskPlaceOnEventList+0x44>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3318      	adds	r3, #24
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fe fe61 	bl	8003752 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a90:	2101      	movs	r1, #1
 8004a92:	6838      	ldr	r0, [r7, #0]
 8004a94:	f000 fa80 	bl	8004f98 <prvAddCurrentTaskToDelayedList>
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000970 	.word	0x20000970

08004aa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10a      	bne.n	8004acc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	617b      	str	r3, [r7, #20]
}
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3318      	adds	r3, #24
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7fe fe18 	bl	800370a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	68b8      	ldr	r0, [r7, #8]
 8004aea:	f000 fa55 	bl	8004f98 <prvAddCurrentTaskToDelayedList>
	}
 8004aee:	bf00      	nop
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000970 	.word	0x20000970

08004afc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10a      	bne.n	8004b28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60fb      	str	r3, [r7, #12]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3318      	adds	r3, #24
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe fe49 	bl	80037c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b32:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <xTaskRemoveFromEventList+0xb0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d11d      	bne.n	8004b76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fe40 	bl	80037c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <xTaskRemoveFromEventList+0xb4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d903      	bls.n	8004b58 <xTaskRemoveFromEventList+0x5c>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a16      	ldr	r2, [pc, #88]	; (8004bb0 <xTaskRemoveFromEventList+0xb4>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <xTaskRemoveFromEventList+0xb8>)
 8004b66:	441a      	add	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f7fe fdcb 	bl	800370a <vListInsertEnd>
 8004b74:	e005      	b.n	8004b82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	3318      	adds	r3, #24
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	480e      	ldr	r0, [pc, #56]	; (8004bb8 <xTaskRemoveFromEventList+0xbc>)
 8004b7e:	f7fe fdc4 	bl	800370a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <xTaskRemoveFromEventList+0xc0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d905      	bls.n	8004b9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b94:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <xTaskRemoveFromEventList+0xc4>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e001      	b.n	8004ba0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ba0:	697b      	ldr	r3, [r7, #20]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000e6c 	.word	0x20000e6c
 8004bb0:	20000e4c 	.word	0x20000e4c
 8004bb4:	20000974 	.word	0x20000974
 8004bb8:	20000e04 	.word	0x20000e04
 8004bbc:	20000970 	.word	0x20000970
 8004bc0:	20000e58 	.word	0x20000e58

08004bc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <vTaskInternalSetTimeOutState+0x24>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <vTaskInternalSetTimeOutState+0x28>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	605a      	str	r2, [r3, #4]
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	20000e5c 	.word	0x20000e5c
 8004bec:	20000e48 	.word	0x20000e48

08004bf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10a      	bne.n	8004c16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	60fb      	str	r3, [r7, #12]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c32:	f000 fe7f 	bl	8005934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c36:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <xTaskCheckForTimeOut+0xbc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d102      	bne.n	8004c56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e023      	b.n	8004c9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <xTaskCheckForTimeOut+0xc0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d007      	beq.n	8004c72 <xTaskCheckForTimeOut+0x82>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d302      	bcc.n	8004c72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	e015      	b.n	8004c9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d20b      	bcs.n	8004c94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1ad2      	subs	r2, r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff9b 	bl	8004bc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	e004      	b.n	8004c9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c9e:	f000 fe79 	bl	8005994 <vPortExitCritical>

	return xReturn;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000e48 	.word	0x20000e48
 8004cb0:	20000e5c 	.word	0x20000e5c

08004cb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cb8:	4b03      	ldr	r3, [pc, #12]	; (8004cc8 <vTaskMissedYield+0x14>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	20000e58 	.word	0x20000e58

08004ccc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cd4:	f000 f852 	bl	8004d7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cd8:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <prvIdleTask+0x28>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d9f9      	bls.n	8004cd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <prvIdleTask+0x2c>)
 8004ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cf0:	e7f0      	b.n	8004cd4 <prvIdleTask+0x8>
 8004cf2:	bf00      	nop
 8004cf4:	20000974 	.word	0x20000974
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	e00c      	b.n	8004d22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4a12      	ldr	r2, [pc, #72]	; (8004d5c <prvInitialiseTaskLists+0x60>)
 8004d14:	4413      	add	r3, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe fcca 	bl	80036b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	607b      	str	r3, [r7, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b37      	cmp	r3, #55	; 0x37
 8004d26:	d9ef      	bls.n	8004d08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d28:	480d      	ldr	r0, [pc, #52]	; (8004d60 <prvInitialiseTaskLists+0x64>)
 8004d2a:	f7fe fcc1 	bl	80036b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d2e:	480d      	ldr	r0, [pc, #52]	; (8004d64 <prvInitialiseTaskLists+0x68>)
 8004d30:	f7fe fcbe 	bl	80036b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d34:	480c      	ldr	r0, [pc, #48]	; (8004d68 <prvInitialiseTaskLists+0x6c>)
 8004d36:	f7fe fcbb 	bl	80036b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d3a:	480c      	ldr	r0, [pc, #48]	; (8004d6c <prvInitialiseTaskLists+0x70>)
 8004d3c:	f7fe fcb8 	bl	80036b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d40:	480b      	ldr	r0, [pc, #44]	; (8004d70 <prvInitialiseTaskLists+0x74>)
 8004d42:	f7fe fcb5 	bl	80036b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <prvInitialiseTaskLists+0x78>)
 8004d48:	4a05      	ldr	r2, [pc, #20]	; (8004d60 <prvInitialiseTaskLists+0x64>)
 8004d4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <prvInitialiseTaskLists+0x7c>)
 8004d4e:	4a05      	ldr	r2, [pc, #20]	; (8004d64 <prvInitialiseTaskLists+0x68>)
 8004d50:	601a      	str	r2, [r3, #0]
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000974 	.word	0x20000974
 8004d60:	20000dd4 	.word	0x20000dd4
 8004d64:	20000de8 	.word	0x20000de8
 8004d68:	20000e04 	.word	0x20000e04
 8004d6c:	20000e18 	.word	0x20000e18
 8004d70:	20000e30 	.word	0x20000e30
 8004d74:	20000dfc 	.word	0x20000dfc
 8004d78:	20000e00 	.word	0x20000e00

08004d7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d82:	e019      	b.n	8004db8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d84:	f000 fdd6 	bl	8005934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d88:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <prvCheckTasksWaitingTermination+0x50>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fe fd15 	bl	80037c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <prvCheckTasksWaitingTermination+0x54>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	4a0b      	ldr	r2, [pc, #44]	; (8004dd0 <prvCheckTasksWaitingTermination+0x54>)
 8004da2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004da4:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <prvCheckTasksWaitingTermination+0x58>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	4a0a      	ldr	r2, [pc, #40]	; (8004dd4 <prvCheckTasksWaitingTermination+0x58>)
 8004dac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dae:	f000 fdf1 	bl	8005994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f810 	bl	8004dd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <prvCheckTasksWaitingTermination+0x58>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e1      	bne.n	8004d84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000e18 	.word	0x20000e18
 8004dd0:	20000e44 	.word	0x20000e44
 8004dd4:	20000e2c 	.word	0x20000e2c

08004dd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3354      	adds	r3, #84	; 0x54
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 f8fb 	bl	8005fe0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d108      	bne.n	8004e06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 ff89 	bl	8005d10 <vPortFree>
				vPortFree( pxTCB );
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 ff86 	bl	8005d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e04:	e018      	b.n	8004e38 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d103      	bne.n	8004e18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 ff7d 	bl	8005d10 <vPortFree>
	}
 8004e16:	e00f      	b.n	8004e38 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d00a      	beq.n	8004e38 <prvDeleteTCB+0x60>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60fb      	str	r3, [r7, #12]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <prvDeleteTCB+0x5e>
	}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e46:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <prvResetNextTaskUnblockTime+0x38>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <prvResetNextTaskUnblockTime+0x3c>)
 8004e52:	f04f 32ff 	mov.w	r2, #4294967295
 8004e56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e58:	e008      	b.n	8004e6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <prvResetNextTaskUnblockTime+0x38>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <prvResetNextTaskUnblockTime+0x3c>)
 8004e6a:	6013      	str	r3, [r2, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	20000dfc 	.word	0x20000dfc
 8004e7c:	20000e64 	.word	0x20000e64

08004e80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <xTaskGetSchedulerState+0x34>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d102      	bne.n	8004e94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	607b      	str	r3, [r7, #4]
 8004e92:	e008      	b.n	8004ea6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e94:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <xTaskGetSchedulerState+0x38>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	e001      	b.n	8004ea6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ea6:	687b      	ldr	r3, [r7, #4]
	}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	20000e50 	.word	0x20000e50
 8004eb8:	20000e6c 	.word	0x20000e6c

08004ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d056      	beq.n	8004f80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ed2:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <xTaskPriorityDisinherit+0xd0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d00a      	beq.n	8004ef2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60fb      	str	r3, [r7, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	60bb      	str	r3, [r7, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	1e5a      	subs	r2, r3, #1
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d02c      	beq.n	8004f80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d128      	bne.n	8004f80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fc46 	bl	80037c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <xTaskPriorityDisinherit+0xd4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d903      	bls.n	8004f60 <xTaskPriorityDisinherit+0xa4>
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <xTaskPriorityDisinherit+0xd4>)
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4a09      	ldr	r2, [pc, #36]	; (8004f94 <xTaskPriorityDisinherit+0xd8>)
 8004f6e:	441a      	add	r2, r3
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	3304      	adds	r3, #4
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f7fe fbc7 	bl	800370a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f80:	697b      	ldr	r3, [r7, #20]
	}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000970 	.word	0x20000970
 8004f90:	20000e4c 	.word	0x20000e4c
 8004f94:	20000974 	.word	0x20000974

08004f98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fa2:	4b21      	ldr	r3, [pc, #132]	; (8005028 <prvAddCurrentTaskToDelayedList+0x90>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fa8:	4b20      	ldr	r3, [pc, #128]	; (800502c <prvAddCurrentTaskToDelayedList+0x94>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fc08 	bl	80037c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d10a      	bne.n	8004fd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	; (800502c <prvAddCurrentTaskToDelayedList+0x94>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4819      	ldr	r0, [pc, #100]	; (8005030 <prvAddCurrentTaskToDelayedList+0x98>)
 8004fcc:	f7fe fb9d 	bl	800370a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fd0:	e026      	b.n	8005020 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <prvAddCurrentTaskToDelayedList+0x94>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d209      	bcs.n	8004ffe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b0f      	ldr	r3, [pc, #60]	; (800502c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f7fe fbab 	bl	8003752 <vListInsert>
}
 8004ffc:	e010      	b.n	8005020 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <prvAddCurrentTaskToDelayedList+0x94>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f7fe fba1 	bl	8003752 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	429a      	cmp	r2, r3
 8005018:	d202      	bcs.n	8005020 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800501a:	4a08      	ldr	r2, [pc, #32]	; (800503c <prvAddCurrentTaskToDelayedList+0xa4>)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6013      	str	r3, [r2, #0]
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000e48 	.word	0x20000e48
 800502c:	20000970 	.word	0x20000970
 8005030:	20000e30 	.word	0x20000e30
 8005034:	20000e00 	.word	0x20000e00
 8005038:	20000dfc 	.word	0x20000dfc
 800503c:	20000e64 	.word	0x20000e64

08005040 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08a      	sub	sp, #40	; 0x28
 8005044:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800504a:	f000 fb07 	bl	800565c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800504e:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <xTimerCreateTimerTask+0x80>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d021      	beq.n	800509a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800505e:	1d3a      	adds	r2, r7, #4
 8005060:	f107 0108 	add.w	r1, r7, #8
 8005064:	f107 030c 	add.w	r3, r7, #12
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe fb07 	bl	800367c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	9202      	str	r2, [sp, #8]
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	2302      	movs	r3, #2
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2300      	movs	r3, #0
 800507e:	460a      	mov	r2, r1
 8005080:	4910      	ldr	r1, [pc, #64]	; (80050c4 <xTimerCreateTimerTask+0x84>)
 8005082:	4811      	ldr	r0, [pc, #68]	; (80050c8 <xTimerCreateTimerTask+0x88>)
 8005084:	f7ff f8b4 	bl	80041f0 <xTaskCreateStatic>
 8005088:	4603      	mov	r3, r0
 800508a:	4a10      	ldr	r2, [pc, #64]	; (80050cc <xTimerCreateTimerTask+0x8c>)
 800508c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <xTimerCreateTimerTask+0x8c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005096:	2301      	movs	r3, #1
 8005098:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	613b      	str	r3, [r7, #16]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050b6:	697b      	ldr	r3, [r7, #20]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000ea0 	.word	0x20000ea0
 80050c4:	0800618c 	.word	0x0800618c
 80050c8:	08005205 	.word	0x08005205
 80050cc:	20000ea4 	.word	0x20000ea4

080050d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	623b      	str	r3, [r7, #32]
}
 80050fa:	bf00      	nop
 80050fc:	e7fe      	b.n	80050fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050fe:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <xTimerGenericCommand+0x98>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02a      	beq.n	800515c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b05      	cmp	r3, #5
 8005116:	dc18      	bgt.n	800514a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005118:	f7ff feb2 	bl	8004e80 <xTaskGetSchedulerState>
 800511c:	4603      	mov	r3, r0
 800511e:	2b02      	cmp	r3, #2
 8005120:	d109      	bne.n	8005136 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <xTimerGenericCommand+0x98>)
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f107 0110 	add.w	r1, r7, #16
 800512a:	2300      	movs	r3, #0
 800512c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512e:	f7fe fc77 	bl	8003a20 <xQueueGenericSend>
 8005132:	6278      	str	r0, [r7, #36]	; 0x24
 8005134:	e012      	b.n	800515c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <xTimerGenericCommand+0x98>)
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	f107 0110 	add.w	r1, r7, #16
 800513e:	2300      	movs	r3, #0
 8005140:	2200      	movs	r2, #0
 8005142:	f7fe fc6d 	bl	8003a20 <xQueueGenericSend>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24
 8005148:	e008      	b.n	800515c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800514a:	4b07      	ldr	r3, [pc, #28]	; (8005168 <xTimerGenericCommand+0x98>)
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	f107 0110 	add.w	r1, r7, #16
 8005152:	2300      	movs	r3, #0
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	f7fe fd61 	bl	8003c1c <xQueueGenericSendFromISR>
 800515a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800515e:	4618      	mov	r0, r3
 8005160:	3728      	adds	r7, #40	; 0x28
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000ea0 	.word	0x20000ea0

0800516c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af02      	add	r7, sp, #8
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005176:	4b22      	ldr	r3, [pc, #136]	; (8005200 <prvProcessExpiredTimer+0x94>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	3304      	adds	r3, #4
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe fb1d 	bl	80037c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d022      	beq.n	80051de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	18d1      	adds	r1, r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	6978      	ldr	r0, [r7, #20]
 80051a6:	f000 f8d1 	bl	800534c <prvInsertTimerInActiveList>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01f      	beq.n	80051f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051b0:	2300      	movs	r3, #0
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	2100      	movs	r1, #0
 80051ba:	6978      	ldr	r0, [r7, #20]
 80051bc:	f7ff ff88 	bl	80050d0 <xTimerGenericCommand>
 80051c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d113      	bne.n	80051f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	60fb      	str	r3, [r7, #12]
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	6978      	ldr	r0, [r7, #20]
 80051f6:	4798      	blx	r3
}
 80051f8:	bf00      	nop
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000e98 	.word	0x20000e98

08005204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800520c:	f107 0308 	add.w	r3, r7, #8
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f857 	bl	80052c4 <prvGetNextExpireTime>
 8005216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4619      	mov	r1, r3
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f803 	bl	8005228 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005222:	f000 f8d5 	bl	80053d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005226:	e7f1      	b.n	800520c <prvTimerTask+0x8>

08005228 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005232:	f7ff fa39 	bl	80046a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f866 	bl	800530c <prvSampleTimeNow>
 8005240:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d130      	bne.n	80052aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <prvProcessTimerOrBlockTask+0x3c>
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	429a      	cmp	r2, r3
 8005254:	d806      	bhi.n	8005264 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005256:	f7ff fa35 	bl	80046c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff85 	bl	800516c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005262:	e024      	b.n	80052ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <prvProcessTimerOrBlockTask+0x90>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <prvProcessTimerOrBlockTask+0x50>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <prvProcessTimerOrBlockTask+0x52>
 8005278:	2300      	movs	r3, #0
 800527a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <prvProcessTimerOrBlockTask+0x94>)
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	4619      	mov	r1, r3
 800528a:	f7fe ff7d 	bl	8004188 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800528e:	f7ff fa19 	bl	80046c4 <xTaskResumeAll>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005298:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <prvProcessTimerOrBlockTask+0x98>)
 800529a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	f3bf 8f6f 	isb	sy
}
 80052a8:	e001      	b.n	80052ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052aa:	f7ff fa0b 	bl	80046c4 <xTaskResumeAll>
}
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000e9c 	.word	0x20000e9c
 80052bc:	20000ea0 	.word	0x20000ea0
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <prvGetNextExpireTime+0x44>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <prvGetNextExpireTime+0x16>
 80052d6:	2201      	movs	r2, #1
 80052d8:	e000      	b.n	80052dc <prvGetNextExpireTime+0x18>
 80052da:	2200      	movs	r2, #0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d105      	bne.n	80052f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <prvGetNextExpireTime+0x44>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e001      	b.n	80052f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052f8:	68fb      	ldr	r3, [r7, #12]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	20000e98 	.word	0x20000e98

0800530c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005314:	f7ff fa74 	bl	8004800 <xTaskGetTickCount>
 8005318:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <prvSampleTimeNow+0x3c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	429a      	cmp	r2, r3
 8005322:	d205      	bcs.n	8005330 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005324:	f000 f936 	bl	8005594 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e002      	b.n	8005336 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005336:	4a04      	ldr	r2, [pc, #16]	; (8005348 <prvSampleTimeNow+0x3c>)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800533c:	68fb      	ldr	r3, [r7, #12]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000ea8 	.word	0x20000ea8

0800534c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d812      	bhi.n	8005398 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	1ad2      	subs	r2, r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e01b      	b.n	80053be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005386:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <prvInsertTimerInActiveList+0x7c>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3304      	adds	r3, #4
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f7fe f9de 	bl	8003752 <vListInsert>
 8005396:	e012      	b.n	80053be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d206      	bcs.n	80053ae <prvInsertTimerInActiveList+0x62>
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d302      	bcc.n	80053ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053a8:	2301      	movs	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e007      	b.n	80053be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053ae:	4b07      	ldr	r3, [pc, #28]	; (80053cc <prvInsertTimerInActiveList+0x80>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4619      	mov	r1, r3
 80053b8:	4610      	mov	r0, r2
 80053ba:	f7fe f9ca 	bl	8003752 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053be:	697b      	ldr	r3, [r7, #20]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000e9c 	.word	0x20000e9c
 80053cc:	20000e98 	.word	0x20000e98

080053d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08e      	sub	sp, #56	; 0x38
 80053d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053d6:	e0ca      	b.n	800556e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	da18      	bge.n	8005410 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	3304      	adds	r3, #4
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	61fb      	str	r3, [r7, #28]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005406:	6850      	ldr	r0, [r2, #4]
 8005408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800540a:	6892      	ldr	r2, [r2, #8]
 800540c:	4611      	mov	r1, r2
 800540e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	f2c0 80aa 	blt.w	800556c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	3304      	adds	r3, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe f9cb 	bl	80037c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800542e:	463b      	mov	r3, r7
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff6b 	bl	800530c <prvSampleTimeNow>
 8005436:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b09      	cmp	r3, #9
 800543c:	f200 8097 	bhi.w	800556e <prvProcessReceivedCommands+0x19e>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <prvProcessReceivedCommands+0x78>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	08005471 	.word	0x08005471
 800544c:	08005471 	.word	0x08005471
 8005450:	08005471 	.word	0x08005471
 8005454:	080054e5 	.word	0x080054e5
 8005458:	080054f9 	.word	0x080054f9
 800545c:	08005543 	.word	0x08005543
 8005460:	08005471 	.word	0x08005471
 8005464:	08005471 	.word	0x08005471
 8005468:	080054e5 	.word	0x080054e5
 800546c:	080054f9 	.word	0x080054f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005476:	f043 0301 	orr.w	r3, r3, #1
 800547a:	b2da      	uxtb	r2, r3
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	18d1      	adds	r1, r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005490:	f7ff ff5c 	bl	800534c <prvInsertTimerInActiveList>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d069      	beq.n	800556e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d05e      	beq.n	800556e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	441a      	add	r2, r3
 80054b8:	2300      	movs	r3, #0
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	2300      	movs	r3, #0
 80054be:	2100      	movs	r1, #0
 80054c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054c2:	f7ff fe05 	bl	80050d0 <xTimerGenericCommand>
 80054c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d14f      	bne.n	800556e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	61bb      	str	r3, [r7, #24]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80054f6:	e03a      	b.n	800556e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	b2da      	uxtb	r2, r3
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	617b      	str	r3, [r7, #20]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	18d1      	adds	r1, r2, r3
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553c:	f7ff ff06 	bl	800534c <prvInsertTimerInActiveList>
					break;
 8005540:	e015      	b.n	800556e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d103      	bne.n	8005558 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005552:	f000 fbdd 	bl	8005d10 <vPortFree>
 8005556:	e00a      	b.n	800556e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800556a:	e000      	b.n	800556e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800556c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <prvProcessReceivedCommands+0x1c0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	1d39      	adds	r1, r7, #4
 8005574:	2200      	movs	r2, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe fbec 	bl	8003d54 <xQueueReceive>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	f47f af2a 	bne.w	80053d8 <prvProcessReceivedCommands+0x8>
	}
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	3730      	adds	r7, #48	; 0x30
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000ea0 	.word	0x20000ea0

08005594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800559a:	e048      	b.n	800562e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800559c:	4b2d      	ldr	r3, [pc, #180]	; (8005654 <prvSwitchTimerLists+0xc0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a6:	4b2b      	ldr	r3, [pc, #172]	; (8005654 <prvSwitchTimerLists+0xc0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe f905 	bl	80037c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d02e      	beq.n	800562e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4413      	add	r3, r2
 80055d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d90e      	bls.n	8005600 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ee:	4b19      	ldr	r3, [pc, #100]	; (8005654 <prvSwitchTimerLists+0xc0>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f7fe f8aa 	bl	8003752 <vListInsert>
 80055fe:	e016      	b.n	800562e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005600:	2300      	movs	r3, #0
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	2100      	movs	r1, #0
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff fd60 	bl	80050d0 <xTimerGenericCommand>
 8005610:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	603b      	str	r3, [r7, #0]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800562e:	4b09      	ldr	r3, [pc, #36]	; (8005654 <prvSwitchTimerLists+0xc0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1b1      	bne.n	800559c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <prvSwitchTimerLists+0xc0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800563e:	4b06      	ldr	r3, [pc, #24]	; (8005658 <prvSwitchTimerLists+0xc4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a04      	ldr	r2, [pc, #16]	; (8005654 <prvSwitchTimerLists+0xc0>)
 8005644:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005646:	4a04      	ldr	r2, [pc, #16]	; (8005658 <prvSwitchTimerLists+0xc4>)
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	6013      	str	r3, [r2, #0]
}
 800564c:	bf00      	nop
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	20000e98 	.word	0x20000e98
 8005658:	20000e9c 	.word	0x20000e9c

0800565c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005662:	f000 f967 	bl	8005934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <prvCheckForValidListAndQueue+0x60>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d120      	bne.n	80056b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800566e:	4814      	ldr	r0, [pc, #80]	; (80056c0 <prvCheckForValidListAndQueue+0x64>)
 8005670:	f7fe f81e 	bl	80036b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005674:	4813      	ldr	r0, [pc, #76]	; (80056c4 <prvCheckForValidListAndQueue+0x68>)
 8005676:	f7fe f81b 	bl	80036b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <prvCheckForValidListAndQueue+0x6c>)
 800567c:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <prvCheckForValidListAndQueue+0x64>)
 800567e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005680:	4b12      	ldr	r3, [pc, #72]	; (80056cc <prvCheckForValidListAndQueue+0x70>)
 8005682:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <prvCheckForValidListAndQueue+0x68>)
 8005684:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005686:	2300      	movs	r3, #0
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <prvCheckForValidListAndQueue+0x74>)
 800568c:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <prvCheckForValidListAndQueue+0x78>)
 800568e:	2110      	movs	r1, #16
 8005690:	200a      	movs	r0, #10
 8005692:	f7fe f929 	bl	80038e8 <xQueueGenericCreateStatic>
 8005696:	4603      	mov	r3, r0
 8005698:	4a08      	ldr	r2, [pc, #32]	; (80056bc <prvCheckForValidListAndQueue+0x60>)
 800569a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <prvCheckForValidListAndQueue+0x60>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <prvCheckForValidListAndQueue+0x60>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	490b      	ldr	r1, [pc, #44]	; (80056d8 <prvCheckForValidListAndQueue+0x7c>)
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe fd42 	bl	8004134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b0:	f000 f970 	bl	8005994 <vPortExitCritical>
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000ea0 	.word	0x20000ea0
 80056c0:	20000e70 	.word	0x20000e70
 80056c4:	20000e84 	.word	0x20000e84
 80056c8:	20000e98 	.word	0x20000e98
 80056cc:	20000e9c 	.word	0x20000e9c
 80056d0:	20000f4c 	.word	0x20000f4c
 80056d4:	20000eac 	.word	0x20000eac
 80056d8:	08006194 	.word	0x08006194

080056dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3b04      	subs	r3, #4
 80056ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3b04      	subs	r3, #4
 80056fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3b04      	subs	r3, #4
 800570a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800570c:	4a0c      	ldr	r2, [pc, #48]	; (8005740 <pxPortInitialiseStack+0x64>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3b14      	subs	r3, #20
 8005716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3b04      	subs	r3, #4
 8005722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f06f 0202 	mvn.w	r2, #2
 800572a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3b20      	subs	r3, #32
 8005730:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	08005745 	.word	0x08005745

08005744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <prvTaskExitError+0x54>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005756:	d00a      	beq.n	800576e <prvTaskExitError+0x2a>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	60fb      	str	r3, [r7, #12]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <prvTaskExitError+0x28>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	60bb      	str	r3, [r7, #8]
}
 8005780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005782:	bf00      	nop
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0fc      	beq.n	8005784 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800578a:	bf00      	nop
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	2000000c 	.word	0x2000000c
 800579c:	00000000 	.word	0x00000000

080057a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057a0:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <pxCurrentTCBConst2>)
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	6808      	ldr	r0, [r1, #0]
 80057a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057aa:	f380 8809 	msr	PSP, r0
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f380 8811 	msr	BASEPRI, r0
 80057ba:	4770      	bx	lr
 80057bc:	f3af 8000 	nop.w

080057c0 <pxCurrentTCBConst2>:
 80057c0:	20000970 	.word	0x20000970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop

080057c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057c8:	4808      	ldr	r0, [pc, #32]	; (80057ec <prvPortStartFirstTask+0x24>)
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	6800      	ldr	r0, [r0, #0]
 80057ce:	f380 8808 	msr	MSP, r0
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8814 	msr	CONTROL, r0
 80057da:	b662      	cpsie	i
 80057dc:	b661      	cpsie	f
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	df00      	svc	0
 80057e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ea:	bf00      	nop
 80057ec:	e000ed08 	.word	0xe000ed08

080057f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057f6:	4b46      	ldr	r3, [pc, #280]	; (8005910 <xPortStartScheduler+0x120>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a46      	ldr	r2, [pc, #280]	; (8005914 <xPortStartScheduler+0x124>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10a      	bne.n	8005816 <xPortStartScheduler+0x26>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	613b      	str	r3, [r7, #16]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005816:	4b3e      	ldr	r3, [pc, #248]	; (8005910 <xPortStartScheduler+0x120>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a3f      	ldr	r2, [pc, #252]	; (8005918 <xPortStartScheduler+0x128>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10a      	bne.n	8005836 <xPortStartScheduler+0x46>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	60fb      	str	r3, [r7, #12]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005836:	4b39      	ldr	r3, [pc, #228]	; (800591c <xPortStartScheduler+0x12c>)
 8005838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	22ff      	movs	r2, #255	; 0xff
 8005846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005858:	b2da      	uxtb	r2, r3
 800585a:	4b31      	ldr	r3, [pc, #196]	; (8005920 <xPortStartScheduler+0x130>)
 800585c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800585e:	4b31      	ldr	r3, [pc, #196]	; (8005924 <xPortStartScheduler+0x134>)
 8005860:	2207      	movs	r2, #7
 8005862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005864:	e009      	b.n	800587a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005866:	4b2f      	ldr	r3, [pc, #188]	; (8005924 <xPortStartScheduler+0x134>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3b01      	subs	r3, #1
 800586c:	4a2d      	ldr	r2, [pc, #180]	; (8005924 <xPortStartScheduler+0x134>)
 800586e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b80      	cmp	r3, #128	; 0x80
 8005884:	d0ef      	beq.n	8005866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005886:	4b27      	ldr	r3, [pc, #156]	; (8005924 <xPortStartScheduler+0x134>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f1c3 0307 	rsb	r3, r3, #7
 800588e:	2b04      	cmp	r3, #4
 8005890:	d00a      	beq.n	80058a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60bb      	str	r3, [r7, #8]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058a8:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <xPortStartScheduler+0x134>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <xPortStartScheduler+0x134>)
 80058b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058b2:	4b1c      	ldr	r3, [pc, #112]	; (8005924 <xPortStartScheduler+0x134>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058ba:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <xPortStartScheduler+0x134>)
 80058bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058c6:	4b18      	ldr	r3, [pc, #96]	; (8005928 <xPortStartScheduler+0x138>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a17      	ldr	r2, [pc, #92]	; (8005928 <xPortStartScheduler+0x138>)
 80058cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058d2:	4b15      	ldr	r3, [pc, #84]	; (8005928 <xPortStartScheduler+0x138>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a14      	ldr	r2, [pc, #80]	; (8005928 <xPortStartScheduler+0x138>)
 80058d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058de:	f000 f8dd 	bl	8005a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <xPortStartScheduler+0x13c>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058e8:	f000 f8fc 	bl	8005ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058ec:	4b10      	ldr	r3, [pc, #64]	; (8005930 <xPortStartScheduler+0x140>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0f      	ldr	r2, [pc, #60]	; (8005930 <xPortStartScheduler+0x140>)
 80058f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058f8:	f7ff ff66 	bl	80057c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058fc:	f7ff f84a 	bl	8004994 <vTaskSwitchContext>
	prvTaskExitError();
 8005900:	f7ff ff20 	bl	8005744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	e000ed00 	.word	0xe000ed00
 8005914:	410fc271 	.word	0x410fc271
 8005918:	410fc270 	.word	0x410fc270
 800591c:	e000e400 	.word	0xe000e400
 8005920:	20000f9c 	.word	0x20000f9c
 8005924:	20000fa0 	.word	0x20000fa0
 8005928:	e000ed20 	.word	0xe000ed20
 800592c:	2000000c 	.word	0x2000000c
 8005930:	e000ef34 	.word	0xe000ef34

08005934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	607b      	str	r3, [r7, #4]
}
 800594c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <vPortEnterCritical+0x58>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3301      	adds	r3, #1
 8005954:	4a0d      	ldr	r2, [pc, #52]	; (800598c <vPortEnterCritical+0x58>)
 8005956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <vPortEnterCritical+0x58>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d10f      	bne.n	8005980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <vPortEnterCritical+0x5c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <vPortEnterCritical+0x4c>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	603b      	str	r3, [r7, #0]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <vPortEnterCritical+0x4a>
	}
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	2000000c 	.word	0x2000000c
 8005990:	e000ed04 	.word	0xe000ed04

08005994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800599a:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <vPortExitCritical+0x50>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <vPortExitCritical+0x24>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	607b      	str	r3, [r7, #4]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <vPortExitCritical+0x50>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3b01      	subs	r3, #1
 80059be:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <vPortExitCritical+0x50>)
 80059c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <vPortExitCritical+0x50>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d105      	bne.n	80059d6 <vPortExitCritical+0x42>
 80059ca:	2300      	movs	r3, #0
 80059cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	f383 8811 	msr	BASEPRI, r3
}
 80059d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	2000000c 	.word	0x2000000c
	...

080059f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059f0:	f3ef 8009 	mrs	r0, PSP
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <pxCurrentTCBConst>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	f01e 0f10 	tst.w	lr, #16
 8005a00:	bf08      	it	eq
 8005a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	6010      	str	r0, [r2, #0]
 8005a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a14:	f380 8811 	msr	BASEPRI, r0
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f7fe ffb8 	bl	8004994 <vTaskSwitchContext>
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f380 8811 	msr	BASEPRI, r0
 8005a2c:	bc09      	pop	{r0, r3}
 8005a2e:	6819      	ldr	r1, [r3, #0]
 8005a30:	6808      	ldr	r0, [r1, #0]
 8005a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a36:	f01e 0f10 	tst.w	lr, #16
 8005a3a:	bf08      	it	eq
 8005a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a40:	f380 8809 	msr	PSP, r0
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	f3af 8000 	nop.w

08005a50 <pxCurrentTCBConst>:
 8005a50:	20000970 	.word	0x20000970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop

08005a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
}
 8005a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a72:	f7fe fed5 	bl	8004820 <xTaskIncrementTick>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <xPortSysTickHandler+0x40>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	2300      	movs	r3, #0
 8005a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f383 8811 	msr	BASEPRI, r3
}
 8005a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <vPortSetupTimerInterrupt+0x34>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <vPortSetupTimerInterrupt+0x38>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <vPortSetupTimerInterrupt+0x3c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	; (8005adc <vPortSetupTimerInterrupt+0x40>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	099b      	lsrs	r3, r3, #6
 8005ab8:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <vPortSetupTimerInterrupt+0x44>)
 8005aba:	3b01      	subs	r3, #1
 8005abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005abe:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <vPortSetupTimerInterrupt+0x34>)
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	601a      	str	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000e010 	.word	0xe000e010
 8005ad4:	e000e018 	.word	0xe000e018
 8005ad8:	20000000 	.word	0x20000000
 8005adc:	10624dd3 	.word	0x10624dd3
 8005ae0:	e000e014 	.word	0xe000e014

08005ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005af4 <vPortEnableVFP+0x10>
 8005ae8:	6801      	ldr	r1, [r0, #0]
 8005aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005aee:	6001      	str	r1, [r0, #0]
 8005af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005af2:	bf00      	nop
 8005af4:	e000ed88 	.word	0xe000ed88

08005af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005afe:	f3ef 8305 	mrs	r3, IPSR
 8005b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b0f      	cmp	r3, #15
 8005b08:	d914      	bls.n	8005b34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b0a:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <vPortValidateInterruptPriority+0x70>)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b14:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <vPortValidateInterruptPriority+0x74>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	7afa      	ldrb	r2, [r7, #11]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d20a      	bcs.n	8005b34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b34:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <vPortValidateInterruptPriority+0x78>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b3c:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <vPortValidateInterruptPriority+0x7c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d90a      	bls.n	8005b5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	603b      	str	r3, [r7, #0]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <vPortValidateInterruptPriority+0x60>
	}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	e000e3f0 	.word	0xe000e3f0
 8005b6c:	20000f9c 	.word	0x20000f9c
 8005b70:	e000ed0c 	.word	0xe000ed0c
 8005b74:	20000fa0 	.word	0x20000fa0

08005b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b84:	f7fe fd90 	bl	80046a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b88:	4b5b      	ldr	r3, [pc, #364]	; (8005cf8 <pvPortMalloc+0x180>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b90:	f000 f920 	bl	8005dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b94:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <pvPortMalloc+0x184>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 8093 	bne.w	8005cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01d      	beq.n	8005be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ba8:	2208      	movs	r2, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d014      	beq.n	8005be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f023 0307 	bic.w	r3, r3, #7
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <pvPortMalloc+0x6c>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	617b      	str	r3, [r7, #20]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d06e      	beq.n	8005cc8 <pvPortMalloc+0x150>
 8005bea:	4b45      	ldr	r3, [pc, #276]	; (8005d00 <pvPortMalloc+0x188>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d869      	bhi.n	8005cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bf4:	4b43      	ldr	r3, [pc, #268]	; (8005d04 <pvPortMalloc+0x18c>)
 8005bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bf8:	4b42      	ldr	r3, [pc, #264]	; (8005d04 <pvPortMalloc+0x18c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bfe:	e004      	b.n	8005c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d903      	bls.n	8005c1c <pvPortMalloc+0xa4>
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f1      	bne.n	8005c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c1c:	4b36      	ldr	r3, [pc, #216]	; (8005cf8 <pvPortMalloc+0x180>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d050      	beq.n	8005cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	4413      	add	r3, r2
 8005c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	1ad2      	subs	r2, r2, r3
 8005c40:	2308      	movs	r3, #8
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d91f      	bls.n	8005c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <pvPortMalloc+0xf8>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	613b      	str	r3, [r7, #16]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c82:	69b8      	ldr	r0, [r7, #24]
 8005c84:	f000 f908 	bl	8005e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <pvPortMalloc+0x188>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <pvPortMalloc+0x188>)
 8005c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c96:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <pvPortMalloc+0x188>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <pvPortMalloc+0x190>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d203      	bcs.n	8005caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ca2:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <pvPortMalloc+0x188>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <pvPortMalloc+0x190>)
 8005ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <pvPortMalloc+0x184>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <pvPortMalloc+0x194>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	4a11      	ldr	r2, [pc, #68]	; (8005d0c <pvPortMalloc+0x194>)
 8005cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cc8:	f7fe fcfc 	bl	80046c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <pvPortMalloc+0x174>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	60fb      	str	r3, [r7, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <pvPortMalloc+0x172>
	return pvReturn;
 8005cec:	69fb      	ldr	r3, [r7, #28]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3728      	adds	r7, #40	; 0x28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20004bac 	.word	0x20004bac
 8005cfc:	20004bc0 	.word	0x20004bc0
 8005d00:	20004bb0 	.word	0x20004bb0
 8005d04:	20004ba4 	.word	0x20004ba4
 8005d08:	20004bb4 	.word	0x20004bb4
 8005d0c:	20004bb8 	.word	0x20004bb8

08005d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d04d      	beq.n	8005dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d22:	2308      	movs	r3, #8
 8005d24:	425b      	negs	r3, r3
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	4b24      	ldr	r3, [pc, #144]	; (8005dc8 <vPortFree+0xb8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10a      	bne.n	8005d54 <vPortFree+0x44>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	60fb      	str	r3, [r7, #12]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <vPortFree+0x62>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	60bb      	str	r3, [r7, #8]
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <vPortFree+0xb8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01e      	beq.n	8005dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d11a      	bne.n	8005dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <vPortFree+0xb8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	43db      	mvns	r3, r3
 8005d92:	401a      	ands	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d98:	f7fe fc86 	bl	80046a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <vPortFree+0xbc>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4413      	add	r3, r2
 8005da6:	4a09      	ldr	r2, [pc, #36]	; (8005dcc <vPortFree+0xbc>)
 8005da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005daa:	6938      	ldr	r0, [r7, #16]
 8005dac:	f000 f874 	bl	8005e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005db0:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <vPortFree+0xc0>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	4a06      	ldr	r2, [pc, #24]	; (8005dd0 <vPortFree+0xc0>)
 8005db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dba:	f7fe fc83 	bl	80046c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dbe:	bf00      	nop
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20004bc0 	.word	0x20004bc0
 8005dcc:	20004bb0 	.word	0x20004bb0
 8005dd0:	20004bbc 	.word	0x20004bbc

08005dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005de0:	4b27      	ldr	r3, [pc, #156]	; (8005e80 <prvHeapInit+0xac>)
 8005de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3307      	adds	r3, #7
 8005df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0307 	bic.w	r3, r3, #7
 8005dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	4a1f      	ldr	r2, [pc, #124]	; (8005e80 <prvHeapInit+0xac>)
 8005e04:	4413      	add	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e0c:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <prvHeapInit+0xb0>)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <prvHeapInit+0xb0>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e20:	2208      	movs	r2, #8
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0307 	bic.w	r3, r3, #7
 8005e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <prvHeapInit+0xb4>)
 8005e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <prvHeapInit+0xb4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e3e:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <prvHeapInit+0xb4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	1ad2      	subs	r2, r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <prvHeapInit+0xb4>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <prvHeapInit+0xb8>)
 8005e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	4a09      	ldr	r2, [pc, #36]	; (8005e90 <prvHeapInit+0xbc>)
 8005e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e6c:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <prvHeapInit+0xc0>)
 8005e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e72:	601a      	str	r2, [r3, #0]
}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	20000fa4 	.word	0x20000fa4
 8005e84:	20004ba4 	.word	0x20004ba4
 8005e88:	20004bac 	.word	0x20004bac
 8005e8c:	20004bb4 	.word	0x20004bb4
 8005e90:	20004bb0 	.word	0x20004bb0
 8005e94:	20004bc0 	.word	0x20004bc0

08005e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ea0:	4b28      	ldr	r3, [pc, #160]	; (8005f44 <prvInsertBlockIntoFreeList+0xac>)
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e002      	b.n	8005eac <prvInsertBlockIntoFreeList+0x14>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d8f7      	bhi.n	8005ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d108      	bne.n	8005eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	441a      	add	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	441a      	add	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d118      	bne.n	8005f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <prvInsertBlockIntoFreeList+0xb0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d00d      	beq.n	8005f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	441a      	add	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e008      	b.n	8005f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvInsertBlockIntoFreeList+0xb0>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	e003      	b.n	8005f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d002      	beq.n	8005f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	20004ba4 	.word	0x20004ba4
 8005f48:	20004bac 	.word	0x20004bac

08005f4c <__libc_init_array>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	4d0d      	ldr	r5, [pc, #52]	; (8005f84 <__libc_init_array+0x38>)
 8005f50:	4c0d      	ldr	r4, [pc, #52]	; (8005f88 <__libc_init_array+0x3c>)
 8005f52:	1b64      	subs	r4, r4, r5
 8005f54:	10a4      	asrs	r4, r4, #2
 8005f56:	2600      	movs	r6, #0
 8005f58:	42a6      	cmp	r6, r4
 8005f5a:	d109      	bne.n	8005f70 <__libc_init_array+0x24>
 8005f5c:	4d0b      	ldr	r5, [pc, #44]	; (8005f8c <__libc_init_array+0x40>)
 8005f5e:	4c0c      	ldr	r4, [pc, #48]	; (8005f90 <__libc_init_array+0x44>)
 8005f60:	f000 f8f2 	bl	8006148 <_init>
 8005f64:	1b64      	subs	r4, r4, r5
 8005f66:	10a4      	asrs	r4, r4, #2
 8005f68:	2600      	movs	r6, #0
 8005f6a:	42a6      	cmp	r6, r4
 8005f6c:	d105      	bne.n	8005f7a <__libc_init_array+0x2e>
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f74:	4798      	blx	r3
 8005f76:	3601      	adds	r6, #1
 8005f78:	e7ee      	b.n	8005f58 <__libc_init_array+0xc>
 8005f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7e:	4798      	blx	r3
 8005f80:	3601      	adds	r6, #1
 8005f82:	e7f2      	b.n	8005f6a <__libc_init_array+0x1e>
 8005f84:	08006264 	.word	0x08006264
 8005f88:	08006264 	.word	0x08006264
 8005f8c:	08006264 	.word	0x08006264
 8005f90:	08006268 	.word	0x08006268

08005f94 <__retarget_lock_acquire_recursive>:
 8005f94:	4770      	bx	lr

08005f96 <__retarget_lock_release_recursive>:
 8005f96:	4770      	bx	lr

08005f98 <memcpy>:
 8005f98:	440a      	add	r2, r1
 8005f9a:	4291      	cmp	r1, r2
 8005f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fa0:	d100      	bne.n	8005fa4 <memcpy+0xc>
 8005fa2:	4770      	bx	lr
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fae:	4291      	cmp	r1, r2
 8005fb0:	d1f9      	bne.n	8005fa6 <memcpy+0xe>
 8005fb2:	bd10      	pop	{r4, pc}

08005fb4 <memset>:
 8005fb4:	4402      	add	r2, r0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d100      	bne.n	8005fbe <memset+0xa>
 8005fbc:	4770      	bx	lr
 8005fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc2:	e7f9      	b.n	8005fb8 <memset+0x4>

08005fc4 <cleanup_glue>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	6809      	ldr	r1, [r1, #0]
 8005fca:	4605      	mov	r5, r0
 8005fcc:	b109      	cbz	r1, 8005fd2 <cleanup_glue+0xe>
 8005fce:	f7ff fff9 	bl	8005fc4 <cleanup_glue>
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fda:	f000 b869 	b.w	80060b0 <_free_r>
	...

08005fe0 <_reclaim_reent>:
 8005fe0:	4b2c      	ldr	r3, [pc, #176]	; (8006094 <_reclaim_reent+0xb4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4283      	cmp	r3, r0
 8005fe6:	b570      	push	{r4, r5, r6, lr}
 8005fe8:	4604      	mov	r4, r0
 8005fea:	d051      	beq.n	8006090 <_reclaim_reent+0xb0>
 8005fec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005fee:	b143      	cbz	r3, 8006002 <_reclaim_reent+0x22>
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d14a      	bne.n	800608c <_reclaim_reent+0xac>
 8005ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff8:	6819      	ldr	r1, [r3, #0]
 8005ffa:	b111      	cbz	r1, 8006002 <_reclaim_reent+0x22>
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 f857 	bl	80060b0 <_free_r>
 8006002:	6961      	ldr	r1, [r4, #20]
 8006004:	b111      	cbz	r1, 800600c <_reclaim_reent+0x2c>
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f852 	bl	80060b0 <_free_r>
 800600c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800600e:	b111      	cbz	r1, 8006016 <_reclaim_reent+0x36>
 8006010:	4620      	mov	r0, r4
 8006012:	f000 f84d 	bl	80060b0 <_free_r>
 8006016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006018:	b111      	cbz	r1, 8006020 <_reclaim_reent+0x40>
 800601a:	4620      	mov	r0, r4
 800601c:	f000 f848 	bl	80060b0 <_free_r>
 8006020:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006022:	b111      	cbz	r1, 800602a <_reclaim_reent+0x4a>
 8006024:	4620      	mov	r0, r4
 8006026:	f000 f843 	bl	80060b0 <_free_r>
 800602a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800602c:	b111      	cbz	r1, 8006034 <_reclaim_reent+0x54>
 800602e:	4620      	mov	r0, r4
 8006030:	f000 f83e 	bl	80060b0 <_free_r>
 8006034:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006036:	b111      	cbz	r1, 800603e <_reclaim_reent+0x5e>
 8006038:	4620      	mov	r0, r4
 800603a:	f000 f839 	bl	80060b0 <_free_r>
 800603e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006040:	b111      	cbz	r1, 8006048 <_reclaim_reent+0x68>
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f834 	bl	80060b0 <_free_r>
 8006048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800604a:	b111      	cbz	r1, 8006052 <_reclaim_reent+0x72>
 800604c:	4620      	mov	r0, r4
 800604e:	f000 f82f 	bl	80060b0 <_free_r>
 8006052:	69a3      	ldr	r3, [r4, #24]
 8006054:	b1e3      	cbz	r3, 8006090 <_reclaim_reent+0xb0>
 8006056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006058:	4620      	mov	r0, r4
 800605a:	4798      	blx	r3
 800605c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800605e:	b1b9      	cbz	r1, 8006090 <_reclaim_reent+0xb0>
 8006060:	4620      	mov	r0, r4
 8006062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006066:	f7ff bfad 	b.w	8005fc4 <cleanup_glue>
 800606a:	5949      	ldr	r1, [r1, r5]
 800606c:	b941      	cbnz	r1, 8006080 <_reclaim_reent+0xa0>
 800606e:	3504      	adds	r5, #4
 8006070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006072:	2d80      	cmp	r5, #128	; 0x80
 8006074:	68d9      	ldr	r1, [r3, #12]
 8006076:	d1f8      	bne.n	800606a <_reclaim_reent+0x8a>
 8006078:	4620      	mov	r0, r4
 800607a:	f000 f819 	bl	80060b0 <_free_r>
 800607e:	e7ba      	b.n	8005ff6 <_reclaim_reent+0x16>
 8006080:	680e      	ldr	r6, [r1, #0]
 8006082:	4620      	mov	r0, r4
 8006084:	f000 f814 	bl	80060b0 <_free_r>
 8006088:	4631      	mov	r1, r6
 800608a:	e7ef      	b.n	800606c <_reclaim_reent+0x8c>
 800608c:	2500      	movs	r5, #0
 800608e:	e7ef      	b.n	8006070 <_reclaim_reent+0x90>
 8006090:	bd70      	pop	{r4, r5, r6, pc}
 8006092:	bf00      	nop
 8006094:	20000010 	.word	0x20000010

08006098 <__malloc_lock>:
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <__malloc_lock+0x8>)
 800609a:	f7ff bf7b 	b.w	8005f94 <__retarget_lock_acquire_recursive>
 800609e:	bf00      	nop
 80060a0:	20004bc4 	.word	0x20004bc4

080060a4 <__malloc_unlock>:
 80060a4:	4801      	ldr	r0, [pc, #4]	; (80060ac <__malloc_unlock+0x8>)
 80060a6:	f7ff bf76 	b.w	8005f96 <__retarget_lock_release_recursive>
 80060aa:	bf00      	nop
 80060ac:	20004bc4 	.word	0x20004bc4

080060b0 <_free_r>:
 80060b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060b2:	2900      	cmp	r1, #0
 80060b4:	d044      	beq.n	8006140 <_free_r+0x90>
 80060b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ba:	9001      	str	r0, [sp, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f1a1 0404 	sub.w	r4, r1, #4
 80060c2:	bfb8      	it	lt
 80060c4:	18e4      	addlt	r4, r4, r3
 80060c6:	f7ff ffe7 	bl	8006098 <__malloc_lock>
 80060ca:	4a1e      	ldr	r2, [pc, #120]	; (8006144 <_free_r+0x94>)
 80060cc:	9801      	ldr	r0, [sp, #4]
 80060ce:	6813      	ldr	r3, [r2, #0]
 80060d0:	b933      	cbnz	r3, 80060e0 <_free_r+0x30>
 80060d2:	6063      	str	r3, [r4, #4]
 80060d4:	6014      	str	r4, [r2, #0]
 80060d6:	b003      	add	sp, #12
 80060d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060dc:	f7ff bfe2 	b.w	80060a4 <__malloc_unlock>
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	d908      	bls.n	80060f6 <_free_r+0x46>
 80060e4:	6825      	ldr	r5, [r4, #0]
 80060e6:	1961      	adds	r1, r4, r5
 80060e8:	428b      	cmp	r3, r1
 80060ea:	bf01      	itttt	eq
 80060ec:	6819      	ldreq	r1, [r3, #0]
 80060ee:	685b      	ldreq	r3, [r3, #4]
 80060f0:	1949      	addeq	r1, r1, r5
 80060f2:	6021      	streq	r1, [r4, #0]
 80060f4:	e7ed      	b.n	80060d2 <_free_r+0x22>
 80060f6:	461a      	mov	r2, r3
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	b10b      	cbz	r3, 8006100 <_free_r+0x50>
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	d9fa      	bls.n	80060f6 <_free_r+0x46>
 8006100:	6811      	ldr	r1, [r2, #0]
 8006102:	1855      	adds	r5, r2, r1
 8006104:	42a5      	cmp	r5, r4
 8006106:	d10b      	bne.n	8006120 <_free_r+0x70>
 8006108:	6824      	ldr	r4, [r4, #0]
 800610a:	4421      	add	r1, r4
 800610c:	1854      	adds	r4, r2, r1
 800610e:	42a3      	cmp	r3, r4
 8006110:	6011      	str	r1, [r2, #0]
 8006112:	d1e0      	bne.n	80060d6 <_free_r+0x26>
 8006114:	681c      	ldr	r4, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	6053      	str	r3, [r2, #4]
 800611a:	4421      	add	r1, r4
 800611c:	6011      	str	r1, [r2, #0]
 800611e:	e7da      	b.n	80060d6 <_free_r+0x26>
 8006120:	d902      	bls.n	8006128 <_free_r+0x78>
 8006122:	230c      	movs	r3, #12
 8006124:	6003      	str	r3, [r0, #0]
 8006126:	e7d6      	b.n	80060d6 <_free_r+0x26>
 8006128:	6825      	ldr	r5, [r4, #0]
 800612a:	1961      	adds	r1, r4, r5
 800612c:	428b      	cmp	r3, r1
 800612e:	bf04      	itt	eq
 8006130:	6819      	ldreq	r1, [r3, #0]
 8006132:	685b      	ldreq	r3, [r3, #4]
 8006134:	6063      	str	r3, [r4, #4]
 8006136:	bf04      	itt	eq
 8006138:	1949      	addeq	r1, r1, r5
 800613a:	6021      	streq	r1, [r4, #0]
 800613c:	6054      	str	r4, [r2, #4]
 800613e:	e7ca      	b.n	80060d6 <_free_r+0x26>
 8006140:	b003      	add	sp, #12
 8006142:	bd30      	pop	{r4, r5, pc}
 8006144:	20004bc8 	.word	0x20004bc8

08006148 <_init>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	bf00      	nop
 800614c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614e:	bc08      	pop	{r3}
 8006150:	469e      	mov	lr, r3
 8006152:	4770      	bx	lr

08006154 <_fini>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	bf00      	nop
 8006158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615a:	bc08      	pop	{r3}
 800615c:	469e      	mov	lr, r3
 800615e:	4770      	bx	lr
